
CANOpenNode-STM32F407-Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c908  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800ca98  0800ca98  0000da98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d374  0800d374  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d374  0800d374  0000e374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d37c  0800d37c  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d37c  0800d37c  0000e37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d380  0800d380  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d384  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d8  2**0
                  CONTENTS
 10 .bss          0000052c  200001d8  200001d8  0000f1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000704  20000704  0000f1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015422  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ea  00000000  00000000  0002462a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  00026e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101e  00000000  00000000  00028280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227eb  00000000  00000000  0002929e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182df  00000000  00000000  0004ba89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55e5  00000000  00000000  00063d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013934d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069a4  00000000  00000000  00139390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013fd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca80 	.word	0x0800ca80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ca80 	.word	0x0800ca80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <CAN_SendNonBlocking>:
/* USER CODE BEGIN PFP */
HAL_StatusTypeDef CAN_SendNonBlocking(CAN_HandleTypeDef *hcan,
                                      CAN_TxHeaderTypeDef *header,
                                      uint8_t *data,
                                      uint32_t *mailbox)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
    if (HAL_CAN_GetTxMailboxesFreeLevel(hcan) > 0) {
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f002 ffbe 	bl	8003e64 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <CAN_SendNonBlocking+0x2a>
        // Có slot trống → gửi bình thường
        return HAL_CAN_AddTxMessage(hcan, header, data, mailbox);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f002 fea0 	bl	8003c3a <HAL_CAN_AddTxMessage>
 8000efa:	4603      	mov	r3, r0
 8000efc:	e00a      	b.n	8000f14 <CAN_SendNonBlocking+0x40>
    } else {
        // Không có slot → hủy hết gói đang pending
        HAL_CAN_AbortTxRequest(hcan, 0x7);  // bitmask 0x7 = abort mailbox 0,1,2
 8000efe:	2107      	movs	r1, #7
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f002 ff6a 	bl	8003dda <HAL_CAN_AbortTxRequest>

        // Thử gửi lại frame mới
        return HAL_CAN_AddTxMessage(hcan, header, data, mailbox);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f002 fe94 	bl	8003c3a <HAL_CAN_AddTxMessage>
 8000f12:	4603      	mov	r3, r0
    }
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <print_uart>:
	  uint8_t RxData[8];
CAN_TxHeaderTypeDef TxHeader;
uint8_t TxData[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
uint32_t TxMailbox;

void print_uart(const char *msg) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff f9a3 	bl	8000270 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <print_uart+0x28>)
 8000f36:	f007 ff29 	bl	8008d8c <HAL_UART_Transmit>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200004c0 	.word	0x200004c0

08000f48 <handle_uart_command>:
#define UART_RX_BUF_SIZE 64
char uart_rx_buf[UART_RX_BUF_SIZE];
volatile uint8_t uart_rx_index = 0;
volatile uint8_t uart_rx_ready = 0;
void handle_uart_command(const char* cmd) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    if (strncmp(cmd, "1", 1) == 0) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <handle_uart_command+0x48>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d106      	bne.n	8000f6c <handle_uart_command+0x24>
        current_mode = MODE_PS2;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <handle_uart_command+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
        print_uart("✅PS2 Mode\r\n");
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <handle_uart_command+0x50>)
 8000f66:	f7ff ffd9 	bl	8000f1c <print_uart>
    } else if (strncmp(cmd, "2",1) == 0) {
        current_mode = MODE_AUTO;
        print_uart("✅AUTO Mode\r\n");
    }
}
 8000f6a:	e00c      	b.n	8000f86 <handle_uart_command+0x3e>
    } else if (strncmp(cmd, "2",1) == 0) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <handle_uart_command+0x54>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d105      	bne.n	8000f86 <handle_uart_command+0x3e>
        current_mode = MODE_AUTO;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <handle_uart_command+0x4c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
        print_uart("✅AUTO Mode\r\n");
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <handle_uart_command+0x58>)
 8000f82:	f7ff ffcb 	bl	8000f1c <print_uart>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	0800ca98 	.word	0x0800ca98
 8000f94:	20000508 	.word	0x20000508
 8000f98:	0800ca9c 	.word	0x0800ca9c
 8000f9c:	0800caac 	.word	0x0800caac
 8000fa0:	0800cab0 	.word	0x0800cab0

08000fa4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001028 <HAL_UART_RxCpltCallback+0x84>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d134      	bne.n	8001020 <HAL_UART_RxCpltCallback+0x7c>
        char received = uart_rx_buf[uart_rx_index];
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <HAL_UART_RxCpltCallback+0x8c>)
 8000fc0:	5c9b      	ldrb	r3, [r3, r2]
 8000fc2:	73fb      	strb	r3, [r7, #15]

        if (received == '\n' || received == '\r') {
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d002      	beq.n	8000fd0 <HAL_UART_RxCpltCallback+0x2c>
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b0d      	cmp	r3, #13
 8000fce:	d10d      	bne.n	8000fec <HAL_UART_RxCpltCallback+0x48>
            uart_rx_buf[uart_rx_index] = '\0';
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_UART_RxCpltCallback+0x8c>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	5499      	strb	r1, [r3, r2]
            uart_rx_ready = 1;
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_UART_RxCpltCallback+0x90>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
            uart_rx_index = 0;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e00e      	b.n	800100a <HAL_UART_RxCpltCallback+0x66>
        } else {
            uart_rx_index++;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 8000ff8:	701a      	strb	r2, [r3, #0]
            if (uart_rx_index >= UART_RX_BUF_SIZE)
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b3f      	cmp	r3, #63	@ 0x3f
 8001002:	d902      	bls.n	800100a <HAL_UART_RxCpltCallback+0x66>
                uart_rx_index = 0;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart2, (uint8_t *)&uart_rx_buf[uart_rx_index], 1);
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_UART_RxCpltCallback+0x88>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <HAL_UART_RxCpltCallback+0x8c>)
 8001014:	4413      	add	r3, r2
 8001016:	2201      	movs	r2, #1
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <HAL_UART_RxCpltCallback+0x94>)
 800101c:	f007 ff41 	bl	8008ea2 <HAL_UART_Receive_IT>
    }
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40004400 	.word	0x40004400
 800102c:	20000578 	.word	0x20000578
 8001030:	20000538 	.word	0x20000538
 8001034:	20000579 	.word	0x20000579
 8001038:	200004c0 	.word	0x200004c0

0800103c <set_drive_mode>:



void set_drive_mode(uint8_t mode, uint8_t nodeId) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b0a4      	sub	sp, #144	@ 0x90
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
    uint32_t txMailbox;
    uint8_t data[8];
    char msg[64];

    // === Gửi NMT Start Node ===
    TxHeader.StdId = 0x000;
 800104c:	2300      	movs	r3, #0
 800104e:	67bb      	str	r3, [r7, #120]	@ 0x78
    TxHeader.IDE = CAN_ID_STD;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    TxHeader.RTR = CAN_RTR_DATA;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    TxHeader.DLC = 2;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    data[0] = 0x01;       // Command: Start remote node
 8001062:	2301      	movs	r3, #1
 8001064:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    data[1] = nodeId;     // Node ID
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 800106e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001072:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001076:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800107a:	4844      	ldr	r0, [pc, #272]	@ (800118c <set_drive_mode+0x150>)
 800107c:	f7ff ff2a 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	@ 0x64
 8001082:	f002 fb2d 	bl	80036e0 <HAL_Delay>
    snprintf(msg, sizeof(msg), "🔌 NMT Start sent to Node %d\r\n", nodeId);
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800108c:	4a40      	ldr	r2, [pc, #256]	@ (8001190 <set_drive_mode+0x154>)
 800108e:	2140      	movs	r1, #64	@ 0x40
 8001090:	f009 fbb0 	bl	800a7f4 <sniprintf>
    print_uart(msg);
 8001094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff3f 	bl	8000f1c <print_uart>

    // === Set Mode to Velocity (0x6060 = 3) ===
    TxHeader.StdId = 0x600 + nodeId;  // COB-ID for SDO Tx
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80010a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    TxHeader.DLC = 8;
 80010a6:	2308      	movs	r3, #8
 80010a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint8_t mode_vel[] = {0x2F, 0x60, 0x60, 0x00, mode, 0x00, 0x00, 0x00};
 80010ac:	232f      	movs	r3, #47	@ 0x2f
 80010ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80010b2:	2360      	movs	r3, #96	@ 0x60
 80010b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80010b8:	2360      	movs	r3, #96	@ 0x60
 80010ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
//    CAN_SendNonBlocking(&hcan2, &TxHeader, mode_vel, &txMailbox);
    CAN_SendNonBlocking(&hcan2, &TxHeader, mode_vel, &txMailbox);
 80010dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010e0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80010e4:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80010e8:	4828      	ldr	r0, [pc, #160]	@ (800118c <set_drive_mode+0x150>)
 80010ea:	f7ff fef3 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f002 faf6 	bl	80036e0 <HAL_Delay>
    print_uart("⚙️ Set mode to Velocity (0x6060 = 3)\r\n");
 80010f4:	4827      	ldr	r0, [pc, #156]	@ (8001194 <set_drive_mode+0x158>)
 80010f6:	f7ff ff11 	bl	8000f1c <print_uart>

    // === Gửi chuỗi enable: 0x06 → 0x07 → 0x0F ===

    // 1. Shutdown (0x06)
    uint8_t cw_shutdown[] = {0x2F, 0x40, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00};
 80010fa:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <set_drive_mode+0x15c>)
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001104:	e883 0003 	stmia.w	r3, {r0, r1}
    CAN_SendNonBlocking(&hcan2, &TxHeader, cw_shutdown, &txMailbox);
 8001108:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800110c:	f107 021c 	add.w	r2, r7, #28
 8001110:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001114:	481d      	ldr	r0, [pc, #116]	@ (800118c <set_drive_mode+0x150>)
 8001116:	f7ff fedd 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(50);
 800111a:	2032      	movs	r0, #50	@ 0x32
 800111c:	f002 fae0 	bl	80036e0 <HAL_Delay>
    print_uart("🔄 CW = 0x06 (Shutdown)\r\n");
 8001120:	481e      	ldr	r0, [pc, #120]	@ (800119c <set_drive_mode+0x160>)
 8001122:	f7ff fefb 	bl	8000f1c <print_uart>

    // 2. Switch ON (0x07)
    uint8_t cw_switchon[] = {0x2F, 0x40, 0x60, 0x00, 0x07, 0x00, 0x00, 0x00};
 8001126:	4a1e      	ldr	r2, [pc, #120]	@ (80011a0 <set_drive_mode+0x164>)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001130:	e883 0003 	stmia.w	r3, {r0, r1}
    CAN_SendNonBlocking(&hcan2, &TxHeader, cw_switchon, &txMailbox);
 8001134:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001138:	f107 0214 	add.w	r2, r7, #20
 800113c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001140:	4812      	ldr	r0, [pc, #72]	@ (800118c <set_drive_mode+0x150>)
 8001142:	f7ff fec7 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(50);
 8001146:	2032      	movs	r0, #50	@ 0x32
 8001148:	f002 faca 	bl	80036e0 <HAL_Delay>
    print_uart("🔄 CW = 0x07 (Switch ON)\r\n");
 800114c:	4815      	ldr	r0, [pc, #84]	@ (80011a4 <set_drive_mode+0x168>)
 800114e:	f7ff fee5 	bl	8000f1c <print_uart>

    // 3. Enable operation (0x0F)
    uint8_t cw_enable[] = {0x2F, 0x40, 0x60, 0x00, 0x0F, 0x00, 0x00, 0x00};
 8001152:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <set_drive_mode+0x16c>)
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115c:	e883 0003 	stmia.w	r3, {r0, r1}
    CAN_SendNonBlocking(&hcan2, &TxHeader, cw_enable, &txMailbox);
 8001160:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001164:	f107 020c 	add.w	r2, r7, #12
 8001168:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800116c:	4807      	ldr	r0, [pc, #28]	@ (800118c <set_drive_mode+0x150>)
 800116e:	f7ff feb1 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	@ 0x64
 8001174:	f002 fab4 	bl	80036e0 <HAL_Delay>
    print_uart("✅ CW = 0x0F (Enable Operation)\r\n");
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <set_drive_mode+0x170>)
 800117a:	f7ff fecf 	bl	8000f1c <print_uart>

    print_uart("✅ Servo is now enabled in Velocity Mode!\r\n");
 800117e:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <set_drive_mode+0x174>)
 8001180:	f7ff fecc 	bl	8000f1c <print_uart>
}
 8001184:	bf00      	nop
 8001186:	3790      	adds	r7, #144	@ 0x90
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000200 	.word	0x20000200
 8001190:	0800cac0 	.word	0x0800cac0
 8001194:	0800cae4 	.word	0x0800cae4
 8001198:	0800cba0 	.word	0x0800cba0
 800119c:	0800cb10 	.word	0x0800cb10
 80011a0:	0800cba8 	.word	0x0800cba8
 80011a4:	0800cb2c 	.word	0x0800cb2c
 80011a8:	0800cbb0 	.word	0x0800cbb0
 80011ac:	0800cb4c 	.word	0x0800cb4c
 80011b0:	0800cb70 	.word	0x0800cb70

080011b4 <delay_us>:



void delay_us(uint16_t us) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
   htim1.Instance->CNT=0;
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <delay_us+0x34>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);            // Start timer
 80011c6:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <delay_us+0x34>)
 80011c8:	f007 f8f8 	bl	80083bc <HAL_TIM_Base_Start>
    while (htim1.Instance->CNT < us);
 80011cc:	bf00      	nop
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <delay_us+0x34>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3f9      	bcc.n	80011ce <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim1);             // Optional: Stop to save power
 80011da:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <delay_us+0x34>)
 80011dc:	f007 f956 	bl	800848c <HAL_TIM_Base_Stop>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200003e8 	.word	0x200003e8

080011ec <PS2_ATT_LOW>:

//LAP TRINH DIEU KHIEN TAY CAM
void PS2_ATT_LOW() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2108      	movs	r1, #8
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <PS2_ATT_LOW+0x14>)
 80011f6:	f004 f93d 	bl	8005474 <HAL_GPIO_WritePin>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <PS2_ATT_HIGH>:

void PS2_ATT_HIGH() {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2108      	movs	r1, #8
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <PS2_ATT_HIGH+0x14>)
 800120e:	f004 f931 	bl	8005474 <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <PS2_SendCommand>:
// === PS2 Controller Interface for STM32 ===
// === PS2 Initialization (3 command sequences) ===
void PS2_SendCommand(const uint8_t *tx, uint8_t *rx, uint8_t len) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af02      	add	r7, sp, #8
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	4613      	mov	r3, r2
 8001228:	71fb      	strb	r3, [r7, #7]
    PS2_ATT_LOW(); delay_us(15);
 800122a:	f7ff ffdf 	bl	80011ec <PS2_ATT_LOW>
 800122e:	200f      	movs	r0, #15
 8001230:	f7ff ffc0 	bl	80011b4 <delay_us>
    for (uint8_t i = 0; i < len; i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
 8001238:	e011      	b.n	800125e <PS2_SendCommand+0x42>
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx[i], (uint8_t*)&rx[i], 1, 100);
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	18d1      	adds	r1, r2, r3
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	441a      	add	r2, r3
 8001246:	2364      	movs	r3, #100	@ 0x64
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <PS2_SendCommand+0x5c>)
 800124e:	f006 fcc2 	bl	8007bd6 <HAL_SPI_TransmitReceive>
        delay_us(10);
 8001252:	200a      	movs	r0, #10
 8001254:	f7ff ffae 	bl	80011b4 <delay_us>
    for (uint8_t i = 0; i < len; i++) {
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	3301      	adds	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
 800125e:	7dfa      	ldrb	r2, [r7, #23]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	429a      	cmp	r2, r3
 8001264:	d3e9      	bcc.n	800123a <PS2_SendCommand+0x1e>
    }
    PS2_ATT_HIGH(); delay_us(30);
 8001266:	f7ff ffcd 	bl	8001204 <PS2_ATT_HIGH>
 800126a:	201e      	movs	r0, #30
 800126c:	f7ff ffa2 	bl	80011b4 <delay_us>
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000390 	.word	0x20000390

0800127c <PS2_Init>:
void PS2_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0
    const uint8_t enter_cfg[]   = {0x01, 0x43, 0x00, 0x01, 0x00};
 8001282:	4b22      	ldr	r3, [pc, #136]	@ (800130c <PS2_Init+0x90>)
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001286:	2300      	movs	r3, #0
 8001288:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    const uint8_t set_analog[]  = {0x01, 0x44, 0x00, 0x01, 0x03};
 800128c:	4a20      	ldr	r2, [pc, #128]	@ (8001310 <PS2_Init+0x94>)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001296:	6018      	str	r0, [r3, #0]
 8001298:	3304      	adds	r3, #4
 800129a:	7019      	strb	r1, [r3, #0]
    const uint8_t enable_rumble[]= {0x01, 0x4D, 0x00, 0x00, 0x01};
 800129c:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <PS2_Init+0x98>)
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a6:	6018      	str	r0, [r3, #0]
 80012a8:	3304      	adds	r3, #4
 80012aa:	7019      	strb	r1, [r3, #0]
    const uint8_t exit_cfg[]    = {0x01, 0x43, 0x00, 0x00, 0x5A};
 80012ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001318 <PS2_Init+0x9c>)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b6:	6018      	str	r0, [r3, #0]
 80012b8:	3304      	adds	r3, #4
 80012ba:	7019      	strb	r1, [r3, #0]
    uint8_t rx[9];

    PS2_SendCommand(enter_cfg, rx, sizeof(enter_cfg));
 80012bc:	1d39      	adds	r1, r7, #4
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	2205      	movs	r2, #5
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ffa9 	bl	800121c <PS2_SendCommand>
    PS2_SendCommand(set_analog, rx, sizeof(set_analog));
 80012ca:	1d39      	adds	r1, r7, #4
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	2205      	movs	r2, #5
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffa2 	bl	800121c <PS2_SendCommand>
    PS2_SendCommand(enable_rumble, rx, sizeof(enable_rumble));
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2205      	movs	r2, #5
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff9b 	bl	800121c <PS2_SendCommand>
    PS2_SendCommand(exit_cfg, rx, sizeof(exit_cfg));
 80012e6:	1d39      	adds	r1, r7, #4
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2205      	movs	r2, #5
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff94 	bl	800121c <PS2_SendCommand>

    HAL_Delay(500);
 80012f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012f8:	f002 f9f2 	bl	80036e0 <HAL_Delay>
    print_uart("✅ PS2 Init Done\r\n");
 80012fc:	4807      	ldr	r0, [pc, #28]	@ (800131c <PS2_Init+0xa0>)
 80012fe:	f7ff fe0d 	bl	8000f1c <print_uart>
}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	@ 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	01004301 	.word	0x01004301
 8001310:	0800cbcc 	.word	0x0800cbcc
 8001314:	0800cbd4 	.word	0x0800cbd4
 8001318:	0800cbdc 	.word	0x0800cbdc
 800131c:	0800cbb8 	.word	0x0800cbb8

08001320 <PS2_ReadButtons>:
    uint8_t rx, ry, lx, ly;
} PS2_Data;

bool isAnalog = false;

PS2_Data PS2_ReadButtons(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    PS2_Data result = {0xFFFF, 128, 128, 128, 128};
 8001328:	4a23      	ldr	r2, [pc, #140]	@ (80013b8 <PS2_ReadButtons+0x98>)
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001332:	6018      	str	r0, [r3, #0]
 8001334:	3304      	adds	r3, #4
 8001336:	8019      	strh	r1, [r3, #0]
    uint8_t tx[9] = {0x01, 0x42, 0x00, 0, 0, 0, 0, 0, 0};
 8001338:	f244 2301 	movw	r3, #16897	@ 0x4201
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	711a      	strb	r2, [r3, #4]
    uint8_t rx[9] = {0};
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	721a      	strb	r2, [r3, #8]
    PS2_SendCommand(tx, rx, 9);
 8001354:	f107 0108 	add.w	r1, r7, #8
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2209      	movs	r2, #9
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff5c 	bl	800121c <PS2_SendCommand>
    isAnalog = (rx[1] == 0x73);
 8001364:	7a7b      	ldrb	r3, [r7, #9]
 8001366:	2b73      	cmp	r3, #115	@ 0x73
 8001368:	bf0c      	ite	eq
 800136a:	2301      	moveq	r3, #1
 800136c:	2300      	movne	r3, #0
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <PS2_ReadButtons+0x9c>)
 8001372:	701a      	strb	r2, [r3, #0]

    result.buttons = (rx[4] << 8) | rx[3];
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	b21b      	sxth	r3, r3
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	b21b      	sxth	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b21b      	sxth	r3, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	843b      	strh	r3, [r7, #32]
    result.rx = rx[5];
 8001388:	7b7b      	ldrb	r3, [r7, #13]
 800138a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    result.ry = rx[6];
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    result.lx = rx[7];
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    result.ly = rx[8];
 800139a:	7c3b      	ldrb	r3, [r7, #16]
 800139c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    return result;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	6010      	str	r0, [r2, #0]
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	8093      	strh	r3, [r2, #4]
}
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	3728      	adds	r7, #40	@ 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	0800cbe4 	.word	0x0800cbe4
 80013bc:	2000057a 	.word	0x2000057a

080013c0 <Test_SPI_1Byte>:

void Test_SPI_1Byte(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b094      	sub	sp, #80	@ 0x50
 80013c4:	af02      	add	r7, sp, #8
    uint8_t tx = 0x01;       // Gửi byte 0x01 (giống trong PS2 poll)
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t rx = 0x00;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    PS2_ATT_LOW();           // Kéo ATT xuống (CS = LOW)
 80013d2:	f7ff ff0b 	bl	80011ec <PS2_ATT_LOW>
    delay_us(15);
 80013d6:	200f      	movs	r0, #15
 80013d8:	f7ff feec 	bl	80011b4 <delay_us>

    HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 100);
 80013dc:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 80013e0:	f107 0147 	add.w	r1, r7, #71	@ 0x47
 80013e4:	2364      	movs	r3, #100	@ 0x64
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	480a      	ldr	r0, [pc, #40]	@ (8001414 <Test_SPI_1Byte+0x54>)
 80013ec:	f006 fbf3 	bl	8007bd6 <HAL_SPI_TransmitReceive>

    PS2_ATT_HIGH();          // Thả ATT lên (CS = HIGH)
 80013f0:	f7ff ff08 	bl	8001204 <PS2_ATT_HIGH>

    char msg[64];
    snprintf(msg, sizeof(msg), "SPI test RX: 0x%02X\r\n", rx);
 80013f4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80013f8:	1d38      	adds	r0, r7, #4
 80013fa:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <Test_SPI_1Byte+0x58>)
 80013fc:	2140      	movs	r1, #64	@ 0x40
 80013fe:	f009 f9f9 	bl	800a7f4 <sniprintf>
    print_uart(msg);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd89 	bl	8000f1c <print_uart>
}
 800140a:	bf00      	nop
 800140c:	3748      	adds	r7, #72	@ 0x48
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000390 	.word	0x20000390
 8001418:	0800cbec 	.word	0x0800cbec

0800141c <send_sdo_write_u8>:
    print_uart(msg);
}

                            //CAN THUẦN LẬP TRÌNH THEO TIÊU CHUẨN CIA402,301 -> ĐIỀU KHIỂN ĐỘNG CƠ//

void send_sdo_write_u8(uint8_t nodeId, uint16_t index, uint8_t subidx, uint8_t value) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08d      	sub	sp, #52	@ 0x34
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 800143a:	232f      	movs	r3, #47	@ 0x2f
 800143c:	733b      	strb	r3, [r7, #12]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	737b      	strb	r3, [r7, #13]
 8001444:	88bb      	ldrh	r3, [r7, #4]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	b29b      	uxth	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73bb      	strb	r3, [r7, #14]
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	743b      	strb	r3, [r7, #16]
 8001456:	2300      	movs	r3, #0
 8001458:	747b      	strb	r3, [r7, #17]
 800145a:	2300      	movs	r3, #0
 800145c:	74bb      	strb	r3, [r7, #18]
 800145e:	2300      	movs	r3, #0
 8001460:	74fb      	strb	r3, [r7, #19]
        0x00,
        0x00,
        0x00
    };

    TxHeader.StdId = 0x600 + nodeId;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001468:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 800146a:	2308      	movs	r3, #8
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	f107 020c 	add.w	r2, r7, #12
 800147e:	f107 0118 	add.w	r1, r7, #24
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <send_sdo_write_u8+0x7c>)
 8001484:	f7ff fd26 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(10);
 8001488:	200a      	movs	r0, #10
 800148a:	f002 f929 	bl	80036e0 <HAL_Delay>
}
 800148e:	bf00      	nop
 8001490:	3734      	adds	r7, #52	@ 0x34
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	20000200 	.word	0x20000200

0800149c <send_sdo_write_u16>:
void send_sdo_write_u16(uint8_t nodeId, uint16_t index, uint8_t subidx, uint16_t value) {
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b08d      	sub	sp, #52	@ 0x34
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4604      	mov	r4, r0
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4623      	mov	r3, r4
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	4603      	mov	r3, r0
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	71bb      	strb	r3, [r7, #6]
 80014b6:	4613      	mov	r3, r2
 80014b8:	807b      	strh	r3, [r7, #2]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 80014ba:	232b      	movs	r3, #43	@ 0x2b
 80014bc:	733b      	strb	r3, [r7, #12]
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	737b      	strb	r3, [r7, #13]
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73bb      	strb	r3, [r7, #14]
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	743b      	strb	r3, [r7, #16]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	747b      	strb	r3, [r7, #17]
 80014e2:	2300      	movs	r3, #0
 80014e4:	74bb      	strb	r3, [r7, #18]
 80014e6:	2300      	movs	r3, #0
 80014e8:	74fb      	strb	r3, [r7, #19]
        (value >> 8) & 0xFF,
        0x00,
        0x00
    };

    TxHeader.StdId = 0x600 + nodeId;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80014f0:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 80014f2:	2308      	movs	r3, #8
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	f107 020c 	add.w	r2, r7, #12
 8001506:	f107 0118 	add.w	r1, r7, #24
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <send_sdo_write_u16+0x84>)
 800150c:	f7ff fce2 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(10);
 8001510:	200a      	movs	r0, #10
 8001512:	f002 f8e5 	bl	80036e0 <HAL_Delay>
}
 8001516:	bf00      	nop
 8001518:	3734      	adds	r7, #52	@ 0x34
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	20000200 	.word	0x20000200

08001524 <send_sdo_write_u32>:
void send_sdo_write_u32(uint8_t nodeId, uint16_t index, uint8_t subidx, uint32_t value) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	@ 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	460b      	mov	r3, r1
 8001532:	80bb      	strh	r3, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 8001538:	2323      	movs	r3, #35	@ 0x23
 800153a:	733b      	strb	r3, [r7, #12]
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	737b      	strb	r3, [r7, #13]
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	73bb      	strb	r3, [r7, #14]
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	743b      	strb	r3, [r7, #16]
        0x23,
        index & 0xFF,
        (index >> 8) & 0xFF,
        subidx,
        value & 0xFF,
        (value >> 8) & 0xFF,
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	0a1b      	lsrs	r3, r3, #8
    uint8_t data[8] = {
 800155a:	b2db      	uxtb	r3, r3
 800155c:	747b      	strb	r3, [r7, #17]
        (value >> 16) & 0xFF,
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	0c1b      	lsrs	r3, r3, #16
    uint8_t data[8] = {
 8001562:	b2db      	uxtb	r3, r3
 8001564:	74bb      	strb	r3, [r7, #18]
        (value >> 24) & 0xFF
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	0e1b      	lsrs	r3, r3, #24
    uint8_t data[8] = {
 800156a:	b2db      	uxtb	r3, r3
 800156c:	74fb      	strb	r3, [r7, #19]
    };

    TxHeader.StdId = 0x600 + nodeId;
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001574:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 8001576:	2308      	movs	r3, #8
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	f107 020c 	add.w	r2, r7, #12
 800158a:	f107 0118 	add.w	r1, r7, #24
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <send_sdo_write_u32+0x80>)
 8001590:	f7ff fca0 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(10);
 8001594:	200a      	movs	r0, #10
 8001596:	f002 f8a3 	bl	80036e0 <HAL_Delay>
}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	@ 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000200 	.word	0x20000200

080015a8 <remap_rpdo1_for_velocity>:
void remap_rpdo1_for_velocity(uint8_t nodeId) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
    // 1. Disable RPDO1
    send_sdo_write_u32(nodeId, 0x1400, 0x01, 0x80000200);
 80015b2:	79f8      	ldrb	r0, [r7, #7]
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <remap_rpdo1_for_velocity+0x70>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80015bc:	f7ff ffb2 	bl	8001524 <send_sdo_write_u32>

    // 2. Clear existing mapping
    send_sdo_write_u8(nodeId, 0x1600, 0x00, 0);
 80015c0:	79f8      	ldrb	r0, [r7, #7]
 80015c2:	2300      	movs	r3, #0
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015ca:	f7ff ff27 	bl	800141c <send_sdo_write_u8>

    // 3. Map Controlword (0x6040, 16-bit)
    send_sdo_write_u32(nodeId, 0x1600, 0x01, 0x60400010);
 80015ce:	79f8      	ldrb	r0, [r7, #7]
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <remap_rpdo1_for_velocity+0x74>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015d8:	f7ff ffa4 	bl	8001524 <send_sdo_write_u32>

    // 4. Map Target Velocity (0x60FF, 32-bit)
    send_sdo_write_u32(nodeId, 0x1600, 0x02, 0x60FF0020);
 80015dc:	79f8      	ldrb	r0, [r7, #7]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <remap_rpdo1_for_velocity+0x78>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015e6:	f7ff ff9d 	bl	8001524 <send_sdo_write_u32>

    // 5. Set number of mapped entries = 2
    send_sdo_write_u8(nodeId, 0x1600, 0x00, 2);
 80015ea:	79f8      	ldrb	r0, [r7, #7]
 80015ec:	2302      	movs	r3, #2
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015f4:	f7ff ff12 	bl	800141c <send_sdo_write_u8>

    // 6. Enable RPDO1 (SYNC: 0x00000200)
    send_sdo_write_u32(nodeId, 0x1400, 0x01, 0x00000200);
 80015f8:	79f8      	ldrb	r0, [r7, #7]
 80015fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001604:	f7ff ff8e 	bl	8001524 <send_sdo_write_u32>

    print_uart("✅ RPDO1 re-mapped for CW + Target Velocity!\r\n");
 8001608:	4806      	ldr	r0, [pc, #24]	@ (8001624 <remap_rpdo1_for_velocity+0x7c>)
 800160a:	f7ff fc87 	bl	8000f1c <print_uart>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	80000200 	.word	0x80000200
 800161c:	60400010 	.word	0x60400010
 8001620:	60ff0020 	.word	0x60ff0020
 8001624:	0800ccc8 	.word	0x0800ccc8

08001628 <remap_tpdo1_velocity>:
void remap_tpdo1_velocity(uint8_t nodeId) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
    send_sdo_write_u32(nodeId, 0x1800, 0x01, 0x80000200); // disable TPDO1
 8001632:	79f8      	ldrb	r0, [r7, #7]
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <remap_tpdo1_velocity+0x5c>)
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800163c:	f7ff ff72 	bl	8001524 <send_sdo_write_u32>
    send_sdo_write_u8(nodeId,  0x1A00, 0x00, 0);           // clear mapping
 8001640:	79f8      	ldrb	r0, [r7, #7]
 8001642:	2300      	movs	r3, #0
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 800164a:	f7ff fee7 	bl	800141c <send_sdo_write_u8>
    send_sdo_write_u32(nodeId, 0x1A00, 0x01, 0x606C0020);  // map 606C: 32-bit
 800164e:	79f8      	ldrb	r0, [r7, #7]
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <remap_tpdo1_velocity+0x60>)
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001658:	f7ff ff64 	bl	8001524 <send_sdo_write_u32>
    send_sdo_write_u8(nodeId,  0x1A00, 0x00, 1);           // 1 entry
 800165c:	79f8      	ldrb	r0, [r7, #7]
 800165e:	2301      	movs	r3, #1
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001666:	f7ff fed9 	bl	800141c <send_sdo_write_u8>
    send_sdo_write_u32(nodeId, 0x1800, 0x01, 0x00000200);  // enable TPDO1
 800166a:	79f8      	ldrb	r0, [r7, #7]
 800166c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001676:	f7ff ff55 	bl	8001524 <send_sdo_write_u32>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	80000200 	.word	0x80000200
 8001688:	606c0020 	.word	0x606c0020

0800168c <send_enable_sequence>:

void send_enable_sequence(uint8_t nodeId) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	// 1. Fault Reset trước
	    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x0080);
 8001696:	79f8      	ldrb	r0, [r7, #7]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	f246 0140 	movw	r1, #24640	@ 0x6040
 80016a0:	f7ff fefc 	bl	800149c <send_sdo_write_u16>
	    HAL_Delay(10);
 80016a4:	200a      	movs	r0, #10
 80016a6:	f002 f81b 	bl	80036e0 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x06); HAL_Delay(10); // Shutdown
 80016aa:	79f8      	ldrb	r0, [r7, #7]
 80016ac:	2306      	movs	r3, #6
 80016ae:	2200      	movs	r2, #0
 80016b0:	f246 0140 	movw	r1, #24640	@ 0x6040
 80016b4:	f7ff fef2 	bl	800149c <send_sdo_write_u16>
 80016b8:	200a      	movs	r0, #10
 80016ba:	f002 f811 	bl	80036e0 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x07); HAL_Delay(10); // Switch on
 80016be:	79f8      	ldrb	r0, [r7, #7]
 80016c0:	2307      	movs	r3, #7
 80016c2:	2200      	movs	r2, #0
 80016c4:	f246 0140 	movw	r1, #24640	@ 0x6040
 80016c8:	f7ff fee8 	bl	800149c <send_sdo_write_u16>
 80016cc:	200a      	movs	r0, #10
 80016ce:	f002 f807 	bl	80036e0 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x0F); HAL_Delay(10); // Enable operation
 80016d2:	79f8      	ldrb	r0, [r7, #7]
 80016d4:	230f      	movs	r3, #15
 80016d6:	2200      	movs	r2, #0
 80016d8:	f246 0140 	movw	r1, #24640	@ 0x6040
 80016dc:	f7ff fede 	bl	800149c <send_sdo_write_u16>
 80016e0:	200a      	movs	r0, #10
 80016e2:	f001 fffd 	bl	80036e0 <HAL_Delay>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <send_sync_frame>:

void send_sync_frame() {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef tx;
    uint8_t dummy = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
    uint32_t mbox;
    tx.StdId = 0x080;
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	60bb      	str	r3, [r7, #8]
    tx.IDE = CAN_ID_STD;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
    tx.RTR = CAN_RTR_DATA;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
    tx.DLC = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
    CAN_SendNonBlocking(&hcan2, &tx, &dummy, &mbox);
 800170a:	463b      	mov	r3, r7
 800170c:	1dfa      	adds	r2, r7, #7
 800170e:	f107 0108 	add.w	r1, r7, #8
 8001712:	4806      	ldr	r0, [pc, #24]	@ (800172c <send_sync_frame+0x3c>)
 8001714:	f7ff fbde 	bl	8000ed4 <CAN_SendNonBlocking>
    count_sync++;
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <send_sync_frame+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <send_sync_frame+0x40>)
 8001720:	6013      	str	r3, [r2, #0]
}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000200 	.word	0x20000200
 8001730:	2000050c 	.word	0x2000050c

08001734 <send_velocity_rpdo>:

uint32_t txMailbox;

void send_velocity_rpdo(uint8_t node, int32_t velocity, bool toggle_cw, uint32_t accel, uint32_t decel) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4603      	mov	r3, r0
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	4613      	mov	r3, r2
 8001744:	73bb      	strb	r3, [r7, #14]
    static bool toggle = false;
    uint8_t data[8];

    // 1. Set acceleration & deceleration trước khi gửi velocity
    send_sdo_write_u32(node, 0x6083, 0x00, accel);  // acceleration
 8001746:	7bf8      	ldrb	r0, [r7, #15]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f246 0183 	movw	r1, #24707	@ 0x6083
 8001750:	f7ff fee8 	bl	8001524 <send_sdo_write_u32>
    HAL_Delay(2);
 8001754:	2002      	movs	r0, #2
 8001756:	f001 ffc3 	bl	80036e0 <HAL_Delay>
    send_sdo_write_u32(node, 0x6084, 0x00, decel);  // deceleration
 800175a:	7bf8      	ldrb	r0, [r7, #15]
 800175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	f246 0184 	movw	r1, #24708	@ 0x6084
 8001764:	f7ff fede 	bl	8001524 <send_sdo_write_u32>
    HAL_Delay(2);
 8001768:	2002      	movs	r0, #2
 800176a:	f001 ffb9 	bl	80036e0 <HAL_Delay>

    // 2. Toggle CW
    uint16_t cw = toggle_cw ? (toggle ? 0x1F : 0x0F) : 0x0F;
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <send_velocity_rpdo+0x50>
 8001774:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <send_velocity_rpdo+0xe4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <send_velocity_rpdo+0x4c>
 800177c:	231f      	movs	r3, #31
 800177e:	e002      	b.n	8001786 <send_velocity_rpdo+0x52>
 8001780:	230f      	movs	r3, #15
 8001782:	e000      	b.n	8001786 <send_velocity_rpdo+0x52>
 8001784:	230f      	movs	r3, #15
 8001786:	83fb      	strh	r3, [r7, #30]
    toggle = !toggle;
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <send_velocity_rpdo+0xe4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <send_velocity_rpdo+0xe4>)
 80017a4:	701a      	strb	r2, [r3, #0]

    // 3. Build RPDO data (CW + velocity)
    data[0] = cw & 0xFF;
 80017a6:	8bfb      	ldrh	r3, [r7, #30]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	753b      	strb	r3, [r7, #20]
    data[1] = (cw >> 8) & 0xFF;
 80017ac:	8bfb      	ldrh	r3, [r7, #30]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	757b      	strb	r3, [r7, #21]

    data[2] = (velocity >> 0) & 0xFF;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	75bb      	strb	r3, [r7, #22]
    data[3] = (velocity >> 8) & 0xFF;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	121b      	asrs	r3, r3, #8
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	75fb      	strb	r3, [r7, #23]
    data[4] = (velocity >> 16) & 0xFF;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	141b      	asrs	r3, r3, #16
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	763b      	strb	r3, [r7, #24]
    data[5] = (velocity >> 24) & 0xFF;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	0e1b      	lsrs	r3, r3, #24
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	767b      	strb	r3, [r7, #25]

    data[6] = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	76bb      	strb	r3, [r7, #26]
    data[7] = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	76fb      	strb	r3, [r7, #27]

    // 4. Gửi RPDO
    TxHeader.StdId = 0x200 + node;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <send_velocity_rpdo+0xe8>)
 80017e6:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <send_velocity_rpdo+0xe8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <send_velocity_rpdo+0xe8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <send_velocity_rpdo+0xe8>)
 80017f6:	2208      	movs	r2, #8
 80017f8:	611a      	str	r2, [r3, #16]

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 80017fa:	f107 0214 	add.w	r2, r7, #20
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <send_velocity_rpdo+0xec>)
 8001800:	4906      	ldr	r1, [pc, #24]	@ (800181c <send_velocity_rpdo+0xe8>)
 8001802:	4808      	ldr	r0, [pc, #32]	@ (8001824 <send_velocity_rpdo+0xf0>)
 8001804:	f7ff fb66 	bl	8000ed4 <CAN_SendNonBlocking>
    HAL_Delay(5);
 8001808:	2005      	movs	r0, #5
 800180a:	f001 ff69 	bl	80036e0 <HAL_Delay>
}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000599 	.word	0x20000599
 800181c:	20000520 	.word	0x20000520
 8001820:	2000057c 	.word	0x2000057c
 8001824:	20000200 	.word	0x20000200

08001828 <send_temp_to_usbcan>:
//static uint8_t lostCounter1 = 0, lostCounter2 = 0;
//extern volatile bool need_reenable_node1, need_reenable_node2;
//extern int32_t prevVel1=0, prevVel2=0;  // vận tốc yêu cầu gần nhất
volatile uint8_t ready1=0;
volatile uint8_t ready2=0;
void send_temp_to_usbcan(int32_t temperature) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	@ 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x018;
 800183a:	2318      	movs	r3, #24
 800183c:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 4;
 800183e:	2304      	movs	r3, #4
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24

    data[0] = (uint8_t)(temperature & 0xFF);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)((temperature >> 8) & 0xFF);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	121b      	asrs	r3, r3, #8
 8001854:	b2db      	uxtb	r3, r3
 8001856:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)((temperature >> 16) & 0xFF);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	141b      	asrs	r3, r3, #16
 800185c:	b2db      	uxtb	r3, r3
 800185e:	73bb      	strb	r3, [r7, #14]
    data[3] = (uint8_t)((temperature >> 24) & 0xFF);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	161b      	asrs	r3, r3, #24
 8001864:	b2db      	uxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	f107 0118 	add.w	r1, r7, #24
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <send_temp_to_usbcan+0x5c>)
 8001876:	f7ff fb2d 	bl	8000ed4 <CAN_SendNonBlocking>
}
 800187a:	bf00      	nop
 800187c:	3730      	adds	r7, #48	@ 0x30
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000200 	.word	0x20000200

08001888 <HAL_CAN_RxFifo0MsgPendingCallback>:
//Xử lý LED command (0x021).
//
//Xử lý PS2 block command (0x022).
//
//Xử lý Auto velocity update (0x013).
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b0b9      	sub	sp, #228	@ 0xe4
 800188c:	af04      	add	r7, sp, #16
 800188e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
  static bool toggle = false;
  uint8_t rxData[8];
  uint32_t now = HAL_GetTick();
 8001890:	f001 ff1a 	bl	80036c8 <HAL_GetTick>
 8001894:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  (void)toggle; (void)now; /* Silence unused-variable warnings when not used */
    can_rx_count++;
 8001898:	4b99      	ldr	r3, [pc, #612]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a98      	ldr	r2, [pc, #608]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80018a0:	6013      	str	r3, [r2, #0]
    can_rx_flag ++;
 80018a2:	4b98      	ldr	r3, [pc, #608]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4a96      	ldr	r2, [pc, #600]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80018aa:	6013      	str	r3, [r2, #0]
   // static uint32_t lastCheck = 0;  // ✅ dùng static, không reset mỗi lần
    char buf[64];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 80018ac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80018b0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f002 fb09 	bl	8003ece <HAL_CAN_GetRxMessage>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
        print_uart("❌ Failed to get RX message in callback\r\n");
 80018c2:	4891      	ldr	r0, [pc, #580]	@ (8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 80018c4:	f7ff fb2a 	bl	8000f1c <print_uart>
        return;
 80018c8:	e1cf      	b.n	8001c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e2>
    }

    if ((rxHeader.StdId == 0x701 || rxHeader.StdId == 0x702) &&
 80018ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018ce:	f240 7201 	movw	r2, #1793	@ 0x701
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d005      	beq.n	80018e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80018d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018da:	f240 7202 	movw	r2, #1794	@ 0x702
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11e      	bne.n	8001920 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
        rxHeader.DLC == 1 && rxData[0] == 0x00) {
 80018e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    if ((rxHeader.StdId == 0x701 || rxHeader.StdId == 0x702) &&
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d11a      	bne.n	8001920 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
        rxHeader.DLC == 1 && rxData[0] == 0x00) {
 80018ea:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>

        uint8_t nodeId = rxHeader.StdId - 0x700;
 80018f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018f6:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        node_booted[nodeId] = 1;
 80018fa:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80018fe:	4a83      	ldr	r2, [pc, #524]	@ (8001b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001900:	2101      	movs	r1, #1
 8001902:	54d1      	strb	r1, [r2, r3]

        if (nodeId == 1) need_enable_node1 = 1;
 8001904:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001908:	2b01      	cmp	r3, #1
 800190a:	d102      	bne.n	8001912 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 800190c:	4b80      	ldr	r3, [pc, #512]	@ (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
        if (nodeId == 2) need_enable_node2 = 1;
 8001912:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001916:	2b02      	cmp	r3, #2
 8001918:	d102      	bne.n	8001920 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 800191a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
    }



    // Kiểm tra nếu đây là phản hồi từ node1 hoặc node2 cho SDO Actual Velocity
    if (rxHeader.StdId == 0x581 || rxHeader.StdId == 0x582) {
 8001920:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001924:	f240 5281 	movw	r2, #1409	@ 0x581
 8001928:	4293      	cmp	r3, r2
 800192a:	d005      	beq.n	8001938 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
 800192c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001930:	f240 5282 	movw	r2, #1410	@ 0x582
 8001934:	4293      	cmp	r3, r2
 8001936:	d142      	bne.n	80019be <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
        if (rxData[0] == 0x43 && rxData[1] == 0x6C && rxData[2] == 0x60) {
 8001938:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800193c:	2b43      	cmp	r3, #67	@ 0x43
 800193e:	d13e      	bne.n	80019be <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
 8001940:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001944:	2b6c      	cmp	r3, #108	@ 0x6c
 8001946:	d13a      	bne.n	80019be <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
 8001948:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 800194c:	2b60      	cmp	r3, #96	@ 0x60
 800194e:	d136      	bne.n	80019be <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
            int nodeId = rxHeader.StdId - 0x580;
 8001950:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001954:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 8001958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
//            Byte 2: Index high (0x60)   → Object 0x606C: Actual Velocity
//            Byte 3: Subindex (usually 0)
//            Byte 4–7: Dữ liệu 32-bit (int32_t velocity)

            int32_t velocity = (int32_t)(
                ((uint32_t)rxData[4]) |
 800195c:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001960:	461a      	mov	r2, r3
                ((uint32_t)rxData[5] << 8) |
 8001962:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001966:	021b      	lsls	r3, r3, #8
                ((uint32_t)rxData[4]) |
 8001968:	431a      	orrs	r2, r3
                ((uint32_t)rxData[6] << 16) |
 800196a:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800196e:	041b      	lsls	r3, r3, #16
                ((uint32_t)rxData[5] << 8) |
 8001970:	431a      	orrs	r2, r3
                ((uint32_t)rxData[7] << 24)
 8001972:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001976:	061b      	lsls	r3, r3, #24
                ((uint32_t)rxData[6] << 16) |
 8001978:	4313      	orrs	r3, r2
            int32_t velocity = (int32_t)(
 800197a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            );
            if(nodeId==1) currentVel1=velocity;
 800197e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001982:	2b01      	cmp	r3, #1
 8001984:	d103      	bne.n	800198e <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
 8001986:	4a64      	ldr	r2, [pc, #400]	@ (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800198c:	6013      	str	r3, [r2, #0]
            if(nodeId==2) currentVel2=velocity;
 800198e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001992:	2b02      	cmp	r3, #2
 8001994:	d103      	bne.n	800199e <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
 8001996:	4a61      	ldr	r2, [pc, #388]	@ (8001b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800199c:	6013      	str	r3, [r2, #0]
            snprintf(buf, sizeof(buf),
 800199e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80019a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80019ac:	4a5c      	ldr	r2, [pc, #368]	@ (8001b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80019ae:	2140      	movs	r1, #64	@ 0x40
 80019b0:	f008 ff20 	bl	800a7f4 <sniprintf>
                     "🔄 Node %d Actual Velocity: %ld\r\n", nodeId, velocity);

            print_uart(buf);
 80019b4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff faaf 	bl	8000f1c <print_uart>

                  }
    }
    if ((rxHeader.StdId == 0x013) && (rxHeader.DLC == 8)) { // frame chứa 2 vận tốc
 80019be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019c2:	2b13      	cmp	r3, #19
 80019c4:	d176      	bne.n	8001ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
 80019c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d172      	bne.n	8001ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>
    	   if (current_mode != MODE_AUTO) {
 80019ce:	4b55      	ldr	r3, [pc, #340]	@ (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	f040 8147 	bne.w	8001c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e0>
    	        // Không xử lý gói 0x013 nếu không ở AUTO mode
    	        return;
    	    }
        print_uart("oke\r\n");
 80019da:	4853      	ldr	r0, [pc, #332]	@ (8001b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80019dc:	f7ff fa9e 	bl	8000f1c <print_uart>
        memcpy(&up_vel1, &rxData[0], 4);
 80019e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019e4:	4a51      	ldr	r2, [pc, #324]	@ (8001b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80019e6:	6013      	str	r3, [r2, #0]
        memcpy(&up_vel2, &rxData[4], 4);
 80019e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019ec:	4a50      	ldr	r2, [pc, #320]	@ (8001b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80019ee:	6013      	str	r3, [r2, #0]
        ready1 = 1; ready2 = 1;
 80019f0:	4b50      	ldr	r3, [pc, #320]	@ (8001b34 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	4b50      	ldr	r3, [pc, #320]	@ (8001b38 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
//        if( up_vel1 >= 80000 ) up_vel1=80000;
//        else if( up_vel1 <= -80000) up_vel1=-80000;
//        if( up_vel2 >= 80000 ) up_vel2=80000;
//        else if( up_vel2 <= -80000) up_vel2=-80000;
        snprintf(buf, sizeof(buf), "✅ Velocity 1 (Motor1) updated: %ld\r\n", up_vel1);
 80019fc:	4b4b      	ldr	r3, [pc, #300]	@ (8001b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001a04:	4a4d      	ldr	r2, [pc, #308]	@ (8001b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001a06:	2140      	movs	r1, #64	@ 0x40
 8001a08:	f008 fef4 	bl	800a7f4 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001a0c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fc2d 	bl	8000270 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	4847      	ldr	r0, [pc, #284]	@ (8001b40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001a24:	f007 f9b2 	bl	8008d8c <HAL_UART_Transmit>

        snprintf(buf, sizeof(buf),
            "📦 Data 1: %02X %02X %02X %02X\r\n",
            rxData[0], rxData[1], rxData[2], rxData[3]);
 8001a28:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
        snprintf(buf, sizeof(buf),
 8001a2c:	461c      	mov	r4, r3
            rxData[0], rxData[1], rxData[2], rxData[3]);
 8001a2e:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001a32:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8001a36:	f897 109b 	ldrb.w	r1, [r7, #155]	@ 0x9b
        snprintf(buf, sizeof(buf),
 8001a3a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001a3e:	9102      	str	r1, [sp, #8]
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4623      	mov	r3, r4
 8001a46:	4a3f      	ldr	r2, [pc, #252]	@ (8001b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8001a48:	2140      	movs	r1, #64	@ 0x40
 8001a4a:	f008 fed3 	bl	800a7f4 <sniprintf>
        print_uart(buf);
 8001a4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fa62 	bl	8000f1c <print_uart>

        snprintf(buf, sizeof(buf), "✅ Velocity 2 (Motor2) updated: %ld\r\n", up_vel2);
 8001a58:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001a60:	4a39      	ldr	r2, [pc, #228]	@ (8001b48 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8001a62:	2140      	movs	r1, #64	@ 0x40
 8001a64:	f008 fec6 	bl	800a7f4 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001a68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fbff 	bl	8000270 <strlen>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	4830      	ldr	r0, [pc, #192]	@ (8001b40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001a80:	f007 f984 	bl	8008d8c <HAL_UART_Transmit>

        snprintf(buf, sizeof(buf),
            "📦 Data 2: %02X %02X %02X %02X\r\n",
            rxData[4], rxData[5], rxData[6], rxData[7]);
 8001a84:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
        snprintf(buf, sizeof(buf),
 8001a88:	461c      	mov	r4, r3
            rxData[4], rxData[5], rxData[6], rxData[7]);
 8001a8a:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001a8e:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8001a92:	f897 109f 	ldrb.w	r1, [r7, #159]	@ 0x9f
        snprintf(buf, sizeof(buf),
 8001a96:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001a9a:	9102      	str	r1, [sp, #8]
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001aa4:	2140      	movs	r1, #64	@ 0x40
 8001aa6:	f008 fea5 	bl	800a7f4 <sniprintf>
        print_uart(buf);
 8001aaa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fa34 	bl	8000f1c <print_uart>

    }

    if ((rxHeader.StdId == 0x020) && (rxHeader.DLC == 8)) {
 8001ab4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d15b      	bne.n	8001b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 8001abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d157      	bne.n	8001b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
        uint32_t mode;
        memcpy(&mode, &rxData[0], 4);
 8001ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ac8:	657b      	str	r3, [r7, #84]	@ 0x54

        if (mode == 1) {  // MODE_PS2
 8001aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d109      	bne.n	8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>
            current_mode = MODE_PS2;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
            mode_changed_flag = 1;   // Để vòng while reset tốc độ
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
            print_uart("✅ PS2 Mode\r\n");
 8001adc:	481d      	ldr	r0, [pc, #116]	@ (8001b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001ade:	f7ff fa1d 	bl	8000f1c <print_uart>
 8001ae2:	e047      	b.n	8001b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
        }
        else if (mode == 2) { // MODE_AUTO
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d138      	bne.n	8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>
            current_mode = MODE_AUTO;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
            mode_changed_flag = 1;   // Để vòng while reset tốc độ
 8001af0:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
            print_uart("✅ Auto Mode\r\n");
 8001af6:	4818      	ldr	r0, [pc, #96]	@ (8001b58 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001af8:	f7ff fa10 	bl	8000f1c <print_uart>
 8001afc:	e03a      	b.n	8001b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 8001afe:	bf00      	nop
 8001b00:	200001f4 	.word	0x200001f4
 8001b04:	200001f8 	.word	0x200001f8
 8001b08:	0800cdb8 	.word	0x0800cdb8
 8001b0c:	20000594 	.word	0x20000594
 8001b10:	200001fc 	.word	0x200001fc
 8001b14:	200001fd 	.word	0x200001fd
 8001b18:	20000588 	.word	0x20000588
 8001b1c:	2000058c 	.word	0x2000058c
 8001b20:	0800cde4 	.word	0x0800cde4
 8001b24:	20000508 	.word	0x20000508
 8001b28:	0800ce08 	.word	0x0800ce08
 8001b2c:	20000580 	.word	0x20000580
 8001b30:	20000584 	.word	0x20000584
 8001b34:	20000590 	.word	0x20000590
 8001b38:	20000591 	.word	0x20000591
 8001b3c:	0800ce10 	.word	0x0800ce10
 8001b40:	200004c0 	.word	0x200004c0
 8001b44:	0800ce38 	.word	0x0800ce38
 8001b48:	0800ce5c 	.word	0x0800ce5c
 8001b4c:	0800ce84 	.word	0x0800ce84
 8001b50:	20000598 	.word	0x20000598
 8001b54:	0800cea8 	.word	0x0800cea8
 8001b58:	0800ceb8 	.word	0x0800ceb8
        }
        else {
            char buf[64];
            snprintf(buf, sizeof(buf), "⚠️ Unknown Mode: %lu\r\n", mode);
 8001b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5e:	f107 000c 	add.w	r0, r7, #12
 8001b62:	4a43      	ldr	r2, [pc, #268]	@ (8001c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e8>)
 8001b64:	2140      	movs	r1, #64	@ 0x40
 8001b66:	f008 fe45 	bl	800a7f4 <sniprintf>
            print_uart(buf);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f9d4 	bl	8000f1c <print_uart>
        }
    }

    if ((rxHeader.StdId == 0x581) &&
 8001b74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b78:	f240 5281 	movw	r2, #1409	@ 0x581
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d131      	bne.n	8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>
        rxData[0] == 0x43 &&
 8001b80:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
    if ((rxHeader.StdId == 0x581) &&
 8001b84:	2b43      	cmp	r3, #67	@ 0x43
 8001b86:	d12d      	bne.n	8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>
        rxData[1]==0x12 && rxData[2]==0x50 && rxData[3]==0x00) {
 8001b88:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
        rxData[0] == 0x43 &&
 8001b8c:	2b12      	cmp	r3, #18
 8001b8e:	d129      	bne.n	8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>
        rxData[1]==0x12 && rxData[2]==0x50 && rxData[3]==0x00) {
 8001b90:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001b94:	2b50      	cmp	r3, #80	@ 0x50
 8001b96:	d125      	bne.n	8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>
 8001b98:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d121      	bne.n	8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>

        int32_t driver_temp = (int32_t)(
            ((uint32_t)rxData[4]) |
 8001ba0:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001ba4:	461a      	mov	r2, r3
            ((uint32_t)rxData[5] << 8) |
 8001ba6:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001baa:	021b      	lsls	r3, r3, #8
            ((uint32_t)rxData[4]) |
 8001bac:	431a      	orrs	r2, r3
            ((uint32_t)rxData[6] << 16) |
 8001bae:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001bb2:	041b      	lsls	r3, r3, #16
            ((uint32_t)rxData[5] << 8) |
 8001bb4:	431a      	orrs	r2, r3
            ((uint32_t)rxData[7] << 24)
 8001bb6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001bba:	061b      	lsls	r3, r3, #24
            ((uint32_t)rxData[6] << 16) |
 8001bbc:	4313      	orrs	r3, r2
        int32_t driver_temp = (int32_t)(
 8001bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        );

        char buf[64];
        snprintf(buf, sizeof(buf), "🌡️ Driver Temp = %ld°C\r\n", driver_temp);
 8001bc2:	f107 000c 	add.w	r0, r7, #12
 8001bc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bca:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ec>)
 8001bcc:	2140      	movs	r1, #64	@ 0x40
 8001bce:	f008 fe11 	bl	800a7f4 <sniprintf>
        print_uart(buf);
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f9a0 	bl	8000f1c <print_uart>

        // Gửi lên CAN ID 0x018 để debug trên USB-CAN
        send_temp_to_usbcan(driver_temp);
 8001bdc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001be0:	f7ff fe22 	bl	8001828 <send_temp_to_usbcan>
    }
    //nhan lenh bat den sang 0x021
    if ((rxHeader.StdId == 0x021) && (rxHeader.DLC == 8)){
 8001be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001be8:	2b21      	cmp	r3, #33	@ 0x21
 8001bea:	d121      	bne.n	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a8>
 8001bec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d11d      	bne.n	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a8>
       	  uint32_t led;
       	memcpy(&led, &rxData[0], 4);
 8001bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bf8:	653b      	str	r3, [r7, #80]	@ 0x50
   //    	                           (rxData[2] << 16) |
   //    	                           (rxData[3] << 24));
        static uint32_t last_led_cmd = 0xFFFFFFFF;  // Lưu lệnh trước để tránh xử lý lại

           // Nếu lệnh mới khác lệnh cũ thì xử lý (tránh lặp lại nhiều lần)
           if (led != last_led_cmd) {
 8001bfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d015      	beq.n	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a8>
               last_led_cmd = led;
 8001c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c06:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>)
 8001c08:	6013      	str	r3, [r2, #0]
       	 if (led==1){  //01 00 00 00
 8001c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_CAN_RxFifo0MsgPendingCallback+0x396>
       		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c16:	4819      	ldr	r0, [pc, #100]	@ (8001c7c <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 8001c18:	f003 fc2c 	bl	8005474 <HAL_GPIO_WritePin>
 8001c1c:	e008      	b.n	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a8>

       	 }
       	 else if (led==2){// 02 00 00 00
 8001c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d105      	bne.n	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a8>
       		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c2a:	4814      	ldr	r0, [pc, #80]	@ (8001c7c <HAL_CAN_RxFifo0MsgPendingCallback+0x3f4>)
 8001c2c:	f003 fc22 	bl	8005474 <HAL_GPIO_WritePin>
    }
    //dem goi tin nhan duoc trong 1 s
//    can_rx_count++;
    //vo hiẹu hoa ps2 khi co vat can

    if ((rxHeader.StdId == 0x024) && (rxHeader.DLC == 8)){
 8001c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c34:	2b24      	cmp	r3, #36	@ 0x24
 8001c36:	d118      	bne.n	8001c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e2>
 8001c38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d114      	bne.n	8001c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e2>
          	  uint32_t stop;
          	memcpy(&stop, &rxData[0], 4);
 8001c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
      //    	 mode = (int32_t)((rxData[0]) |
      //    	                           (rxData[1] << 8) |
      //    	                           (rxData[2] << 16) |
      //    	                           (rxData[3] << 24));
      if (stop==1||stop==2||stop==3){
 8001c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>
 8001c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d002      	beq.n	8001c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>
 8001c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d103      	bne.n	8001c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d8>

    	  ps2_blocked=1;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e004      	b.n	8001c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e2>
    	  //last_stop_update = HAL_GetTick();
      }
     // else if(stop==0) ps2_blocked=0;
      else ps2_blocked=0;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e000      	b.n	8001c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e2>
    	        return;
 8001c68:	bf00      	nop
    }
//    else ps2_blocked=0;

}
 8001c6a:	37d4      	adds	r7, #212	@ 0xd4
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	0800cec8 	.word	0x0800cec8
 8001c74:	0800cee4 	.word	0x0800cee4
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	20000597 	.word	0x20000597

08001c84 <send_vel_can>:
void send_vel_can(int32_t vel1, int32_t vel2) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8];

    // ===== Giới hạn tần suất gửi: mỗi 20ms một lần (50Hz) =====
    if (HAL_GetTick() - last_tick < 50) return;
 8001c8e:	f001 fd1b 	bl	80036c8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <send_vel_can+0x9c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b31      	cmp	r3, #49	@ 0x31
 8001c9c:	d93c      	bls.n	8001d18 <send_vel_can+0x94>
    last_tick = HAL_GetTick();
 8001c9e:	f001 fd13 	bl	80036c8 <HAL_GetTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <send_vel_can+0x9c>)
 8001ca6:	6013      	str	r3, [r2, #0]

    // ===== Header CAN =====
    TxHeader.StdId = 0x030;   // ID cố định
 8001ca8:	2330      	movs	r3, #48	@ 0x30
 8001caa:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC   = 8;       // 8 byte (vel1 + vel2)
 8001cac:	2308      	movs	r3, #8
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE   = CAN_ID_STD;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
    TxHeader.RTR   = CAN_RTR_DATA;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24

    // ===== Đóng gói vel1 =====
    data[0] = (uint8_t)(vel1 & 0xFF);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)((vel1 >> 8) & 0xFF);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	121b      	asrs	r3, r3, #8
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)((vel1 >> 16) & 0xFF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	141b      	asrs	r3, r3, #16
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	73bb      	strb	r3, [r7, #14]
    data[3] = (uint8_t)((vel1 >> 24) & 0xFF);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	161b      	asrs	r3, r3, #24
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]

    // ===== Đóng gói vel2 =====
    data[4] = (uint8_t)(vel2 & 0xFF);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	743b      	strb	r3, [r7, #16]
    data[5] = (uint8_t)((vel2 >> 8) & 0xFF);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	121b      	asrs	r3, r3, #8
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	747b      	strb	r3, [r7, #17]
    data[6] = (uint8_t)((vel2 >> 16) & 0xFF);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	141b      	asrs	r3, r3, #16
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	74bb      	strb	r3, [r7, #18]
    data[7] = (uint8_t)((vel2 >> 24) & 0xFF);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	161b      	asrs	r3, r3, #24
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	74fb      	strb	r3, [r7, #19]

    // ===== Gửi nếu Mailbox rảnh =====
    if (CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox) == HAL_OK) {
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	f107 020c 	add.w	r2, r7, #12
 8001cfc:	f107 0118 	add.w	r1, r7, #24
 8001d00:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <send_vel_can+0xa0>)
 8001d02:	f7ff f8e7 	bl	8000ed4 <CAN_SendNonBlocking>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d106      	bne.n	8001d1a <send_vel_can+0x96>
        count_send_vel_can++;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <send_vel_can+0xa4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <send_vel_can+0xa4>)
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e000      	b.n	8001d1a <send_vel_can+0x96>
    if (HAL_GetTick() - last_tick < 50) return;
 8001d18:	bf00      	nop
    } else {
        // Nếu mailbox đầy, bỏ qua frame này để tránh nghẽn
        // (có thể thêm debug ở đây nếu muốn)
    }
}
 8001d1a:	3730      	adds	r7, #48	@ 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000059c 	.word	0x2000059c
 8001d24:	20000200 	.word	0x20000200
 8001d28:	2000051c 	.word	0x2000051c

08001d2c <request_actual_velocity>:
	        // (có thể thêm debug ở đây nếu muốn)
	    }
}
// => sau đó gọi update_vel(1,vel1,true,50000, 150000) -> để cập nhật vận tốc đến driver và motor 1
// => sau đó gọi update_vel(2,vel2,true,50000, 150000) -> để cập nhật vận tốc đến driver và motor 2
void request_actual_velocity(uint8_t nodeId) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08c      	sub	sp, #48	@ 0x30
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef tx;
    uint8_t txData[8] = {0x40, 0x6C, 0x60, 0x00, 0, 0, 0, 0};
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <request_actual_velocity+0x40>)
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
    uint32_t txMailbox;

    tx.StdId = 0x600 + nodeId;
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001d44:	61bb      	str	r3, [r7, #24]
    tx.IDE = CAN_ID_STD;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
    tx.RTR = CAN_RTR_DATA;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    tx.DLC = 8;
 8001d4e:	2308      	movs	r3, #8
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28

    CAN_SendNonBlocking(&hcan2, &tx, txData, &txMailbox);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	f107 0210 	add.w	r2, r7, #16
 8001d5a:	f107 0118 	add.w	r1, r7, #24
 8001d5e:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <request_actual_velocity+0x44>)
 8001d60:	f7ff f8b8 	bl	8000ed4 <CAN_SendNonBlocking>
}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	@ 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	00606c40 	.word	0x00606c40
 8001d70:	20000200 	.word	0x20000200

08001d74 <HAL_CAN_ErrorCallback>:

    uint32_t txMailbox;
    CAN_SendNonBlocking(&hcan2, &txHeader, txData, &txMailbox);
}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    if (hcan->ErrorCode & HAL_CAN_ERROR_BOF) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_CAN_ErrorCallback+0x36>
        HAL_CAN_Stop(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 ff0d 	bl	8003ba8 <HAL_CAN_Stop>
        HAL_CAN_DeInit(hcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f001 fdc5 	bl	800391e <HAL_CAN_DeInit>
        HAL_CAN_Init(hcan);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f001 fcc7 	bl	8003728 <HAL_CAN_Init>
        HAL_CAN_Start(hcan);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f001 fec0 	bl	8003b20 <HAL_CAN_Start>

        // Bật lại interrupt
        HAL_CAN_ActivateNotification(hcan,
 8001da0:	f648 7102 	movw	r1, #36610	@ 0x8f02
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f002 f9b4 	bl	8004112 <HAL_CAN_ActivateNotification>
            CAN_IT_ERROR);
//
//        char msg[] = "⚡ CAN bus-off recovered\r\n";
//        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	b0b1      	sub	sp, #196	@ 0xc4
 8001db8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f001 fc1f 	bl	80035fc <HAL_Init>

  /* USER CODE BEGIN Init */
	    HAL_TIM_Base_Start(&htim1);
 8001dbe:	48a0      	ldr	r0, [pc, #640]	@ (8002040 <main+0x28c>)
 8001dc0:	f006 fafc 	bl	80083bc <HAL_TIM_Base_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc4:	f000 fb3c 	bl	8002440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc8:	f000 fd7c 	bl	80028c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dcc:	f000 fd52 	bl	8002874 <MX_DMA_Init>
  MX_I2C1_Init();
 8001dd0:	f000 fbd6 	bl	8002580 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001dd4:	f000 fc30 	bl	8002638 <MX_SPI1_Init>
  MX_TIM14_Init();
 8001dd8:	f000 fcf0 	bl	80027bc <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8001ddc:	f000 fd12 	bl	8002804 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001de0:	f000 fc60 	bl	80026a4 <MX_TIM1_Init>
  MX_I2C3_Init();
 8001de4:	f000 fbfa 	bl	80025dc <MX_I2C3_Init>
  MX_CAN2_Init();
 8001de8:	f000 fb94 	bl	8002514 <MX_CAN2_Init>
  MX_TIM8_Init();
 8001dec:	f000 fcaa 	bl	8002744 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
    // === Cấu hình CAN filter ===
    HAL_CAN_Start(&hcan2);
 8001df0:	4894      	ldr	r0, [pc, #592]	@ (8002044 <main+0x290>)
 8001df2:	f001 fe95 	bl	8003b20 <HAL_CAN_Start>
    set_drive_mode(3,1);  set_drive_mode(3,2);
 8001df6:	2101      	movs	r1, #1
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f7ff f91f 	bl	800103c <set_drive_mode>
 8001dfe:	2102      	movs	r1, #2
 8001e00:	2003      	movs	r0, #3
 8001e02:	f7ff f91b 	bl	800103c <set_drive_mode>
    remap_rpdo1_for_velocity(1); remap_rpdo1_for_velocity(2);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff fbce 	bl	80015a8 <remap_rpdo1_for_velocity>
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f7ff fbcb 	bl	80015a8 <remap_rpdo1_for_velocity>
    CAN_FilterTypeDef filter;
    filter.FilterActivation = CAN_FILTER_ENABLE;
 8001e12:	2301      	movs	r3, #1
 8001e14:	66bb      	str	r3, [r7, #104]	@ 0x68
    filter.FilterBank = 14;
 8001e16:	230e      	movs	r3, #14
 8001e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    filter.FilterIdHigh = 0x0000;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	64bb      	str	r3, [r7, #72]	@ 0x48
    filter.FilterIdLow = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
    filter.FilterMaskIdHigh = 0x0000;
 8001e26:	2300      	movs	r3, #0
 8001e28:	653b      	str	r3, [r7, #80]	@ 0x50
    filter.FilterMaskIdLow = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	657b      	str	r3, [r7, #84]	@ 0x54
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	663b      	str	r3, [r7, #96]	@ 0x60
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e32:	2301      	movs	r3, #1
 8001e34:	667b      	str	r3, [r7, #100]	@ 0x64
    filter.SlaveStartFilterBank = 14;
 8001e36:	230e      	movs	r3, #14
 8001e38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_CAN_ConfigFilter(&hcan2, &filter);
 8001e3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4880      	ldr	r0, [pc, #512]	@ (8002044 <main+0x290>)
 8001e42:	f001 fd8f 	bl	8003964 <HAL_CAN_ConfigFilter>
//    filter.SlaveStartFilterBank = 14;
//    HAL_CAN_ConfigFilter(&hcan2, &filter);

//    HAL_CAN_Start(&hcan2);
//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
HAL_CAN_ActivateNotification(&hcan2,
 8001e46:	f648 7102 	movw	r1, #36610	@ 0x8f02
 8001e4a:	487e      	ldr	r0, [pc, #504]	@ (8002044 <main+0x290>)
 8001e4c:	f002 f961 	bl	8004112 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   // print_uart("🔧 Bắt đầu khởi tạo Velocity Mode...\r\n");
// CANopenNodeSTM32 axis;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);//on led
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e56:	487c      	ldr	r0, [pc, #496]	@ (8002048 <main+0x294>)
 8001e58:	f003 fb0c 	bl	8005474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2108      	movs	r1, #8
 8001e60:	487a      	ldr	r0, [pc, #488]	@ (800204c <main+0x298>)
 8001e62:	f003 fb07 	bl	8005474 <HAL_GPIO_WritePin>
    //print_uart("Nhấn MODE nếu cần cho Analog\r\n");
   // HAL_Delay(1000);
    PS2_Init();
 8001e66:	f7ff fa09 	bl	800127c <PS2_Init>
   // print_uart("Đang test SPI đơn giản...\r\n");
    Test_SPI_1Byte();
 8001e6a:	f7ff faa9 	bl	80013c0 <Test_SPI_1Byte>

       set_drive_mode(3,1);  set_drive_mode(3,2);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2003      	movs	r0, #3
 8001e72:	f7ff f8e3 	bl	800103c <set_drive_mode>
 8001e76:	2102      	movs	r1, #2
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f7ff f8df 	bl	800103c <set_drive_mode>
       remap_rpdo1_for_velocity(1); remap_rpdo1_for_velocity(2);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fb92 	bl	80015a8 <remap_rpdo1_for_velocity>
 8001e84:	2002      	movs	r0, #2
 8001e86:	f7ff fb8f 	bl	80015a8 <remap_rpdo1_for_velocity>
       remap_tpdo1_velocity(1);  // Remap TPDO1 để chứa Actual Velocity
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff fbcc 	bl	8001628 <remap_tpdo1_velocity>
       remap_tpdo1_velocity(2);
 8001e90:	2002      	movs	r0, #2
 8001e92:	f7ff fbc9 	bl	8001628 <remap_tpdo1_velocity>
    // === Gửi lệnh quay bằng RPDO ===
  //  int32_t target_velocity1 = 50000;  // hoặc -100000 để quay ngược
    uint32_t lastSend = HAL_GetTick();
 8001e96:	f001 fc17 	bl	80036c8 <HAL_GetTick>
 8001e9a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
//    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // === Biến toàn cục trong main ===
  int32_t prevVel1 = 0, prevVel2 = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t lastPrint = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  static uint8_t last_block_state = 0;
  uint32_t last_upvel1_time = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t last_upvel2_time = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    	  /* USER CODE END WHILE */

    	   /* USER CODE BEGIN 3 */
    	// Nếu cả 2 node booted cùng lúc
    	if (need_enable_node1) {
 8001ebc:	4b64      	ldr	r3, [pc, #400]	@ (8002050 <main+0x29c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <main+0x138>
    	    need_enable_node1 = 0;
 8001ec6:	4b62      	ldr	r3, [pc, #392]	@ (8002050 <main+0x29c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    	    set_drive_mode(3, 1);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f7ff f8b4 	bl	800103c <set_drive_mode>
    	    remap_rpdo1_for_velocity(1);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7ff fb67 	bl	80015a8 <remap_rpdo1_for_velocity>
    	    remap_tpdo1_velocity(1);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff fba4 	bl	8001628 <remap_tpdo1_velocity>
    	    send_enable_sequence(1);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff fbd3 	bl	800168c <send_enable_sequence>
    	    print_uart("✅ Node1 enabled\r\n");
 8001ee6:	485b      	ldr	r0, [pc, #364]	@ (8002054 <main+0x2a0>)
 8001ee8:	f7ff f818 	bl	8000f1c <print_uart>
    	}

    	if (need_enable_node2) {
 8001eec:	4b5a      	ldr	r3, [pc, #360]	@ (8002058 <main+0x2a4>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <main+0x168>
    	    need_enable_node2 = 0;
 8001ef6:	4b58      	ldr	r3, [pc, #352]	@ (8002058 <main+0x2a4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
    	    set_drive_mode(3, 2);
 8001efc:	2102      	movs	r1, #2
 8001efe:	2003      	movs	r0, #3
 8001f00:	f7ff f89c 	bl	800103c <set_drive_mode>
    	    remap_rpdo1_for_velocity(2);
 8001f04:	2002      	movs	r0, #2
 8001f06:	f7ff fb4f 	bl	80015a8 <remap_rpdo1_for_velocity>
    	    remap_tpdo1_velocity(2);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7ff fb8c 	bl	8001628 <remap_tpdo1_velocity>
    	    send_enable_sequence(2);
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7ff fbbb 	bl	800168c <send_enable_sequence>
    	    print_uart("✅ Node2 enabled\r\n");
 8001f16:	4851      	ldr	r0, [pc, #324]	@ (800205c <main+0x2a8>)
 8001f18:	f7ff f800 	bl	8000f1c <print_uart>
    	}



    	 int32_t vel1 = 0, vel2 = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    	if (can_rx_flag){
 8001f28:	4b4d      	ldr	r3, [pc, #308]	@ (8002060 <main+0x2ac>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01a      	beq.n	8001f66 <main+0x1b2>
    	    	char buf [64];
    	        if (HAL_GetTick() - lastPrint >= 1000) { //1s
 8001f30:	f001 fbca 	bl	80036c8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f40:	d311      	bcc.n	8001f66 <main+0x1b2>
    	            snprintf(buf, sizeof(buf), "📥 Gói CAN nhận/giây: %lu\r\n", can_rx_count);
 8001f42:	4b48      	ldr	r3, [pc, #288]	@ (8002064 <main+0x2b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4638      	mov	r0, r7
 8001f48:	4a47      	ldr	r2, [pc, #284]	@ (8002068 <main+0x2b4>)
 8001f4a:	2140      	movs	r1, #64	@ 0x40
 8001f4c:	f008 fc52 	bl	800a7f4 <sniprintf>
    	         print_uart(buf);
 8001f50:	463b      	mov	r3, r7
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe ffe2 	bl	8000f1c <print_uart>
    	   can_rx_count=0;
 8001f58:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <main+0x2b0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    	         lastPrint=HAL_GetTick();
 8001f5e:	f001 fbb3 	bl	80036c8 <HAL_GetTick>
 8001f62:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    	        }
    	}
    	//gửi gói CAN
        uint32_t now = HAL_GetTick();
 8001f66:	f001 fbaf 	bl	80036c8 <HAL_GetTick>
 8001f6a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        // Nếu vừa đổi mode → reset vận tốc ngay
          if (mode_changed_flag) {
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800206c <main+0x2b8>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d022      	beq.n	8001fbe <main+0x20a>
              vel1 = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
              vel2 = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
              prevVel1 = -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
              prevVel2 = -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
              send_velocity_rpdo(1, 0, true, 50000, 250000);
 8001f94:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <main+0x2bc>)
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff fbc7 	bl	8001734 <send_velocity_rpdo>
              send_velocity_rpdo(2, 0, true, 50000, 250000);
 8001fa6:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <main+0x2bc>)
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7ff fbbe 	bl	8001734 <send_velocity_rpdo>
              mode_changed_flag = 0;
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800206c <main+0x2b8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
          }
        static uint32_t lastPS2 = 0;
        static uint32_t last_ps2_update = 0;
        uint32_t last_stop_time = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        (void)last_stop_time; /* Silence unused-variable warning */
        const int32_t jogVel = 100000; //max =180000;
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <main+0x2c0>)
 8001fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if(uart_rx_ready ){
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <main+0x2c4>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <main+0x22a>
        	uart_rx_ready=0;
 8001fd2:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <main+0x2c4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
        	handle_uart_command(uart_rx_buf);
 8001fd8:	4828      	ldr	r0, [pc, #160]	@ (800207c <main+0x2c8>)
 8001fda:	f7fe ffb5 	bl	8000f48 <handle_uart_command>
        }
        // === Gửi SYNC + cập nhật vận tốc định kỳ ===
        if (now - lastSend >= 50) { //ban dau la 50, tần so hoat dong spi tam 20
 8001fde:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b31      	cmp	r3, #49	@ 0x31
 8001fea:	d905      	bls.n	8001ff8 <main+0x244>

        //	set_drive_mode(3,1);  set_drive_mode(3,2);
            lastSend = now;
 8001fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            send_sync_frame();  // Nếu RPDO cần SYNC
 8001ff4:	f7ff fb7c 	bl	80016f0 <send_sync_frame>

        }
        // --- Kiểm tra block/unblock ---
        if (ps2_blocked != last_block_state) {
 8001ff8:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <main+0x2cc>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <main+0x2d0>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d04c      	beq.n	80020a0 <main+0x2ec>
            if (ps2_blocked == 0) {
 8002006:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <main+0x2cc>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13f      	bne.n	8002090 <main+0x2dc>
                // Vừa bỏ block → reset hết cờ
                vel1 = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                vel2 = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                prevVel1 = -1;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
 8002020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                prevVel2 = -1;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                last_ps2_update = HAL_GetTick();
 800202c:	f001 fb4c 	bl	80036c8 <HAL_GetTick>
 8002030:	4603      	mov	r3, r0
 8002032:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <main+0x2d4>)
 8002034:	6013      	str	r3, [r2, #0]
                print_uart("✅ Unblocked → PS2 ready\n");
 8002036:	4815      	ldr	r0, [pc, #84]	@ (800208c <main+0x2d8>)
 8002038:	f7fe ff70 	bl	8000f1c <print_uart>
 800203c:	e02b      	b.n	8002096 <main+0x2e2>
 800203e:	bf00      	nop
 8002040:	200003e8 	.word	0x200003e8
 8002044:	20000200 	.word	0x20000200
 8002048:	40020400 	.word	0x40020400
 800204c:	40021000 	.word	0x40021000
 8002050:	200001fc 	.word	0x200001fc
 8002054:	0800cf04 	.word	0x0800cf04
 8002058:	200001fd 	.word	0x200001fd
 800205c:	0800cf18 	.word	0x0800cf18
 8002060:	200001f8 	.word	0x200001f8
 8002064:	200001f4 	.word	0x200001f4
 8002068:	0800cf2c 	.word	0x0800cf2c
 800206c:	20000598 	.word	0x20000598
 8002070:	0003d090 	.word	0x0003d090
 8002074:	000186a0 	.word	0x000186a0
 8002078:	20000579 	.word	0x20000579
 800207c:	20000538 	.word	0x20000538
 8002080:	20000597 	.word	0x20000597
 8002084:	200005a0 	.word	0x200005a0
 8002088:	200005a4 	.word	0x200005a4
 800208c:	0800cf50 	.word	0x0800cf50
            } else {
                print_uart("⛔ Blocked by sensor\n");
 8002090:	4895      	ldr	r0, [pc, #596]	@ (80022e8 <main+0x534>)
 8002092:	f7fe ff43 	bl	8000f1c <print_uart>
            }
            last_block_state = ps2_blocked;
 8002096:	4b95      	ldr	r3, [pc, #596]	@ (80022ec <main+0x538>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b94      	ldr	r3, [pc, #592]	@ (80022f0 <main+0x53c>)
 800209e:	701a      	strb	r2, [r3, #0]
        }

  static uint8_t ps2_init_ok = 0; // 0 = chưa sẵn sàng, 1 = đã thấy trạng thái không nhấn
  (void)ps2_init_ok; /* Silence unused-variable warning until used */
        if ((current_mode==MODE_PS2) && (now - lastPS2 >= 20)) {
 80020a0:	4b94      	ldr	r3, [pc, #592]	@ (80022f4 <main+0x540>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80e4 	bne.w	8002274 <main+0x4c0>
 80020ac:	4b92      	ldr	r3, [pc, #584]	@ (80022f8 <main+0x544>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b13      	cmp	r3, #19
 80020b8:	f240 80dc 	bls.w	8002274 <main+0x4c0>
            lastPS2 = now;
 80020bc:	4a8e      	ldr	r2, [pc, #568]	@ (80022f8 <main+0x544>)
 80020be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020c2:	6013      	str	r3, [r2, #0]
        // === Đọc tay cầm PS2 ===
        PS2_Data ps2 = PS2_ReadButtons();
 80020c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f929 	bl	8001320 <PS2_ReadButtons>

        //loc nhieu

        bool up_now     = !(ps2.buttons & BTN_UP);
 80020ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf0c      	ite	eq
 80020da:	2301      	moveq	r3, #1
 80020dc:	2300      	movne	r3, #0
 80020de:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        bool down_now   = !(ps2.buttons & BTN_DOWN);
 80020e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
        bool tri_now    = !(ps2.buttons & BTN_TRIANGLE);
 80020f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
        bool cross_now  = !(ps2.buttons & BTN_CROSS);
 800210a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800210e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
        bool right_now  = !(ps2.buttons & BTN_RIGHT);
 800211e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        bool square_now = !(ps2.buttons & BTN_SQUARE);
 8002132:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002136:	b21b      	sxth	r3, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	b29b      	uxth	r3, r3
 800213c:	0bdb      	lsrs	r3, r3, #15
 800213e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        // Debug nút nhấn
        char msg[64];
       // char buf[64];
        snprintf(msg, sizeof(msg),
 8002142:	f897 607b 	ldrb.w	r6, [r7, #123]	@ 0x7b
 8002146:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800214a:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 800214e:	f897 1078 	ldrb.w	r1, [r7, #120]	@ 0x78
 8002152:	f897 0077 	ldrb.w	r0, [r7, #119]	@ 0x77
 8002156:	f897 4076 	ldrb.w	r4, [r7, #118]	@ 0x76
 800215a:	463d      	mov	r5, r7
 800215c:	9404      	str	r4, [sp, #16]
 800215e:	9003      	str	r0, [sp, #12]
 8002160:	9102      	str	r1, [sp, #8]
 8002162:	9201      	str	r2, [sp, #4]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4633      	mov	r3, r6
 8002168:	4a64      	ldr	r2, [pc, #400]	@ (80022fc <main+0x548>)
 800216a:	2140      	movs	r1, #64	@ 0x40
 800216c:	4628      	mov	r0, r5
 800216e:	f008 fb41 	bl	800a7f4 <sniprintf>
            "BTN: UP=%d DW=%d TR=%d CR=%d RI=%d SQ=%d\r\n",
            up_now, down_now, tri_now, cross_now, right_now, square_now);
        print_uart(msg);
 8002172:	463b      	mov	r3, r7
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fed1 	bl	8000f1c <print_uart>

        // === Gán vận tốc theo nút nhấn ===

        if (!ps2_blocked) {
 800217a:	4b5c      	ldr	r3, [pc, #368]	@ (80022ec <main+0x538>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10e      	bne.n	80021a2 <main+0x3ee>
        	if (up_now )         vel1 = -jogVel;
 8002184:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <main+0x3e0>
 800218c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800218e:	425b      	negs	r3, r3
 8002190:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        	 if (tri_now)        vel2 = +jogVel;
 8002194:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <main+0x3ee>
 800219c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800219e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        if (down_now)  vel1 = +jogVel;
 80021a2:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <main+0x3fc>
 80021aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        if (cross_now) vel2 = -jogVel;
 80021b0:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <main+0x40c>
 80021b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021ba:	425b      	negs	r3, r3
 80021bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        if (right_now) {
 80021c0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <main+0x43c>
            vel1 = -0.5 * jogVel;
 80021c8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80021ca:	f7fe f9ab 	bl	8000524 <__aeabi_i2d>
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <main+0x54c>)
 80021d4:	f7fe fa10 	bl	80005f8 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fcba 	bl	8000b58 <__aeabi_d2iz>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            vel2 = +jogVel;
 80021ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        if (square_now) {
 80021f0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d014      	beq.n	8002222 <main+0x46e>
            vel1 = -jogVel;
 80021f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021fa:	425b      	negs	r3, r3
 80021fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            vel2 = +0.5 * jogVel;
 8002200:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002202:	f7fe f98f 	bl	8000524 <__aeabi_i2d>
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	4b3e      	ldr	r3, [pc, #248]	@ (8002304 <main+0x550>)
 800220c:	f7fe f9f4 	bl	80005f8 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fc9e 	bl	8000b58 <__aeabi_d2iz>
 800221c:	4603      	mov	r3, r0
 800221e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }


        // Nếu dữ liệu thay đổi → cập nhật thời gian cuối nhận PS2
        if (ps2.buttons != 0xFF) {
 8002222:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002226:	2bff      	cmp	r3, #255	@ 0xff
 8002228:	d003      	beq.n	8002232 <main+0x47e>
            last_ps2_update = now;
 800222a:	4a37      	ldr	r2, [pc, #220]	@ (8002308 <main+0x554>)
 800222c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002230:	6013      	str	r3, [r2, #0]
        }
       // }
        if (now - last_ps2_update > 500) {
 8002232:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <main+0x554>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002240:	d918      	bls.n	8002274 <main+0x4c0>
            if (vel1 != 0 || vel2 != 0) {
 8002242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <main+0x49e>
 800224a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800224e:	2b00      	cmp	r3, #0
 8002250:	d010      	beq.n	8002274 <main+0x4c0>
                print_uart("❌ PS2 timeout, reset động cơ\r\n");
 8002252:	482e      	ldr	r0, [pc, #184]	@ (800230c <main+0x558>)
 8002254:	f7fe fe62 	bl	8000f1c <print_uart>
                vel1 = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                vel2 = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                // ✅ Gán giá trị khác để buộc gửi RPDO lại
                        prevVel1 = -1;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                        prevVel2 = -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
 8002270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

             	 }
        	}
        }
        if (current_mode == MODE_AUTO) {
 8002274:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <main+0x540>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d17e      	bne.n	800237c <main+0x5c8>
            static uint32_t lastSendAuto = 0;
            uint32_t now = HAL_GetTick();
 800227e:	f001 fa23 	bl	80036c8 <HAL_GetTick>
 8002282:	6738      	str	r0, [r7, #112]	@ 0x70

            // Cập nhật giá trị mới cho từng bánh nếu có gói mới
            if (ready1) {
 8002284:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <main+0x55c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d019      	beq.n	80022c2 <main+0x50e>
                vel1 = up_vel1;
 800228e:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <main+0x560>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                if (vel1 > jogVel) vel1 = jogVel;
 8002296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800229a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800229c:	429a      	cmp	r2, r3
 800229e:	dd03      	ble.n	80022a8 <main+0x4f4>
 80022a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022a6:	e009      	b.n	80022bc <main+0x508>
                else if (vel1 < -jogVel) vel1 = -jogVel;
 80022a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022aa:	425b      	negs	r3, r3
 80022ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022b0:	429a      	cmp	r2, r3
 80022b2:	da03      	bge.n	80022bc <main+0x508>
 80022b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022b6:	425b      	negs	r3, r3
 80022b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
               // last_upvel1_time = now;
                ready1 = 0;
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <main+0x55c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
            }
            if (ready2) {
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <main+0x564>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d036      	beq.n	800233a <main+0x586>
                vel2 = up_vel2;
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <main+0x568>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                if (vel2 > jogVel) vel2 = jogVel;
 80022d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80022d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022da:	429a      	cmp	r2, r3
 80022dc:	dd20      	ble.n	8002320 <main+0x56c>
 80022de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022e4:	e026      	b.n	8002334 <main+0x580>
 80022e6:	bf00      	nop
 80022e8:	0800cf70 	.word	0x0800cf70
 80022ec:	20000597 	.word	0x20000597
 80022f0:	200005a0 	.word	0x200005a0
 80022f4:	20000508 	.word	0x20000508
 80022f8:	200005a8 	.word	0x200005a8
 80022fc:	0800cf88 	.word	0x0800cf88
 8002300:	bfe00000 	.word	0xbfe00000
 8002304:	3fe00000 	.word	0x3fe00000
 8002308:	200005a4 	.word	0x200005a4
 800230c:	0800cfb4 	.word	0x0800cfb4
 8002310:	20000590 	.word	0x20000590
 8002314:	20000580 	.word	0x20000580
 8002318:	20000591 	.word	0x20000591
 800231c:	20000584 	.word	0x20000584
                else if (vel2 < -jogVel) vel2 = -jogVel;
 8002320:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002322:	425b      	negs	r3, r3
 8002324:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002328:	429a      	cmp	r2, r3
 800232a:	da03      	bge.n	8002334 <main+0x580>
 800232c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800232e:	425b      	negs	r3, r3
 8002330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
              //  last_upvel2_time = now;
                ready2 = 0;
 8002334:	4b3a      	ldr	r3, [pc, #232]	@ (8002420 <main+0x66c>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
            }

            // Gửi RPDO định kỳ (50 ms)
            if (now - lastSendAuto >= 10) {
 800233a:	4b3a      	ldr	r3, [pc, #232]	@ (8002424 <main+0x670>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b09      	cmp	r3, #9
 8002344:	d91a      	bls.n	800237c <main+0x5c8>
             //   lastSendAuto = now;
            	lastSendAuto += 50;  // giữ nhịp đều
 8002346:	4b37      	ldr	r3, [pc, #220]	@ (8002424 <main+0x670>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3332      	adds	r3, #50	@ 0x32
 800234c:	4a35      	ldr	r2, [pc, #212]	@ (8002424 <main+0x670>)
 800234e:	6013      	str	r3, [r2, #0]
                send_velocity_rpdo(1, vel1, false, 50000, 250000);
 8002350:	4b35      	ldr	r3, [pc, #212]	@ (8002428 <main+0x674>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002358:	2200      	movs	r2, #0
 800235a:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800235e:	2001      	movs	r0, #1
 8002360:	f7ff f9e8 	bl	8001734 <send_velocity_rpdo>
                send_velocity_rpdo(2, vel2, false, 50000, 250000);
 8002364:	4b30      	ldr	r3, [pc, #192]	@ (8002428 <main+0x674>)
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800236c:	2200      	movs	r2, #0
 800236e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002372:	2002      	movs	r0, #2
 8002374:	f7ff f9de 	bl	8001734 <send_velocity_rpdo>
                send_sync_frame();
 8002378:	f7ff f9ba 	bl	80016f0 <send_sync_frame>
            }
        }
        // === Gửi RPDO nếu vận tốc thay đổi ===
        if (vel1 != prevVel1) {
 800237c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002380:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002384:	429a      	cmp	r2, r3
 8002386:	d012      	beq.n	80023ae <main+0x5fa>
            send_velocity_rpdo(1, vel1, true, 50000, 250000); // node 1
 8002388:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <main+0x674>)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002390:	2201      	movs	r2, #1
 8002392:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff f9cc 	bl	8001734 <send_velocity_rpdo>
            count_rpdo1++;
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <main+0x678>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4a22      	ldr	r2, [pc, #136]	@ (800242c <main+0x678>)
 80023a4:	6013      	str	r3, [r2, #0]
            prevVel1 = vel1;
 80023a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        }

        if (vel2 != prevVel2) {
 80023ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d012      	beq.n	80023e0 <main+0x62c>
            send_velocity_rpdo(2, vel2, true, 50000, 250000); // node 2
 80023ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <main+0x674>)
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f24c 3350 	movw	r3, #50000	@ 0xc350
 80023c2:	2201      	movs	r2, #1
 80023c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80023c8:	2002      	movs	r0, #2
 80023ca:	f7ff f9b3 	bl	8001734 <send_velocity_rpdo>
            count_rpdo2++;
 80023ce:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <main+0x67c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a16      	ldr	r2, [pc, #88]	@ (8002430 <main+0x67c>)
 80023d6:	6013      	str	r3, [r2, #0]
            prevVel2 = vel2;
 80023d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        }
        // === Đọc tốc độ thực tế mỗi 200ms ===
        if (now - lastPrint >= 200) { // cứ 100ms gửi vận tốc lên 1 làn
 80023e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80023e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80023ec:	f67f ad66 	bls.w	8001ebc <main+0x108>
            lastPrint = now;
 80023f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
          request_actual_velocity(1);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7ff fc97 	bl	8001d2c <request_actual_velocity>
          request_actual_velocity(2);
 80023fe:	2002      	movs	r0, #2
 8002400:	f7ff fc94 	bl	8001d2c <request_actual_velocity>
          count_request_vel++;
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <main+0x680>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <main+0x680>)
 800240c:	6013      	str	r3, [r2, #0]
          send_vel_can(currentVel1, currentVel2);
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <main+0x684>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <main+0x688>)
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fc33 	bl	8001c84 <send_vel_can>
    while (1) {
 800241e:	e54d      	b.n	8001ebc <main+0x108>
 8002420:	20000591 	.word	0x20000591
 8002424:	200005ac 	.word	0x200005ac
 8002428:	0003d090 	.word	0x0003d090
 800242c:	20000510 	.word	0x20000510
 8002430:	20000514 	.word	0x20000514
 8002434:	20000518 	.word	0x20000518
 8002438:	20000588 	.word	0x20000588
 800243c:	2000058c 	.word	0x2000058c

08002440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b094      	sub	sp, #80	@ 0x50
 8002444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002446:	f107 0320 	add.w	r3, r7, #32
 800244a:	2230      	movs	r2, #48	@ 0x30
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f008 fa49 	bl	800a8e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <SystemClock_Config+0xcc>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	4a27      	ldr	r2, [pc, #156]	@ (800250c <SystemClock_Config+0xcc>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	@ 0x40
 8002474:	4b25      	ldr	r3, [pc, #148]	@ (800250c <SystemClock_Config+0xcc>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002480:	2300      	movs	r3, #0
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <SystemClock_Config+0xd0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a21      	ldr	r2, [pc, #132]	@ (8002510 <SystemClock_Config+0xd0>)
 800248a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <SystemClock_Config+0xd0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800249c:	2301      	movs	r3, #1
 800249e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a6:	2302      	movs	r3, #2
 80024a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024b0:	2304      	movs	r3, #4
 80024b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024b4:	23a8      	movs	r3, #168	@ 0xa8
 80024b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024b8:	2302      	movs	r3, #2
 80024ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024bc:	2307      	movs	r3, #7
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fe65 	bl	8007194 <HAL_RCC_OscConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024d0:	f000 fb86 	bl	8002be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d4:	230f      	movs	r3, #15
 80024d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d8:	2302      	movs	r3, #2
 80024da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2105      	movs	r1, #5
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 f8c6 	bl	8007684 <HAL_RCC_ClockConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024fe:	f000 fb6f 	bl	8002be0 <Error_Handler>
  }
}
 8002502:	bf00      	nop
 8002504:	3750      	adds	r7, #80	@ 0x50
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000

08002514 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <MX_CAN2_Init+0x64>)
 800251a:	4a18      	ldr	r2, [pc, #96]	@ (800257c <MX_CAN2_Init+0x68>)
 800251c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002520:	2203      	movs	r2, #3
 8002522:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800252a:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <MX_CAN2_Init+0x64>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002532:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8002536:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002538:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <MX_CAN2_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002546:	2201      	movs	r2, #1
 8002548:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <MX_CAN2_Init+0x64>)
 800254c:	2201      	movs	r2, #1
 800254e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8002550:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002552:	2201      	movs	r2, #1
 8002554:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <MX_CAN2_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	@ (8002578 <MX_CAN2_Init+0x64>)
 8002564:	f001 f8e0 	bl	8003728 <HAL_CAN_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800256e:	f000 fb37 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000200 	.word	0x20000200
 800257c:	40006800 	.word	0x40006800

08002580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <MX_I2C1_Init+0x50>)
 8002586:	4a13      	ldr	r2, [pc, #76]	@ (80025d4 <MX_I2C1_Init+0x54>)
 8002588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800258a:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <MX_I2C1_Init+0x50>)
 800258c:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <MX_I2C1_Init+0x58>)
 800258e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002590:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <MX_I2C1_Init+0x50>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002596:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <MX_I2C1_Init+0x50>)
 8002598:	2200      	movs	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800259c:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <MX_I2C1_Init+0x50>)
 800259e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <MX_I2C1_Init+0x50>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025aa:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <MX_I2C1_Init+0x50>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025b0:	4b07      	ldr	r3, [pc, #28]	@ (80025d0 <MX_I2C1_Init+0x50>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <MX_I2C1_Init+0x50>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025bc:	4804      	ldr	r0, [pc, #16]	@ (80025d0 <MX_I2C1_Init+0x50>)
 80025be:	f002 ff97 	bl	80054f0 <HAL_I2C_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025c8:	f000 fb0a 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000228 	.word	0x20000228
 80025d4:	40005400 	.word	0x40005400
 80025d8:	000186a0 	.word	0x000186a0

080025dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025e0:	4b12      	ldr	r3, [pc, #72]	@ (800262c <MX_I2C3_Init+0x50>)
 80025e2:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <MX_I2C3_Init+0x54>)
 80025e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <MX_I2C3_Init+0x50>)
 80025e8:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <MX_I2C3_Init+0x58>)
 80025ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <MX_I2C3_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <MX_I2C3_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <MX_I2C3_Init+0x50>)
 80025fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <MX_I2C3_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <MX_I2C3_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <MX_I2C3_Init+0x50>)
 800260e:	2240      	movs	r2, #64	@ 0x40
 8002610:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <MX_I2C3_Init+0x50>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <MX_I2C3_Init+0x50>)
 800261a:	f002 ff69 	bl	80054f0 <HAL_I2C_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002624:	f000 fadc 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000027c 	.word	0x2000027c
 8002630:	40005c00 	.word	0x40005c00
 8002634:	000186a0 	.word	0x000186a0

08002638 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800263c:	4b17      	ldr	r3, [pc, #92]	@ (800269c <MX_SPI1_Init+0x64>)
 800263e:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <MX_SPI1_Init+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <MX_SPI1_Init+0x64>)
 8002644:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <MX_SPI1_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <MX_SPI1_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_SPI1_Init+0x64>)
 8002658:	2202      	movs	r2, #2
 800265a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_SPI1_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_SPI1_Init+0x64>)
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800266a:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_SPI1_Init+0x64>)
 800266c:	2238      	movs	r2, #56	@ 0x38
 800266e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <MX_SPI1_Init+0x64>)
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_SPI1_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	@ (800269c <MX_SPI1_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_SPI1_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	@ (800269c <MX_SPI1_Init+0x64>)
 800268a:	f005 fa1b 	bl	8007ac4 <HAL_SPI_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002694:	f000 faa4 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000390 	.word	0x20000390
 80026a0:	40013000 	.word	0x40013000

080026a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	463b      	mov	r3, r7
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <MX_TIM1_Init+0x98>)
 80026c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <MX_TIM1_Init+0x9c>)
 80026c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <MX_TIM1_Init+0x98>)
 80026c8:	22a7      	movs	r2, #167	@ 0xa7
 80026ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <MX_TIM1_Init+0x98>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <MX_TIM1_Init+0x98>)
 80026d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <MX_TIM1_Init+0x98>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <MX_TIM1_Init+0x98>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <MX_TIM1_Init+0x98>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026ec:	4813      	ldr	r0, [pc, #76]	@ (800273c <MX_TIM1_Init+0x98>)
 80026ee:	f005 fe15 	bl	800831c <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80026f8:	f000 fa72 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	4619      	mov	r1, r3
 8002708:	480c      	ldr	r0, [pc, #48]	@ (800273c <MX_TIM1_Init+0x98>)
 800270a:	f006 f826 	bl	800875a <HAL_TIM_ConfigClockSource>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002714:	f000 fa64 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	@ (800273c <MX_TIM1_Init+0x98>)
 8002726:	f006 fa51 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002730:	f000 fa56 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200003e8 	.word	0x200003e8
 8002740:	40010000 	.word	0x40010000

08002744 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274a:	463b      	mov	r3, r7
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002752:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <MX_TIM8_Init+0x70>)
 8002754:	4a18      	ldr	r2, [pc, #96]	@ (80027b8 <MX_TIM8_Init+0x74>)
 8002756:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002758:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <MX_TIM8_Init+0x70>)
 800275a:	2253      	movs	r2, #83	@ 0x53
 800275c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <MX_TIM8_Init+0x70>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <MX_TIM8_Init+0x70>)
 8002766:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800276a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <MX_TIM8_Init+0x70>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <MX_TIM8_Init+0x70>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <MX_TIM8_Init+0x70>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 800277e:	2108      	movs	r1, #8
 8002780:	480c      	ldr	r0, [pc, #48]	@ (80027b4 <MX_TIM8_Init+0x70>)
 8002782:	f005 feaa 	bl	80084da <HAL_TIM_OnePulse_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 800278c:	f000 fa28 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002798:	463b      	mov	r3, r7
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <MX_TIM8_Init+0x70>)
 800279e:	f006 fa15 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80027a8:	f000 fa1a 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000430 	.word	0x20000430
 80027b8:	40010400 	.word	0x40010400

080027bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80027c0:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <MX_TIM14_Init+0x40>)
 80027c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002800 <MX_TIM14_Init+0x44>)
 80027c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <MX_TIM14_Init+0x40>)
 80027c8:	2253      	movs	r2, #83	@ 0x53
 80027ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <MX_TIM14_Init+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <MX_TIM14_Init+0x40>)
 80027d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027d8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027da:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <MX_TIM14_Init+0x40>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <MX_TIM14_Init+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	@ (80027fc <MX_TIM14_Init+0x40>)
 80027e8:	f005 fd98 	bl	800831c <HAL_TIM_Base_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80027f2:	f000 f9f5 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000478 	.word	0x20000478
 8002800:	40002000 	.word	0x40002000

08002804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <MX_USART2_UART_Init+0x64>)
 800280c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 8002810:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800283a:	480a      	ldr	r0, [pc, #40]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 800283c:	f006 fa56 	bl	8008cec <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002846:	f000 f9cb 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&uart_rx_buf[uart_rx_index], 1);
 800284a:	4b08      	ldr	r3, [pc, #32]	@ (800286c <MX_USART2_UART_Init+0x68>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <MX_USART2_UART_Init+0x6c>)
 8002854:	4413      	add	r3, r2
 8002856:	2201      	movs	r2, #1
 8002858:	4619      	mov	r1, r3
 800285a:	4802      	ldr	r0, [pc, #8]	@ (8002864 <MX_USART2_UART_Init+0x60>)
 800285c:	f006 fb21 	bl	8008ea2 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200004c0 	.word	0x200004c0
 8002868:	40004400 	.word	0x40004400
 800286c:	20000578 	.word	0x20000578
 8002870:	20000538 	.word	0x20000538

08002874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <MX_DMA_Init+0x4c>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <MX_DMA_Init+0x4c>)
 8002884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <MX_DMA_Init+0x4c>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	200d      	movs	r0, #13
 800289c:	f001 ff83 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80028a0:	200d      	movs	r0, #13
 80028a2:	f001 ff9c 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	200f      	movs	r0, #15
 80028ac:	f001 ff7b 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80028b0:	200f      	movs	r0, #15
 80028b2:	f001 ff94 	bl	80047de <HAL_NVIC_EnableIRQ>

}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	@ 0x30
 80028c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	4bb7      	ldr	r3, [pc, #732]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4ab6      	ldr	r2, [pc, #728]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4bb4      	ldr	r3, [pc, #720]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4bb0      	ldr	r3, [pc, #704]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4aaf      	ldr	r2, [pc, #700]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4bad      	ldr	r3, [pc, #692]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4ba9      	ldr	r3, [pc, #676]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4aa8      	ldr	r2, [pc, #672]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 800291c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4ba6      	ldr	r3, [pc, #664]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4ba2      	ldr	r3, [pc, #648]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4aa1      	ldr	r2, [pc, #644]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b9f      	ldr	r3, [pc, #636]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b9b      	ldr	r3, [pc, #620]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a9a      	ldr	r2, [pc, #616]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b98      	ldr	r3, [pc, #608]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b94      	ldr	r3, [pc, #592]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a93      	ldr	r2, [pc, #588]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b91      	ldr	r3, [pc, #580]	@ (8002bbc <MX_GPIO_Init+0x2f8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	2188      	movs	r1, #136	@ 0x88
 8002986:	488e      	ldr	r0, [pc, #568]	@ (8002bc0 <MX_GPIO_Init+0x2fc>)
 8002988:	f002 fd74 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800298c:	2201      	movs	r2, #1
 800298e:	2101      	movs	r1, #1
 8002990:	488c      	ldr	r0, [pc, #560]	@ (8002bc4 <MX_GPIO_Init+0x300>)
 8002992:	f002 fd6f 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800299c:	488a      	ldr	r0, [pc, #552]	@ (8002bc8 <MX_GPIO_Init+0x304>)
 800299e:	f002 fd69 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80029a2:	2200      	movs	r2, #0
 80029a4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80029a8:	4888      	ldr	r0, [pc, #544]	@ (8002bcc <MX_GPIO_Init+0x308>)
 80029aa:	f002 fd63 	bl	8005474 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80029ae:	2308      	movs	r3, #8
 80029b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b2:	2301      	movs	r3, #1
 80029b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	487e      	ldr	r0, [pc, #504]	@ (8002bc0 <MX_GPIO_Init+0x2fc>)
 80029c6:	f002 fabd 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	4619      	mov	r1, r3
 80029e0:	4878      	ldr	r0, [pc, #480]	@ (8002bc4 <MX_GPIO_Init+0x300>)
 80029e2:	f002 faaf 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80029e6:	2308      	movs	r3, #8
 80029e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029f6:	2305      	movs	r3, #5
 80029f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	4870      	ldr	r0, [pc, #448]	@ (8002bc4 <MX_GPIO_Init+0x300>)
 8002a02:	f002 fa9f 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	486d      	ldr	r0, [pc, #436]	@ (8002bd0 <MX_GPIO_Init+0x30c>)
 8002a1c:	f002 fa92 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002a20:	2310      	movs	r3, #16
 8002a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a30:	2306      	movs	r3, #6
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4865      	ldr	r0, [pc, #404]	@ (8002bd0 <MX_GPIO_Init+0x30c>)
 8002a3c:	f002 fa82 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a40:	2304      	movs	r3, #4
 8002a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	485d      	ldr	r0, [pc, #372]	@ (8002bc8 <MX_GPIO_Init+0x304>)
 8002a54:	f002 fa76 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a60:	2302      	movs	r3, #2
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4854      	ldr	r0, [pc, #336]	@ (8002bc0 <MX_GPIO_Init+0x2fc>)
 8002a70:	f002 fa68 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a86:	2305      	movs	r3, #5
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	484d      	ldr	r0, [pc, #308]	@ (8002bc8 <MX_GPIO_Init+0x304>)
 8002a92:	f002 fa57 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	4846      	ldr	r0, [pc, #280]	@ (8002bc8 <MX_GPIO_Init+0x304>)
 8002ab0:	f002 fa48 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002ab4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002ab8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac6:	f107 031c 	add.w	r3, r7, #28
 8002aca:	4619      	mov	r1, r3
 8002acc:	483f      	ldr	r0, [pc, #252]	@ (8002bcc <MX_GPIO_Init+0x308>)
 8002ace:	f002 fa39 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002ad2:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ae4:	2306      	movs	r3, #6
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4619      	mov	r1, r3
 8002aee:	4835      	ldr	r0, [pc, #212]	@ (8002bc4 <MX_GPIO_Init+0x300>)
 8002af0:	f002 fa28 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002af4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	4619      	mov	r1, r3
 8002b08:	4831      	ldr	r0, [pc, #196]	@ (8002bd0 <MX_GPIO_Init+0x30c>)
 8002b0a:	f002 fa1b 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002b0e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b20:	230a      	movs	r3, #10
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4829      	ldr	r0, [pc, #164]	@ (8002bd0 <MX_GPIO_Init+0x30c>)
 8002b2c:	f002 fa0a 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b30:	2301      	movs	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b40:	2309      	movs	r3, #9
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4820      	ldr	r0, [pc, #128]	@ (8002bcc <MX_GPIO_Init+0x308>)
 8002b4c:	f002 f9fa 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002b50:	2320      	movs	r3, #32
 8002b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4619      	mov	r1, r3
 8002b62:	481a      	ldr	r0, [pc, #104]	@ (8002bcc <MX_GPIO_Init+0x308>)
 8002b64:	f002 f9ee 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b6c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4810      	ldr	r0, [pc, #64]	@ (8002bc0 <MX_GPIO_Init+0x2fc>)
 8002b7e:	f002 f9e1 	bl	8004f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	2006      	movs	r0, #6
 8002b88:	f001 fe0d 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b8c:	2006      	movs	r0, #6
 8002b8e:	f001 fe26 	bl	80047de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Bật ngắt EXTI cho PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // hoặc RISING, tùy vào mạch
 8002b96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480a      	ldr	r0, [pc, #40]	@ (8002bd0 <MX_GPIO_Init+0x30c>)
 8002ba8:	f002 f9cc 	bl	8004f44 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2006      	movs	r0, #6
 8002bb2:	f001 fdf8 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bb6:	2006      	movs	r0, #6
 8002bb8:	e00c      	b.n	8002bd4 <MX_GPIO_Init+0x310>
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	f001 fe03 	bl	80047de <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002bd8:	bf00      	nop
 8002bda:	3730      	adds	r7, #48	@ 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be4:	b672      	cpsid	i
}
 8002be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <Error_Handler+0x8>

08002bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	@ 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a38      	ldr	r2, [pc, #224]	@ (8002d3c <HAL_CAN_MspInit+0x100>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d16a      	bne.n	8002d34 <HAL_CAN_MspInit+0xf8>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b37      	ldr	r3, [pc, #220]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	4a36      	ldr	r2, [pc, #216]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002c68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6e:	4b34      	ldr	r3, [pc, #208]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b30      	ldr	r3, [pc, #192]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a2f      	ldr	r2, [pc, #188]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002c84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a28      	ldr	r2, [pc, #160]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <HAL_CAN_MspInit+0x104>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB13     ------> CAN2_TX
    PB5     ------> CAN2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002cc4:	2309      	movs	r3, #9
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	4619      	mov	r1, r3
 8002cce:	481d      	ldr	r0, [pc, #116]	@ (8002d44 <HAL_CAN_MspInit+0x108>)
 8002cd0:	f002 f938 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002ce4:	2309      	movs	r3, #9
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	4815      	ldr	r0, [pc, #84]	@ (8002d44 <HAL_CAN_MspInit+0x108>)
 8002cf0:	f002 f928 	bl	8004f44 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	203f      	movs	r0, #63	@ 0x3f
 8002cfa:	f001 fd54 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002cfe:	203f      	movs	r0, #63	@ 0x3f
 8002d00:	f001 fd6d 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 1, 0);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2101      	movs	r1, #1
 8002d08:	2040      	movs	r0, #64	@ 0x40
 8002d0a:	f001 fd4c 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002d0e:	2040      	movs	r0, #64	@ 0x40
 8002d10:	f001 fd65 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 1, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2101      	movs	r1, #1
 8002d18:	2041      	movs	r0, #65	@ 0x41
 8002d1a:	f001 fd44 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002d1e:	2041      	movs	r0, #65	@ 0x41
 8002d20:	f001 fd5d 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2042      	movs	r0, #66	@ 0x42
 8002d2a:	f001 fd3c 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8002d2e:	2042      	movs	r0, #66	@ 0x42
 8002d30:	f001 fd55 	bl	80047de <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	@ 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40006800 	.word	0x40006800
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020400 	.word	0x40020400

08002d48 <HAL_CAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_CAN_MspDeInit+0x54>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d11c      	bne.n	8002d94 <HAL_CAN_MspDeInit+0x4c>
  {
    /* USER CODE BEGIN CAN2_MspDeInit 0 */

    /* USER CODE END CAN2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN2_CLK_DISABLE();
 8002d5a:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <HAL_CAN_MspDeInit+0x58>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	4a10      	ldr	r2, [pc, #64]	@ (8002da0 <HAL_CAN_MspDeInit+0x58>)
 8002d60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d64:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RCC_CAN1_CLK_DISABLE();
 8002d66:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <HAL_CAN_MspDeInit+0x58>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <HAL_CAN_MspDeInit+0x58>)
 8002d6c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002d70:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN2 GPIO Configuration
    PB13     ------> CAN2_TX
    PB5     ------> CAN2_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_5);
 8002d72:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002d76:	480b      	ldr	r0, [pc, #44]	@ (8002da4 <HAL_CAN_MspDeInit+0x5c>)
 8002d78:	f002 fa80 	bl	800527c <HAL_GPIO_DeInit>

    /* CAN2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN2_TX_IRQn);
 8002d7c:	203f      	movs	r0, #63	@ 0x3f
 8002d7e:	f001 fd3c 	bl	80047fa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 8002d82:	2040      	movs	r0, #64	@ 0x40
 8002d84:	f001 fd39 	bl	80047fa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 8002d88:	2041      	movs	r0, #65	@ 0x41
 8002d8a:	f001 fd36 	bl	80047fa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_SCE_IRQn);
 8002d8e:	2042      	movs	r0, #66	@ 0x42
 8002d90:	f001 fd33 	bl	80047fa <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN CAN2_MspDeInit 1 */

    /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40006800 	.word	0x40006800
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020400 	.word	0x40020400

08002da8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	@ 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a79      	ldr	r2, [pc, #484]	@ (8002fac <HAL_I2C_MspInit+0x204>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d12d      	bne.n	8002e26 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	4b78      	ldr	r3, [pc, #480]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a77      	ldr	r2, [pc, #476]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b75      	ldr	r3, [pc, #468]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002de6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dec:	2312      	movs	r3, #18
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df0:	2301      	movs	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	486c      	ldr	r0, [pc, #432]	@ (8002fb4 <HAL_I2C_MspInit+0x20c>)
 8002e04:	f002 f89e 	bl	8004f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	4b68      	ldr	r3, [pc, #416]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	4a67      	ldr	r2, [pc, #412]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e18:	4b65      	ldr	r3, [pc, #404]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e24:	e0bd      	b.n	8002fa2 <HAL_I2C_MspInit+0x1fa>
  else if(hi2c->Instance==I2C3)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a63      	ldr	r2, [pc, #396]	@ (8002fb8 <HAL_I2C_MspInit+0x210>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f040 80b8 	bne.w	8002fa2 <HAL_I2C_MspInit+0x1fa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	4b5e      	ldr	r3, [pc, #376]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e42:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b57      	ldr	r3, [pc, #348]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	4a56      	ldr	r2, [pc, #344]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e5e:	4b54      	ldr	r3, [pc, #336]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e70:	2312      	movs	r3, #18
 8002e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	484d      	ldr	r0, [pc, #308]	@ (8002fbc <HAL_I2C_MspInit+0x214>)
 8002e88:	f002 f85c 	bl	8004f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e92:	2312      	movs	r3, #18
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	f107 031c 	add.w	r3, r7, #28
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4845      	ldr	r0, [pc, #276]	@ (8002fc0 <HAL_I2C_MspInit+0x218>)
 8002eaa:	f002 f84b 	bl	8004f44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002eb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <HAL_I2C_MspInit+0x208>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc8 <HAL_I2C_MspInit+0x220>)
 8002ece:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002ed2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002ed6:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ede:	4b39      	ldr	r3, [pc, #228]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee4:	4b37      	ldr	r3, [pc, #220]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002ee6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eea:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eec:	4b35      	ldr	r3, [pc, #212]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef2:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002ef8:	4b32      	ldr	r3, [pc, #200]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002efe:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f04:	4b2f      	ldr	r3, [pc, #188]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002f0a:	482e      	ldr	r0, [pc, #184]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002f0c:	f001 fc90 	bl	8004830 <HAL_DMA_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_MspInit+0x172>
      Error_Handler();
 8002f16:	f7ff fe63 	bl	8002be0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a29      	ldr	r2, [pc, #164]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f20:	4a28      	ldr	r2, [pc, #160]	@ (8002fc4 <HAL_I2C_MspInit+0x21c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002f26:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f28:	4a29      	ldr	r2, [pc, #164]	@ (8002fd0 <HAL_I2C_MspInit+0x228>)
 8002f2a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8002f2c:	4b27      	ldr	r3, [pc, #156]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f2e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002f32:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f34:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3a:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f40:	4b22      	ldr	r3, [pc, #136]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f46:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f48:	4b20      	ldr	r3, [pc, #128]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002f66:	4819      	ldr	r0, [pc, #100]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f68:	f001 fc62 	bl	8004830 <HAL_DMA_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_MspInit+0x1ce>
      Error_Handler();
 8002f72:	f7ff fe35 	bl	8002be0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f7c:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <HAL_I2C_MspInit+0x224>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	2048      	movs	r0, #72	@ 0x48
 8002f88:	f001 fc0d 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002f8c:	2048      	movs	r0, #72	@ 0x48
 8002f8e:	f001 fc26 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2049      	movs	r0, #73	@ 0x49
 8002f98:	f001 fc05 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002f9c:	2049      	movs	r0, #73	@ 0x49
 8002f9e:	f001 fc1e 	bl	80047de <HAL_NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3730      	adds	r7, #48	@ 0x30
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40005400 	.word	0x40005400
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40005c00 	.word	0x40005c00
 8002fbc:	40020800 	.word	0x40020800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	200002d0 	.word	0x200002d0
 8002fc8:	40026040 	.word	0x40026040
 8002fcc:	20000330 	.word	0x20000330
 8002fd0:	40026070 	.word	0x40026070

08002fd4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <HAL_SPI_MspInit+0x94>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d133      	bne.n	800305e <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800306c <HAL_SPI_MspInit+0x98>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800306c <HAL_SPI_MspInit+0x98>)
 8003000:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003004:	6453      	str	r3, [r2, #68]	@ 0x44
 8003006:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_SPI_MspInit+0x98>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <HAL_SPI_MspInit+0x98>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	4a14      	ldr	r2, [pc, #80]	@ (800306c <HAL_SPI_MspInit+0x98>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6313      	str	r3, [r2, #48]	@ 0x30
 8003022:	4b12      	ldr	r3, [pc, #72]	@ (800306c <HAL_SPI_MspInit+0x98>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800302e:	23e0      	movs	r3, #224	@ 0xe0
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800303e:	2305      	movs	r3, #5
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	4619      	mov	r1, r3
 8003048:	4809      	ldr	r0, [pc, #36]	@ (8003070 <HAL_SPI_MspInit+0x9c>)
 800304a:	f001 ff7b 	bl	8004f44 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	2023      	movs	r0, #35	@ 0x23
 8003054:	f001 fba7 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003058:	2023      	movs	r0, #35	@ 0x23
 800305a:	f001 fbc0 	bl	80047de <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800305e:	bf00      	nop
 8003060:	3728      	adds	r7, #40	@ 0x28
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40013000 	.word	0x40013000
 800306c:	40023800 	.word	0x40023800
 8003070:	40020000 	.word	0x40020000

08003074 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a24      	ldr	r2, [pc, #144]	@ (8003114 <HAL_TIM_Base_MspInit+0xa0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d12e      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <HAL_TIM_Base_MspInit+0xa4>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	4a22      	ldr	r2, [pc, #136]	@ (8003118 <HAL_TIM_Base_MspInit+0xa4>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6453      	str	r3, [r2, #68]	@ 0x44
 8003096:	4b20      	ldr	r3, [pc, #128]	@ (8003118 <HAL_TIM_Base_MspInit+0xa4>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2018      	movs	r0, #24
 80030a8:	f001 fb7d 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80030ac:	2018      	movs	r0, #24
 80030ae:	f001 fb96 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	2019      	movs	r0, #25
 80030b8:	f001 fb75 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030bc:	2019      	movs	r0, #25
 80030be:	f001 fb8e 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	201a      	movs	r0, #26
 80030c8:	f001 fb6d 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80030cc:	201a      	movs	r0, #26
 80030ce:	f001 fb86 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	201b      	movs	r0, #27
 80030d8:	f001 fb65 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80030dc:	201b      	movs	r0, #27
 80030de:	f001 fb7e 	bl	80047de <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 80030e2:	e012      	b.n	800310a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0c      	ldr	r2, [pc, #48]	@ (800311c <HAL_TIM_Base_MspInit+0xa8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10d      	bne.n	800310a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <HAL_TIM_Base_MspInit+0xa4>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	4a08      	ldr	r2, [pc, #32]	@ (8003118 <HAL_TIM_Base_MspInit+0xa4>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fe:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <HAL_TIM_Base_MspInit+0xa4>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40023800 	.word	0x40023800
 800311c:	40002000 	.word	0x40002000

08003120 <HAL_TIM_OnePulse_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_onepulse: TIM_OnePulse handle pointer
  * @retval None
  */
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	@ 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(htim_onepulse->Instance==TIM8)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1d      	ldr	r2, [pc, #116]	@ (80031b4 <HAL_TIM_OnePulse_MspInit+0x94>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d133      	bne.n	80031aa <HAL_TIM_OnePulse_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	4b1c      	ldr	r3, [pc, #112]	@ (80031b8 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <HAL_TIM_OnePulse_MspInit+0x98>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6453      	str	r3, [r2, #68]	@ 0x44
 8003152:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800317a:	2340      	movs	r3, #64	@ 0x40
 800317c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800318a:	2303      	movs	r3, #3
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	4619      	mov	r1, r3
 8003194:	4809      	ldr	r0, [pc, #36]	@ (80031bc <HAL_TIM_OnePulse_MspInit+0x9c>)
 8003196:	f001 fed5 	bl	8004f44 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	202e      	movs	r0, #46	@ 0x2e
 80031a0:	f001 fb01 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80031a4:	202e      	movs	r0, #46	@ 0x2e
 80031a6:	f001 fb1a 	bl	80047de <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	@ 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40010400 	.word	0x40010400
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020800 	.word	0x40020800

080031c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003254 <HAL_UART_MspInit+0x94>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d133      	bne.n	800324a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_UART_MspInit+0x98>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003258 <HAL_UART_MspInit+0x98>)
 80031ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031f2:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <HAL_UART_MspInit+0x98>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <HAL_UART_MspInit+0x98>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <HAL_UART_MspInit+0x98>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <HAL_UART_MspInit+0x98>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800321a:	230c      	movs	r3, #12
 800321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800322a:	2307      	movs	r3, #7
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4809      	ldr	r0, [pc, #36]	@ (800325c <HAL_UART_MspInit+0x9c>)
 8003236:	f001 fe85 	bl	8004f44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	2026      	movs	r0, #38	@ 0x26
 8003240:	f001 fab1 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003244:	2026      	movs	r0, #38	@ 0x26
 8003246:	f001 faca 	bl	80047de <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800324a:	bf00      	nop
 800324c:	3728      	adds	r7, #40	@ 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40004400 	.word	0x40004400
 8003258:	40023800 	.word	0x40023800
 800325c:	40020000 	.word	0x40020000

08003260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003264:	bf00      	nop
 8003266:	e7fd      	b.n	8003264 <NMI_Handler+0x4>

08003268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <HardFault_Handler+0x4>

08003270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <MemManage_Handler+0x4>

08003278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <BusFault_Handler+0x4>

08003280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <UsageFault_Handler+0x4>

08003288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b6:	f000 f9f3 	bl	80036a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}

080032be <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f002 f8f0 	bl	80054a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}

080032cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80032d0:	4802      	ldr	r0, [pc, #8]	@ (80032dc <DMA1_Stream2_IRQHandler+0x10>)
 80032d2:	f001 fbed 	bl	8004ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200002d0 	.word	0x200002d0

080032e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80032e4:	4802      	ldr	r0, [pc, #8]	@ (80032f0 <DMA1_Stream4_IRQHandler+0x10>)
 80032e6:	f001 fbe3 	bl	8004ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000330 	.word	0x20000330

080032f4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032f8:	4802      	ldr	r0, [pc, #8]	@ (8003304 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80032fa:	f005 f93e 	bl	800857a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200003e8 	.word	0x200003e8

08003308 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800330c:	4802      	ldr	r0, [pc, #8]	@ (8003318 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800330e:	f005 f934 	bl	800857a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200003e8 	.word	0x200003e8

0800331c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003320:	4802      	ldr	r0, [pc, #8]	@ (800332c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003322:	f005 f92a 	bl	800857a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200003e8 	.word	0x200003e8

08003330 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003334:	4802      	ldr	r0, [pc, #8]	@ (8003340 <TIM1_CC_IRQHandler+0x10>)
 8003336:	f005 f920 	bl	800857a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200003e8 	.word	0x200003e8

08003344 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <SPI1_IRQHandler+0x10>)
 800334a:	f004 fded 	bl	8007f28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000390 	.word	0x20000390

08003358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <USART2_IRQHandler+0x10>)
 800335e:	f005 fdc5 	bl	8008eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200004c0 	.word	0x200004c0

0800336c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <TIM8_CC_IRQHandler+0x10>)
 8003372:	f005 f902 	bl	800857a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000430 	.word	0x20000430

08003380 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <CAN2_TX_IRQHandler+0x10>)
 8003386:	f000 feea 	bl	800415e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000200 	.word	0x20000200

08003394 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <CAN2_RX0_IRQHandler+0x10>)
 800339a:	f000 fee0 	bl	800415e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000200 	.word	0x20000200

080033a8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <CAN2_RX1_IRQHandler+0x10>)
 80033ae:	f000 fed6 	bl	800415e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000200 	.word	0x20000200

080033bc <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <CAN2_SCE_IRQHandler+0x10>)
 80033c2:	f000 fecc 	bl	800415e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000200 	.word	0x20000200

080033d0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <I2C3_EV_IRQHandler+0x10>)
 80033d6:	f002 f9e4 	bl	80057a2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000027c 	.word	0x2000027c

080033e4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <I2C3_ER_IRQHandler+0x10>)
 80033ea:	f002 fb4b 	bl	8005a84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000027c 	.word	0x2000027c

080033f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
	return 1;
 80033fc:	2301      	movs	r3, #1
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <_kill>:

int _kill(int pid, int sig)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003412:	f007 fabb 	bl	800a98c <__errno>
 8003416:	4603      	mov	r3, r0
 8003418:	2216      	movs	r2, #22
 800341a:	601a      	str	r2, [r3, #0]
	return -1;
 800341c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <_exit>:

void _exit (int status)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffe7 	bl	8003408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <_exit+0x12>

0800343e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e00a      	b.n	8003466 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003450:	f3af 8000 	nop.w
 8003454:	4601      	mov	r1, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	60ba      	str	r2, [r7, #8]
 800345c:	b2ca      	uxtb	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	dbf0      	blt.n	8003450 <_read+0x12>
	}

return len;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e009      	b.n	800349e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	60ba      	str	r2, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbf1      	blt.n	800348a <_write+0x12>
	}
	return len;
 80034a6:	687b      	ldr	r3, [r7, #4]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_close>:

int _close(int file)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	return -1;
 80034b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034d8:	605a      	str	r2, [r3, #4]
	return 0;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_isatty>:

int _isatty(int file)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	return 1;
 80034f0:	2301      	movs	r3, #1
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
	return 0;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003520:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <_sbrk+0x5c>)
 8003522:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <_sbrk+0x60>)
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800352c:	4b13      	ldr	r3, [pc, #76]	@ (800357c <_sbrk+0x64>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003534:	4b11      	ldr	r3, [pc, #68]	@ (800357c <_sbrk+0x64>)
 8003536:	4a12      	ldr	r2, [pc, #72]	@ (8003580 <_sbrk+0x68>)
 8003538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800353a:	4b10      	ldr	r3, [pc, #64]	@ (800357c <_sbrk+0x64>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	429a      	cmp	r2, r3
 8003546:	d207      	bcs.n	8003558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003548:	f007 fa20 	bl	800a98c <__errno>
 800354c:	4603      	mov	r3, r0
 800354e:	220c      	movs	r2, #12
 8003550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	e009      	b.n	800356c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003558:	4b08      	ldr	r3, [pc, #32]	@ (800357c <_sbrk+0x64>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800355e:	4b07      	ldr	r3, [pc, #28]	@ (800357c <_sbrk+0x64>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	4a05      	ldr	r2, [pc, #20]	@ (800357c <_sbrk+0x64>)
 8003568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800356a:	68fb      	ldr	r3, [r7, #12]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20020000 	.word	0x20020000
 8003578:	00000400 	.word	0x00000400
 800357c:	200005b0 	.word	0x200005b0
 8003580:	20000708 	.word	0x20000708

08003584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003588:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <SystemInit+0x20>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	4a05      	ldr	r2, [pc, #20]	@ (80035a4 <SystemInit+0x20>)
 8003590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035ac:	480d      	ldr	r0, [pc, #52]	@ (80035e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035ae:	490e      	ldr	r1, [pc, #56]	@ (80035e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035b0:	4a0e      	ldr	r2, [pc, #56]	@ (80035ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035b4:	e002      	b.n	80035bc <LoopCopyDataInit>

080035b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ba:	3304      	adds	r3, #4

080035bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c0:	d3f9      	bcc.n	80035b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c2:	4a0b      	ldr	r2, [pc, #44]	@ (80035f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035c4:	4c0b      	ldr	r4, [pc, #44]	@ (80035f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c8:	e001      	b.n	80035ce <LoopFillZerobss>

080035ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035cc:	3204      	adds	r2, #4

080035ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d0:	d3fb      	bcc.n	80035ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035d2:	f7ff ffd7 	bl	8003584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035d6:	f007 f9df 	bl	800a998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035da:	f7fe fbeb 	bl	8001db4 <main>
  bx  lr    
 80035de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80035ec:	0800d384 	.word	0x0800d384
  ldr r2, =_sbss
 80035f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80035f4:	20000704 	.word	0x20000704

080035f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f8:	e7fe      	b.n	80035f8 <ADC_IRQHandler>
	...

080035fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003600:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <HAL_Init+0x40>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <HAL_Init+0x40>)
 8003606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800360a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800360c:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <HAL_Init+0x40>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0a      	ldr	r2, [pc, #40]	@ (800363c <HAL_Init+0x40>)
 8003612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003618:	4b08      	ldr	r3, [pc, #32]	@ (800363c <HAL_Init+0x40>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a07      	ldr	r2, [pc, #28]	@ (800363c <HAL_Init+0x40>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003624:	2003      	movs	r0, #3
 8003626:	f001 f8b3 	bl	8004790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800362a:	2000      	movs	r0, #0
 800362c:	f000 f808 	bl	8003640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003630:	f7ff fadc 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023c00 	.word	0x40023c00

08003640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_InitTick+0x54>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <HAL_InitTick+0x58>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4619      	mov	r1, r3
 8003652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003656:	fbb3 f3f1 	udiv	r3, r3, r1
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f8d9 	bl	8004816 <HAL_SYSTICK_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e00e      	b.n	800368c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d80a      	bhi.n	800368a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003674:	2200      	movs	r2, #0
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	f001 f893 	bl	80047a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003680:	4a06      	ldr	r2, [pc, #24]	@ (800369c <HAL_InitTick+0x5c>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000004 	.word	0x20000004
 8003698:	2000000c 	.word	0x2000000c
 800369c:	20000008 	.word	0x20000008

080036a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a4:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_IncTick+0x20>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_IncTick+0x24>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	4a04      	ldr	r2, [pc, #16]	@ (80036c4 <HAL_IncTick+0x24>)
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	200005b4 	.word	0x200005b4

080036c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return uwTick;
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_GetTick+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	200005b4 	.word	0x200005b4

080036e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff ffee 	bl	80036c8 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d005      	beq.n	8003706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <HAL_Delay+0x44>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003706:	bf00      	nop
 8003708:	f7ff ffde 	bl	80036c8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	429a      	cmp	r2, r3
 8003716:	d8f7      	bhi.n	8003708 <HAL_Delay+0x28>
  {
  }
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2000000c 	.word	0x2000000c

08003728 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0ed      	b.n	8003916 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fa78 	bl	8002c3c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800375c:	f7ff ffb4 	bl	80036c8 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003762:	e012      	b.n	800378a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003764:	f7ff ffb0 	bl	80036c8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d90b      	bls.n	800378a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2205      	movs	r2, #5
 8003782:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0c5      	b.n	8003916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0e5      	beq.n	8003764 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0202 	bic.w	r2, r2, #2
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a8:	f7ff ff8e 	bl	80036c8 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ae:	e012      	b.n	80037d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b0:	f7ff ff8a 	bl	80036c8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d90b      	bls.n	80037d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2205      	movs	r2, #5
 80037ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e09f      	b.n	8003916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7e1b      	ldrb	r3, [r3, #24]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d108      	bne.n	80037fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e007      	b.n	800380e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800380c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7e5b      	ldrb	r3, [r3, #25]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e007      	b.n	8003838 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7e9b      	ldrb	r3, [r3, #26]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0220 	orr.w	r2, r2, #32
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e007      	b.n	8003862 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0220 	bic.w	r2, r2, #32
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7edb      	ldrb	r3, [r3, #27]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d108      	bne.n	800387c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0210 	bic.w	r2, r2, #16
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e007      	b.n	800388c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0210 	orr.w	r2, r2, #16
 800388a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7f1b      	ldrb	r3, [r3, #28]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d108      	bne.n	80038a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0208 	orr.w	r2, r2, #8
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e007      	b.n	80038b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7f5b      	ldrb	r3, [r3, #29]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0204 	orr.w	r2, r2, #4
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e007      	b.n	80038e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	ea42 0103 	orr.w	r1, r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	1e5a      	subs	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e015      	b.n	800395c <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f939 	bl	8003ba8 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fa06 	bl	8002d48 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003974:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d003      	beq.n	8003984 <HAL_CAN_ConfigFilter+0x20>
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b02      	cmp	r3, #2
 8003980:	f040 80be 	bne.w	8003b00 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003984:	4b65      	ldr	r3, [pc, #404]	@ (8003b1c <HAL_CAN_ConfigFilter+0x1b8>)
 8003986:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800399e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	431a      	orrs	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2201      	movs	r2, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d123      	bne.n	8003a2e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	401a      	ands	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3248      	adds	r2, #72	@ 0x48
 8003a0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a24:	6939      	ldr	r1, [r7, #16]
 8003a26:	3348      	adds	r3, #72	@ 0x48
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d122      	bne.n	8003a7c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	3248      	adds	r2, #72	@ 0x48
 8003a5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a72:	6939      	ldr	r1, [r7, #16]
 8003a74:	3348      	adds	r3, #72	@ 0x48
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003a96:	e007      	b.n	8003aa8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003ac2:	e007      	b.n	8003ad4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003af2:	f023 0201 	bic.w	r2, r3, #1
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e006      	b.n	8003b0e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40006400 	.word	0x40006400

08003b20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d12e      	bne.n	8003b92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b4c:	f7ff fdbc 	bl	80036c8 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b52:	e012      	b.n	8003b7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b54:	f7ff fdb8 	bl	80036c8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b0a      	cmp	r3, #10
 8003b60:	d90b      	bls.n	8003b7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2205      	movs	r2, #5
 8003b72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e012      	b.n	8003ba0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e5      	bne.n	8003b54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e006      	b.n	8003ba0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d133      	bne.n	8003c24 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bcc:	f7ff fd7c 	bl	80036c8 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bd2:	e012      	b.n	8003bfa <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bd4:	f7ff fd78 	bl	80036c8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b0a      	cmp	r3, #10
 8003be0:	d90b      	bls.n	8003bfa <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2205      	movs	r2, #5
 8003bf2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e01b      	b.n	8003c32 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0e5      	beq.n	8003bd4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0202 	bic.w	r2, r2, #2
 8003c16:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e006      	b.n	8003c32 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b089      	sub	sp, #36	@ 0x24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c58:	7ffb      	ldrb	r3, [r7, #31]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d003      	beq.n	8003c66 <HAL_CAN_AddTxMessage+0x2c>
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	f040 80ad 	bne.w	8003dc0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8095 	beq.w	8003db0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	0e1b      	lsrs	r3, r3, #24
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c90:	2201      	movs	r2, #1
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	409a      	lsls	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	440b      	add	r3, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e00f      	b.n	8003cde <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cc8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cce:	68f9      	ldr	r1, [r7, #12]
 8003cd0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003cd2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	440b      	add	r3, r1
 8003cdc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3318      	adds	r3, #24
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	440b      	add	r3, r1
 8003cee:	3304      	adds	r3, #4
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	7d1b      	ldrb	r3, [r3, #20]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d111      	bne.n	8003d1e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3318      	adds	r3, #24
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	4413      	add	r3, r2
 8003d06:	3304      	adds	r3, #4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	6811      	ldr	r1, [r2, #0]
 8003d0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3318      	adds	r3, #24
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	440b      	add	r3, r1
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3307      	adds	r3, #7
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	061a      	lsls	r2, r3, #24
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3306      	adds	r3, #6
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3305      	adds	r3, #5
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	3204      	adds	r2, #4
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	4610      	mov	r0, r2
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	6811      	ldr	r1, [r2, #0]
 8003d46:	ea43 0200 	orr.w	r2, r3, r0
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	440b      	add	r3, r1
 8003d50:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003d54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3303      	adds	r3, #3
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	061a      	lsls	r2, r3, #24
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3302      	adds	r3, #2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	4313      	orrs	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	4610      	mov	r0, r2
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	6811      	ldr	r1, [r2, #0]
 8003d7c:	ea43 0200 	orr.w	r2, r3, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	440b      	add	r3, r1
 8003d86:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003d8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3318      	adds	r3, #24
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	4413      	add	r3, r2
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	6811      	ldr	r1, [r2, #0]
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3318      	adds	r3, #24
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	440b      	add	r3, r1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e00e      	b.n	8003dce <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e006      	b.n	8003dce <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3724      	adds	r7, #36	@ 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d002      	beq.n	8003df8 <HAL_CAN_AbortTxRequest+0x1e>
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d128      	bne.n	8003e4a <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e10:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e2a:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003e44:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e006      	b.n	8003e58 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e76:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e78:	7afb      	ldrb	r3, [r7, #11]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d002      	beq.n	8003e84 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d11d      	bne.n	8003ec0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d003      	beq.n	8003ef2 <HAL_CAN_GetRxMessage+0x24>
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	f040 8103 	bne.w	80040f8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10e      	bne.n	8003f16 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d116      	bne.n	8003f34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0f7      	b.n	8004106 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0e8      	b.n	8004106 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	331b      	adds	r3, #27
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	4413      	add	r3, r2
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0204 	and.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	331b      	adds	r3, #27
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0d5b      	lsrs	r3, r3, #21
 8003f62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e00b      	b.n	8003f84 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	331b      	adds	r3, #27
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	4413      	add	r3, r2
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	08db      	lsrs	r3, r3, #3
 8003f7c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	331b      	adds	r3, #27
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	4413      	add	r3, r2
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0202 	and.w	r2, r3, #2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	331b      	adds	r3, #27
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	611a      	str	r2, [r3, #16]
 8003fb8:	e00b      	b.n	8003fd2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	331b      	adds	r3, #27
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 020f 	and.w	r2, r3, #15
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	331b      	adds	r3, #27
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	4413      	add	r3, r2
 8003fde:	3304      	adds	r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	331b      	adds	r3, #27
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	0c1b      	lsrs	r3, r3, #16
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	4413      	add	r3, r2
 8004022:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	0a1a      	lsrs	r2, r3, #8
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	4413      	add	r3, r2
 800403c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	0c1a      	lsrs	r2, r3, #16
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	3302      	adds	r3, #2
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	4413      	add	r3, r2
 8004056:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0e1a      	lsrs	r2, r3, #24
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	3303      	adds	r3, #3
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	4413      	add	r3, r2
 8004070:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3304      	adds	r3, #4
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	4413      	add	r3, r2
 8004088:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	0a1a      	lsrs	r2, r3, #8
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	3305      	adds	r3, #5
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0c1a      	lsrs	r2, r3, #16
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	3306      	adds	r3, #6
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0e1a      	lsrs	r2, r3, #24
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	3307      	adds	r3, #7
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0220 	orr.w	r2, r2, #32
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	e007      	b.n	80040f4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0220 	orr.w	r2, r2, #32
 80040f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e006      	b.n	8004106 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004122:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d002      	beq.n	8004130 <HAL_CAN_ActivateNotification+0x1e>
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d109      	bne.n	8004144 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6959      	ldr	r1, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e006      	b.n	8004152 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08a      	sub	sp, #40	@ 0x28
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d07c      	beq.n	800429e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d023      	beq.n	80041f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f983 	bl	80044cc <HAL_CAN_TxMailbox0CompleteCallback>
 80041c6:	e016      	b.n	80041f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041da:	e00c      	b.n	80041f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ee:	e002      	b.n	80041f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f989 	bl	8004508 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d024      	beq.n	800424a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004208:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f963 	bl	80044e0 <HAL_CAN_TxMailbox1CompleteCallback>
 800421a:	e016      	b.n	800424a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
 800422e:	e00c      	b.n	800424a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
 8004242:	e002      	b.n	800424a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f969 	bl	800451c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d024      	beq.n	800429e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800425c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f943 	bl	80044f4 <HAL_CAN_TxMailbox2CompleteCallback>
 800426e:	e016      	b.n	800429e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
 8004282:	e00c      	b.n	800429e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
 8004296:	e002      	b.n	800429e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f949 	bl	8004530 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00c      	beq.n	80042c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2208      	movs	r2, #8
 80042dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f930 	bl	8004544 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd fac3 	bl	8001888 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2210      	movs	r2, #16
 8004324:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2208      	movs	r2, #8
 8004340:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f912 	bl	800456c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8f9 	bl	8004558 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00b      	beq.n	8004388 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2210      	movs	r2, #16
 8004380:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8fc 	bl	8004580 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2208      	movs	r2, #8
 80043a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8f5 	bl	8004594 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d07b      	beq.n	80044ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d072      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	f043 0302 	orr.w	r3, r3, #2
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	f043 0304 	orr.w	r3, r3, #4
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004418:	2b00      	cmp	r3, #0
 800441a:	d043      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03e      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800442c:	2b60      	cmp	r3, #96	@ 0x60
 800442e:	d02b      	beq.n	8004488 <HAL_CAN_IRQHandler+0x32a>
 8004430:	2b60      	cmp	r3, #96	@ 0x60
 8004432:	d82e      	bhi.n	8004492 <HAL_CAN_IRQHandler+0x334>
 8004434:	2b50      	cmp	r3, #80	@ 0x50
 8004436:	d022      	beq.n	800447e <HAL_CAN_IRQHandler+0x320>
 8004438:	2b50      	cmp	r3, #80	@ 0x50
 800443a:	d82a      	bhi.n	8004492 <HAL_CAN_IRQHandler+0x334>
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d019      	beq.n	8004474 <HAL_CAN_IRQHandler+0x316>
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d826      	bhi.n	8004492 <HAL_CAN_IRQHandler+0x334>
 8004444:	2b30      	cmp	r3, #48	@ 0x30
 8004446:	d010      	beq.n	800446a <HAL_CAN_IRQHandler+0x30c>
 8004448:	2b30      	cmp	r3, #48	@ 0x30
 800444a:	d822      	bhi.n	8004492 <HAL_CAN_IRQHandler+0x334>
 800444c:	2b10      	cmp	r3, #16
 800444e:	d002      	beq.n	8004456 <HAL_CAN_IRQHandler+0x2f8>
 8004450:	2b20      	cmp	r3, #32
 8004452:	d005      	beq.n	8004460 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004454:	e01d      	b.n	8004492 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800445e:	e019      	b.n	8004494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	f043 0310 	orr.w	r3, r3, #16
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004468:	e014      	b.n	8004494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	f043 0320 	orr.w	r3, r3, #32
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004472:	e00f      	b.n	8004494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800447c:	e00a      	b.n	8004494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004484:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004486:	e005      	b.n	8004494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004490:	e000      	b.n	8004494 <HAL_CAN_IRQHandler+0x336>
            break;
 8004492:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80044a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2204      	movs	r2, #4
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd fc58 	bl	8001d74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80044c4:	bf00      	nop
 80044c6:	3728      	adds	r7, #40	@ 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045c4:	4013      	ands	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045da:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	60d3      	str	r3, [r2, #12]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <__NVIC_GetPriorityGrouping+0x18>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f003 0307 	and.w	r3, r3, #7
}
 80045fe:	4618      	mov	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	db0b      	blt.n	8004636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	f003 021f 	and.w	r2, r3, #31
 8004624:	4907      	ldr	r1, [pc, #28]	@ (8004644 <__NVIC_EnableIRQ+0x38>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2001      	movs	r0, #1
 800462e:	fa00 f202 	lsl.w	r2, r0, r2
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	2b00      	cmp	r3, #0
 8004658:	db12      	blt.n	8004680 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	f003 021f 	and.w	r2, r3, #31
 8004660:	490a      	ldr	r1, [pc, #40]	@ (800468c <__NVIC_DisableIRQ+0x44>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2001      	movs	r0, #1
 800466a:	fa00 f202 	lsl.w	r2, r0, r2
 800466e:	3320      	adds	r3, #32
 8004670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004674:	f3bf 8f4f 	dsb	sy
}
 8004678:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800467a:	f3bf 8f6f 	isb	sy
}
 800467e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000e100 	.word	0xe000e100

08004690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	db0a      	blt.n	80046ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	490c      	ldr	r1, [pc, #48]	@ (80046dc <__NVIC_SetPriority+0x4c>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	440b      	add	r3, r1
 80046b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b8:	e00a      	b.n	80046d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4908      	ldr	r1, [pc, #32]	@ (80046e0 <__NVIC_SetPriority+0x50>)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	3b04      	subs	r3, #4
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	440b      	add	r3, r1
 80046ce:	761a      	strb	r2, [r3, #24]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000e100 	.word	0xe000e100
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	@ 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	bf28      	it	cs
 8004702:	2304      	movcs	r3, #4
 8004704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3304      	adds	r3, #4
 800470a:	2b06      	cmp	r3, #6
 800470c:	d902      	bls.n	8004714 <NVIC_EncodePriority+0x30>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3b03      	subs	r3, #3
 8004712:	e000      	b.n	8004716 <NVIC_EncodePriority+0x32>
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	f04f 32ff 	mov.w	r2, #4294967295
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	401a      	ands	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800472c:	f04f 31ff 	mov.w	r1, #4294967295
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	43d9      	mvns	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	4313      	orrs	r3, r2
         );
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	@ 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800475c:	d301      	bcc.n	8004762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800475e:	2301      	movs	r3, #1
 8004760:	e00f      	b.n	8004782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004762:	4a0a      	ldr	r2, [pc, #40]	@ (800478c <SysTick_Config+0x40>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476a:	210f      	movs	r1, #15
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	f7ff ff8e 	bl	8004690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <SysTick_Config+0x40>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477a:	4b04      	ldr	r3, [pc, #16]	@ (800478c <SysTick_Config+0x40>)
 800477c:	2207      	movs	r2, #7
 800477e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	e000e010 	.word	0xe000e010

08004790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff05 	bl	80045a8 <__NVIC_SetPriorityGrouping>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047b8:	f7ff ff1a 	bl	80045f0 <__NVIC_GetPriorityGrouping>
 80047bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f7ff ff8e 	bl	80046e4 <NVIC_EncodePriority>
 80047c8:	4602      	mov	r2, r0
 80047ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff5d 	bl	8004690 <__NVIC_SetPriority>
}
 80047d6:	bf00      	nop
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4603      	mov	r3, r0
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff0d 	bl	800460c <__NVIC_EnableIRQ>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff1d 	bl	8004648 <__NVIC_DisableIRQ>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff94 	bl	800474c <SysTick_Config>
 8004824:	4603      	mov	r3, r0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800483c:	f7fe ff44 	bl	80036c8 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e099      	b.n	8004980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800486c:	e00f      	b.n	800488e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800486e:	f7fe ff2b 	bl	80036c8 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b05      	cmp	r3, #5
 800487a:	d908      	bls.n	800488e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2203      	movs	r2, #3
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e078      	b.n	8004980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e8      	bne.n	800486e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <HAL_DMA_Init+0x158>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d107      	bne.n	80048f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	4313      	orrs	r3, r2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0307 	bic.w	r3, r3, #7
 800490e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	2b04      	cmp	r3, #4
 8004920:	d117      	bne.n	8004952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00e      	beq.n	8004952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fa89 	bl	8004e4c <DMA_CheckFifoParam>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2240      	movs	r2, #64	@ 0x40
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800494e:	2301      	movs	r3, #1
 8004950:	e016      	b.n	8004980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa40 	bl	8004de0 <DMA_CalcBaseAndBitshift>
 8004960:	4603      	mov	r3, r0
 8004962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004968:	223f      	movs	r2, #63	@ 0x3f
 800496a:	409a      	lsls	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	f010803f 	.word	0xf010803f

0800498c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004998:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800499a:	f7fe fe95 	bl	80036c8 <HAL_GetTick>
 800499e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d008      	beq.n	80049be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2280      	movs	r2, #128	@ 0x80
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e052      	b.n	8004a64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0216 	bic.w	r2, r2, #22
 80049cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_DMA_Abort+0x62>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0208 	bic.w	r2, r2, #8
 80049fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0e:	e013      	b.n	8004a38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a10:	f7fe fe5a 	bl	80036c8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d90c      	bls.n	8004a38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e015      	b.n	8004a64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e4      	bne.n	8004a10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	223f      	movs	r2, #63	@ 0x3f
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d004      	beq.n	8004a8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2280      	movs	r2, #128	@ 0x80
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e00c      	b.n	8004aa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2205      	movs	r2, #5
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004abc:	4b8e      	ldr	r3, [pc, #568]	@ (8004cf8 <HAL_DMA_IRQHandler+0x248>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a8e      	ldr	r2, [pc, #568]	@ (8004cfc <HAL_DMA_IRQHandler+0x24c>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0a9b      	lsrs	r3, r3, #10
 8004ac8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ace:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	2208      	movs	r2, #8
 8004adc:	409a      	lsls	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01a      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d013      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b08:	2208      	movs	r2, #8
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	2201      	movs	r2, #1
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d012      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3e:	2201      	movs	r2, #1
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4a:	f043 0202 	orr.w	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b56:	2204      	movs	r2, #4
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d012      	beq.n	8004b88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b74:	2204      	movs	r2, #4
 8004b76:	409a      	lsls	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b80:	f043 0204 	orr.w	r2, r3, #4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d043      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d03c      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004baa:	2210      	movs	r2, #16
 8004bac:	409a      	lsls	r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d018      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d024      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
 8004bde:	e01f      	b.n	8004c20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
 8004bf0:	e016      	b.n	8004c20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0208 	bic.w	r2, r2, #8
 8004c0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	2220      	movs	r2, #32
 8004c26:	409a      	lsls	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 808f 	beq.w	8004d50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8087 	beq.w	8004d50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c46:	2220      	movs	r2, #32
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d136      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0216 	bic.w	r2, r2, #22
 8004c68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <HAL_DMA_IRQHandler+0x1da>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0208 	bic.w	r2, r2, #8
 8004c98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9e:	223f      	movs	r2, #63	@ 0x3f
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d07e      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
        }
        return;
 8004cc6:	e079      	b.n	8004dbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01d      	beq.n	8004d12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10d      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d031      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
 8004cf4:	e02c      	b.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
 8004cf6:	bf00      	nop
 8004cf8:	20000004 	.word	0x20000004
 8004cfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d023      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
 8004d10:	e01e      	b.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0210 	bic.w	r2, r2, #16
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d032      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d022      	beq.n	8004daa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2205      	movs	r2, #5
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d307      	bcc.n	8004d98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f2      	bne.n	8004d7c <HAL_DMA_IRQHandler+0x2cc>
 8004d96:	e000      	b.n	8004d9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
 8004dba:	e000      	b.n	8004dbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dbc:	bf00      	nop
    }
  }
}
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dd2:	b2db      	uxtb	r3, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	3b10      	subs	r3, #16
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <DMA_CalcBaseAndBitshift+0x64>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dfa:	4a13      	ldr	r2, [pc, #76]	@ (8004e48 <DMA_CalcBaseAndBitshift+0x68>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d909      	bls.n	8004e22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	1d1a      	adds	r2, r3, #4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e20:	e007      	b.n	8004e32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	aaaaaaab 	.word	0xaaaaaaab
 8004e48:	0800cff4 	.word	0x0800cff4

08004e4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11f      	bne.n	8004ea6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d856      	bhi.n	8004f1a <DMA_CheckFifoParam+0xce>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <DMA_CheckFifoParam+0x28>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e97 	.word	0x08004e97
 8004e7c:	08004e85 	.word	0x08004e85
 8004e80:	08004f1b 	.word	0x08004f1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d046      	beq.n	8004f1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e94:	e043      	b.n	8004f1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e9e:	d140      	bne.n	8004f22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea4:	e03d      	b.n	8004f22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eae:	d121      	bne.n	8004ef4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d837      	bhi.n	8004f26 <DMA_CheckFifoParam+0xda>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <DMA_CheckFifoParam+0x70>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ed3 	.word	0x08004ed3
 8004ec4:	08004ecd 	.word	0x08004ecd
 8004ec8:	08004ee5 	.word	0x08004ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e030      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d025      	beq.n	8004f2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee2:	e022      	b.n	8004f2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004eec:	d11f      	bne.n	8004f2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ef2:	e01c      	b.n	8004f2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d903      	bls.n	8004f02 <DMA_CheckFifoParam+0xb6>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d003      	beq.n	8004f08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f00:	e018      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      break;
 8004f06:	e015      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00e      	beq.n	8004f32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      break;
 8004f18:	e00b      	b.n	8004f32 <DMA_CheckFifoParam+0xe6>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e00a      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e008      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f22:	bf00      	nop
 8004f24:	e006      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f26:	bf00      	nop
 8004f28:	e004      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e002      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f32:	bf00      	nop
    }
  } 
  
  return status; 
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	@ 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	e16b      	b.n	8005238 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f60:	2201      	movs	r2, #1
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4013      	ands	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	f040 815a 	bne.w	8005232 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d005      	beq.n	8004f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d130      	bne.n	8004ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4013      	ands	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fcc:	2201      	movs	r2, #1
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 0201 	and.w	r2, r3, #1
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b03      	cmp	r3, #3
 8005002:	d017      	beq.n	8005034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	2203      	movs	r2, #3
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d123      	bne.n	8005088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	08da      	lsrs	r2, r3, #3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3208      	adds	r2, #8
 8005048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	220f      	movs	r2, #15
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	08da      	lsrs	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3208      	adds	r2, #8
 8005082:	69b9      	ldr	r1, [r7, #24]
 8005084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	2203      	movs	r2, #3
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0203 	and.w	r2, r3, #3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80b4 	beq.w	8005232 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	4b60      	ldr	r3, [pc, #384]	@ (8005250 <HAL_GPIO_Init+0x30c>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	4a5f      	ldr	r2, [pc, #380]	@ (8005250 <HAL_GPIO_Init+0x30c>)
 80050d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80050da:	4b5d      	ldr	r3, [pc, #372]	@ (8005250 <HAL_GPIO_Init+0x30c>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005254 <HAL_GPIO_Init+0x310>)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	3302      	adds	r3, #2
 80050ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	220f      	movs	r2, #15
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a52      	ldr	r2, [pc, #328]	@ (8005258 <HAL_GPIO_Init+0x314>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <HAL_GPIO_Init+0x226>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a51      	ldr	r2, [pc, #324]	@ (800525c <HAL_GPIO_Init+0x318>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d025      	beq.n	8005166 <HAL_GPIO_Init+0x222>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a50      	ldr	r2, [pc, #320]	@ (8005260 <HAL_GPIO_Init+0x31c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01f      	beq.n	8005162 <HAL_GPIO_Init+0x21e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a4f      	ldr	r2, [pc, #316]	@ (8005264 <HAL_GPIO_Init+0x320>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d019      	beq.n	800515e <HAL_GPIO_Init+0x21a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a4e      	ldr	r2, [pc, #312]	@ (8005268 <HAL_GPIO_Init+0x324>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_GPIO_Init+0x216>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a4d      	ldr	r2, [pc, #308]	@ (800526c <HAL_GPIO_Init+0x328>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00d      	beq.n	8005156 <HAL_GPIO_Init+0x212>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a4c      	ldr	r2, [pc, #304]	@ (8005270 <HAL_GPIO_Init+0x32c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <HAL_GPIO_Init+0x20e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a4b      	ldr	r2, [pc, #300]	@ (8005274 <HAL_GPIO_Init+0x330>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_GPIO_Init+0x20a>
 800514a:	2307      	movs	r3, #7
 800514c:	e00e      	b.n	800516c <HAL_GPIO_Init+0x228>
 800514e:	2308      	movs	r3, #8
 8005150:	e00c      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005152:	2306      	movs	r3, #6
 8005154:	e00a      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005156:	2305      	movs	r3, #5
 8005158:	e008      	b.n	800516c <HAL_GPIO_Init+0x228>
 800515a:	2304      	movs	r3, #4
 800515c:	e006      	b.n	800516c <HAL_GPIO_Init+0x228>
 800515e:	2303      	movs	r3, #3
 8005160:	e004      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005162:	2302      	movs	r3, #2
 8005164:	e002      	b.n	800516c <HAL_GPIO_Init+0x228>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_GPIO_Init+0x228>
 800516a:	2300      	movs	r3, #0
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	f002 0203 	and.w	r2, r2, #3
 8005172:	0092      	lsls	r2, r2, #2
 8005174:	4093      	lsls	r3, r2
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800517c:	4935      	ldr	r1, [pc, #212]	@ (8005254 <HAL_GPIO_Init+0x310>)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	089b      	lsrs	r3, r3, #2
 8005182:	3302      	adds	r3, #2
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800518a:	4b3b      	ldr	r3, [pc, #236]	@ (8005278 <HAL_GPIO_Init+0x334>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ae:	4a32      	ldr	r2, [pc, #200]	@ (8005278 <HAL_GPIO_Init+0x334>)
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051b4:	4b30      	ldr	r3, [pc, #192]	@ (8005278 <HAL_GPIO_Init+0x334>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051d8:	4a27      	ldr	r2, [pc, #156]	@ (8005278 <HAL_GPIO_Init+0x334>)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051de:	4b26      	ldr	r3, [pc, #152]	@ (8005278 <HAL_GPIO_Init+0x334>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_GPIO_Init+0x334>)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005208:	4b1b      	ldr	r3, [pc, #108]	@ (8005278 <HAL_GPIO_Init+0x334>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800522c:	4a12      	ldr	r2, [pc, #72]	@ (8005278 <HAL_GPIO_Init+0x334>)
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	f67f ae90 	bls.w	8004f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3724      	adds	r7, #36	@ 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	40013800 	.word	0x40013800
 8005258:	40020000 	.word	0x40020000
 800525c:	40020400 	.word	0x40020400
 8005260:	40020800 	.word	0x40020800
 8005264:	40020c00 	.word	0x40020c00
 8005268:	40021000 	.word	0x40021000
 800526c:	40021400 	.word	0x40021400
 8005270:	40021800 	.word	0x40021800
 8005274:	40021c00 	.word	0x40021c00
 8005278:	40013c00 	.word	0x40013c00

0800527c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e0cd      	b.n	8005434 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005298:	2201      	movs	r2, #1
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	f040 80bd 	bne.w	800542e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80052b4:	4a65      	ldr	r2, [pc, #404]	@ (800544c <HAL_GPIO_DeInit+0x1d0>)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	089b      	lsrs	r3, r3, #2
 80052ba:	3302      	adds	r3, #2
 80052bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	220f      	movs	r2, #15
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a5d      	ldr	r2, [pc, #372]	@ (8005450 <HAL_GPIO_DeInit+0x1d4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02b      	beq.n	8005336 <HAL_GPIO_DeInit+0xba>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a5c      	ldr	r2, [pc, #368]	@ (8005454 <HAL_GPIO_DeInit+0x1d8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d025      	beq.n	8005332 <HAL_GPIO_DeInit+0xb6>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005458 <HAL_GPIO_DeInit+0x1dc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <HAL_GPIO_DeInit+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a5a      	ldr	r2, [pc, #360]	@ (800545c <HAL_GPIO_DeInit+0x1e0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d019      	beq.n	800532a <HAL_GPIO_DeInit+0xae>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a59      	ldr	r2, [pc, #356]	@ (8005460 <HAL_GPIO_DeInit+0x1e4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_GPIO_DeInit+0xaa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a58      	ldr	r2, [pc, #352]	@ (8005464 <HAL_GPIO_DeInit+0x1e8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00d      	beq.n	8005322 <HAL_GPIO_DeInit+0xa6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a57      	ldr	r2, [pc, #348]	@ (8005468 <HAL_GPIO_DeInit+0x1ec>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <HAL_GPIO_DeInit+0xa2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a56      	ldr	r2, [pc, #344]	@ (800546c <HAL_GPIO_DeInit+0x1f0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <HAL_GPIO_DeInit+0x9e>
 8005316:	2307      	movs	r3, #7
 8005318:	e00e      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 800531a:	2308      	movs	r3, #8
 800531c:	e00c      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 800531e:	2306      	movs	r3, #6
 8005320:	e00a      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 8005322:	2305      	movs	r3, #5
 8005324:	e008      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 8005326:	2304      	movs	r3, #4
 8005328:	e006      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 800532a:	2303      	movs	r3, #3
 800532c:	e004      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 800532e:	2302      	movs	r3, #2
 8005330:	e002      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <HAL_GPIO_DeInit+0xbc>
 8005336:	2300      	movs	r3, #0
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	f002 0203 	and.w	r2, r2, #3
 800533e:	0092      	lsls	r2, r2, #2
 8005340:	4093      	lsls	r3, r2
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	d132      	bne.n	80053ae <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005348:	4b49      	ldr	r3, [pc, #292]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	43db      	mvns	r3, r3
 8005350:	4947      	ldr	r1, [pc, #284]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 8005352:	4013      	ands	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005356:	4b46      	ldr	r3, [pc, #280]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	43db      	mvns	r3, r3
 800535e:	4944      	ldr	r1, [pc, #272]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 8005360:	4013      	ands	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	43db      	mvns	r3, r3
 800536c:	4940      	ldr	r1, [pc, #256]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 800536e:	4013      	ands	r3, r2
 8005370:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005372:	4b3f      	ldr	r3, [pc, #252]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	43db      	mvns	r3, r3
 800537a:	493d      	ldr	r1, [pc, #244]	@ (8005470 <HAL_GPIO_DeInit+0x1f4>)
 800537c:	4013      	ands	r3, r2
 800537e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005390:	4a2e      	ldr	r2, [pc, #184]	@ (800544c <HAL_GPIO_DeInit+0x1d0>)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	3302      	adds	r3, #2
 8005398:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	43da      	mvns	r2, r3
 80053a0:	482a      	ldr	r0, [pc, #168]	@ (800544c <HAL_GPIO_DeInit+0x1d0>)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	400a      	ands	r2, r1
 80053a8:	3302      	adds	r3, #2
 80053aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	2103      	movs	r1, #3
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	401a      	ands	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	08da      	lsrs	r2, r3, #3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3208      	adds	r2, #8
 80053cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	220f      	movs	r2, #15
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	08d2      	lsrs	r2, r2, #3
 80053e4:	4019      	ands	r1, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3208      	adds	r2, #8
 80053ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2103      	movs	r1, #3
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	401a      	ands	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	2101      	movs	r1, #1
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	2103      	movs	r1, #3
 8005422:	fa01 f303 	lsl.w	r3, r1, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	401a      	ands	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	3301      	adds	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	f67f af2e 	bls.w	8005298 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40013800 	.word	0x40013800
 8005450:	40020000 	.word	0x40020000
 8005454:	40020400 	.word	0x40020400
 8005458:	40020800 	.word	0x40020800
 800545c:	40020c00 	.word	0x40020c00
 8005460:	40021000 	.word	0x40021000
 8005464:	40021400 	.word	0x40021400
 8005468:	40021800 	.word	0x40021800
 800546c:	40021c00 	.word	0x40021c00
 8005470:	40013c00 	.word	0x40013c00

08005474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
 8005480:	4613      	mov	r3, r2
 8005482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005484:	787b      	ldrb	r3, [r7, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005490:	e003      	b.n	800549a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	041a      	lsls	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054b2:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d006      	beq.n	80054cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054be:	4a05      	ldr	r2, [pc, #20]	@ (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f806 	bl	80054d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40013c00 	.word	0x40013c00

080054d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e12b      	b.n	800575a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fd fc46 	bl	8002da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	@ 0x24
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005554:	f002 fa8e 	bl	8007a74 <HAL_RCC_GetPCLK1Freq>
 8005558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4a81      	ldr	r2, [pc, #516]	@ (8005764 <HAL_I2C_Init+0x274>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d807      	bhi.n	8005574 <HAL_I2C_Init+0x84>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a80      	ldr	r2, [pc, #512]	@ (8005768 <HAL_I2C_Init+0x278>)
 8005568:	4293      	cmp	r3, r2
 800556a:	bf94      	ite	ls
 800556c:	2301      	movls	r3, #1
 800556e:	2300      	movhi	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e006      	b.n	8005582 <HAL_I2C_Init+0x92>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a7d      	ldr	r2, [pc, #500]	@ (800576c <HAL_I2C_Init+0x27c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	bf94      	ite	ls
 800557c:	2301      	movls	r3, #1
 800557e:	2300      	movhi	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0e7      	b.n	800575a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a78      	ldr	r2, [pc, #480]	@ (8005770 <HAL_I2C_Init+0x280>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0c9b      	lsrs	r3, r3, #18
 8005594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005764 <HAL_I2C_Init+0x274>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d802      	bhi.n	80055c4 <HAL_I2C_Init+0xd4>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	3301      	adds	r3, #1
 80055c2:	e009      	b.n	80055d8 <HAL_I2C_Init+0xe8>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	4a69      	ldr	r2, [pc, #420]	@ (8005774 <HAL_I2C_Init+0x284>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	3301      	adds	r3, #1
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	430b      	orrs	r3, r1
 80055de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	495c      	ldr	r1, [pc, #368]	@ (8005764 <HAL_I2C_Init+0x274>)
 80055f4:	428b      	cmp	r3, r1
 80055f6:	d819      	bhi.n	800562c <HAL_I2C_Init+0x13c>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e59      	subs	r1, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fbb1 f3f3 	udiv	r3, r1, r3
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800560c:	400b      	ands	r3, r1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_I2C_Init+0x138>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1e59      	subs	r1, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005620:	3301      	adds	r3, #1
 8005622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005626:	e051      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 8005628:	2304      	movs	r3, #4
 800562a:	e04f      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d111      	bne.n	8005658 <HAL_I2C_Init+0x168>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e58      	subs	r0, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	440b      	add	r3, r1
 8005642:	fbb0 f3f3 	udiv	r3, r0, r3
 8005646:	3301      	adds	r3, #1
 8005648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e012      	b.n	800567e <HAL_I2C_Init+0x18e>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1e58      	subs	r0, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	0099      	lsls	r1, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	fbb0 f3f3 	udiv	r3, r0, r3
 800566e:	3301      	adds	r3, #1
 8005670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_Init+0x196>
 8005682:	2301      	movs	r3, #1
 8005684:	e022      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10e      	bne.n	80056ac <HAL_I2C_Init+0x1bc>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1e58      	subs	r0, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	440b      	add	r3, r1
 800569c:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a0:	3301      	adds	r3, #1
 80056a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056aa:	e00f      	b.n	80056cc <HAL_I2C_Init+0x1dc>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1e58      	subs	r0, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	0099      	lsls	r1, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c2:	3301      	adds	r3, #1
 80056c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	6809      	ldr	r1, [r1, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6911      	ldr	r1, [r2, #16]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68d2      	ldr	r2, [r2, #12]
 8005706:	4311      	orrs	r1, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	430b      	orrs	r3, r1
 800570e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	000186a0 	.word	0x000186a0
 8005768:	001e847f 	.word	0x001e847f
 800576c:	003d08ff 	.word	0x003d08ff
 8005770:	431bde83 	.word	0x431bde83
 8005774:	10624dd3 	.word	0x10624dd3

08005778 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578a:	2b80      	cmp	r3, #128	@ 0x80
 800578c:	d103      	bne.n	8005796 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
  }
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b088      	sub	sp, #32
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ca:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d003      	beq.n	80057da <HAL_I2C_EV_IRQHandler+0x38>
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b40      	cmp	r3, #64	@ 0x40
 80057d6:	f040 80c1 	bne.w	800595c <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <HAL_I2C_EV_IRQHandler+0x6e>
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80057fa:	d003      	beq.n	8005804 <HAL_I2C_EV_IRQHandler+0x62>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005802:	d101      	bne.n	8005808 <HAL_I2C_EV_IRQHandler+0x66>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_I2C_EV_IRQHandler+0x68>
 8005808:	2300      	movs	r3, #0
 800580a:	2b01      	cmp	r3, #1
 800580c:	f000 8132 	beq.w	8005a74 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <HAL_I2C_EV_IRQHandler+0x92>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	0a5b      	lsrs	r3, r3, #9
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d006      	beq.n	8005834 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fc98 	bl	800715c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fd9b 	bl	8006368 <I2C_Master_SB>
 8005832:	e092      	b.n	800595a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	08db      	lsrs	r3, r3, #3
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <HAL_I2C_EV_IRQHandler+0xb2>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	0a5b      	lsrs	r3, r3, #9
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fe11 	bl	8006474 <I2C_Master_ADD10>
 8005852:	e082      	b.n	800595a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <HAL_I2C_EV_IRQHandler+0xd2>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	0a5b      	lsrs	r3, r3, #9
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fe2b 	bl	80064c8 <I2C_Master_ADDR>
 8005872:	e072      	b.n	800595a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d03b      	beq.n	80058f8 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800588e:	f000 80f3 	beq.w	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	09db      	lsrs	r3, r3, #7
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00f      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x11c>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	0a9b      	lsrs	r3, r3, #10
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x11c>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	089b      	lsrs	r3, r3, #2
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f9f3 	bl	8005ca2 <I2C_MasterTransmit_TXE>
 80058bc:	e04d      	b.n	800595a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	089b      	lsrs	r3, r3, #2
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 80d6 	beq.w	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	0a5b      	lsrs	r3, r3, #9
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80cf 	beq.w	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	2b21      	cmp	r3, #33	@ 0x21
 80058de:	d103      	bne.n	80058e8 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fa7a 	bl	8005dda <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e6:	e0c7      	b.n	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b40      	cmp	r3, #64	@ 0x40
 80058ec:	f040 80c4 	bne.w	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fae8 	bl	8005ec6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058f6:	e0bf      	b.n	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005906:	f000 80b7 	beq.w	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	099b      	lsrs	r3, r3, #6
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00f      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0x194>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	0a9b      	lsrs	r3, r3, #10
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0x194>
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	089b      	lsrs	r3, r3, #2
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb61 	bl	8005ff6 <I2C_MasterReceive_RXNE>
 8005934:	e011      	b.n	800595a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	089b      	lsrs	r3, r3, #2
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 809a 	beq.w	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	0a5b      	lsrs	r3, r3, #9
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8093 	beq.w	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fc17 	bl	8006186 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005958:	e08e      	b.n	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
 800595a:	e08d      	b.n	8005a78 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e007      	b.n	800597e <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d012      	beq.n	80059b0 <HAL_I2C_EV_IRQHandler+0x20e>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80059a6:	69b9      	ldr	r1, [r7, #24]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 ffdc 	bl	8006966 <I2C_Slave_ADDR>
 80059ae:	e066      	b.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <HAL_I2C_EV_IRQHandler+0x22e>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	0a5b      	lsrs	r3, r3, #9
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f817 	bl	80069fc <I2C_Slave_STOPF>
 80059ce:	e056      	b.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	2b21      	cmp	r3, #33	@ 0x21
 80059d4:	d002      	beq.n	80059dc <HAL_I2C_EV_IRQHandler+0x23a>
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b29      	cmp	r3, #41	@ 0x29
 80059da:	d125      	bne.n	8005a28 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <HAL_I2C_EV_IRQHandler+0x266>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	0a9b      	lsrs	r3, r3, #10
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_I2C_EV_IRQHandler+0x266>
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fef2 	bl	80067ea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a06:	e039      	b.n	8005a7c <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d033      	beq.n	8005a7c <HAL_I2C_EV_IRQHandler+0x2da>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	0a5b      	lsrs	r3, r3, #9
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d02d      	beq.n	8005a7c <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 ff1f 	bl	8006864 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a26:	e029      	b.n	8005a7c <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00f      	beq.n	8005a54 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	0a9b      	lsrs	r3, r3, #10
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 ff2a 	bl	80068a6 <I2C_SlaveReceive_RXNE>
 8005a52:	e014      	b.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	0a5b      	lsrs	r3, r3, #9
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 ff58 	bl	8006922 <I2C_SlaveReceive_BTF>
 8005a72:	e004      	b.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005a74:	bf00      	nop
 8005a76:	e002      	b.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a78:	bf00      	nop
 8005a7a:	e000      	b.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a7c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	@ 0x28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_I2C_ER_IRQHandler+0x4e>
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	f043 0301 	orr.w	r3, r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ad0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	0a5b      	lsrs	r3, r3, #9
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <HAL_I2C_ER_IRQHandler+0x78>
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005afa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	0a9b      	lsrs	r3, r3, #10
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d03f      	beq.n	8005b88 <HAL_I2C_ER_IRQHandler+0x104>
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d039      	beq.n	8005b88 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005b14:	7efb      	ldrb	r3, [r7, #27]
 8005b16:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b26:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005b2e:	7ebb      	ldrb	r3, [r7, #26]
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d112      	bne.n	8005b5a <HAL_I2C_ER_IRQHandler+0xd6>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10f      	bne.n	8005b5a <HAL_I2C_ER_IRQHandler+0xd6>
 8005b3a:	7cfb      	ldrb	r3, [r7, #19]
 8005b3c:	2b21      	cmp	r3, #33	@ 0x21
 8005b3e:	d008      	beq.n	8005b52 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005b40:	7cfb      	ldrb	r3, [r7, #19]
 8005b42:	2b29      	cmp	r3, #41	@ 0x29
 8005b44:	d005      	beq.n	8005b52 <HAL_I2C_ER_IRQHandler+0xce>
 8005b46:	7cfb      	ldrb	r3, [r7, #19]
 8005b48:	2b28      	cmp	r3, #40	@ 0x28
 8005b4a:	d106      	bne.n	8005b5a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b21      	cmp	r3, #33	@ 0x21
 8005b50:	d103      	bne.n	8005b5a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 f882 	bl	8006c5c <I2C_Slave_AF>
 8005b58:	e016      	b.n	8005b88 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b62:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	f043 0304 	orr.w	r3, r3, #4
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b6c:	7efb      	ldrb	r3, [r7, #27]
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d002      	beq.n	8005b78 <HAL_I2C_ER_IRQHandler+0xf4>
 8005b72:	7efb      	ldrb	r3, [r7, #27]
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	d107      	bne.n	8005b88 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b86:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	0adb      	lsrs	r3, r3, #11
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <HAL_I2C_ER_IRQHandler+0x12e>
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	f043 0308 	orr.w	r3, r3, #8
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005bb0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 f8bd 	bl	8006d44 <I2C_ITError>
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3728      	adds	r7, #40	@ 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	70fb      	strb	r3, [r7, #3]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cb8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d150      	bne.n	8005d6a <I2C_MasterTransmit_TXE+0xc8>
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b21      	cmp	r3, #33	@ 0x21
 8005ccc:	d14d      	bne.n	8005d6a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d01d      	beq.n	8005d10 <I2C_MasterTransmit_TXE+0x6e>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d01a      	beq.n	8005d10 <I2C_MasterTransmit_TXE+0x6e>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ce0:	d016      	beq.n	8005d10 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cf0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2211      	movs	r2, #17
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff62 	bl	8005bd2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d0e:	e060      	b.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d1e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d2e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d107      	bne.n	8005d5a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff ff7d 	bl	8005c52 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d58:	e03b      	b.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ff35 	bl	8005bd2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d68:	e033      	b.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b21      	cmp	r3, #33	@ 0x21
 8005d6e:	d005      	beq.n	8005d7c <I2C_MasterTransmit_TXE+0xda>
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d12d      	bne.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b22      	cmp	r3, #34	@ 0x22
 8005d7a:	d12a      	bne.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d108      	bne.n	8005d98 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d94:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d96:	e01c      	b.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d103      	bne.n	8005dac <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f88e 	bl	8005ec6 <I2C_MemoryTransmit_TXE_BTF>
}
 8005daa:	e012      	b.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005dd0:	e7ff      	b.n	8005dd2 <I2C_MasterTransmit_TXE+0x130>
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b21      	cmp	r3, #33	@ 0x21
 8005df2:	d164      	bne.n	8005ebe <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	781a      	ldrb	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005e22:	e04c      	b.n	8005ebe <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d01d      	beq.n	8005e66 <I2C_MasterTransmit_BTF+0x8c>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d01a      	beq.n	8005e66 <I2C_MasterTransmit_BTF+0x8c>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e36:	d016      	beq.n	8005e66 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e46:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2211      	movs	r2, #17
 8005e4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff feb7 	bl	8005bd2 <HAL_I2C_MasterTxCpltCallback>
}
 8005e64:	e02b      	b.n	8005ebe <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e74:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e84:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b40      	cmp	r3, #64	@ 0x40
 8005e9e:	d107      	bne.n	8005eb0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fed2 	bl	8005c52 <HAL_I2C_MemTxCpltCallback>
}
 8005eae:	e006      	b.n	8005ebe <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff fe8a 	bl	8005bd2 <HAL_I2C_MasterTxCpltCallback>
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d11d      	bne.n	8005f1a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10b      	bne.n	8005efe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005efc:	e077      	b.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	121b      	asrs	r3, r3, #8
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f18:	e069      	b.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10b      	bne.n	8005f3a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f38:	e059      	b.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d152      	bne.n	8005fe8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b22      	cmp	r3, #34	@ 0x22
 8005f46:	d10d      	bne.n	8005f64 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f56:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f62:	e044      	b.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d015      	beq.n	8005f9a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	2b21      	cmp	r3, #33	@ 0x21
 8005f72:	d112      	bne.n	8005f9a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f98:	e029      	b.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d124      	bne.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	2b21      	cmp	r3, #33	@ 0x21
 8005fa8:	d121      	bne.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fb8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fc8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fe36 	bl	8005c52 <HAL_I2C_MemTxCpltCallback>
}
 8005fe6:	e002      	b.n	8005fee <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fbc5 	bl	8005778 <I2C_Flush_DR>
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b22      	cmp	r3, #34	@ 0x22
 8006008:	f040 80b9 	bne.w	800617e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b03      	cmp	r3, #3
 800601e:	d921      	bls.n	8006064 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b03      	cmp	r3, #3
 800604e:	f040 8096 	bne.w	800617e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006060:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006062:	e08c      	b.n	800617e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	2b02      	cmp	r3, #2
 800606a:	d07f      	beq.n	800616c <I2C_MasterReceive_RXNE+0x176>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d002      	beq.n	8006078 <I2C_MasterReceive_RXNE+0x82>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d179      	bne.n	800616c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 f83d 	bl	80070f8 <I2C_WaitOnSTOPRequestThroughIT>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d14c      	bne.n	800611e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006092:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	d10a      	bne.n	80060f4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fdba 	bl	8005c66 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060f2:	e044      	b.n	800617e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d002      	beq.n	8006108 <I2C_MasterReceive_RXNE+0x112>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b20      	cmp	r3, #32
 8006106:	d103      	bne.n	8006110 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
 800610e:	e002      	b.n	8006116 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2212      	movs	r2, #18
 8006114:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fd65 	bl	8005be6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800611c:	e02f      	b.n	800617e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800612c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fd88 	bl	8005c7a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800616a:	e008      	b.n	800617e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800617a:	605a      	str	r2, [r3, #4]
}
 800617c:	e7ff      	b.n	800617e <I2C_MasterReceive_RXNE+0x188>
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b04      	cmp	r3, #4
 800619c:	d11b      	bne.n	80061d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80061d4:	e0c4      	b.n	8006360 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d129      	bne.n	8006234 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d00a      	beq.n	800620c <I2C_MasterReceive_BTF+0x86>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d007      	beq.n	800620c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006232:	e095      	b.n	8006360 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d17d      	bne.n	800633a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d002      	beq.n	800624a <I2C_MasterReceive_BTF+0xc4>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b10      	cmp	r3, #16
 8006248:	d108      	bne.n	800625c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e016      	b.n	800628a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b04      	cmp	r3, #4
 8006260:	d002      	beq.n	8006268 <I2C_MasterReceive_BTF+0xe2>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d108      	bne.n	800627a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e007      	b.n	800628a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006288:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691a      	ldr	r2, [r3, #16]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80062e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b40      	cmp	r3, #64	@ 0x40
 80062f8:	d10a      	bne.n	8006310 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fcac 	bl	8005c66 <HAL_I2C_MemRxCpltCallback>
}
 800630e:	e027      	b.n	8006360 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b08      	cmp	r3, #8
 800631c:	d002      	beq.n	8006324 <I2C_MasterReceive_BTF+0x19e>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b20      	cmp	r3, #32
 8006322:	d103      	bne.n	800632c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	631a      	str	r2, [r3, #48]	@ 0x30
 800632a:	e002      	b.n	8006332 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2212      	movs	r2, #18
 8006330:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fc57 	bl	8005be6 <HAL_I2C_MasterRxCpltCallback>
}
 8006338:	e012      	b.n	8006360 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d117      	bne.n	80063ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006394:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006396:	e067      	b.n	8006468 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	611a      	str	r2, [r3, #16]
}
 80063aa:	e05d      	b.n	8006468 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b4:	d133      	bne.n	800641e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b21      	cmp	r3, #33	@ 0x21
 80063c0:	d109      	bne.n	80063d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063d2:	611a      	str	r2, [r3, #16]
 80063d4:	e008      	b.n	80063e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <I2C_Master_SB+0x92>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d108      	bne.n	800640c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d032      	beq.n	8006468 <I2C_Master_SB+0x100>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d02d      	beq.n	8006468 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800641a:	605a      	str	r2, [r3, #4]
}
 800641c:	e024      	b.n	8006468 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10e      	bne.n	8006444 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642a:	b29b      	uxth	r3, r3
 800642c:	11db      	asrs	r3, r3, #7
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0306 	and.w	r3, r3, #6
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f063 030f 	orn	r3, r3, #15
 800643a:	b2da      	uxtb	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	611a      	str	r2, [r3, #16]
}
 8006442:	e011      	b.n	8006468 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10d      	bne.n	8006468 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006450:	b29b      	uxth	r3, r3
 8006452:	11db      	asrs	r3, r3, #7
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 0306 	and.w	r3, r3, #6
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f063 030e 	orn	r3, r3, #14
 8006460:	b2da      	uxtb	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	611a      	str	r2, [r3, #16]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <I2C_Master_ADD10+0x26>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00c      	beq.n	80064bc <I2C_Master_ADD10+0x48>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d007      	beq.n	80064bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ba:	605a      	str	r2, [r3, #4]
  }
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b091      	sub	sp, #68	@ 0x44
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b22      	cmp	r3, #34	@ 0x22
 80064f0:	f040 8169 	bne.w	80067c6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10f      	bne.n	800651c <I2C_Master_ADDR+0x54>
 80064fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006500:	2b40      	cmp	r3, #64	@ 0x40
 8006502:	d10b      	bne.n	800651c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006504:	2300      	movs	r3, #0
 8006506:	633b      	str	r3, [r7, #48]	@ 0x30
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	633b      	str	r3, [r7, #48]	@ 0x30
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	e160      	b.n	80067de <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11d      	bne.n	8006560 <I2C_Master_ADDR+0x98>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800652c:	d118      	bne.n	8006560 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652e:	2300      	movs	r3, #0
 8006530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006552:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	651a      	str	r2, [r3, #80]	@ 0x50
 800655e:	e13e      	b.n	80067de <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d113      	bne.n	8006592 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656a:	2300      	movs	r3, #0
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e115      	b.n	80067be <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	f040 808a 	bne.w	80066b2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065a4:	d137      	bne.n	8006616 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065b4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c4:	d113      	bne.n	80065ee <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065d4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	e0e7      	b.n	80067be <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ee:	2300      	movs	r3, #0
 80065f0:	623b      	str	r3, [r7, #32]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e0d3      	b.n	80067be <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	2b08      	cmp	r3, #8
 800661a:	d02e      	beq.n	800667a <I2C_Master_ADDR+0x1b2>
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	2b20      	cmp	r3, #32
 8006620:	d02b      	beq.n	800667a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006624:	2b12      	cmp	r3, #18
 8006626:	d102      	bne.n	800662e <I2C_Master_ADDR+0x166>
 8006628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662a:	2b01      	cmp	r3, #1
 800662c:	d125      	bne.n	800667a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	2b04      	cmp	r3, #4
 8006632:	d00e      	beq.n	8006652 <I2C_Master_ADDR+0x18a>
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	2b02      	cmp	r3, #2
 8006638:	d00b      	beq.n	8006652 <I2C_Master_ADDR+0x18a>
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	2b10      	cmp	r3, #16
 800663e:	d008      	beq.n	8006652 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	e007      	b.n	8006662 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006660:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	e0a1      	b.n	80067be <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006688:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e085      	b.n	80067be <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d14d      	bne.n	8006758 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d016      	beq.n	80066f0 <I2C_Master_ADDR+0x228>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d013      	beq.n	80066f0 <I2C_Master_ADDR+0x228>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	2b10      	cmp	r3, #16
 80066cc:	d010      	beq.n	80066f0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066dc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e007      	b.n	8006700 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066fe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800670a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800670e:	d117      	bne.n	8006740 <I2C_Master_ADDR+0x278>
 8006710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006712:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006716:	d00b      	beq.n	8006730 <I2C_Master_ADDR+0x268>
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	2b01      	cmp	r3, #1
 800671c:	d008      	beq.n	8006730 <I2C_Master_ADDR+0x268>
 800671e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006720:	2b08      	cmp	r3, #8
 8006722:	d005      	beq.n	8006730 <I2C_Master_ADDR+0x268>
 8006724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006726:	2b10      	cmp	r3, #16
 8006728:	d002      	beq.n	8006730 <I2C_Master_ADDR+0x268>
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	2b20      	cmp	r3, #32
 800672e:	d107      	bne.n	8006740 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800673e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	e032      	b.n	80067be <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006766:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006776:	d117      	bne.n	80067a8 <I2C_Master_ADDR+0x2e0>
 8006778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800677e:	d00b      	beq.n	8006798 <I2C_Master_ADDR+0x2d0>
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	2b01      	cmp	r3, #1
 8006784:	d008      	beq.n	8006798 <I2C_Master_ADDR+0x2d0>
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	2b08      	cmp	r3, #8
 800678a:	d005      	beq.n	8006798 <I2C_Master_ADDR+0x2d0>
 800678c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678e:	2b10      	cmp	r3, #16
 8006790:	d002      	beq.n	8006798 <I2C_Master_ADDR+0x2d0>
 8006792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006794:	2b20      	cmp	r3, #32
 8006796:	d107      	bne.n	80067a8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80067c4:	e00b      	b.n	80067de <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	68fb      	ldr	r3, [r7, #12]
}
 80067dc:	e7ff      	b.n	80067de <I2C_Master_ADDR+0x316>
 80067de:	bf00      	nop
 80067e0:	3744      	adds	r7, #68	@ 0x44
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d02b      	beq.n	800685c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d114      	bne.n	800685c <I2C_SlaveTransmit_TXE+0x72>
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	2b29      	cmp	r3, #41	@ 0x29
 8006836:	d111      	bne.n	800685c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006846:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2221      	movs	r2, #33	@ 0x21
 800684c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2228      	movs	r2, #40	@ 0x28
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff f9cf 	bl	8005bfa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800685c:	bf00      	nop
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d011      	beq.n	800689a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	781a      	ldrb	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02c      	beq.n	800691a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d114      	bne.n	800691a <I2C_SlaveReceive_RXNE+0x74>
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068f4:	d111      	bne.n	800691a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006904:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2222      	movs	r2, #34	@ 0x22
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2228      	movs	r2, #40	@ 0x28
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff f97a 	bl	8005c0e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d012      	beq.n	800695a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006980:	2b28      	cmp	r3, #40	@ 0x28
 8006982:	d127      	bne.n	80069d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006992:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	089b      	lsrs	r3, r3, #2
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80069a0:	2301      	movs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	09db      	lsrs	r3, r3, #7
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d103      	bne.n	80069b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	81bb      	strh	r3, [r7, #12]
 80069b6:	e002      	b.n	80069be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80069c6:	89ba      	ldrh	r2, [r7, #12]
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff f928 	bl	8005c22 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80069d2:	e00e      	b.n	80069f2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d4:	2300      	movs	r3, #0
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	60bb      	str	r3, [r7, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	60bb      	str	r3, [r7, #8]
 80069e8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a0a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a1a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	60bb      	str	r3, [r7, #8]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a48:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a58:	d172      	bne.n	8006b40 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b22      	cmp	r3, #34	@ 0x22
 8006a5e:	d002      	beq.n	8006a66 <I2C_Slave_STOPF+0x6a>
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a64:	d135      	bne.n	8006ad2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a82:	f043 0204 	orr.w	r2, r3, #4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe f990 	bl	8004dc4 <HAL_DMA_GetState>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d049      	beq.n	8006b3e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	4a69      	ldr	r2, [pc, #420]	@ (8006c54 <I2C_Slave_STOPF+0x258>)
 8006ab0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fd ffd8 	bl	8004a6c <HAL_DMA_Abort_IT>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d03d      	beq.n	8006b3e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ad0:	e035      	b.n	8006b3e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	f043 0204 	orr.w	r2, r3, #4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe f95a 	bl	8004dc4 <HAL_DMA_GetState>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d014      	beq.n	8006b40 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1a:	4a4e      	ldr	r2, [pc, #312]	@ (8006c54 <I2C_Slave_STOPF+0x258>)
 8006b1c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fd ffa2 	bl	8004a6c <HAL_DMA_Abort_IT>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4798      	blx	r3
 8006b3c:	e000      	b.n	8006b40 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b3e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d03e      	beq.n	8006bc8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d112      	bne.n	8006b7e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	d112      	bne.n	8006bb2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691a      	ldr	r2, [r3, #16]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc0:	f043 0204 	orr.w	r2, r3, #4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f8b7 	bl	8006d44 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006bd6:	e039      	b.n	8006c4c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bdc:	d109      	bne.n	8006bf2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2228      	movs	r2, #40	@ 0x28
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff f80e 	bl	8005c0e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b28      	cmp	r3, #40	@ 0x28
 8006bfc:	d111      	bne.n	8006c22 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <I2C_Slave_STOPF+0x25c>)
 8006c02:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff f80f 	bl	8005c3e <HAL_I2C_ListenCpltCallback>
}
 8006c20:	e014      	b.n	8006c4c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	2b22      	cmp	r3, #34	@ 0x22
 8006c28:	d002      	beq.n	8006c30 <I2C_Slave_STOPF+0x234>
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b22      	cmp	r3, #34	@ 0x22
 8006c2e:	d10d      	bne.n	8006c4c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fe ffe1 	bl	8005c0e <HAL_I2C_SlaveRxCpltCallback>
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	08006fa9 	.word	0x08006fa9
 8006c58:	ffff0000 	.word	0xffff0000

08006c5c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d002      	beq.n	8006c7e <I2C_Slave_AF+0x22>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d129      	bne.n	8006cd2 <I2C_Slave_AF+0x76>
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b28      	cmp	r3, #40	@ 0x28
 8006c82:	d126      	bne.n	8006cd2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a2e      	ldr	r2, [pc, #184]	@ (8006d40 <I2C_Slave_AF+0xe4>)
 8006c88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c98:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ca2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cb2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fe ffb7 	bl	8005c3e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006cd0:	e031      	b.n	8006d36 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b21      	cmp	r3, #33	@ 0x21
 8006cd6:	d129      	bne.n	8006d2c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a19      	ldr	r2, [pc, #100]	@ (8006d40 <I2C_Slave_AF+0xe4>)
 8006cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2221      	movs	r2, #33	@ 0x21
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d02:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d0c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d1c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fe fd2a 	bl	8005778 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fe ff68 	bl	8005bfa <HAL_I2C_SlaveTxCpltCallback>
}
 8006d2a:	e004      	b.n	8006d36 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d34:	615a      	str	r2, [r3, #20]
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	ffff0000 	.word	0xffff0000

08006d44 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d002      	beq.n	8006d68 <I2C_ITError+0x24>
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b40      	cmp	r3, #64	@ 0x40
 8006d66:	d10a      	bne.n	8006d7e <I2C_ITError+0x3a>
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2b22      	cmp	r3, #34	@ 0x22
 8006d6c:	d107      	bne.n	8006d7e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d84:	2b28      	cmp	r3, #40	@ 0x28
 8006d86:	d107      	bne.n	8006d98 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2228      	movs	r2, #40	@ 0x28
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d96:	e015      	b.n	8006dc4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006da2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006da6:	d00a      	beq.n	8006dbe <I2C_ITError+0x7a>
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	2b60      	cmp	r3, #96	@ 0x60
 8006dac:	d007      	beq.n	8006dbe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd2:	d162      	bne.n	8006e9a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006de2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d020      	beq.n	8006e34 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df6:	4a6a      	ldr	r2, [pc, #424]	@ (8006fa0 <I2C_ITError+0x25c>)
 8006df8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fd fe34 	bl	8004a6c <HAL_DMA_Abort_IT>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8089 	beq.w	8006f1e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4798      	blx	r3
 8006e32:	e074      	b.n	8006f1e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	4a59      	ldr	r2, [pc, #356]	@ (8006fa0 <I2C_ITError+0x25c>)
 8006e3a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fd fe13 	bl	8004a6c <HAL_DMA_Abort_IT>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d068      	beq.n	8006f1e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e56:	2b40      	cmp	r3, #64	@ 0x40
 8006e58:	d10b      	bne.n	8006e72 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	e041      	b.n	8006f1e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b60      	cmp	r3, #96	@ 0x60
 8006ea4:	d125      	bne.n	8006ef2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebe:	2b40      	cmp	r3, #64	@ 0x40
 8006ec0:	d10b      	bne.n	8006eda <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0201 	bic.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fe fecf 	bl	8005c8e <HAL_I2C_AbortCpltCallback>
 8006ef0:	e015      	b.n	8006f1e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efc:	2b40      	cmp	r3, #64	@ 0x40
 8006efe:	d10b      	bne.n	8006f18 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fe feae 	bl	8005c7a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10e      	bne.n	8006f4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f5a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f62:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d113      	bne.n	8006f98 <I2C_ITError+0x254>
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b28      	cmp	r3, #40	@ 0x28
 8006f74:	d110      	bne.n	8006f98 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <I2C_ITError+0x260>)
 8006f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fe fe53 	bl	8005c3e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	08006fa9 	.word	0x08006fa9
 8006fa4:	ffff0000 	.word	0xffff0000

08006fa8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80070f0 <I2C_DMAAbort+0x148>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	08db      	lsrs	r3, r3, #3
 8006fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80070f4 <I2C_DMAAbort+0x14c>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	0a1a      	lsrs	r2, r3, #8
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	00da      	lsls	r2, r3, #3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	f043 0220 	orr.w	r2, r3, #32
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006fee:	e00a      	b.n	8007006 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007004:	d0ea      	beq.n	8006fdc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007012:	2200      	movs	r2, #0
 8007014:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	2200      	movs	r2, #0
 8007024:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007034:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007048:	2200      	movs	r2, #0
 800704a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	2200      	movs	r2, #0
 800705a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b60      	cmp	r3, #96	@ 0x60
 8007076:	d10e      	bne.n	8007096 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800708e:	6978      	ldr	r0, [r7, #20]
 8007090:	f7fe fdfd 	bl	8005c8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007094:	e027      	b.n	80070e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007096:	7cfb      	ldrb	r3, [r7, #19]
 8007098:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800709c:	2b28      	cmp	r3, #40	@ 0x28
 800709e:	d117      	bne.n	80070d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2228      	movs	r2, #40	@ 0x28
 80070ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80070ce:	e007      	b.n	80070e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f7fe fdca 	bl	8005c7a <HAL_I2C_ErrorCallback>
}
 80070e6:	bf00      	nop
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000004 	.word	0x20000004
 80070f4:	14f8b589 	.word	0x14f8b589

080070f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007104:	4b13      	ldr	r3, [pc, #76]	@ (8007154 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	08db      	lsrs	r3, r3, #3
 800710a:	4a13      	ldr	r2, [pc, #76]	@ (8007158 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	0a1a      	lsrs	r2, r3, #8
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3b01      	subs	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d107      	bne.n	8007136 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e008      	b.n	8007148 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007144:	d0e9      	beq.n	800711a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	20000004 	.word	0x20000004
 8007158:	14f8b589 	.word	0x14f8b589

0800715c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800716c:	d103      	bne.n	8007176 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007174:	e007      	b.n	8007186 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800717e:	d102      	bne.n	8007186 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2208      	movs	r2, #8
 8007184:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e267      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d075      	beq.n	800729e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80071b2:	4b88      	ldr	r3, [pc, #544]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 030c 	and.w	r3, r3, #12
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d00c      	beq.n	80071d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071be:	4b85      	ldr	r3, [pc, #532]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d112      	bne.n	80071f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ca:	4b82      	ldr	r3, [pc, #520]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071d6:	d10b      	bne.n	80071f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d8:	4b7e      	ldr	r3, [pc, #504]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d05b      	beq.n	800729c <HAL_RCC_OscConfig+0x108>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d157      	bne.n	800729c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e242      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f8:	d106      	bne.n	8007208 <HAL_RCC_OscConfig+0x74>
 80071fa:	4b76      	ldr	r3, [pc, #472]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a75      	ldr	r2, [pc, #468]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e01d      	b.n	8007244 <HAL_RCC_OscConfig+0xb0>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007210:	d10c      	bne.n	800722c <HAL_RCC_OscConfig+0x98>
 8007212:	4b70      	ldr	r3, [pc, #448]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a6f      	ldr	r2, [pc, #444]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	4b6d      	ldr	r3, [pc, #436]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a6c      	ldr	r2, [pc, #432]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	e00b      	b.n	8007244 <HAL_RCC_OscConfig+0xb0>
 800722c:	4b69      	ldr	r3, [pc, #420]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a68      	ldr	r2, [pc, #416]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	4b66      	ldr	r3, [pc, #408]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a65      	ldr	r2, [pc, #404]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 800723e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d013      	beq.n	8007274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724c:	f7fc fa3c 	bl	80036c8 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007254:	f7fc fa38 	bl	80036c8 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b64      	cmp	r3, #100	@ 0x64
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e207      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007266:	4b5b      	ldr	r3, [pc, #364]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f0      	beq.n	8007254 <HAL_RCC_OscConfig+0xc0>
 8007272:	e014      	b.n	800729e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007274:	f7fc fa28 	bl	80036c8 <HAL_GetTick>
 8007278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800727c:	f7fc fa24 	bl	80036c8 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b64      	cmp	r3, #100	@ 0x64
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e1f3      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800728e:	4b51      	ldr	r3, [pc, #324]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1f0      	bne.n	800727c <HAL_RCC_OscConfig+0xe8>
 800729a:	e000      	b.n	800729e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800729c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d063      	beq.n	8007372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80072aa:	4b4a      	ldr	r3, [pc, #296]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 030c 	and.w	r3, r3, #12
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072b6:	4b47      	ldr	r3, [pc, #284]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d11c      	bne.n	80072fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072c2:	4b44      	ldr	r3, [pc, #272]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d116      	bne.n	80072fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ce:	4b41      	ldr	r3, [pc, #260]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <HAL_RCC_OscConfig+0x152>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d001      	beq.n	80072e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e1c7      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e6:	4b3b      	ldr	r3, [pc, #236]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4937      	ldr	r1, [pc, #220]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072fa:	e03a      	b.n	8007372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d020      	beq.n	8007346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007304:	4b34      	ldr	r3, [pc, #208]	@ (80073d8 <HAL_RCC_OscConfig+0x244>)
 8007306:	2201      	movs	r2, #1
 8007308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730a:	f7fc f9dd 	bl	80036c8 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007312:	f7fc f9d9 	bl	80036c8 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e1a8      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007324:	4b2b      	ldr	r3, [pc, #172]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f0      	beq.n	8007312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007330:	4b28      	ldr	r3, [pc, #160]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	4925      	ldr	r1, [pc, #148]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007340:	4313      	orrs	r3, r2
 8007342:	600b      	str	r3, [r1, #0]
 8007344:	e015      	b.n	8007372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007346:	4b24      	ldr	r3, [pc, #144]	@ (80073d8 <HAL_RCC_OscConfig+0x244>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fc f9bc 	bl	80036c8 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007354:	f7fc f9b8 	bl	80036c8 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e187      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007366:	4b1b      	ldr	r3, [pc, #108]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f0      	bne.n	8007354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d036      	beq.n	80073ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d016      	beq.n	80073b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007386:	4b15      	ldr	r3, [pc, #84]	@ (80073dc <HAL_RCC_OscConfig+0x248>)
 8007388:	2201      	movs	r2, #1
 800738a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738c:	f7fc f99c 	bl	80036c8 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007394:	f7fc f998 	bl	80036c8 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e167      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <HAL_RCC_OscConfig+0x240>)
 80073a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f0      	beq.n	8007394 <HAL_RCC_OscConfig+0x200>
 80073b2:	e01b      	b.n	80073ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073b4:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <HAL_RCC_OscConfig+0x248>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ba:	f7fc f985 	bl	80036c8 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073c0:	e00e      	b.n	80073e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073c2:	f7fc f981 	bl	80036c8 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d907      	bls.n	80073e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e150      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
 80073d4:	40023800 	.word	0x40023800
 80073d8:	42470000 	.word	0x42470000
 80073dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073e0:	4b88      	ldr	r3, [pc, #544]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80073e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1ea      	bne.n	80073c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8097 	beq.w	8007528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073fe:	4b81      	ldr	r3, [pc, #516]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10f      	bne.n	800742a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]
 800740e:	4b7d      	ldr	r3, [pc, #500]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	4a7c      	ldr	r2, [pc, #496]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007418:	6413      	str	r3, [r2, #64]	@ 0x40
 800741a:	4b7a      	ldr	r3, [pc, #488]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007422:	60bb      	str	r3, [r7, #8]
 8007424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007426:	2301      	movs	r3, #1
 8007428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800742a:	4b77      	ldr	r3, [pc, #476]	@ (8007608 <HAL_RCC_OscConfig+0x474>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d118      	bne.n	8007468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007436:	4b74      	ldr	r3, [pc, #464]	@ (8007608 <HAL_RCC_OscConfig+0x474>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a73      	ldr	r2, [pc, #460]	@ (8007608 <HAL_RCC_OscConfig+0x474>)
 800743c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007442:	f7fc f941 	bl	80036c8 <HAL_GetTick>
 8007446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800744a:	f7fc f93d 	bl	80036c8 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e10c      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800745c:	4b6a      	ldr	r3, [pc, #424]	@ (8007608 <HAL_RCC_OscConfig+0x474>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f0      	beq.n	800744a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d106      	bne.n	800747e <HAL_RCC_OscConfig+0x2ea>
 8007470:	4b64      	ldr	r3, [pc, #400]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007474:	4a63      	ldr	r2, [pc, #396]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	6713      	str	r3, [r2, #112]	@ 0x70
 800747c:	e01c      	b.n	80074b8 <HAL_RCC_OscConfig+0x324>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b05      	cmp	r3, #5
 8007484:	d10c      	bne.n	80074a0 <HAL_RCC_OscConfig+0x30c>
 8007486:	4b5f      	ldr	r3, [pc, #380]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800748a:	4a5e      	ldr	r2, [pc, #376]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 800748c:	f043 0304 	orr.w	r3, r3, #4
 8007490:	6713      	str	r3, [r2, #112]	@ 0x70
 8007492:	4b5c      	ldr	r3, [pc, #368]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007496:	4a5b      	ldr	r2, [pc, #364]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	6713      	str	r3, [r2, #112]	@ 0x70
 800749e:	e00b      	b.n	80074b8 <HAL_RCC_OscConfig+0x324>
 80074a0:	4b58      	ldr	r3, [pc, #352]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80074a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a4:	4a57      	ldr	r2, [pc, #348]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80074a6:	f023 0301 	bic.w	r3, r3, #1
 80074aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ac:	4b55      	ldr	r3, [pc, #340]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b0:	4a54      	ldr	r2, [pc, #336]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80074b2:	f023 0304 	bic.w	r3, r3, #4
 80074b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d015      	beq.n	80074ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c0:	f7fc f902 	bl	80036c8 <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c6:	e00a      	b.n	80074de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074c8:	f7fc f8fe 	bl	80036c8 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e0cb      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074de:	4b49      	ldr	r3, [pc, #292]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0ee      	beq.n	80074c8 <HAL_RCC_OscConfig+0x334>
 80074ea:	e014      	b.n	8007516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ec:	f7fc f8ec 	bl	80036c8 <HAL_GetTick>
 80074f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074f2:	e00a      	b.n	800750a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074f4:	f7fc f8e8 	bl	80036c8 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007502:	4293      	cmp	r3, r2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e0b5      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800750a:	4b3e      	ldr	r3, [pc, #248]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 800750c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1ee      	bne.n	80074f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d105      	bne.n	8007528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800751c:	4b39      	ldr	r3, [pc, #228]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007520:	4a38      	ldr	r2, [pc, #224]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007526:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80a1 	beq.w	8007674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007532:	4b34      	ldr	r3, [pc, #208]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 030c 	and.w	r3, r3, #12
 800753a:	2b08      	cmp	r3, #8
 800753c:	d05c      	beq.n	80075f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d141      	bne.n	80075ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007546:	4b31      	ldr	r3, [pc, #196]	@ (800760c <HAL_RCC_OscConfig+0x478>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754c:	f7fc f8bc 	bl	80036c8 <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007554:	f7fc f8b8 	bl	80036c8 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e087      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007566:	4b27      	ldr	r3, [pc, #156]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f0      	bne.n	8007554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69da      	ldr	r2, [r3, #28]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	019b      	lsls	r3, r3, #6
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	3b01      	subs	r3, #1
 800758c:	041b      	lsls	r3, r3, #16
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	061b      	lsls	r3, r3, #24
 8007596:	491b      	ldr	r1, [pc, #108]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 8007598:	4313      	orrs	r3, r2
 800759a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800759c:	4b1b      	ldr	r3, [pc, #108]	@ (800760c <HAL_RCC_OscConfig+0x478>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a2:	f7fc f891 	bl	80036c8 <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075aa:	f7fc f88d 	bl	80036c8 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e05c      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075bc:	4b11      	ldr	r3, [pc, #68]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <HAL_RCC_OscConfig+0x416>
 80075c8:	e054      	b.n	8007674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ca:	4b10      	ldr	r3, [pc, #64]	@ (800760c <HAL_RCC_OscConfig+0x478>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d0:	f7fc f87a 	bl	80036c8 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d8:	f7fc f876 	bl	80036c8 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e045      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ea:	4b06      	ldr	r3, [pc, #24]	@ (8007604 <HAL_RCC_OscConfig+0x470>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1f0      	bne.n	80075d8 <HAL_RCC_OscConfig+0x444>
 80075f6:	e03d      	b.n	8007674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d107      	bne.n	8007610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e038      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
 8007604:	40023800 	.word	0x40023800
 8007608:	40007000 	.word	0x40007000
 800760c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007610:	4b1b      	ldr	r3, [pc, #108]	@ (8007680 <HAL_RCC_OscConfig+0x4ec>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d028      	beq.n	8007670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007628:	429a      	cmp	r2, r3
 800762a:	d121      	bne.n	8007670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007636:	429a      	cmp	r2, r3
 8007638:	d11a      	bne.n	8007670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007640:	4013      	ands	r3, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007648:	4293      	cmp	r3, r2
 800764a:	d111      	bne.n	8007670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	3b01      	subs	r3, #1
 800765a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800765c:	429a      	cmp	r2, r3
 800765e:	d107      	bne.n	8007670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800766c:	429a      	cmp	r2, r3
 800766e:	d001      	beq.n	8007674 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40023800 	.word	0x40023800

08007684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0cc      	b.n	8007832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007698:	4b68      	ldr	r3, [pc, #416]	@ (800783c <HAL_RCC_ClockConfig+0x1b8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d90c      	bls.n	80076c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a6:	4b65      	ldr	r3, [pc, #404]	@ (800783c <HAL_RCC_ClockConfig+0x1b8>)
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ae:	4b63      	ldr	r3, [pc, #396]	@ (800783c <HAL_RCC_ClockConfig+0x1b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e0b8      	b.n	8007832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d020      	beq.n	800770e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076d8:	4b59      	ldr	r3, [pc, #356]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	4a58      	ldr	r2, [pc, #352]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80076de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80076e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076f0:	4b53      	ldr	r3, [pc, #332]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4a52      	ldr	r2, [pc, #328]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80076fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076fc:	4b50      	ldr	r3, [pc, #320]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	494d      	ldr	r1, [pc, #308]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 800770a:	4313      	orrs	r3, r2
 800770c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d044      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d107      	bne.n	8007732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007722:	4b47      	ldr	r3, [pc, #284]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d119      	bne.n	8007762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e07f      	b.n	8007832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d003      	beq.n	8007742 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800773e:	2b03      	cmp	r3, #3
 8007740:	d107      	bne.n	8007752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007742:	4b3f      	ldr	r3, [pc, #252]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e06f      	b.n	8007832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007752:	4b3b      	ldr	r3, [pc, #236]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e067      	b.n	8007832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007762:	4b37      	ldr	r3, [pc, #220]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f023 0203 	bic.w	r2, r3, #3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	4934      	ldr	r1, [pc, #208]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007770:	4313      	orrs	r3, r2
 8007772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007774:	f7fb ffa8 	bl	80036c8 <HAL_GetTick>
 8007778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777a:	e00a      	b.n	8007792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800777c:	f7fb ffa4 	bl	80036c8 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800778a:	4293      	cmp	r3, r2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e04f      	b.n	8007832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007792:	4b2b      	ldr	r3, [pc, #172]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 020c 	and.w	r2, r3, #12
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d1eb      	bne.n	800777c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077a4:	4b25      	ldr	r3, [pc, #148]	@ (800783c <HAL_RCC_ClockConfig+0x1b8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d20c      	bcs.n	80077cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077b2:	4b22      	ldr	r3, [pc, #136]	@ (800783c <HAL_RCC_ClockConfig+0x1b8>)
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ba:	4b20      	ldr	r3, [pc, #128]	@ (800783c <HAL_RCC_ClockConfig+0x1b8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d001      	beq.n	80077cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e032      	b.n	8007832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d008      	beq.n	80077ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077d8:	4b19      	ldr	r3, [pc, #100]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	4916      	ldr	r1, [pc, #88]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0308 	and.w	r3, r3, #8
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077f6:	4b12      	ldr	r3, [pc, #72]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	490e      	ldr	r1, [pc, #56]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007806:	4313      	orrs	r3, r2
 8007808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800780a:	f000 f821 	bl	8007850 <HAL_RCC_GetSysClockFreq>
 800780e:	4602      	mov	r2, r0
 8007810:	4b0b      	ldr	r3, [pc, #44]	@ (8007840 <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	091b      	lsrs	r3, r3, #4
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	490a      	ldr	r1, [pc, #40]	@ (8007844 <HAL_RCC_ClockConfig+0x1c0>)
 800781c:	5ccb      	ldrb	r3, [r1, r3]
 800781e:	fa22 f303 	lsr.w	r3, r2, r3
 8007822:	4a09      	ldr	r2, [pc, #36]	@ (8007848 <HAL_RCC_ClockConfig+0x1c4>)
 8007824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007826:	4b09      	ldr	r3, [pc, #36]	@ (800784c <HAL_RCC_ClockConfig+0x1c8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f7fb ff08 	bl	8003640 <HAL_InitTick>

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40023c00 	.word	0x40023c00
 8007840:	40023800 	.word	0x40023800
 8007844:	0800cfdc 	.word	0x0800cfdc
 8007848:	20000004 	.word	0x20000004
 800784c:	20000008 	.word	0x20000008

08007850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007854:	b094      	sub	sp, #80	@ 0x50
 8007856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007868:	4b79      	ldr	r3, [pc, #484]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 030c 	and.w	r3, r3, #12
 8007870:	2b08      	cmp	r3, #8
 8007872:	d00d      	beq.n	8007890 <HAL_RCC_GetSysClockFreq+0x40>
 8007874:	2b08      	cmp	r3, #8
 8007876:	f200 80e1 	bhi.w	8007a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_RCC_GetSysClockFreq+0x34>
 800787e:	2b04      	cmp	r3, #4
 8007880:	d003      	beq.n	800788a <HAL_RCC_GetSysClockFreq+0x3a>
 8007882:	e0db      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007884:	4b73      	ldr	r3, [pc, #460]	@ (8007a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8007886:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007888:	e0db      	b.n	8007a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800788a:	4b73      	ldr	r3, [pc, #460]	@ (8007a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800788c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800788e:	e0d8      	b.n	8007a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007890:	4b6f      	ldr	r3, [pc, #444]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007898:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800789a:	4b6d      	ldr	r3, [pc, #436]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d063      	beq.n	800796e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	099b      	lsrs	r3, r3, #6
 80078ac:	2200      	movs	r2, #0
 80078ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80078ba:	2300      	movs	r3, #0
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80078c2:	4622      	mov	r2, r4
 80078c4:	462b      	mov	r3, r5
 80078c6:	f04f 0000 	mov.w	r0, #0
 80078ca:	f04f 0100 	mov.w	r1, #0
 80078ce:	0159      	lsls	r1, r3, #5
 80078d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078d4:	0150      	lsls	r0, r2, #5
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4621      	mov	r1, r4
 80078dc:	1a51      	subs	r1, r2, r1
 80078de:	6139      	str	r1, [r7, #16]
 80078e0:	4629      	mov	r1, r5
 80078e2:	eb63 0301 	sbc.w	r3, r3, r1
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078f4:	4659      	mov	r1, fp
 80078f6:	018b      	lsls	r3, r1, #6
 80078f8:	4651      	mov	r1, sl
 80078fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078fe:	4651      	mov	r1, sl
 8007900:	018a      	lsls	r2, r1, #6
 8007902:	4651      	mov	r1, sl
 8007904:	ebb2 0801 	subs.w	r8, r2, r1
 8007908:	4659      	mov	r1, fp
 800790a:	eb63 0901 	sbc.w	r9, r3, r1
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800791a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800791e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007922:	4690      	mov	r8, r2
 8007924:	4699      	mov	r9, r3
 8007926:	4623      	mov	r3, r4
 8007928:	eb18 0303 	adds.w	r3, r8, r3
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	462b      	mov	r3, r5
 8007930:	eb49 0303 	adc.w	r3, r9, r3
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007942:	4629      	mov	r1, r5
 8007944:	024b      	lsls	r3, r1, #9
 8007946:	4621      	mov	r1, r4
 8007948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800794c:	4621      	mov	r1, r4
 800794e:	024a      	lsls	r2, r1, #9
 8007950:	4610      	mov	r0, r2
 8007952:	4619      	mov	r1, r3
 8007954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007956:	2200      	movs	r2, #0
 8007958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800795a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800795c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007960:	f7f9 f922 	bl	8000ba8 <__aeabi_uldivmod>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4613      	mov	r3, r2
 800796a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800796c:	e058      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800796e:	4b38      	ldr	r3, [pc, #224]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	099b      	lsrs	r3, r3, #6
 8007974:	2200      	movs	r2, #0
 8007976:	4618      	mov	r0, r3
 8007978:	4611      	mov	r1, r2
 800797a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800797e:	623b      	str	r3, [r7, #32]
 8007980:	2300      	movs	r3, #0
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24
 8007984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007988:	4642      	mov	r2, r8
 800798a:	464b      	mov	r3, r9
 800798c:	f04f 0000 	mov.w	r0, #0
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	0159      	lsls	r1, r3, #5
 8007996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800799a:	0150      	lsls	r0, r2, #5
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4641      	mov	r1, r8
 80079a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80079a6:	4649      	mov	r1, r9
 80079a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079c0:	ebb2 040a 	subs.w	r4, r2, sl
 80079c4:	eb63 050b 	sbc.w	r5, r3, fp
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	00eb      	lsls	r3, r5, #3
 80079d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079d6:	00e2      	lsls	r2, r4, #3
 80079d8:	4614      	mov	r4, r2
 80079da:	461d      	mov	r5, r3
 80079dc:	4643      	mov	r3, r8
 80079de:	18e3      	adds	r3, r4, r3
 80079e0:	603b      	str	r3, [r7, #0]
 80079e2:	464b      	mov	r3, r9
 80079e4:	eb45 0303 	adc.w	r3, r5, r3
 80079e8:	607b      	str	r3, [r7, #4]
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80079f6:	4629      	mov	r1, r5
 80079f8:	028b      	lsls	r3, r1, #10
 80079fa:	4621      	mov	r1, r4
 80079fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a00:	4621      	mov	r1, r4
 8007a02:	028a      	lsls	r2, r1, #10
 8007a04:	4610      	mov	r0, r2
 8007a06:	4619      	mov	r1, r3
 8007a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	61fa      	str	r2, [r7, #28]
 8007a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a14:	f7f9 f8c8 	bl	8000ba8 <__aeabi_uldivmod>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007a20:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	0c1b      	lsrs	r3, r3, #16
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a3a:	e002      	b.n	8007a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a3c:	4b05      	ldr	r3, [pc, #20]	@ (8007a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3750      	adds	r7, #80	@ 0x50
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a4e:	bf00      	nop
 8007a50:	40023800 	.word	0x40023800
 8007a54:	00f42400 	.word	0x00f42400
 8007a58:	007a1200 	.word	0x007a1200

08007a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a60:	4b03      	ldr	r3, [pc, #12]	@ (8007a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a62:	681b      	ldr	r3, [r3, #0]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20000004 	.word	0x20000004

08007a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a78:	f7ff fff0 	bl	8007a5c <HAL_RCC_GetHCLKFreq>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	4b05      	ldr	r3, [pc, #20]	@ (8007a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	0a9b      	lsrs	r3, r3, #10
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	4903      	ldr	r1, [pc, #12]	@ (8007a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a8a:	5ccb      	ldrb	r3, [r1, r3]
 8007a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	40023800 	.word	0x40023800
 8007a98:	0800cfec 	.word	0x0800cfec

08007a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007aa0:	f7ff ffdc 	bl	8007a5c <HAL_RCC_GetHCLKFreq>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	0b5b      	lsrs	r3, r3, #13
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	4903      	ldr	r1, [pc, #12]	@ (8007ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ab2:	5ccb      	ldrb	r3, [r1, r3]
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	0800cfec 	.word	0x0800cfec

08007ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e07b      	b.n	8007bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d108      	bne.n	8007af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ae6:	d009      	beq.n	8007afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	61da      	str	r2, [r3, #28]
 8007aee:	e005      	b.n	8007afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fb fa5c 	bl	8002fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b80:	ea42 0103 	orr.w	r1, r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	f003 0104 	and.w	r1, r3, #4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba2:	f003 0210 	and.w	r2, r3, #16
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b08a      	sub	sp, #40	@ 0x28
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	607a      	str	r2, [r7, #4]
 8007be2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007be4:	2301      	movs	r3, #1
 8007be6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007be8:	f7fb fd6e 	bl	80036c8 <HAL_GetTick>
 8007bec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bf4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c00:	7ffb      	ldrb	r3, [r7, #31]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d00c      	beq.n	8007c20 <HAL_SPI_TransmitReceive+0x4a>
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c0c:	d106      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d102      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x46>
 8007c16:	7ffb      	ldrb	r3, [r7, #31]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d001      	beq.n	8007c20 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e17f      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d005      	beq.n	8007c32 <HAL_SPI_TransmitReceive+0x5c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_SPI_TransmitReceive+0x5c>
 8007c2c:	887b      	ldrh	r3, [r7, #2]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e174      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x6e>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e16d      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x34a>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d003      	beq.n	8007c60 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2205      	movs	r2, #5
 8007c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	887a      	ldrh	r2, [r7, #2]
 8007c70:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	887a      	ldrh	r2, [r7, #2]
 8007c76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	887a      	ldrh	r2, [r7, #2]
 8007c82:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	887a      	ldrh	r2, [r7, #2]
 8007c88:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca0:	2b40      	cmp	r3, #64	@ 0x40
 8007ca2:	d007      	beq.n	8007cb4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cbc:	d17e      	bne.n	8007dbc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0xf6>
 8007cc6:	8afb      	ldrh	r3, [r7, #22]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d16c      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd0:	881a      	ldrh	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cdc:	1c9a      	adds	r2, r3, #2
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf0:	e059      	b.n	8007da6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d11b      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x162>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d016      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0x162>
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d113      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d14:	881a      	ldrh	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d20:	1c9a      	adds	r2, r3, #2
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d119      	bne.n	8007d7a <HAL_SPI_TransmitReceive+0x1a4>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d014      	beq.n	8007d7a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d76:	2301      	movs	r3, #1
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d7a:	f7fb fca5 	bl	80036c8 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d80d      	bhi.n	8007da6 <HAL_SPI_TransmitReceive+0x1d0>
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d009      	beq.n	8007da6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e0bc      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1a0      	bne.n	8007cf2 <HAL_SPI_TransmitReceive+0x11c>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d19b      	bne.n	8007cf2 <HAL_SPI_TransmitReceive+0x11c>
 8007dba:	e082      	b.n	8007ec2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_SPI_TransmitReceive+0x1f4>
 8007dc4:	8afb      	ldrh	r3, [r7, #22]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d171      	bne.n	8007eae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	330c      	adds	r3, #12
 8007dd4:	7812      	ldrb	r2, [r2, #0]
 8007dd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007df0:	e05d      	b.n	8007eae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d11c      	bne.n	8007e3a <HAL_SPI_TransmitReceive+0x264>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d017      	beq.n	8007e3a <HAL_SPI_TransmitReceive+0x264>
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d114      	bne.n	8007e3a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	7812      	ldrb	r2, [r2, #0]
 8007e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d119      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x2a6>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d014      	beq.n	8007e7c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e7c:	f7fb fc24 	bl	80036c8 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d803      	bhi.n	8007e94 <HAL_SPI_TransmitReceive+0x2be>
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d102      	bne.n	8007e9a <HAL_SPI_TransmitReceive+0x2c4>
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e038      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d19c      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x21c>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d197      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ec2:	6a3a      	ldr	r2, [r7, #32]
 8007ec4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 f9d4 	bl	8008274 <SPI_EndRxTxTransaction>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e01d      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	613b      	str	r3, [r7, #16]
 8007f00:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
  }
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3728      	adds	r7, #40	@ 0x28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	099b      	lsrs	r3, r3, #6
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10f      	bne.n	8007f6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	099b      	lsrs	r3, r3, #6
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
    return;
 8007f6a:	e0d7      	b.n	800811c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	085b      	lsrs	r3, r3, #1
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <HAL_SPI_IRQHandler+0x66>
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	09db      	lsrs	r3, r3, #7
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3
    return;
 8007f8c:	e0c6      	b.n	800811c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10c      	bne.n	8007fb4 <HAL_SPI_IRQHandler+0x8c>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	099b      	lsrs	r3, r3, #6
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	0a1b      	lsrs	r3, r3, #8
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80b4 	beq.w	800811c <HAL_SPI_IRQHandler+0x1f4>
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 80ad 	beq.w	800811c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	099b      	lsrs	r3, r3, #6
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d023      	beq.n	8008016 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d011      	beq.n	8007ffe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fde:	f043 0204 	orr.w	r2, r3, #4
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	e00b      	b.n	8008016 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ffe:	2300      	movs	r3, #0
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	613b      	str	r3, [r7, #16]
 8008012:	693b      	ldr	r3, [r7, #16]
        return;
 8008014:	e082      	b.n	800811c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d014      	beq.n	800804c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008026:	f043 0201 	orr.w	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00c      	beq.n	8008072 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805c:	f043 0208 	orr.w	r2, r3, #8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008064:	2300      	movs	r3, #0
 8008066:	60bb      	str	r3, [r7, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	60bb      	str	r3, [r7, #8]
 8008070:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	2b00      	cmp	r3, #0
 8008078:	d04f      	beq.n	800811a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008088:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <HAL_SPI_IRQHandler+0x17e>
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d034      	beq.n	8008110 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0203 	bic.w	r2, r2, #3
 80080b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d011      	beq.n	80080e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c2:	4a18      	ldr	r2, [pc, #96]	@ (8008124 <HAL_SPI_IRQHandler+0x1fc>)
 80080c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fc fcce 	bl	8004a6c <HAL_DMA_Abort_IT>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d016      	beq.n	8008118 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ee:	4a0d      	ldr	r2, [pc, #52]	@ (8008124 <HAL_SPI_IRQHandler+0x1fc>)
 80080f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fc fcb8 	bl	8004a6c <HAL_DMA_Abort_IT>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008106:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800810e:	e003      	b.n	8008118 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f809 	bl	8008128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008116:	e000      	b.n	800811a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008118:	bf00      	nop
    return;
 800811a:	bf00      	nop
  }
}
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	0800813d 	.word	0x0800813d

08008128 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff ffe6 	bl	8008128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800815c:	bf00      	nop
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	4613      	mov	r3, r2
 8008172:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008174:	f7fb faa8 	bl	80036c8 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4413      	add	r3, r2
 8008182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008184:	f7fb faa0 	bl	80036c8 <HAL_GetTick>
 8008188:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800818a:	4b39      	ldr	r3, [pc, #228]	@ (8008270 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	015b      	lsls	r3, r3, #5
 8008190:	0d1b      	lsrs	r3, r3, #20
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	fb02 f303 	mul.w	r3, r2, r3
 8008198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800819a:	e055      	b.n	8008248 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a2:	d051      	beq.n	8008248 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081a4:	f7fb fa90 	bl	80036c8 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d902      	bls.n	80081ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d13d      	bne.n	8008236 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081d2:	d111      	bne.n	80081f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081dc:	d004      	beq.n	80081e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081e6:	d107      	bne.n	80081f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008200:	d10f      	bne.n	8008222 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008220:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e018      	b.n	8008268 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	e002      	b.n	8008248 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	3b01      	subs	r3, #1
 8008246:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4013      	ands	r3, r2
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	429a      	cmp	r2, r3
 8008256:	bf0c      	ite	eq
 8008258:	2301      	moveq	r3, #1
 800825a:	2300      	movne	r3, #0
 800825c:	b2db      	uxtb	r3, r3
 800825e:	461a      	mov	r2, r3
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	429a      	cmp	r2, r3
 8008264:	d19a      	bne.n	800819c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20000004 	.word	0x20000004

08008274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2201      	movs	r2, #1
 8008288:	2102      	movs	r1, #2
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff ff6a 	bl	8008164 <SPI_WaitFlagStateUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d007      	beq.n	80082a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e032      	b.n	800830c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008314 <SPI_EndRxTxTransaction+0xa0>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008318 <SPI_EndRxTxTransaction+0xa4>)
 80082ac:	fba2 2303 	umull	r2, r3, r2, r3
 80082b0:	0d5b      	lsrs	r3, r3, #21
 80082b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80082b6:	fb02 f303 	mul.w	r3, r2, r3
 80082ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082c4:	d112      	bne.n	80082ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2200      	movs	r2, #0
 80082ce:	2180      	movs	r1, #128	@ 0x80
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff ff47 	bl	8008164 <SPI_WaitFlagStateUntilTimeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d016      	beq.n	800830a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e0:	f043 0220 	orr.w	r2, r3, #32
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e00f      	b.n	800830c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008302:	2b80      	cmp	r3, #128	@ 0x80
 8008304:	d0f2      	beq.n	80082ec <SPI_EndRxTxTransaction+0x78>
 8008306:	e000      	b.n	800830a <SPI_EndRxTxTransaction+0x96>
        break;
 8008308:	bf00      	nop
  }

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000004 	.word	0x20000004
 8008318:	165e9f81 	.word	0x165e9f81

0800831c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e041      	b.n	80083b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d106      	bne.n	8008348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7fa fe96 	bl	8003074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3304      	adds	r3, #4
 8008358:	4619      	mov	r1, r3
 800835a:	4610      	mov	r0, r2
 800835c:	f000 faf6 	bl	800894c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d001      	beq.n	80083d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e046      	b.n	8008462 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a23      	ldr	r2, [pc, #140]	@ (8008470 <HAL_TIM_Base_Start+0xb4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d022      	beq.n	800842c <HAL_TIM_Base_Start+0x70>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ee:	d01d      	beq.n	800842c <HAL_TIM_Base_Start+0x70>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008474 <HAL_TIM_Base_Start+0xb8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d018      	beq.n	800842c <HAL_TIM_Base_Start+0x70>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008478 <HAL_TIM_Base_Start+0xbc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d013      	beq.n	800842c <HAL_TIM_Base_Start+0x70>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1c      	ldr	r2, [pc, #112]	@ (800847c <HAL_TIM_Base_Start+0xc0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00e      	beq.n	800842c <HAL_TIM_Base_Start+0x70>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1b      	ldr	r2, [pc, #108]	@ (8008480 <HAL_TIM_Base_Start+0xc4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d009      	beq.n	800842c <HAL_TIM_Base_Start+0x70>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a19      	ldr	r2, [pc, #100]	@ (8008484 <HAL_TIM_Base_Start+0xc8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d004      	beq.n	800842c <HAL_TIM_Base_Start+0x70>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a18      	ldr	r2, [pc, #96]	@ (8008488 <HAL_TIM_Base_Start+0xcc>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d111      	bne.n	8008450 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b06      	cmp	r3, #6
 800843c:	d010      	beq.n	8008460 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0201 	orr.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844e:	e007      	b.n	8008460 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40010000 	.word	0x40010000
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	40000c00 	.word	0x40000c00
 8008480:	40010400 	.word	0x40010400
 8008484:	40014000 	.word	0x40014000
 8008488:	40001800 	.word	0x40001800

0800848c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6a1a      	ldr	r2, [r3, #32]
 800849a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10f      	bne.n	80084c4 <HAL_TIM_Base_Stop+0x38>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a1a      	ldr	r2, [r3, #32]
 80084aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_Base_Stop+0x38>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0201 	bic.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e041      	b.n	8008572 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7fa fe0c 	bl	8003120 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3304      	adds	r3, #4
 8008518:	4619      	mov	r1, r3
 800851a:	4610      	mov	r0, r2
 800851c:	f000 fa16 	bl	800894c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0208 	bic.w	r2, r2, #8
 800852e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6819      	ldr	r1, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d020      	beq.n	80085de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01b      	beq.n	80085de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f06f 0202 	mvn.w	r2, #2
 80085ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f9a3 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 80085ca:	e005      	b.n	80085d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f995 	bl	80088fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9a6 	bl	8008924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01b      	beq.n	800862a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f06f 0204 	mvn.w	r2, #4
 80085fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f97d 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 8008616:	e005      	b.n	8008624 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f96f 	bl	80088fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f980 	bl	8008924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b00      	cmp	r3, #0
 8008632:	d020      	beq.n	8008676 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01b      	beq.n	8008676 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f06f 0208 	mvn.w	r2, #8
 8008646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2204      	movs	r2, #4
 800864c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f957 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 8008662:	e005      	b.n	8008670 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f949 	bl	80088fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f95a 	bl	8008924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 0310 	and.w	r3, r3, #16
 800867c:	2b00      	cmp	r3, #0
 800867e:	d020      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01b      	beq.n	80086c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0210 	mvn.w	r2, #16
 8008692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2208      	movs	r2, #8
 8008698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f931 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 80086ae:	e005      	b.n	80086bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f923 	bl	80088fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f934 	bl	8008924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f06f 0201 	mvn.w	r2, #1
 80086de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f901 	bl	80088e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00c      	beq.n	800870a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fae7 	bl	8008cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f905 	bl	8008938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f06f 0220 	mvn.w	r2, #32
 800874a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fab9 	bl	8008cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_TIM_ConfigClockSource+0x1c>
 8008772:	2302      	movs	r3, #2
 8008774:	e0b4      	b.n	80088e0 <HAL_TIM_ConfigClockSource+0x186>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008794:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800879c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ae:	d03e      	beq.n	800882e <HAL_TIM_ConfigClockSource+0xd4>
 80087b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087b4:	f200 8087 	bhi.w	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087bc:	f000 8086 	beq.w	80088cc <HAL_TIM_ConfigClockSource+0x172>
 80087c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c4:	d87f      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087c6:	2b70      	cmp	r3, #112	@ 0x70
 80087c8:	d01a      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0xa6>
 80087ca:	2b70      	cmp	r3, #112	@ 0x70
 80087cc:	d87b      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087ce:	2b60      	cmp	r3, #96	@ 0x60
 80087d0:	d050      	beq.n	8008874 <HAL_TIM_ConfigClockSource+0x11a>
 80087d2:	2b60      	cmp	r3, #96	@ 0x60
 80087d4:	d877      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087d6:	2b50      	cmp	r3, #80	@ 0x50
 80087d8:	d03c      	beq.n	8008854 <HAL_TIM_ConfigClockSource+0xfa>
 80087da:	2b50      	cmp	r3, #80	@ 0x50
 80087dc:	d873      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087de:	2b40      	cmp	r3, #64	@ 0x40
 80087e0:	d058      	beq.n	8008894 <HAL_TIM_ConfigClockSource+0x13a>
 80087e2:	2b40      	cmp	r3, #64	@ 0x40
 80087e4:	d86f      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087e6:	2b30      	cmp	r3, #48	@ 0x30
 80087e8:	d064      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087ea:	2b30      	cmp	r3, #48	@ 0x30
 80087ec:	d86b      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087ee:	2b20      	cmp	r3, #32
 80087f0:	d060      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d867      	bhi.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d05c      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087fa:	2b10      	cmp	r3, #16
 80087fc:	d05a      	beq.n	80088b4 <HAL_TIM_ConfigClockSource+0x15a>
 80087fe:	e062      	b.n	80088c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008810:	f000 f9bc 	bl	8008b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008822:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	609a      	str	r2, [r3, #8]
      break;
 800882c:	e04f      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800883e:	f000 f9a5 	bl	8008b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008850:	609a      	str	r2, [r3, #8]
      break;
 8008852:	e03c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008860:	461a      	mov	r2, r3
 8008862:	f000 f919 	bl	8008a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2150      	movs	r1, #80	@ 0x50
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f972 	bl	8008b56 <TIM_ITRx_SetConfig>
      break;
 8008872:	e02c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008880:	461a      	mov	r2, r3
 8008882:	f000 f938 	bl	8008af6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2160      	movs	r1, #96	@ 0x60
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f962 	bl	8008b56 <TIM_ITRx_SetConfig>
      break;
 8008892:	e01c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a0:	461a      	mov	r2, r3
 80088a2:	f000 f8f9 	bl	8008a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2140      	movs	r1, #64	@ 0x40
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f952 	bl	8008b56 <TIM_ITRx_SetConfig>
      break;
 80088b2:	e00c      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f000 f949 	bl	8008b56 <TIM_ITRx_SetConfig>
      break;
 80088c4:	e003      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	73fb      	strb	r3, [r7, #15]
      break;
 80088ca:	e000      	b.n	80088ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a43      	ldr	r2, [pc, #268]	@ (8008a6c <TIM_Base_SetConfig+0x120>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d013      	beq.n	800898c <TIM_Base_SetConfig+0x40>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800896a:	d00f      	beq.n	800898c <TIM_Base_SetConfig+0x40>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a40      	ldr	r2, [pc, #256]	@ (8008a70 <TIM_Base_SetConfig+0x124>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00b      	beq.n	800898c <TIM_Base_SetConfig+0x40>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a3f      	ldr	r2, [pc, #252]	@ (8008a74 <TIM_Base_SetConfig+0x128>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d007      	beq.n	800898c <TIM_Base_SetConfig+0x40>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a3e      	ldr	r2, [pc, #248]	@ (8008a78 <TIM_Base_SetConfig+0x12c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d003      	beq.n	800898c <TIM_Base_SetConfig+0x40>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a3d      	ldr	r2, [pc, #244]	@ (8008a7c <TIM_Base_SetConfig+0x130>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d108      	bne.n	800899e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a32      	ldr	r2, [pc, #200]	@ (8008a6c <TIM_Base_SetConfig+0x120>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d02b      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ac:	d027      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008a70 <TIM_Base_SetConfig+0x124>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d023      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a2e      	ldr	r2, [pc, #184]	@ (8008a74 <TIM_Base_SetConfig+0x128>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d01f      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a78 <TIM_Base_SetConfig+0x12c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d01b      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a2c      	ldr	r2, [pc, #176]	@ (8008a7c <TIM_Base_SetConfig+0x130>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d017      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008a80 <TIM_Base_SetConfig+0x134>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008a84 <TIM_Base_SetConfig+0x138>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d00f      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a29      	ldr	r2, [pc, #164]	@ (8008a88 <TIM_Base_SetConfig+0x13c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d00b      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a28      	ldr	r2, [pc, #160]	@ (8008a8c <TIM_Base_SetConfig+0x140>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d007      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a27      	ldr	r2, [pc, #156]	@ (8008a90 <TIM_Base_SetConfig+0x144>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d003      	beq.n	80089fe <TIM_Base_SetConfig+0xb2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a26      	ldr	r2, [pc, #152]	@ (8008a94 <TIM_Base_SetConfig+0x148>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d108      	bne.n	8008a10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	689a      	ldr	r2, [r3, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a0e      	ldr	r2, [pc, #56]	@ (8008a6c <TIM_Base_SetConfig+0x120>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d003      	beq.n	8008a3e <TIM_Base_SetConfig+0xf2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a10      	ldr	r2, [pc, #64]	@ (8008a7c <TIM_Base_SetConfig+0x130>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d103      	bne.n	8008a46 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f043 0204 	orr.w	r2, r3, #4
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	601a      	str	r2, [r3, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40000c00 	.word	0x40000c00
 8008a7c:	40010400 	.word	0x40010400
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40014400 	.word	0x40014400
 8008a88:	40014800 	.word	0x40014800
 8008a8c:	40001800 	.word	0x40001800
 8008a90:	40001c00 	.word	0x40001c00
 8008a94:	40002000 	.word	0x40002000

08008a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	f023 0201 	bic.w	r2, r3, #1
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f023 030a 	bic.w	r3, r3, #10
 8008ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	621a      	str	r2, [r3, #32]
}
 8008aea:	bf00      	nop
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b087      	sub	sp, #28
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	f023 0210 	bic.w	r2, r3, #16
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	621a      	str	r2, [r3, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f043 0307 	orr.w	r3, r3, #7
 8008b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	609a      	str	r2, [r3, #8]
}
 8008b80:	bf00      	nop
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	021a      	lsls	r2, r3, #8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	609a      	str	r2, [r3, #8]
}
 8008bc0:	bf00      	nop
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e05a      	b.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a21      	ldr	r2, [pc, #132]	@ (8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d022      	beq.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c30:	d01d      	beq.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a1d      	ldr	r2, [pc, #116]	@ (8008cac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d018      	beq.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1b      	ldr	r2, [pc, #108]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00e      	beq.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d009      	beq.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a17      	ldr	r2, [pc, #92]	@ (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d004      	beq.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a15      	ldr	r2, [pc, #84]	@ (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d10c      	bne.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40010000 	.word	0x40010000
 8008cac:	40000400 	.word	0x40000400
 8008cb0:	40000800 	.word	0x40000800
 8008cb4:	40000c00 	.word	0x40000c00
 8008cb8:	40010400 	.word	0x40010400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40001800 	.word	0x40001800

08008cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e042      	b.n	8008d84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fa fa54 	bl	80031c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2224      	movs	r2, #36	@ 0x24
 8008d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fdd3 	bl	80098dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691a      	ldr	r2, [r3, #16]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	695a      	ldr	r2, [r3, #20]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	@ 0x28
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d175      	bne.n	8008e98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <HAL_UART_Transmit+0x2c>
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e06e      	b.n	8008e9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2221      	movs	r2, #33	@ 0x21
 8008dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dca:	f7fa fc7d 	bl	80036c8 <HAL_GetTick>
 8008dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	88fa      	ldrh	r2, [r7, #6]
 8008dd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	88fa      	ldrh	r2, [r7, #6]
 8008dda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008de4:	d108      	bne.n	8008df8 <HAL_UART_Transmit+0x6c>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	e003      	b.n	8008e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e00:	e02e      	b.n	8008e60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2180      	movs	r1, #128	@ 0x80
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 fb37 	bl	8009480 <UART_WaitOnFlagUntilTimeout>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e03a      	b.n	8008e9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10b      	bne.n	8008e42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	e007      	b.n	8008e52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1cb      	bne.n	8008e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2200      	movs	r2, #0
 8008e72:	2140      	movs	r1, #64	@ 0x40
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 fb03 	bl	8009480 <UART_WaitOnFlagUntilTimeout>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e006      	b.n	8008e9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	e000      	b.n	8008e9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008e98:	2302      	movs	r3, #2
  }
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	4613      	mov	r3, r2
 8008eae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d112      	bne.n	8008ee2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_UART_Receive_IT+0x26>
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e00b      	b.n	8008ee4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ed2:	88fb      	ldrh	r3, [r7, #6]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	68b9      	ldr	r1, [r7, #8]
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fb2a 	bl	8009532 <UART_Start_Receive_IT>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	e000      	b.n	8008ee4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008ee2:	2302      	movs	r3, #2
  }
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b0ba      	sub	sp, #232	@ 0xe8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10f      	bne.n	8008f52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d009      	beq.n	8008f52 <HAL_UART_IRQHandler+0x66>
 8008f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fc07 	bl	800975e <UART_Receive_IT>
      return;
 8008f50:	e273      	b.n	800943a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 80de 	beq.w	8009118 <HAL_UART_IRQHandler+0x22c>
 8008f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80d1 	beq.w	8009118 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <HAL_UART_IRQHandler+0xae>
 8008f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d005      	beq.n	8008f9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f92:	f043 0201 	orr.w	r2, r3, #1
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00b      	beq.n	8008fbe <HAL_UART_IRQHandler+0xd2>
 8008fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb6:	f043 0202 	orr.w	r2, r3, #2
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00b      	beq.n	8008fe2 <HAL_UART_IRQHandler+0xf6>
 8008fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fda:	f043 0204 	orr.w	r2, r3, #4
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d011      	beq.n	8009012 <HAL_UART_IRQHandler+0x126>
 8008fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900a:	f043 0208 	orr.w	r2, r3, #8
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 820a 	beq.w	8009430 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800901c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d008      	beq.n	800903a <HAL_UART_IRQHandler+0x14e>
 8009028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fb92 	bl	800975e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009044:	2b40      	cmp	r3, #64	@ 0x40
 8009046:	bf0c      	ite	eq
 8009048:	2301      	moveq	r3, #1
 800904a:	2300      	movne	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d103      	bne.n	8009066 <HAL_UART_IRQHandler+0x17a>
 800905e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009062:	2b00      	cmp	r3, #0
 8009064:	d04f      	beq.n	8009106 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa9d 	bl	80095a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009076:	2b40      	cmp	r3, #64	@ 0x40
 8009078:	d141      	bne.n	80090fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3314      	adds	r3, #20
 8009080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009090:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3314      	adds	r3, #20
 80090a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1d9      	bne.n	800907a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d013      	beq.n	80090f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090d2:	4a8a      	ldr	r2, [pc, #552]	@ (80092fc <HAL_UART_IRQHandler+0x410>)
 80090d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fb fcc6 	bl	8004a6c <HAL_DMA_Abort_IT>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d016      	beq.n	8009114 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f4:	e00e      	b.n	8009114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f9ac 	bl	8009454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090fc:	e00a      	b.n	8009114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f9a8 	bl	8009454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009104:	e006      	b.n	8009114 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9a4 	bl	8009454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009112:	e18d      	b.n	8009430 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009114:	bf00      	nop
    return;
 8009116:	e18b      	b.n	8009430 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911c:	2b01      	cmp	r3, #1
 800911e:	f040 8167 	bne.w	80093f0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 8160 	beq.w	80093f0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 8159 	beq.w	80093f0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	60bb      	str	r3, [r7, #8]
 8009152:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915e:	2b40      	cmp	r3, #64	@ 0x40
 8009160:	f040 80ce 	bne.w	8009300 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 80a9 	beq.w	80092cc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800917e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009182:	429a      	cmp	r2, r3
 8009184:	f080 80a2 	bcs.w	80092cc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800918e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800919a:	f000 8088 	beq.w	80092ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	330c      	adds	r3, #12
 80091a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80091ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1d9      	bne.n	800919e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3314      	adds	r3, #20
 80091f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3314      	adds	r3, #20
 800920a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800920e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009212:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009216:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e1      	bne.n	80091ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800923c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3314      	adds	r3, #20
 8009246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800924a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800924c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009250:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e3      	bne.n	8009226 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800927c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800927e:	f023 0310 	bic.w	r3, r3, #16
 8009282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009290:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009292:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800929e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e3      	bne.n	800926c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fb fb6f 	bl	800498c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092bc:	b29b      	uxth	r3, r3
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f8cf 	bl	8009468 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80092ca:	e0b3      	b.n	8009434 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092d4:	429a      	cmp	r2, r3
 80092d6:	f040 80ad 	bne.w	8009434 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092e4:	f040 80a6 	bne.w	8009434 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f8b7 	bl	8009468 <HAL_UARTEx_RxEventCallback>
      return;
 80092fa:	e09b      	b.n	8009434 <HAL_UART_IRQHandler+0x548>
 80092fc:	0800966d 	.word	0x0800966d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009308:	b29b      	uxth	r3, r3
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009314:	b29b      	uxth	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 808e 	beq.w	8009438 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800931c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8089 	beq.w	8009438 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	330c      	adds	r3, #12
 800932c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800933c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	330c      	adds	r3, #12
 8009346:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800934a:	647a      	str	r2, [r7, #68]	@ 0x44
 800934c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3314      	adds	r3, #20
 8009364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	623b      	str	r3, [r7, #32]
   return(result);
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	f023 0301 	bic.w	r3, r3, #1
 8009374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3314      	adds	r3, #20
 800937e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009382:	633a      	str	r2, [r7, #48]	@ 0x30
 8009384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e3      	bne.n	800935e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	330c      	adds	r3, #12
 80093aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0310 	bic.w	r3, r3, #16
 80093ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80093c8:	61fa      	str	r2, [r7, #28]
 80093ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	69b9      	ldr	r1, [r7, #24]
 80093ce:	69fa      	ldr	r2, [r7, #28]
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	617b      	str	r3, [r7, #20]
   return(result);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e3      	bne.n	80093a4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f83d 	bl	8009468 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093ee:	e023      	b.n	8009438 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <HAL_UART_IRQHandler+0x524>
 80093fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f940 	bl	800968e <UART_Transmit_IT>
    return;
 800940e:	e014      	b.n	800943a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00e      	beq.n	800943a <HAL_UART_IRQHandler+0x54e>
 800941c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d008      	beq.n	800943a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f980 	bl	800972e <UART_EndTransmit_IT>
    return;
 800942e:	e004      	b.n	800943a <HAL_UART_IRQHandler+0x54e>
    return;
 8009430:	bf00      	nop
 8009432:	e002      	b.n	800943a <HAL_UART_IRQHandler+0x54e>
      return;
 8009434:	bf00      	nop
 8009436:	e000      	b.n	800943a <HAL_UART_IRQHandler+0x54e>
      return;
 8009438:	bf00      	nop
  }
}
 800943a:	37e8      	adds	r7, #232	@ 0xe8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	4613      	mov	r3, r2
 800948e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009490:	e03b      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d037      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800949a:	f7fa f915 	bl	80036c8 <HAL_GetTick>
 800949e:	4602      	mov	r2, r0
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	6a3a      	ldr	r2, [r7, #32]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d302      	bcc.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e03a      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d023      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0x8a>
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b80      	cmp	r3, #128	@ 0x80
 80094c6:	d020      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0x8a>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b40      	cmp	r3, #64	@ 0x40
 80094cc:	d01d      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0308 	and.w	r3, r3, #8
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d116      	bne.n	800950a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	617b      	str	r3, [r7, #20]
 80094f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f857 	bl	80095a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2208      	movs	r2, #8
 80094fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e00f      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4013      	ands	r3, r2
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	bf0c      	ite	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	2300      	movne	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	429a      	cmp	r2, r3
 8009526:	d0b4      	beq.n	8009492 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009532:	b480      	push	{r7}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	4613      	mov	r3, r2
 800953e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	88fa      	ldrh	r2, [r7, #6]
 800954a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	88fa      	ldrh	r2, [r7, #6]
 8009550:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2222      	movs	r2, #34	@ 0x22
 800955c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009576:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695a      	ldr	r2, [r3, #20]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0220 	orr.w	r2, r2, #32
 8009596:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b095      	sub	sp, #84	@ 0x54
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	330c      	adds	r3, #12
 80095b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	330c      	adds	r3, #12
 80095cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e5      	bne.n	80095ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3314      	adds	r3, #20
 80095e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	f023 0301 	bic.w	r3, r3, #1
 80095f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009604:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800960a:	e841 2300 	strex	r3, r2, [r1]
 800960e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e5      	bne.n	80095e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961a:	2b01      	cmp	r3, #1
 800961c:	d119      	bne.n	8009652 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	330c      	adds	r3, #12
 8009624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	60bb      	str	r3, [r7, #8]
   return(result);
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f023 0310 	bic.w	r3, r3, #16
 8009634:	647b      	str	r3, [r7, #68]	@ 0x44
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	330c      	adds	r3, #12
 800963c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800963e:	61ba      	str	r2, [r7, #24]
 8009640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6979      	ldr	r1, [r7, #20]
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	613b      	str	r3, [r7, #16]
   return(result);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e5      	bne.n	800961e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2220      	movs	r2, #32
 8009656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009660:	bf00      	nop
 8009662:	3754      	adds	r7, #84	@ 0x54
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f7ff fee7 	bl	8009454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800968e:	b480      	push	{r7}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b21      	cmp	r3, #33	@ 0x21
 80096a0:	d13e      	bne.n	8009720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096aa:	d114      	bne.n	80096d6 <UART_Transmit_IT+0x48>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d110      	bne.n	80096d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	1c9a      	adds	r2, r3, #2
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	621a      	str	r2, [r3, #32]
 80096d4:	e008      	b.n	80096e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	1c59      	adds	r1, r3, #1
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	6211      	str	r1, [r2, #32]
 80096e0:	781a      	ldrb	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	4619      	mov	r1, r3
 80096f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10f      	bne.n	800971c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800970a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800971a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	e000      	b.n	8009722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009720:	2302      	movs	r3, #2
  }
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fe76 	bl	8009440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b08c      	sub	sp, #48	@ 0x30
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b22      	cmp	r3, #34	@ 0x22
 8009778:	f040 80aa 	bne.w	80098d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009784:	d115      	bne.n	80097b2 <UART_Receive_IT+0x54>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d111      	bne.n	80097b2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009792:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	b29b      	uxth	r3, r3
 800979c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097aa:	1c9a      	adds	r2, r3, #2
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80097b0:	e024      	b.n	80097fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c0:	d007      	beq.n	80097d2 <UART_Receive_IT+0x74>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <UART_Receive_IT+0x82>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d106      	bne.n	80097e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097dc:	701a      	strb	r2, [r3, #0]
 80097de:	e008      	b.n	80097f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009800:	b29b      	uxth	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	b29b      	uxth	r3, r3
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4619      	mov	r1, r3
 800980a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800980c:	2b00      	cmp	r3, #0
 800980e:	d15d      	bne.n	80098cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f022 0220 	bic.w	r2, r2, #32
 800981e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800982e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	695a      	ldr	r2, [r3, #20]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0201 	bic.w	r2, r2, #1
 800983e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009852:	2b01      	cmp	r3, #1
 8009854:	d135      	bne.n	80098c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	330c      	adds	r3, #12
 8009862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	613b      	str	r3, [r7, #16]
   return(result);
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f023 0310 	bic.w	r3, r3, #16
 8009872:	627b      	str	r3, [r7, #36]	@ 0x24
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	330c      	adds	r3, #12
 800987a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800987c:	623a      	str	r2, [r7, #32]
 800987e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009880:	69f9      	ldr	r1, [r7, #28]
 8009882:	6a3a      	ldr	r2, [r7, #32]
 8009884:	e841 2300 	strex	r3, r2, [r1]
 8009888:	61bb      	str	r3, [r7, #24]
   return(result);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1e5      	bne.n	800985c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0310 	and.w	r3, r3, #16
 800989a:	2b10      	cmp	r3, #16
 800989c:	d10a      	bne.n	80098b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fdd4 	bl	8009468 <HAL_UARTEx_RxEventCallback>
 80098c0:	e002      	b.n	80098c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7f7 fb6e 	bl	8000fa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e002      	b.n	80098d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	e000      	b.n	80098d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80098d0:	2302      	movs	r3, #2
  }
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3730      	adds	r7, #48	@ 0x30
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098e0:	b0c0      	sub	sp, #256	@ 0x100
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80098f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f8:	68d9      	ldr	r1, [r3, #12]
 80098fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	ea40 0301 	orr.w	r3, r0, r1
 8009904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990a:	689a      	ldr	r2, [r3, #8]
 800990c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	431a      	orrs	r2, r3
 8009914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	431a      	orrs	r2, r3
 800991c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	4313      	orrs	r3, r2
 8009924:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009934:	f021 010c 	bic.w	r1, r1, #12
 8009938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009942:	430b      	orrs	r3, r1
 8009944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009956:	6999      	ldr	r1, [r3, #24]
 8009958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	ea40 0301 	orr.w	r3, r0, r1
 8009962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b8f      	ldr	r3, [pc, #572]	@ (8009ba8 <UART_SetConfig+0x2cc>)
 800996c:	429a      	cmp	r2, r3
 800996e:	d005      	beq.n	800997c <UART_SetConfig+0xa0>
 8009970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	4b8d      	ldr	r3, [pc, #564]	@ (8009bac <UART_SetConfig+0x2d0>)
 8009978:	429a      	cmp	r2, r3
 800997a:	d104      	bne.n	8009986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800997c:	f7fe f88e 	bl	8007a9c <HAL_RCC_GetPCLK2Freq>
 8009980:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009984:	e003      	b.n	800998e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009986:	f7fe f875 	bl	8007a74 <HAL_RCC_GetPCLK1Freq>
 800998a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800998e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009998:	f040 810c 	bne.w	8009bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800999c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80099aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80099ae:	4622      	mov	r2, r4
 80099b0:	462b      	mov	r3, r5
 80099b2:	1891      	adds	r1, r2, r2
 80099b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80099b6:	415b      	adcs	r3, r3
 80099b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80099be:	4621      	mov	r1, r4
 80099c0:	eb12 0801 	adds.w	r8, r2, r1
 80099c4:	4629      	mov	r1, r5
 80099c6:	eb43 0901 	adc.w	r9, r3, r1
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099de:	4690      	mov	r8, r2
 80099e0:	4699      	mov	r9, r3
 80099e2:	4623      	mov	r3, r4
 80099e4:	eb18 0303 	adds.w	r3, r8, r3
 80099e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099ec:	462b      	mov	r3, r5
 80099ee:	eb49 0303 	adc.w	r3, r9, r3
 80099f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	18db      	adds	r3, r3, r3
 8009a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a10:	4613      	mov	r3, r2
 8009a12:	eb42 0303 	adc.w	r3, r2, r3
 8009a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009a20:	f7f7 f8c2 	bl	8000ba8 <__aeabi_uldivmod>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4b61      	ldr	r3, [pc, #388]	@ (8009bb0 <UART_SetConfig+0x2d4>)
 8009a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009a2e:	095b      	lsrs	r3, r3, #5
 8009a30:	011c      	lsls	r4, r3, #4
 8009a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	1891      	adds	r1, r2, r2
 8009a4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009a4c:	415b      	adcs	r3, r3
 8009a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009a54:	4641      	mov	r1, r8
 8009a56:	eb12 0a01 	adds.w	sl, r2, r1
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8009a60:	f04f 0200 	mov.w	r2, #0
 8009a64:	f04f 0300 	mov.w	r3, #0
 8009a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a74:	4692      	mov	sl, r2
 8009a76:	469b      	mov	fp, r3
 8009a78:	4643      	mov	r3, r8
 8009a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8009a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a82:	464b      	mov	r3, r9
 8009a84:	eb4b 0303 	adc.w	r3, fp, r3
 8009a88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	18db      	adds	r3, r3, r3
 8009aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	eb42 0303 	adc.w	r3, r2, r3
 8009aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009ab6:	f7f7 f877 	bl	8000ba8 <__aeabi_uldivmod>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8009bb0 <UART_SetConfig+0x2d4>)
 8009ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ac6:	095b      	lsrs	r3, r3, #5
 8009ac8:	2264      	movs	r2, #100	@ 0x64
 8009aca:	fb02 f303 	mul.w	r3, r2, r3
 8009ace:	1acb      	subs	r3, r1, r3
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ad6:	4b36      	ldr	r3, [pc, #216]	@ (8009bb0 <UART_SetConfig+0x2d4>)
 8009ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009ae4:	441c      	add	r4, r3
 8009ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aea:	2200      	movs	r2, #0
 8009aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009af0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	1891      	adds	r1, r2, r2
 8009afe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009b00:	415b      	adcs	r3, r3
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009b08:	4641      	mov	r1, r8
 8009b0a:	1851      	adds	r1, r2, r1
 8009b0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009b0e:	4649      	mov	r1, r9
 8009b10:	414b      	adcs	r3, r1
 8009b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b14:	f04f 0200 	mov.w	r2, #0
 8009b18:	f04f 0300 	mov.w	r3, #0
 8009b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009b20:	4659      	mov	r1, fp
 8009b22:	00cb      	lsls	r3, r1, #3
 8009b24:	4651      	mov	r1, sl
 8009b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b2a:	4651      	mov	r1, sl
 8009b2c:	00ca      	lsls	r2, r1, #3
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4619      	mov	r1, r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	4642      	mov	r2, r8
 8009b36:	189b      	adds	r3, r3, r2
 8009b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	460a      	mov	r2, r1
 8009b40:	eb42 0303 	adc.w	r3, r2, r3
 8009b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	18db      	adds	r3, r3, r3
 8009b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b62:	4613      	mov	r3, r2
 8009b64:	eb42 0303 	adc.w	r3, r2, r3
 8009b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009b72:	f7f7 f819 	bl	8000ba8 <__aeabi_uldivmod>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <UART_SetConfig+0x2d4>)
 8009b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b80:	095b      	lsrs	r3, r3, #5
 8009b82:	2164      	movs	r1, #100	@ 0x64
 8009b84:	fb01 f303 	mul.w	r3, r1, r3
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	00db      	lsls	r3, r3, #3
 8009b8c:	3332      	adds	r3, #50	@ 0x32
 8009b8e:	4a08      	ldr	r2, [pc, #32]	@ (8009bb0 <UART_SetConfig+0x2d4>)
 8009b90:	fba2 2303 	umull	r2, r3, r2, r3
 8009b94:	095b      	lsrs	r3, r3, #5
 8009b96:	f003 0207 	and.w	r2, r3, #7
 8009b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4422      	add	r2, r4
 8009ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ba4:	e106      	b.n	8009db4 <UART_SetConfig+0x4d8>
 8009ba6:	bf00      	nop
 8009ba8:	40011000 	.word	0x40011000
 8009bac:	40011400 	.word	0x40011400
 8009bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	464b      	mov	r3, r9
 8009bca:	1891      	adds	r1, r2, r2
 8009bcc:	6239      	str	r1, [r7, #32]
 8009bce:	415b      	adcs	r3, r3
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bd6:	4641      	mov	r1, r8
 8009bd8:	1854      	adds	r4, r2, r1
 8009bda:	4649      	mov	r1, r9
 8009bdc:	eb43 0501 	adc.w	r5, r3, r1
 8009be0:	f04f 0200 	mov.w	r2, #0
 8009be4:	f04f 0300 	mov.w	r3, #0
 8009be8:	00eb      	lsls	r3, r5, #3
 8009bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009bee:	00e2      	lsls	r2, r4, #3
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	461d      	mov	r5, r3
 8009bf4:	4643      	mov	r3, r8
 8009bf6:	18e3      	adds	r3, r4, r3
 8009bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	eb45 0303 	adc.w	r3, r5, r3
 8009c02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c16:	f04f 0200 	mov.w	r2, #0
 8009c1a:	f04f 0300 	mov.w	r3, #0
 8009c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c22:	4629      	mov	r1, r5
 8009c24:	008b      	lsls	r3, r1, #2
 8009c26:	4621      	mov	r1, r4
 8009c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	008a      	lsls	r2, r1, #2
 8009c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009c34:	f7f6 ffb8 	bl	8000ba8 <__aeabi_uldivmod>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4b60      	ldr	r3, [pc, #384]	@ (8009dc0 <UART_SetConfig+0x4e4>)
 8009c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c42:	095b      	lsrs	r3, r3, #5
 8009c44:	011c      	lsls	r4, r3, #4
 8009c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009c58:	4642      	mov	r2, r8
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	1891      	adds	r1, r2, r2
 8009c5e:	61b9      	str	r1, [r7, #24]
 8009c60:	415b      	adcs	r3, r3
 8009c62:	61fb      	str	r3, [r7, #28]
 8009c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c68:	4641      	mov	r1, r8
 8009c6a:	1851      	adds	r1, r2, r1
 8009c6c:	6139      	str	r1, [r7, #16]
 8009c6e:	4649      	mov	r1, r9
 8009c70:	414b      	adcs	r3, r1
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c80:	4659      	mov	r1, fp
 8009c82:	00cb      	lsls	r3, r1, #3
 8009c84:	4651      	mov	r1, sl
 8009c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c8a:	4651      	mov	r1, sl
 8009c8c:	00ca      	lsls	r2, r1, #3
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4619      	mov	r1, r3
 8009c92:	4603      	mov	r3, r0
 8009c94:	4642      	mov	r2, r8
 8009c96:	189b      	adds	r3, r3, r2
 8009c98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c9c:	464b      	mov	r3, r9
 8009c9e:	460a      	mov	r2, r1
 8009ca0:	eb42 0303 	adc.w	r3, r2, r3
 8009ca4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	f04f 0300 	mov.w	r3, #0
 8009cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	008b      	lsls	r3, r1, #2
 8009cc4:	4641      	mov	r1, r8
 8009cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cca:	4641      	mov	r1, r8
 8009ccc:	008a      	lsls	r2, r1, #2
 8009cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009cd2:	f7f6 ff69 	bl	8000ba8 <__aeabi_uldivmod>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	4b38      	ldr	r3, [pc, #224]	@ (8009dc0 <UART_SetConfig+0x4e4>)
 8009cde:	fba3 2301 	umull	r2, r3, r3, r1
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	2264      	movs	r2, #100	@ 0x64
 8009ce6:	fb02 f303 	mul.w	r3, r2, r3
 8009cea:	1acb      	subs	r3, r1, r3
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	3332      	adds	r3, #50	@ 0x32
 8009cf0:	4a33      	ldr	r2, [pc, #204]	@ (8009dc0 <UART_SetConfig+0x4e4>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cfc:	441c      	add	r4, r3
 8009cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d02:	2200      	movs	r2, #0
 8009d04:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d06:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	1891      	adds	r1, r2, r2
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	415b      	adcs	r3, r3
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	1851      	adds	r1, r2, r1
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	4649      	mov	r1, r9
 8009d24:	414b      	adcs	r3, r1
 8009d26:	607b      	str	r3, [r7, #4]
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d34:	4659      	mov	r1, fp
 8009d36:	00cb      	lsls	r3, r1, #3
 8009d38:	4651      	mov	r1, sl
 8009d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d3e:	4651      	mov	r1, sl
 8009d40:	00ca      	lsls	r2, r1, #3
 8009d42:	4610      	mov	r0, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	4603      	mov	r3, r0
 8009d48:	4642      	mov	r2, r8
 8009d4a:	189b      	adds	r3, r3, r2
 8009d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d4e:	464b      	mov	r3, r9
 8009d50:	460a      	mov	r2, r1
 8009d52:	eb42 0303 	adc.w	r3, r2, r3
 8009d56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d62:	667a      	str	r2, [r7, #100]	@ 0x64
 8009d64:	f04f 0200 	mov.w	r2, #0
 8009d68:	f04f 0300 	mov.w	r3, #0
 8009d6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009d70:	4649      	mov	r1, r9
 8009d72:	008b      	lsls	r3, r1, #2
 8009d74:	4641      	mov	r1, r8
 8009d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	008a      	lsls	r2, r1, #2
 8009d7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d82:	f7f6 ff11 	bl	8000ba8 <__aeabi_uldivmod>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc0 <UART_SetConfig+0x4e4>)
 8009d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d90:	095b      	lsrs	r3, r3, #5
 8009d92:	2164      	movs	r1, #100	@ 0x64
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	3332      	adds	r3, #50	@ 0x32
 8009d9e:	4a08      	ldr	r2, [pc, #32]	@ (8009dc0 <UART_SetConfig+0x4e4>)
 8009da0:	fba2 2303 	umull	r2, r3, r2, r3
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	f003 020f 	and.w	r2, r3, #15
 8009daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4422      	add	r2, r4
 8009db2:	609a      	str	r2, [r3, #8]
}
 8009db4:	bf00      	nop
 8009db6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dc0:	51eb851f 	.word	0x51eb851f

08009dc4 <__cvt>:
 8009dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	ec57 6b10 	vmov	r6, r7, d0
 8009dcc:	2f00      	cmp	r7, #0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	bfbb      	ittet	lt
 8009dd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009dda:	461f      	movlt	r7, r3
 8009ddc:	2300      	movge	r3, #0
 8009dde:	232d      	movlt	r3, #45	@ 0x2d
 8009de0:	700b      	strb	r3, [r1, #0]
 8009de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009de4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009de8:	4691      	mov	r9, r2
 8009dea:	f023 0820 	bic.w	r8, r3, #32
 8009dee:	bfbc      	itt	lt
 8009df0:	4632      	movlt	r2, r6
 8009df2:	4616      	movlt	r6, r2
 8009df4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009df8:	d005      	beq.n	8009e06 <__cvt+0x42>
 8009dfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009dfe:	d100      	bne.n	8009e02 <__cvt+0x3e>
 8009e00:	3401      	adds	r4, #1
 8009e02:	2102      	movs	r1, #2
 8009e04:	e000      	b.n	8009e08 <__cvt+0x44>
 8009e06:	2103      	movs	r1, #3
 8009e08:	ab03      	add	r3, sp, #12
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	ab02      	add	r3, sp, #8
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	ec47 6b10 	vmov	d0, r6, r7
 8009e14:	4653      	mov	r3, sl
 8009e16:	4622      	mov	r2, r4
 8009e18:	f000 fe6e 	bl	800aaf8 <_dtoa_r>
 8009e1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e20:	4605      	mov	r5, r0
 8009e22:	d119      	bne.n	8009e58 <__cvt+0x94>
 8009e24:	f019 0f01 	tst.w	r9, #1
 8009e28:	d00e      	beq.n	8009e48 <__cvt+0x84>
 8009e2a:	eb00 0904 	add.w	r9, r0, r4
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2300      	movs	r3, #0
 8009e32:	4630      	mov	r0, r6
 8009e34:	4639      	mov	r1, r7
 8009e36:	f7f6 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e3a:	b108      	cbz	r0, 8009e40 <__cvt+0x7c>
 8009e3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e40:	2230      	movs	r2, #48	@ 0x30
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	454b      	cmp	r3, r9
 8009e46:	d31e      	bcc.n	8009e86 <__cvt+0xc2>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e4c:	1b5b      	subs	r3, r3, r5
 8009e4e:	4628      	mov	r0, r5
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	b004      	add	sp, #16
 8009e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e5c:	eb00 0904 	add.w	r9, r0, r4
 8009e60:	d1e5      	bne.n	8009e2e <__cvt+0x6a>
 8009e62:	7803      	ldrb	r3, [r0, #0]
 8009e64:	2b30      	cmp	r3, #48	@ 0x30
 8009e66:	d10a      	bne.n	8009e7e <__cvt+0xba>
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	4639      	mov	r1, r7
 8009e70:	f7f6 fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e74:	b918      	cbnz	r0, 8009e7e <__cvt+0xba>
 8009e76:	f1c4 0401 	rsb	r4, r4, #1
 8009e7a:	f8ca 4000 	str.w	r4, [sl]
 8009e7e:	f8da 3000 	ldr.w	r3, [sl]
 8009e82:	4499      	add	r9, r3
 8009e84:	e7d3      	b.n	8009e2e <__cvt+0x6a>
 8009e86:	1c59      	adds	r1, r3, #1
 8009e88:	9103      	str	r1, [sp, #12]
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	e7d9      	b.n	8009e42 <__cvt+0x7e>

08009e8e <__exponent>:
 8009e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e90:	2900      	cmp	r1, #0
 8009e92:	bfba      	itte	lt
 8009e94:	4249      	neglt	r1, r1
 8009e96:	232d      	movlt	r3, #45	@ 0x2d
 8009e98:	232b      	movge	r3, #43	@ 0x2b
 8009e9a:	2909      	cmp	r1, #9
 8009e9c:	7002      	strb	r2, [r0, #0]
 8009e9e:	7043      	strb	r3, [r0, #1]
 8009ea0:	dd29      	ble.n	8009ef6 <__exponent+0x68>
 8009ea2:	f10d 0307 	add.w	r3, sp, #7
 8009ea6:	461d      	mov	r5, r3
 8009ea8:	270a      	movs	r7, #10
 8009eaa:	461a      	mov	r2, r3
 8009eac:	fbb1 f6f7 	udiv	r6, r1, r7
 8009eb0:	fb07 1416 	mls	r4, r7, r6, r1
 8009eb4:	3430      	adds	r4, #48	@ 0x30
 8009eb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009eba:	460c      	mov	r4, r1
 8009ebc:	2c63      	cmp	r4, #99	@ 0x63
 8009ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	dcf1      	bgt.n	8009eaa <__exponent+0x1c>
 8009ec6:	3130      	adds	r1, #48	@ 0x30
 8009ec8:	1e94      	subs	r4, r2, #2
 8009eca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ece:	1c41      	adds	r1, r0, #1
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	42ab      	cmp	r3, r5
 8009ed4:	d30a      	bcc.n	8009eec <__exponent+0x5e>
 8009ed6:	f10d 0309 	add.w	r3, sp, #9
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	42ac      	cmp	r4, r5
 8009ede:	bf88      	it	hi
 8009ee0:	2300      	movhi	r3, #0
 8009ee2:	3302      	adds	r3, #2
 8009ee4:	4403      	add	r3, r0
 8009ee6:	1a18      	subs	r0, r3, r0
 8009ee8:	b003      	add	sp, #12
 8009eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ef0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ef4:	e7ed      	b.n	8009ed2 <__exponent+0x44>
 8009ef6:	2330      	movs	r3, #48	@ 0x30
 8009ef8:	3130      	adds	r1, #48	@ 0x30
 8009efa:	7083      	strb	r3, [r0, #2]
 8009efc:	70c1      	strb	r1, [r0, #3]
 8009efe:	1d03      	adds	r3, r0, #4
 8009f00:	e7f1      	b.n	8009ee6 <__exponent+0x58>
	...

08009f04 <_printf_float>:
 8009f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	b08d      	sub	sp, #52	@ 0x34
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f10:	4616      	mov	r6, r2
 8009f12:	461f      	mov	r7, r3
 8009f14:	4605      	mov	r5, r0
 8009f16:	f000 fcef 	bl	800a8f8 <_localeconv_r>
 8009f1a:	6803      	ldr	r3, [r0, #0]
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7f6 f9a6 	bl	8000270 <strlen>
 8009f24:	2300      	movs	r3, #0
 8009f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f28:	f8d8 3000 	ldr.w	r3, [r8]
 8009f2c:	9005      	str	r0, [sp, #20]
 8009f2e:	3307      	adds	r3, #7
 8009f30:	f023 0307 	bic.w	r3, r3, #7
 8009f34:	f103 0208 	add.w	r2, r3, #8
 8009f38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f3c:	f8d4 b000 	ldr.w	fp, [r4]
 8009f40:	f8c8 2000 	str.w	r2, [r8]
 8009f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f4c:	9307      	str	r3, [sp, #28]
 8009f4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f5a:	4b9c      	ldr	r3, [pc, #624]	@ (800a1cc <_printf_float+0x2c8>)
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f60:	f7f6 fde4 	bl	8000b2c <__aeabi_dcmpun>
 8009f64:	bb70      	cbnz	r0, 8009fc4 <_printf_float+0xc0>
 8009f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f6a:	4b98      	ldr	r3, [pc, #608]	@ (800a1cc <_printf_float+0x2c8>)
 8009f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f70:	f7f6 fdbe 	bl	8000af0 <__aeabi_dcmple>
 8009f74:	bb30      	cbnz	r0, 8009fc4 <_printf_float+0xc0>
 8009f76:	2200      	movs	r2, #0
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	f7f6 fdad 	bl	8000adc <__aeabi_dcmplt>
 8009f82:	b110      	cbz	r0, 8009f8a <_printf_float+0x86>
 8009f84:	232d      	movs	r3, #45	@ 0x2d
 8009f86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f8a:	4a91      	ldr	r2, [pc, #580]	@ (800a1d0 <_printf_float+0x2cc>)
 8009f8c:	4b91      	ldr	r3, [pc, #580]	@ (800a1d4 <_printf_float+0x2d0>)
 8009f8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f92:	bf8c      	ite	hi
 8009f94:	4690      	movhi	r8, r2
 8009f96:	4698      	movls	r8, r3
 8009f98:	2303      	movs	r3, #3
 8009f9a:	6123      	str	r3, [r4, #16]
 8009f9c:	f02b 0304 	bic.w	r3, fp, #4
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	f04f 0900 	mov.w	r9, #0
 8009fa6:	9700      	str	r7, [sp, #0]
 8009fa8:	4633      	mov	r3, r6
 8009faa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 f9d2 	bl	800a358 <_printf_common>
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	f040 808d 	bne.w	800a0d4 <_printf_float+0x1d0>
 8009fba:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbe:	b00d      	add	sp, #52	@ 0x34
 8009fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	4640      	mov	r0, r8
 8009fca:	4649      	mov	r1, r9
 8009fcc:	f7f6 fdae 	bl	8000b2c <__aeabi_dcmpun>
 8009fd0:	b140      	cbz	r0, 8009fe4 <_printf_float+0xe0>
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bfbc      	itt	lt
 8009fd8:	232d      	movlt	r3, #45	@ 0x2d
 8009fda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009fde:	4a7e      	ldr	r2, [pc, #504]	@ (800a1d8 <_printf_float+0x2d4>)
 8009fe0:	4b7e      	ldr	r3, [pc, #504]	@ (800a1dc <_printf_float+0x2d8>)
 8009fe2:	e7d4      	b.n	8009f8e <_printf_float+0x8a>
 8009fe4:	6863      	ldr	r3, [r4, #4]
 8009fe6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009fea:	9206      	str	r2, [sp, #24]
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	d13b      	bne.n	800a068 <_printf_float+0x164>
 8009ff0:	2306      	movs	r3, #6
 8009ff2:	6063      	str	r3, [r4, #4]
 8009ff4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6022      	str	r2, [r4, #0]
 8009ffc:	9303      	str	r3, [sp, #12]
 8009ffe:	ab0a      	add	r3, sp, #40	@ 0x28
 800a000:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a004:	ab09      	add	r3, sp, #36	@ 0x24
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	6861      	ldr	r1, [r4, #4]
 800a00a:	ec49 8b10 	vmov	d0, r8, r9
 800a00e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a012:	4628      	mov	r0, r5
 800a014:	f7ff fed6 	bl	8009dc4 <__cvt>
 800a018:	9b06      	ldr	r3, [sp, #24]
 800a01a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a01c:	2b47      	cmp	r3, #71	@ 0x47
 800a01e:	4680      	mov	r8, r0
 800a020:	d129      	bne.n	800a076 <_printf_float+0x172>
 800a022:	1cc8      	adds	r0, r1, #3
 800a024:	db02      	blt.n	800a02c <_printf_float+0x128>
 800a026:	6863      	ldr	r3, [r4, #4]
 800a028:	4299      	cmp	r1, r3
 800a02a:	dd41      	ble.n	800a0b0 <_printf_float+0x1ac>
 800a02c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a030:	fa5f fa8a 	uxtb.w	sl, sl
 800a034:	3901      	subs	r1, #1
 800a036:	4652      	mov	r2, sl
 800a038:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a03c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a03e:	f7ff ff26 	bl	8009e8e <__exponent>
 800a042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a044:	1813      	adds	r3, r2, r0
 800a046:	2a01      	cmp	r2, #1
 800a048:	4681      	mov	r9, r0
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	dc02      	bgt.n	800a054 <_printf_float+0x150>
 800a04e:	6822      	ldr	r2, [r4, #0]
 800a050:	07d2      	lsls	r2, r2, #31
 800a052:	d501      	bpl.n	800a058 <_printf_float+0x154>
 800a054:	3301      	adds	r3, #1
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0a2      	beq.n	8009fa6 <_printf_float+0xa2>
 800a060:	232d      	movs	r3, #45	@ 0x2d
 800a062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a066:	e79e      	b.n	8009fa6 <_printf_float+0xa2>
 800a068:	9a06      	ldr	r2, [sp, #24]
 800a06a:	2a47      	cmp	r2, #71	@ 0x47
 800a06c:	d1c2      	bne.n	8009ff4 <_printf_float+0xf0>
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1c0      	bne.n	8009ff4 <_printf_float+0xf0>
 800a072:	2301      	movs	r3, #1
 800a074:	e7bd      	b.n	8009ff2 <_printf_float+0xee>
 800a076:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a07a:	d9db      	bls.n	800a034 <_printf_float+0x130>
 800a07c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a080:	d118      	bne.n	800a0b4 <_printf_float+0x1b0>
 800a082:	2900      	cmp	r1, #0
 800a084:	6863      	ldr	r3, [r4, #4]
 800a086:	dd0b      	ble.n	800a0a0 <_printf_float+0x19c>
 800a088:	6121      	str	r1, [r4, #16]
 800a08a:	b913      	cbnz	r3, 800a092 <_printf_float+0x18e>
 800a08c:	6822      	ldr	r2, [r4, #0]
 800a08e:	07d0      	lsls	r0, r2, #31
 800a090:	d502      	bpl.n	800a098 <_printf_float+0x194>
 800a092:	3301      	adds	r3, #1
 800a094:	440b      	add	r3, r1
 800a096:	6123      	str	r3, [r4, #16]
 800a098:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a09a:	f04f 0900 	mov.w	r9, #0
 800a09e:	e7db      	b.n	800a058 <_printf_float+0x154>
 800a0a0:	b913      	cbnz	r3, 800a0a8 <_printf_float+0x1a4>
 800a0a2:	6822      	ldr	r2, [r4, #0]
 800a0a4:	07d2      	lsls	r2, r2, #31
 800a0a6:	d501      	bpl.n	800a0ac <_printf_float+0x1a8>
 800a0a8:	3302      	adds	r3, #2
 800a0aa:	e7f4      	b.n	800a096 <_printf_float+0x192>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e7f2      	b.n	800a096 <_printf_float+0x192>
 800a0b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0b6:	4299      	cmp	r1, r3
 800a0b8:	db05      	blt.n	800a0c6 <_printf_float+0x1c2>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	6121      	str	r1, [r4, #16]
 800a0be:	07d8      	lsls	r0, r3, #31
 800a0c0:	d5ea      	bpl.n	800a098 <_printf_float+0x194>
 800a0c2:	1c4b      	adds	r3, r1, #1
 800a0c4:	e7e7      	b.n	800a096 <_printf_float+0x192>
 800a0c6:	2900      	cmp	r1, #0
 800a0c8:	bfd4      	ite	le
 800a0ca:	f1c1 0202 	rsble	r2, r1, #2
 800a0ce:	2201      	movgt	r2, #1
 800a0d0:	4413      	add	r3, r2
 800a0d2:	e7e0      	b.n	800a096 <_printf_float+0x192>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	055a      	lsls	r2, r3, #21
 800a0d8:	d407      	bmi.n	800a0ea <_printf_float+0x1e6>
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	4642      	mov	r2, r8
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d12b      	bne.n	800a140 <_printf_float+0x23c>
 800a0e8:	e767      	b.n	8009fba <_printf_float+0xb6>
 800a0ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0ee:	f240 80dd 	bls.w	800a2ac <_printf_float+0x3a8>
 800a0f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f7f6 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d033      	beq.n	800a16a <_printf_float+0x266>
 800a102:	4a37      	ldr	r2, [pc, #220]	@ (800a1e0 <_printf_float+0x2dc>)
 800a104:	2301      	movs	r3, #1
 800a106:	4631      	mov	r1, r6
 800a108:	4628      	mov	r0, r5
 800a10a:	47b8      	blx	r7
 800a10c:	3001      	adds	r0, #1
 800a10e:	f43f af54 	beq.w	8009fba <_printf_float+0xb6>
 800a112:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a116:	4543      	cmp	r3, r8
 800a118:	db02      	blt.n	800a120 <_printf_float+0x21c>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	07d8      	lsls	r0, r3, #31
 800a11e:	d50f      	bpl.n	800a140 <_printf_float+0x23c>
 800a120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a124:	4631      	mov	r1, r6
 800a126:	4628      	mov	r0, r5
 800a128:	47b8      	blx	r7
 800a12a:	3001      	adds	r0, #1
 800a12c:	f43f af45 	beq.w	8009fba <_printf_float+0xb6>
 800a130:	f04f 0900 	mov.w	r9, #0
 800a134:	f108 38ff 	add.w	r8, r8, #4294967295
 800a138:	f104 0a1a 	add.w	sl, r4, #26
 800a13c:	45c8      	cmp	r8, r9
 800a13e:	dc09      	bgt.n	800a154 <_printf_float+0x250>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	079b      	lsls	r3, r3, #30
 800a144:	f100 8103 	bmi.w	800a34e <_printf_float+0x44a>
 800a148:	68e0      	ldr	r0, [r4, #12]
 800a14a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a14c:	4298      	cmp	r0, r3
 800a14e:	bfb8      	it	lt
 800a150:	4618      	movlt	r0, r3
 800a152:	e734      	b.n	8009fbe <_printf_float+0xba>
 800a154:	2301      	movs	r3, #1
 800a156:	4652      	mov	r2, sl
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f af2b 	beq.w	8009fba <_printf_float+0xb6>
 800a164:	f109 0901 	add.w	r9, r9, #1
 800a168:	e7e8      	b.n	800a13c <_printf_float+0x238>
 800a16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	dc39      	bgt.n	800a1e4 <_printf_float+0x2e0>
 800a170:	4a1b      	ldr	r2, [pc, #108]	@ (800a1e0 <_printf_float+0x2dc>)
 800a172:	2301      	movs	r3, #1
 800a174:	4631      	mov	r1, r6
 800a176:	4628      	mov	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	f43f af1d 	beq.w	8009fba <_printf_float+0xb6>
 800a180:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a184:	ea59 0303 	orrs.w	r3, r9, r3
 800a188:	d102      	bne.n	800a190 <_printf_float+0x28c>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	07d9      	lsls	r1, r3, #31
 800a18e:	d5d7      	bpl.n	800a140 <_printf_float+0x23c>
 800a190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	f43f af0d 	beq.w	8009fba <_printf_float+0xb6>
 800a1a0:	f04f 0a00 	mov.w	sl, #0
 800a1a4:	f104 0b1a 	add.w	fp, r4, #26
 800a1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1aa:	425b      	negs	r3, r3
 800a1ac:	4553      	cmp	r3, sl
 800a1ae:	dc01      	bgt.n	800a1b4 <_printf_float+0x2b0>
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	e793      	b.n	800a0dc <_printf_float+0x1d8>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	465a      	mov	r2, fp
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f43f aefb 	beq.w	8009fba <_printf_float+0xb6>
 800a1c4:	f10a 0a01 	add.w	sl, sl, #1
 800a1c8:	e7ee      	b.n	800a1a8 <_printf_float+0x2a4>
 800a1ca:	bf00      	nop
 800a1cc:	7fefffff 	.word	0x7fefffff
 800a1d0:	0800d000 	.word	0x0800d000
 800a1d4:	0800cffc 	.word	0x0800cffc
 800a1d8:	0800d008 	.word	0x0800d008
 800a1dc:	0800d004 	.word	0x0800d004
 800a1e0:	0800d00c 	.word	0x0800d00c
 800a1e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1ea:	4553      	cmp	r3, sl
 800a1ec:	bfa8      	it	ge
 800a1ee:	4653      	movge	r3, sl
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	4699      	mov	r9, r3
 800a1f4:	dc36      	bgt.n	800a264 <_printf_float+0x360>
 800a1f6:	f04f 0b00 	mov.w	fp, #0
 800a1fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1fe:	f104 021a 	add.w	r2, r4, #26
 800a202:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a204:	9306      	str	r3, [sp, #24]
 800a206:	eba3 0309 	sub.w	r3, r3, r9
 800a20a:	455b      	cmp	r3, fp
 800a20c:	dc31      	bgt.n	800a272 <_printf_float+0x36e>
 800a20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a210:	459a      	cmp	sl, r3
 800a212:	dc3a      	bgt.n	800a28a <_printf_float+0x386>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	07da      	lsls	r2, r3, #31
 800a218:	d437      	bmi.n	800a28a <_printf_float+0x386>
 800a21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21c:	ebaa 0903 	sub.w	r9, sl, r3
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	ebaa 0303 	sub.w	r3, sl, r3
 800a226:	4599      	cmp	r9, r3
 800a228:	bfa8      	it	ge
 800a22a:	4699      	movge	r9, r3
 800a22c:	f1b9 0f00 	cmp.w	r9, #0
 800a230:	dc33      	bgt.n	800a29a <_printf_float+0x396>
 800a232:	f04f 0800 	mov.w	r8, #0
 800a236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a23a:	f104 0b1a 	add.w	fp, r4, #26
 800a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a240:	ebaa 0303 	sub.w	r3, sl, r3
 800a244:	eba3 0309 	sub.w	r3, r3, r9
 800a248:	4543      	cmp	r3, r8
 800a24a:	f77f af79 	ble.w	800a140 <_printf_float+0x23c>
 800a24e:	2301      	movs	r3, #1
 800a250:	465a      	mov	r2, fp
 800a252:	4631      	mov	r1, r6
 800a254:	4628      	mov	r0, r5
 800a256:	47b8      	blx	r7
 800a258:	3001      	adds	r0, #1
 800a25a:	f43f aeae 	beq.w	8009fba <_printf_float+0xb6>
 800a25e:	f108 0801 	add.w	r8, r8, #1
 800a262:	e7ec      	b.n	800a23e <_printf_float+0x33a>
 800a264:	4642      	mov	r2, r8
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	d1c2      	bne.n	800a1f6 <_printf_float+0x2f2>
 800a270:	e6a3      	b.n	8009fba <_printf_float+0xb6>
 800a272:	2301      	movs	r3, #1
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	9206      	str	r2, [sp, #24]
 800a27a:	47b8      	blx	r7
 800a27c:	3001      	adds	r0, #1
 800a27e:	f43f ae9c 	beq.w	8009fba <_printf_float+0xb6>
 800a282:	9a06      	ldr	r2, [sp, #24]
 800a284:	f10b 0b01 	add.w	fp, fp, #1
 800a288:	e7bb      	b.n	800a202 <_printf_float+0x2fe>
 800a28a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a28e:	4631      	mov	r1, r6
 800a290:	4628      	mov	r0, r5
 800a292:	47b8      	blx	r7
 800a294:	3001      	adds	r0, #1
 800a296:	d1c0      	bne.n	800a21a <_printf_float+0x316>
 800a298:	e68f      	b.n	8009fba <_printf_float+0xb6>
 800a29a:	9a06      	ldr	r2, [sp, #24]
 800a29c:	464b      	mov	r3, r9
 800a29e:	4442      	add	r2, r8
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d1c3      	bne.n	800a232 <_printf_float+0x32e>
 800a2aa:	e686      	b.n	8009fba <_printf_float+0xb6>
 800a2ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2b0:	f1ba 0f01 	cmp.w	sl, #1
 800a2b4:	dc01      	bgt.n	800a2ba <_printf_float+0x3b6>
 800a2b6:	07db      	lsls	r3, r3, #31
 800a2b8:	d536      	bpl.n	800a328 <_printf_float+0x424>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4642      	mov	r2, r8
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	47b8      	blx	r7
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	f43f ae78 	beq.w	8009fba <_printf_float+0xb6>
 800a2ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	47b8      	blx	r7
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	f43f ae70 	beq.w	8009fba <_printf_float+0xb6>
 800a2da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2e6:	f7f6 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ea:	b9c0      	cbnz	r0, 800a31e <_printf_float+0x41a>
 800a2ec:	4653      	mov	r3, sl
 800a2ee:	f108 0201 	add.w	r2, r8, #1
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	47b8      	blx	r7
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d10c      	bne.n	800a316 <_printf_float+0x412>
 800a2fc:	e65d      	b.n	8009fba <_printf_float+0xb6>
 800a2fe:	2301      	movs	r3, #1
 800a300:	465a      	mov	r2, fp
 800a302:	4631      	mov	r1, r6
 800a304:	4628      	mov	r0, r5
 800a306:	47b8      	blx	r7
 800a308:	3001      	adds	r0, #1
 800a30a:	f43f ae56 	beq.w	8009fba <_printf_float+0xb6>
 800a30e:	f108 0801 	add.w	r8, r8, #1
 800a312:	45d0      	cmp	r8, sl
 800a314:	dbf3      	blt.n	800a2fe <_printf_float+0x3fa>
 800a316:	464b      	mov	r3, r9
 800a318:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a31c:	e6df      	b.n	800a0de <_printf_float+0x1da>
 800a31e:	f04f 0800 	mov.w	r8, #0
 800a322:	f104 0b1a 	add.w	fp, r4, #26
 800a326:	e7f4      	b.n	800a312 <_printf_float+0x40e>
 800a328:	2301      	movs	r3, #1
 800a32a:	4642      	mov	r2, r8
 800a32c:	e7e1      	b.n	800a2f2 <_printf_float+0x3ee>
 800a32e:	2301      	movs	r3, #1
 800a330:	464a      	mov	r2, r9
 800a332:	4631      	mov	r1, r6
 800a334:	4628      	mov	r0, r5
 800a336:	47b8      	blx	r7
 800a338:	3001      	adds	r0, #1
 800a33a:	f43f ae3e 	beq.w	8009fba <_printf_float+0xb6>
 800a33e:	f108 0801 	add.w	r8, r8, #1
 800a342:	68e3      	ldr	r3, [r4, #12]
 800a344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a346:	1a5b      	subs	r3, r3, r1
 800a348:	4543      	cmp	r3, r8
 800a34a:	dcf0      	bgt.n	800a32e <_printf_float+0x42a>
 800a34c:	e6fc      	b.n	800a148 <_printf_float+0x244>
 800a34e:	f04f 0800 	mov.w	r8, #0
 800a352:	f104 0919 	add.w	r9, r4, #25
 800a356:	e7f4      	b.n	800a342 <_printf_float+0x43e>

0800a358 <_printf_common>:
 800a358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	4616      	mov	r6, r2
 800a35e:	4698      	mov	r8, r3
 800a360:	688a      	ldr	r2, [r1, #8]
 800a362:	690b      	ldr	r3, [r1, #16]
 800a364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a368:	4293      	cmp	r3, r2
 800a36a:	bfb8      	it	lt
 800a36c:	4613      	movlt	r3, r2
 800a36e:	6033      	str	r3, [r6, #0]
 800a370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a374:	4607      	mov	r7, r0
 800a376:	460c      	mov	r4, r1
 800a378:	b10a      	cbz	r2, 800a37e <_printf_common+0x26>
 800a37a:	3301      	adds	r3, #1
 800a37c:	6033      	str	r3, [r6, #0]
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	0699      	lsls	r1, r3, #26
 800a382:	bf42      	ittt	mi
 800a384:	6833      	ldrmi	r3, [r6, #0]
 800a386:	3302      	addmi	r3, #2
 800a388:	6033      	strmi	r3, [r6, #0]
 800a38a:	6825      	ldr	r5, [r4, #0]
 800a38c:	f015 0506 	ands.w	r5, r5, #6
 800a390:	d106      	bne.n	800a3a0 <_printf_common+0x48>
 800a392:	f104 0a19 	add.w	sl, r4, #25
 800a396:	68e3      	ldr	r3, [r4, #12]
 800a398:	6832      	ldr	r2, [r6, #0]
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	42ab      	cmp	r3, r5
 800a39e:	dc26      	bgt.n	800a3ee <_printf_common+0x96>
 800a3a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3a4:	6822      	ldr	r2, [r4, #0]
 800a3a6:	3b00      	subs	r3, #0
 800a3a8:	bf18      	it	ne
 800a3aa:	2301      	movne	r3, #1
 800a3ac:	0692      	lsls	r2, r2, #26
 800a3ae:	d42b      	bmi.n	800a408 <_printf_common+0xb0>
 800a3b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3b4:	4641      	mov	r1, r8
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	47c8      	blx	r9
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	d01e      	beq.n	800a3fc <_printf_common+0xa4>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	6922      	ldr	r2, [r4, #16]
 800a3c2:	f003 0306 	and.w	r3, r3, #6
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	bf02      	ittt	eq
 800a3ca:	68e5      	ldreq	r5, [r4, #12]
 800a3cc:	6833      	ldreq	r3, [r6, #0]
 800a3ce:	1aed      	subeq	r5, r5, r3
 800a3d0:	68a3      	ldr	r3, [r4, #8]
 800a3d2:	bf0c      	ite	eq
 800a3d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3d8:	2500      	movne	r5, #0
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	bfc4      	itt	gt
 800a3de:	1a9b      	subgt	r3, r3, r2
 800a3e0:	18ed      	addgt	r5, r5, r3
 800a3e2:	2600      	movs	r6, #0
 800a3e4:	341a      	adds	r4, #26
 800a3e6:	42b5      	cmp	r5, r6
 800a3e8:	d11a      	bne.n	800a420 <_printf_common+0xc8>
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e008      	b.n	800a400 <_printf_common+0xa8>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4652      	mov	r2, sl
 800a3f2:	4641      	mov	r1, r8
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	47c8      	blx	r9
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	d103      	bne.n	800a404 <_printf_common+0xac>
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a404:	3501      	adds	r5, #1
 800a406:	e7c6      	b.n	800a396 <_printf_common+0x3e>
 800a408:	18e1      	adds	r1, r4, r3
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	2030      	movs	r0, #48	@ 0x30
 800a40e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a412:	4422      	add	r2, r4
 800a414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a41c:	3302      	adds	r3, #2
 800a41e:	e7c7      	b.n	800a3b0 <_printf_common+0x58>
 800a420:	2301      	movs	r3, #1
 800a422:	4622      	mov	r2, r4
 800a424:	4641      	mov	r1, r8
 800a426:	4638      	mov	r0, r7
 800a428:	47c8      	blx	r9
 800a42a:	3001      	adds	r0, #1
 800a42c:	d0e6      	beq.n	800a3fc <_printf_common+0xa4>
 800a42e:	3601      	adds	r6, #1
 800a430:	e7d9      	b.n	800a3e6 <_printf_common+0x8e>
	...

0800a434 <_printf_i>:
 800a434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a438:	7e0f      	ldrb	r7, [r1, #24]
 800a43a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a43c:	2f78      	cmp	r7, #120	@ 0x78
 800a43e:	4691      	mov	r9, r2
 800a440:	4680      	mov	r8, r0
 800a442:	460c      	mov	r4, r1
 800a444:	469a      	mov	sl, r3
 800a446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a44a:	d807      	bhi.n	800a45c <_printf_i+0x28>
 800a44c:	2f62      	cmp	r7, #98	@ 0x62
 800a44e:	d80a      	bhi.n	800a466 <_printf_i+0x32>
 800a450:	2f00      	cmp	r7, #0
 800a452:	f000 80d1 	beq.w	800a5f8 <_printf_i+0x1c4>
 800a456:	2f58      	cmp	r7, #88	@ 0x58
 800a458:	f000 80b8 	beq.w	800a5cc <_printf_i+0x198>
 800a45c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a464:	e03a      	b.n	800a4dc <_printf_i+0xa8>
 800a466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a46a:	2b15      	cmp	r3, #21
 800a46c:	d8f6      	bhi.n	800a45c <_printf_i+0x28>
 800a46e:	a101      	add	r1, pc, #4	@ (adr r1, 800a474 <_printf_i+0x40>)
 800a470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a474:	0800a4cd 	.word	0x0800a4cd
 800a478:	0800a4e1 	.word	0x0800a4e1
 800a47c:	0800a45d 	.word	0x0800a45d
 800a480:	0800a45d 	.word	0x0800a45d
 800a484:	0800a45d 	.word	0x0800a45d
 800a488:	0800a45d 	.word	0x0800a45d
 800a48c:	0800a4e1 	.word	0x0800a4e1
 800a490:	0800a45d 	.word	0x0800a45d
 800a494:	0800a45d 	.word	0x0800a45d
 800a498:	0800a45d 	.word	0x0800a45d
 800a49c:	0800a45d 	.word	0x0800a45d
 800a4a0:	0800a5df 	.word	0x0800a5df
 800a4a4:	0800a50b 	.word	0x0800a50b
 800a4a8:	0800a599 	.word	0x0800a599
 800a4ac:	0800a45d 	.word	0x0800a45d
 800a4b0:	0800a45d 	.word	0x0800a45d
 800a4b4:	0800a601 	.word	0x0800a601
 800a4b8:	0800a45d 	.word	0x0800a45d
 800a4bc:	0800a50b 	.word	0x0800a50b
 800a4c0:	0800a45d 	.word	0x0800a45d
 800a4c4:	0800a45d 	.word	0x0800a45d
 800a4c8:	0800a5a1 	.word	0x0800a5a1
 800a4cc:	6833      	ldr	r3, [r6, #0]
 800a4ce:	1d1a      	adds	r2, r3, #4
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6032      	str	r2, [r6, #0]
 800a4d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e09c      	b.n	800a61a <_printf_i+0x1e6>
 800a4e0:	6833      	ldr	r3, [r6, #0]
 800a4e2:	6820      	ldr	r0, [r4, #0]
 800a4e4:	1d19      	adds	r1, r3, #4
 800a4e6:	6031      	str	r1, [r6, #0]
 800a4e8:	0606      	lsls	r6, r0, #24
 800a4ea:	d501      	bpl.n	800a4f0 <_printf_i+0xbc>
 800a4ec:	681d      	ldr	r5, [r3, #0]
 800a4ee:	e003      	b.n	800a4f8 <_printf_i+0xc4>
 800a4f0:	0645      	lsls	r5, r0, #25
 800a4f2:	d5fb      	bpl.n	800a4ec <_printf_i+0xb8>
 800a4f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	da03      	bge.n	800a504 <_printf_i+0xd0>
 800a4fc:	232d      	movs	r3, #45	@ 0x2d
 800a4fe:	426d      	negs	r5, r5
 800a500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a504:	4858      	ldr	r0, [pc, #352]	@ (800a668 <_printf_i+0x234>)
 800a506:	230a      	movs	r3, #10
 800a508:	e011      	b.n	800a52e <_printf_i+0xfa>
 800a50a:	6821      	ldr	r1, [r4, #0]
 800a50c:	6833      	ldr	r3, [r6, #0]
 800a50e:	0608      	lsls	r0, r1, #24
 800a510:	f853 5b04 	ldr.w	r5, [r3], #4
 800a514:	d402      	bmi.n	800a51c <_printf_i+0xe8>
 800a516:	0649      	lsls	r1, r1, #25
 800a518:	bf48      	it	mi
 800a51a:	b2ad      	uxthmi	r5, r5
 800a51c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a51e:	4852      	ldr	r0, [pc, #328]	@ (800a668 <_printf_i+0x234>)
 800a520:	6033      	str	r3, [r6, #0]
 800a522:	bf14      	ite	ne
 800a524:	230a      	movne	r3, #10
 800a526:	2308      	moveq	r3, #8
 800a528:	2100      	movs	r1, #0
 800a52a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a52e:	6866      	ldr	r6, [r4, #4]
 800a530:	60a6      	str	r6, [r4, #8]
 800a532:	2e00      	cmp	r6, #0
 800a534:	db05      	blt.n	800a542 <_printf_i+0x10e>
 800a536:	6821      	ldr	r1, [r4, #0]
 800a538:	432e      	orrs	r6, r5
 800a53a:	f021 0104 	bic.w	r1, r1, #4
 800a53e:	6021      	str	r1, [r4, #0]
 800a540:	d04b      	beq.n	800a5da <_printf_i+0x1a6>
 800a542:	4616      	mov	r6, r2
 800a544:	fbb5 f1f3 	udiv	r1, r5, r3
 800a548:	fb03 5711 	mls	r7, r3, r1, r5
 800a54c:	5dc7      	ldrb	r7, [r0, r7]
 800a54e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a552:	462f      	mov	r7, r5
 800a554:	42bb      	cmp	r3, r7
 800a556:	460d      	mov	r5, r1
 800a558:	d9f4      	bls.n	800a544 <_printf_i+0x110>
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	d10b      	bne.n	800a576 <_printf_i+0x142>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	07df      	lsls	r7, r3, #31
 800a562:	d508      	bpl.n	800a576 <_printf_i+0x142>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	6861      	ldr	r1, [r4, #4]
 800a568:	4299      	cmp	r1, r3
 800a56a:	bfde      	ittt	le
 800a56c:	2330      	movle	r3, #48	@ 0x30
 800a56e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a572:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a576:	1b92      	subs	r2, r2, r6
 800a578:	6122      	str	r2, [r4, #16]
 800a57a:	f8cd a000 	str.w	sl, [sp]
 800a57e:	464b      	mov	r3, r9
 800a580:	aa03      	add	r2, sp, #12
 800a582:	4621      	mov	r1, r4
 800a584:	4640      	mov	r0, r8
 800a586:	f7ff fee7 	bl	800a358 <_printf_common>
 800a58a:	3001      	adds	r0, #1
 800a58c:	d14a      	bne.n	800a624 <_printf_i+0x1f0>
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295
 800a592:	b004      	add	sp, #16
 800a594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	f043 0320 	orr.w	r3, r3, #32
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	4832      	ldr	r0, [pc, #200]	@ (800a66c <_printf_i+0x238>)
 800a5a2:	2778      	movs	r7, #120	@ 0x78
 800a5a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	6831      	ldr	r1, [r6, #0]
 800a5ac:	061f      	lsls	r7, r3, #24
 800a5ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5b2:	d402      	bmi.n	800a5ba <_printf_i+0x186>
 800a5b4:	065f      	lsls	r7, r3, #25
 800a5b6:	bf48      	it	mi
 800a5b8:	b2ad      	uxthmi	r5, r5
 800a5ba:	6031      	str	r1, [r6, #0]
 800a5bc:	07d9      	lsls	r1, r3, #31
 800a5be:	bf44      	itt	mi
 800a5c0:	f043 0320 	orrmi.w	r3, r3, #32
 800a5c4:	6023      	strmi	r3, [r4, #0]
 800a5c6:	b11d      	cbz	r5, 800a5d0 <_printf_i+0x19c>
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	e7ad      	b.n	800a528 <_printf_i+0xf4>
 800a5cc:	4826      	ldr	r0, [pc, #152]	@ (800a668 <_printf_i+0x234>)
 800a5ce:	e7e9      	b.n	800a5a4 <_printf_i+0x170>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	f023 0320 	bic.w	r3, r3, #32
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	e7f6      	b.n	800a5c8 <_printf_i+0x194>
 800a5da:	4616      	mov	r6, r2
 800a5dc:	e7bd      	b.n	800a55a <_printf_i+0x126>
 800a5de:	6833      	ldr	r3, [r6, #0]
 800a5e0:	6825      	ldr	r5, [r4, #0]
 800a5e2:	6961      	ldr	r1, [r4, #20]
 800a5e4:	1d18      	adds	r0, r3, #4
 800a5e6:	6030      	str	r0, [r6, #0]
 800a5e8:	062e      	lsls	r6, r5, #24
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	d501      	bpl.n	800a5f2 <_printf_i+0x1be>
 800a5ee:	6019      	str	r1, [r3, #0]
 800a5f0:	e002      	b.n	800a5f8 <_printf_i+0x1c4>
 800a5f2:	0668      	lsls	r0, r5, #25
 800a5f4:	d5fb      	bpl.n	800a5ee <_printf_i+0x1ba>
 800a5f6:	8019      	strh	r1, [r3, #0]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	4616      	mov	r6, r2
 800a5fe:	e7bc      	b.n	800a57a <_printf_i+0x146>
 800a600:	6833      	ldr	r3, [r6, #0]
 800a602:	1d1a      	adds	r2, r3, #4
 800a604:	6032      	str	r2, [r6, #0]
 800a606:	681e      	ldr	r6, [r3, #0]
 800a608:	6862      	ldr	r2, [r4, #4]
 800a60a:	2100      	movs	r1, #0
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7f5 fddf 	bl	80001d0 <memchr>
 800a612:	b108      	cbz	r0, 800a618 <_printf_i+0x1e4>
 800a614:	1b80      	subs	r0, r0, r6
 800a616:	6060      	str	r0, [r4, #4]
 800a618:	6863      	ldr	r3, [r4, #4]
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	2300      	movs	r3, #0
 800a61e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a622:	e7aa      	b.n	800a57a <_printf_i+0x146>
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	4632      	mov	r2, r6
 800a628:	4649      	mov	r1, r9
 800a62a:	4640      	mov	r0, r8
 800a62c:	47d0      	blx	sl
 800a62e:	3001      	adds	r0, #1
 800a630:	d0ad      	beq.n	800a58e <_printf_i+0x15a>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	079b      	lsls	r3, r3, #30
 800a636:	d413      	bmi.n	800a660 <_printf_i+0x22c>
 800a638:	68e0      	ldr	r0, [r4, #12]
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	4298      	cmp	r0, r3
 800a63e:	bfb8      	it	lt
 800a640:	4618      	movlt	r0, r3
 800a642:	e7a6      	b.n	800a592 <_printf_i+0x15e>
 800a644:	2301      	movs	r3, #1
 800a646:	4632      	mov	r2, r6
 800a648:	4649      	mov	r1, r9
 800a64a:	4640      	mov	r0, r8
 800a64c:	47d0      	blx	sl
 800a64e:	3001      	adds	r0, #1
 800a650:	d09d      	beq.n	800a58e <_printf_i+0x15a>
 800a652:	3501      	adds	r5, #1
 800a654:	68e3      	ldr	r3, [r4, #12]
 800a656:	9903      	ldr	r1, [sp, #12]
 800a658:	1a5b      	subs	r3, r3, r1
 800a65a:	42ab      	cmp	r3, r5
 800a65c:	dcf2      	bgt.n	800a644 <_printf_i+0x210>
 800a65e:	e7eb      	b.n	800a638 <_printf_i+0x204>
 800a660:	2500      	movs	r5, #0
 800a662:	f104 0619 	add.w	r6, r4, #25
 800a666:	e7f5      	b.n	800a654 <_printf_i+0x220>
 800a668:	0800d00e 	.word	0x0800d00e
 800a66c:	0800d01f 	.word	0x0800d01f

0800a670 <std>:
 800a670:	2300      	movs	r3, #0
 800a672:	b510      	push	{r4, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	e9c0 3300 	strd	r3, r3, [r0]
 800a67a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a67e:	6083      	str	r3, [r0, #8]
 800a680:	8181      	strh	r1, [r0, #12]
 800a682:	6643      	str	r3, [r0, #100]	@ 0x64
 800a684:	81c2      	strh	r2, [r0, #14]
 800a686:	6183      	str	r3, [r0, #24]
 800a688:	4619      	mov	r1, r3
 800a68a:	2208      	movs	r2, #8
 800a68c:	305c      	adds	r0, #92	@ 0x5c
 800a68e:	f000 f92a 	bl	800a8e6 <memset>
 800a692:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c8 <std+0x58>)
 800a694:	6263      	str	r3, [r4, #36]	@ 0x24
 800a696:	4b0d      	ldr	r3, [pc, #52]	@ (800a6cc <std+0x5c>)
 800a698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a69a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d0 <std+0x60>)
 800a69c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a69e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d4 <std+0x64>)
 800a6a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d8 <std+0x68>)
 800a6a4:	6224      	str	r4, [r4, #32]
 800a6a6:	429c      	cmp	r4, r3
 800a6a8:	d006      	beq.n	800a6b8 <std+0x48>
 800a6aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6ae:	4294      	cmp	r4, r2
 800a6b0:	d002      	beq.n	800a6b8 <std+0x48>
 800a6b2:	33d0      	adds	r3, #208	@ 0xd0
 800a6b4:	429c      	cmp	r4, r3
 800a6b6:	d105      	bne.n	800a6c4 <std+0x54>
 800a6b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6c0:	f000 b98e 	b.w	800a9e0 <__retarget_lock_init_recursive>
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0800a861 	.word	0x0800a861
 800a6cc:	0800a883 	.word	0x0800a883
 800a6d0:	0800a8bb 	.word	0x0800a8bb
 800a6d4:	0800a8df 	.word	0x0800a8df
 800a6d8:	200005b8 	.word	0x200005b8

0800a6dc <stdio_exit_handler>:
 800a6dc:	4a02      	ldr	r2, [pc, #8]	@ (800a6e8 <stdio_exit_handler+0xc>)
 800a6de:	4903      	ldr	r1, [pc, #12]	@ (800a6ec <stdio_exit_handler+0x10>)
 800a6e0:	4803      	ldr	r0, [pc, #12]	@ (800a6f0 <stdio_exit_handler+0x14>)
 800a6e2:	f000 b869 	b.w	800a7b8 <_fwalk_sglue>
 800a6e6:	bf00      	nop
 800a6e8:	20000010 	.word	0x20000010
 800a6ec:	0800c345 	.word	0x0800c345
 800a6f0:	20000020 	.word	0x20000020

0800a6f4 <cleanup_stdio>:
 800a6f4:	6841      	ldr	r1, [r0, #4]
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a728 <cleanup_stdio+0x34>)
 800a6f8:	4299      	cmp	r1, r3
 800a6fa:	b510      	push	{r4, lr}
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	d001      	beq.n	800a704 <cleanup_stdio+0x10>
 800a700:	f001 fe20 	bl	800c344 <_fflush_r>
 800a704:	68a1      	ldr	r1, [r4, #8]
 800a706:	4b09      	ldr	r3, [pc, #36]	@ (800a72c <cleanup_stdio+0x38>)
 800a708:	4299      	cmp	r1, r3
 800a70a:	d002      	beq.n	800a712 <cleanup_stdio+0x1e>
 800a70c:	4620      	mov	r0, r4
 800a70e:	f001 fe19 	bl	800c344 <_fflush_r>
 800a712:	68e1      	ldr	r1, [r4, #12]
 800a714:	4b06      	ldr	r3, [pc, #24]	@ (800a730 <cleanup_stdio+0x3c>)
 800a716:	4299      	cmp	r1, r3
 800a718:	d004      	beq.n	800a724 <cleanup_stdio+0x30>
 800a71a:	4620      	mov	r0, r4
 800a71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a720:	f001 be10 	b.w	800c344 <_fflush_r>
 800a724:	bd10      	pop	{r4, pc}
 800a726:	bf00      	nop
 800a728:	200005b8 	.word	0x200005b8
 800a72c:	20000620 	.word	0x20000620
 800a730:	20000688 	.word	0x20000688

0800a734 <global_stdio_init.part.0>:
 800a734:	b510      	push	{r4, lr}
 800a736:	4b0b      	ldr	r3, [pc, #44]	@ (800a764 <global_stdio_init.part.0+0x30>)
 800a738:	4c0b      	ldr	r4, [pc, #44]	@ (800a768 <global_stdio_init.part.0+0x34>)
 800a73a:	4a0c      	ldr	r2, [pc, #48]	@ (800a76c <global_stdio_init.part.0+0x38>)
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	4620      	mov	r0, r4
 800a740:	2200      	movs	r2, #0
 800a742:	2104      	movs	r1, #4
 800a744:	f7ff ff94 	bl	800a670 <std>
 800a748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a74c:	2201      	movs	r2, #1
 800a74e:	2109      	movs	r1, #9
 800a750:	f7ff ff8e 	bl	800a670 <std>
 800a754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a758:	2202      	movs	r2, #2
 800a75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a75e:	2112      	movs	r1, #18
 800a760:	f7ff bf86 	b.w	800a670 <std>
 800a764:	200006f0 	.word	0x200006f0
 800a768:	200005b8 	.word	0x200005b8
 800a76c:	0800a6dd 	.word	0x0800a6dd

0800a770 <__sfp_lock_acquire>:
 800a770:	4801      	ldr	r0, [pc, #4]	@ (800a778 <__sfp_lock_acquire+0x8>)
 800a772:	f000 b936 	b.w	800a9e2 <__retarget_lock_acquire_recursive>
 800a776:	bf00      	nop
 800a778:	200006f9 	.word	0x200006f9

0800a77c <__sfp_lock_release>:
 800a77c:	4801      	ldr	r0, [pc, #4]	@ (800a784 <__sfp_lock_release+0x8>)
 800a77e:	f000 b931 	b.w	800a9e4 <__retarget_lock_release_recursive>
 800a782:	bf00      	nop
 800a784:	200006f9 	.word	0x200006f9

0800a788 <__sinit>:
 800a788:	b510      	push	{r4, lr}
 800a78a:	4604      	mov	r4, r0
 800a78c:	f7ff fff0 	bl	800a770 <__sfp_lock_acquire>
 800a790:	6a23      	ldr	r3, [r4, #32]
 800a792:	b11b      	cbz	r3, 800a79c <__sinit+0x14>
 800a794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a798:	f7ff bff0 	b.w	800a77c <__sfp_lock_release>
 800a79c:	4b04      	ldr	r3, [pc, #16]	@ (800a7b0 <__sinit+0x28>)
 800a79e:	6223      	str	r3, [r4, #32]
 800a7a0:	4b04      	ldr	r3, [pc, #16]	@ (800a7b4 <__sinit+0x2c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1f5      	bne.n	800a794 <__sinit+0xc>
 800a7a8:	f7ff ffc4 	bl	800a734 <global_stdio_init.part.0>
 800a7ac:	e7f2      	b.n	800a794 <__sinit+0xc>
 800a7ae:	bf00      	nop
 800a7b0:	0800a6f5 	.word	0x0800a6f5
 800a7b4:	200006f0 	.word	0x200006f0

0800a7b8 <_fwalk_sglue>:
 800a7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7bc:	4607      	mov	r7, r0
 800a7be:	4688      	mov	r8, r1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	2600      	movs	r6, #0
 800a7c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a7cc:	d505      	bpl.n	800a7da <_fwalk_sglue+0x22>
 800a7ce:	6824      	ldr	r4, [r4, #0]
 800a7d0:	2c00      	cmp	r4, #0
 800a7d2:	d1f7      	bne.n	800a7c4 <_fwalk_sglue+0xc>
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d907      	bls.n	800a7f0 <_fwalk_sglue+0x38>
 800a7e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	d003      	beq.n	800a7f0 <_fwalk_sglue+0x38>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	47c0      	blx	r8
 800a7ee:	4306      	orrs	r6, r0
 800a7f0:	3568      	adds	r5, #104	@ 0x68
 800a7f2:	e7e9      	b.n	800a7c8 <_fwalk_sglue+0x10>

0800a7f4 <sniprintf>:
 800a7f4:	b40c      	push	{r2, r3}
 800a7f6:	b530      	push	{r4, r5, lr}
 800a7f8:	4b18      	ldr	r3, [pc, #96]	@ (800a85c <sniprintf+0x68>)
 800a7fa:	1e0c      	subs	r4, r1, #0
 800a7fc:	681d      	ldr	r5, [r3, #0]
 800a7fe:	b09d      	sub	sp, #116	@ 0x74
 800a800:	da08      	bge.n	800a814 <sniprintf+0x20>
 800a802:	238b      	movs	r3, #139	@ 0x8b
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	f04f 30ff 	mov.w	r0, #4294967295
 800a80a:	b01d      	add	sp, #116	@ 0x74
 800a80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a810:	b002      	add	sp, #8
 800a812:	4770      	bx	lr
 800a814:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a818:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a81c:	f04f 0300 	mov.w	r3, #0
 800a820:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a822:	bf14      	ite	ne
 800a824:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a828:	4623      	moveq	r3, r4
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	9307      	str	r3, [sp, #28]
 800a82e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a832:	9002      	str	r0, [sp, #8]
 800a834:	9006      	str	r0, [sp, #24]
 800a836:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a83a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a83c:	ab21      	add	r3, sp, #132	@ 0x84
 800a83e:	a902      	add	r1, sp, #8
 800a840:	4628      	mov	r0, r5
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	f001 fbfe 	bl	800c044 <_svfiprintf_r>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	bfbc      	itt	lt
 800a84c:	238b      	movlt	r3, #139	@ 0x8b
 800a84e:	602b      	strlt	r3, [r5, #0]
 800a850:	2c00      	cmp	r4, #0
 800a852:	d0da      	beq.n	800a80a <sniprintf+0x16>
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	e7d6      	b.n	800a80a <sniprintf+0x16>
 800a85c:	2000001c 	.word	0x2000001c

0800a860 <__sread>:
 800a860:	b510      	push	{r4, lr}
 800a862:	460c      	mov	r4, r1
 800a864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a868:	f000 f86c 	bl	800a944 <_read_r>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	bfab      	itete	ge
 800a870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a872:	89a3      	ldrhlt	r3, [r4, #12]
 800a874:	181b      	addge	r3, r3, r0
 800a876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a87a:	bfac      	ite	ge
 800a87c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a87e:	81a3      	strhlt	r3, [r4, #12]
 800a880:	bd10      	pop	{r4, pc}

0800a882 <__swrite>:
 800a882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a886:	461f      	mov	r7, r3
 800a888:	898b      	ldrh	r3, [r1, #12]
 800a88a:	05db      	lsls	r3, r3, #23
 800a88c:	4605      	mov	r5, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	4616      	mov	r6, r2
 800a892:	d505      	bpl.n	800a8a0 <__swrite+0x1e>
 800a894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a898:	2302      	movs	r3, #2
 800a89a:	2200      	movs	r2, #0
 800a89c:	f000 f840 	bl	800a920 <_lseek_r>
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8aa:	81a3      	strh	r3, [r4, #12]
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b6:	f000 b857 	b.w	800a968 <_write_r>

0800a8ba <__sseek>:
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	460c      	mov	r4, r1
 800a8be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c2:	f000 f82d 	bl	800a920 <_lseek_r>
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	bf15      	itete	ne
 800a8cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8d6:	81a3      	strheq	r3, [r4, #12]
 800a8d8:	bf18      	it	ne
 800a8da:	81a3      	strhne	r3, [r4, #12]
 800a8dc:	bd10      	pop	{r4, pc}

0800a8de <__sclose>:
 800a8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e2:	f000 b80d 	b.w	800a900 <_close_r>

0800a8e6 <memset>:
 800a8e6:	4402      	add	r2, r0
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d100      	bne.n	800a8f0 <memset+0xa>
 800a8ee:	4770      	bx	lr
 800a8f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f4:	e7f9      	b.n	800a8ea <memset+0x4>
	...

0800a8f8 <_localeconv_r>:
 800a8f8:	4800      	ldr	r0, [pc, #0]	@ (800a8fc <_localeconv_r+0x4>)
 800a8fa:	4770      	bx	lr
 800a8fc:	2000015c 	.word	0x2000015c

0800a900 <_close_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d06      	ldr	r5, [pc, #24]	@ (800a91c <_close_r+0x1c>)
 800a904:	2300      	movs	r3, #0
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	602b      	str	r3, [r5, #0]
 800a90c:	f7f8 fdd0 	bl	80034b0 <_close>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_close_r+0x1a>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	b103      	cbz	r3, 800a91a <_close_r+0x1a>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	200006f4 	.word	0x200006f4

0800a920 <_lseek_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d07      	ldr	r5, [pc, #28]	@ (800a940 <_lseek_r+0x20>)
 800a924:	4604      	mov	r4, r0
 800a926:	4608      	mov	r0, r1
 800a928:	4611      	mov	r1, r2
 800a92a:	2200      	movs	r2, #0
 800a92c:	602a      	str	r2, [r5, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	f7f8 fde5 	bl	80034fe <_lseek>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_lseek_r+0x1e>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_lseek_r+0x1e>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	200006f4 	.word	0x200006f4

0800a944 <_read_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d07      	ldr	r5, [pc, #28]	@ (800a964 <_read_r+0x20>)
 800a948:	4604      	mov	r4, r0
 800a94a:	4608      	mov	r0, r1
 800a94c:	4611      	mov	r1, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	602a      	str	r2, [r5, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	f7f8 fd73 	bl	800343e <_read>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_read_r+0x1e>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_read_r+0x1e>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	200006f4 	.word	0x200006f4

0800a968 <_write_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4d07      	ldr	r5, [pc, #28]	@ (800a988 <_write_r+0x20>)
 800a96c:	4604      	mov	r4, r0
 800a96e:	4608      	mov	r0, r1
 800a970:	4611      	mov	r1, r2
 800a972:	2200      	movs	r2, #0
 800a974:	602a      	str	r2, [r5, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	f7f8 fd7e 	bl	8003478 <_write>
 800a97c:	1c43      	adds	r3, r0, #1
 800a97e:	d102      	bne.n	800a986 <_write_r+0x1e>
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	b103      	cbz	r3, 800a986 <_write_r+0x1e>
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	bd38      	pop	{r3, r4, r5, pc}
 800a988:	200006f4 	.word	0x200006f4

0800a98c <__errno>:
 800a98c:	4b01      	ldr	r3, [pc, #4]	@ (800a994 <__errno+0x8>)
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	2000001c 	.word	0x2000001c

0800a998 <__libc_init_array>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	4d0d      	ldr	r5, [pc, #52]	@ (800a9d0 <__libc_init_array+0x38>)
 800a99c:	4c0d      	ldr	r4, [pc, #52]	@ (800a9d4 <__libc_init_array+0x3c>)
 800a99e:	1b64      	subs	r4, r4, r5
 800a9a0:	10a4      	asrs	r4, r4, #2
 800a9a2:	2600      	movs	r6, #0
 800a9a4:	42a6      	cmp	r6, r4
 800a9a6:	d109      	bne.n	800a9bc <__libc_init_array+0x24>
 800a9a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a9d8 <__libc_init_array+0x40>)
 800a9aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a9dc <__libc_init_array+0x44>)
 800a9ac:	f002 f868 	bl	800ca80 <_init>
 800a9b0:	1b64      	subs	r4, r4, r5
 800a9b2:	10a4      	asrs	r4, r4, #2
 800a9b4:	2600      	movs	r6, #0
 800a9b6:	42a6      	cmp	r6, r4
 800a9b8:	d105      	bne.n	800a9c6 <__libc_init_array+0x2e>
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c0:	4798      	blx	r3
 800a9c2:	3601      	adds	r6, #1
 800a9c4:	e7ee      	b.n	800a9a4 <__libc_init_array+0xc>
 800a9c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ca:	4798      	blx	r3
 800a9cc:	3601      	adds	r6, #1
 800a9ce:	e7f2      	b.n	800a9b6 <__libc_init_array+0x1e>
 800a9d0:	0800d37c 	.word	0x0800d37c
 800a9d4:	0800d37c 	.word	0x0800d37c
 800a9d8:	0800d37c 	.word	0x0800d37c
 800a9dc:	0800d380 	.word	0x0800d380

0800a9e0 <__retarget_lock_init_recursive>:
 800a9e0:	4770      	bx	lr

0800a9e2 <__retarget_lock_acquire_recursive>:
 800a9e2:	4770      	bx	lr

0800a9e4 <__retarget_lock_release_recursive>:
 800a9e4:	4770      	bx	lr

0800a9e6 <quorem>:
 800a9e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	6903      	ldr	r3, [r0, #16]
 800a9ec:	690c      	ldr	r4, [r1, #16]
 800a9ee:	42a3      	cmp	r3, r4
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	db7e      	blt.n	800aaf2 <quorem+0x10c>
 800a9f4:	3c01      	subs	r4, #1
 800a9f6:	f101 0814 	add.w	r8, r1, #20
 800a9fa:	00a3      	lsls	r3, r4, #2
 800a9fc:	f100 0514 	add.w	r5, r0, #20
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa10:	3301      	adds	r3, #1
 800aa12:	429a      	cmp	r2, r3
 800aa14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa18:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa1c:	d32e      	bcc.n	800aa7c <quorem+0x96>
 800aa1e:	f04f 0a00 	mov.w	sl, #0
 800aa22:	46c4      	mov	ip, r8
 800aa24:	46ae      	mov	lr, r5
 800aa26:	46d3      	mov	fp, sl
 800aa28:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa2c:	b298      	uxth	r0, r3
 800aa2e:	fb06 a000 	mla	r0, r6, r0, sl
 800aa32:	0c02      	lsrs	r2, r0, #16
 800aa34:	0c1b      	lsrs	r3, r3, #16
 800aa36:	fb06 2303 	mla	r3, r6, r3, r2
 800aa3a:	f8de 2000 	ldr.w	r2, [lr]
 800aa3e:	b280      	uxth	r0, r0
 800aa40:	b292      	uxth	r2, r2
 800aa42:	1a12      	subs	r2, r2, r0
 800aa44:	445a      	add	r2, fp
 800aa46:	f8de 0000 	ldr.w	r0, [lr]
 800aa4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa58:	b292      	uxth	r2, r2
 800aa5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa5e:	45e1      	cmp	r9, ip
 800aa60:	f84e 2b04 	str.w	r2, [lr], #4
 800aa64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa68:	d2de      	bcs.n	800aa28 <quorem+0x42>
 800aa6a:	9b00      	ldr	r3, [sp, #0]
 800aa6c:	58eb      	ldr	r3, [r5, r3]
 800aa6e:	b92b      	cbnz	r3, 800aa7c <quorem+0x96>
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	3b04      	subs	r3, #4
 800aa74:	429d      	cmp	r5, r3
 800aa76:	461a      	mov	r2, r3
 800aa78:	d32f      	bcc.n	800aada <quorem+0xf4>
 800aa7a:	613c      	str	r4, [r7, #16]
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f001 f97d 	bl	800bd7c <__mcmp>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	db25      	blt.n	800aad2 <quorem+0xec>
 800aa86:	4629      	mov	r1, r5
 800aa88:	2000      	movs	r0, #0
 800aa8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa8e:	f8d1 c000 	ldr.w	ip, [r1]
 800aa92:	fa1f fe82 	uxth.w	lr, r2
 800aa96:	fa1f f38c 	uxth.w	r3, ip
 800aa9a:	eba3 030e 	sub.w	r3, r3, lr
 800aa9e:	4403      	add	r3, r0
 800aaa0:	0c12      	lsrs	r2, r2, #16
 800aaa2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aaa6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aab0:	45c1      	cmp	r9, r8
 800aab2:	f841 3b04 	str.w	r3, [r1], #4
 800aab6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aaba:	d2e6      	bcs.n	800aa8a <quorem+0xa4>
 800aabc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aac4:	b922      	cbnz	r2, 800aad0 <quorem+0xea>
 800aac6:	3b04      	subs	r3, #4
 800aac8:	429d      	cmp	r5, r3
 800aaca:	461a      	mov	r2, r3
 800aacc:	d30b      	bcc.n	800aae6 <quorem+0x100>
 800aace:	613c      	str	r4, [r7, #16]
 800aad0:	3601      	adds	r6, #1
 800aad2:	4630      	mov	r0, r6
 800aad4:	b003      	add	sp, #12
 800aad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aada:	6812      	ldr	r2, [r2, #0]
 800aadc:	3b04      	subs	r3, #4
 800aade:	2a00      	cmp	r2, #0
 800aae0:	d1cb      	bne.n	800aa7a <quorem+0x94>
 800aae2:	3c01      	subs	r4, #1
 800aae4:	e7c6      	b.n	800aa74 <quorem+0x8e>
 800aae6:	6812      	ldr	r2, [r2, #0]
 800aae8:	3b04      	subs	r3, #4
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	d1ef      	bne.n	800aace <quorem+0xe8>
 800aaee:	3c01      	subs	r4, #1
 800aaf0:	e7ea      	b.n	800aac8 <quorem+0xe2>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	e7ee      	b.n	800aad4 <quorem+0xee>
	...

0800aaf8 <_dtoa_r>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	69c7      	ldr	r7, [r0, #28]
 800aafe:	b097      	sub	sp, #92	@ 0x5c
 800ab00:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ab04:	ec55 4b10 	vmov	r4, r5, d0
 800ab08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ab0a:	9107      	str	r1, [sp, #28]
 800ab0c:	4681      	mov	r9, r0
 800ab0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab10:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab12:	b97f      	cbnz	r7, 800ab34 <_dtoa_r+0x3c>
 800ab14:	2010      	movs	r0, #16
 800ab16:	f000 fe09 	bl	800b72c <malloc>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab20:	b920      	cbnz	r0, 800ab2c <_dtoa_r+0x34>
 800ab22:	4ba9      	ldr	r3, [pc, #676]	@ (800adc8 <_dtoa_r+0x2d0>)
 800ab24:	21ef      	movs	r1, #239	@ 0xef
 800ab26:	48a9      	ldr	r0, [pc, #676]	@ (800adcc <_dtoa_r+0x2d4>)
 800ab28:	f001 fc6c 	bl	800c404 <__assert_func>
 800ab2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab30:	6007      	str	r7, [r0, #0]
 800ab32:	60c7      	str	r7, [r0, #12]
 800ab34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab38:	6819      	ldr	r1, [r3, #0]
 800ab3a:	b159      	cbz	r1, 800ab54 <_dtoa_r+0x5c>
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	604a      	str	r2, [r1, #4]
 800ab40:	2301      	movs	r3, #1
 800ab42:	4093      	lsls	r3, r2
 800ab44:	608b      	str	r3, [r1, #8]
 800ab46:	4648      	mov	r0, r9
 800ab48:	f000 fee6 	bl	800b918 <_Bfree>
 800ab4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	1e2b      	subs	r3, r5, #0
 800ab56:	bfb9      	ittee	lt
 800ab58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab5c:	9305      	strlt	r3, [sp, #20]
 800ab5e:	2300      	movge	r3, #0
 800ab60:	6033      	strge	r3, [r6, #0]
 800ab62:	9f05      	ldr	r7, [sp, #20]
 800ab64:	4b9a      	ldr	r3, [pc, #616]	@ (800add0 <_dtoa_r+0x2d8>)
 800ab66:	bfbc      	itt	lt
 800ab68:	2201      	movlt	r2, #1
 800ab6a:	6032      	strlt	r2, [r6, #0]
 800ab6c:	43bb      	bics	r3, r7
 800ab6e:	d112      	bne.n	800ab96 <_dtoa_r+0x9e>
 800ab70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab7c:	4323      	orrs	r3, r4
 800ab7e:	f000 855a 	beq.w	800b636 <_dtoa_r+0xb3e>
 800ab82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ade4 <_dtoa_r+0x2ec>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 855c 	beq.w	800b646 <_dtoa_r+0xb4e>
 800ab8e:	f10a 0303 	add.w	r3, sl, #3
 800ab92:	f000 bd56 	b.w	800b642 <_dtoa_r+0xb4a>
 800ab96:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	ec51 0b17 	vmov	r0, r1, d7
 800aba0:	2300      	movs	r3, #0
 800aba2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aba6:	f7f5 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800abaa:	4680      	mov	r8, r0
 800abac:	b158      	cbz	r0, 800abc6 <_dtoa_r+0xce>
 800abae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abb0:	2301      	movs	r3, #1
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abb6:	b113      	cbz	r3, 800abbe <_dtoa_r+0xc6>
 800abb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abba:	4b86      	ldr	r3, [pc, #536]	@ (800add4 <_dtoa_r+0x2dc>)
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ade8 <_dtoa_r+0x2f0>
 800abc2:	f000 bd40 	b.w	800b646 <_dtoa_r+0xb4e>
 800abc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800abca:	aa14      	add	r2, sp, #80	@ 0x50
 800abcc:	a915      	add	r1, sp, #84	@ 0x54
 800abce:	4648      	mov	r0, r9
 800abd0:	f001 f984 	bl	800bedc <__d2b>
 800abd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abd8:	9002      	str	r0, [sp, #8]
 800abda:	2e00      	cmp	r6, #0
 800abdc:	d078      	beq.n	800acd0 <_dtoa_r+0x1d8>
 800abde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800abe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800abf8:	4619      	mov	r1, r3
 800abfa:	2200      	movs	r2, #0
 800abfc:	4b76      	ldr	r3, [pc, #472]	@ (800add8 <_dtoa_r+0x2e0>)
 800abfe:	f7f5 fb43 	bl	8000288 <__aeabi_dsub>
 800ac02:	a36b      	add	r3, pc, #428	@ (adr r3, 800adb0 <_dtoa_r+0x2b8>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	f7f5 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ac0c:	a36a      	add	r3, pc, #424	@ (adr r3, 800adb8 <_dtoa_r+0x2c0>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	f7f5 fb3b 	bl	800028c <__adddf3>
 800ac16:	4604      	mov	r4, r0
 800ac18:	4630      	mov	r0, r6
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	f7f5 fc82 	bl	8000524 <__aeabi_i2d>
 800ac20:	a367      	add	r3, pc, #412	@ (adr r3, 800adc0 <_dtoa_r+0x2c8>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fce7 	bl	80005f8 <__aeabi_dmul>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 fb2b 	bl	800028c <__adddf3>
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	f7f5 ff8d 	bl	8000b58 <__aeabi_d2iz>
 800ac3e:	2200      	movs	r2, #0
 800ac40:	4607      	mov	r7, r0
 800ac42:	2300      	movs	r3, #0
 800ac44:	4620      	mov	r0, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	f7f5 ff48 	bl	8000adc <__aeabi_dcmplt>
 800ac4c:	b140      	cbz	r0, 800ac60 <_dtoa_r+0x168>
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7f5 fc68 	bl	8000524 <__aeabi_i2d>
 800ac54:	4622      	mov	r2, r4
 800ac56:	462b      	mov	r3, r5
 800ac58:	f7f5 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5c:	b900      	cbnz	r0, 800ac60 <_dtoa_r+0x168>
 800ac5e:	3f01      	subs	r7, #1
 800ac60:	2f16      	cmp	r7, #22
 800ac62:	d852      	bhi.n	800ad0a <_dtoa_r+0x212>
 800ac64:	4b5d      	ldr	r3, [pc, #372]	@ (800addc <_dtoa_r+0x2e4>)
 800ac66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac72:	f7f5 ff33 	bl	8000adc <__aeabi_dcmplt>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d049      	beq.n	800ad0e <_dtoa_r+0x216>
 800ac7a:	3f01      	subs	r7, #1
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac82:	1b9b      	subs	r3, r3, r6
 800ac84:	1e5a      	subs	r2, r3, #1
 800ac86:	bf45      	ittet	mi
 800ac88:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac8c:	9300      	strmi	r3, [sp, #0]
 800ac8e:	2300      	movpl	r3, #0
 800ac90:	2300      	movmi	r3, #0
 800ac92:	9206      	str	r2, [sp, #24]
 800ac94:	bf54      	ite	pl
 800ac96:	9300      	strpl	r3, [sp, #0]
 800ac98:	9306      	strmi	r3, [sp, #24]
 800ac9a:	2f00      	cmp	r7, #0
 800ac9c:	db39      	blt.n	800ad12 <_dtoa_r+0x21a>
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	970d      	str	r7, [sp, #52]	@ 0x34
 800aca2:	443b      	add	r3, r7
 800aca4:	9306      	str	r3, [sp, #24]
 800aca6:	2300      	movs	r3, #0
 800aca8:	9308      	str	r3, [sp, #32]
 800acaa:	9b07      	ldr	r3, [sp, #28]
 800acac:	2b09      	cmp	r3, #9
 800acae:	d863      	bhi.n	800ad78 <_dtoa_r+0x280>
 800acb0:	2b05      	cmp	r3, #5
 800acb2:	bfc4      	itt	gt
 800acb4:	3b04      	subgt	r3, #4
 800acb6:	9307      	strgt	r3, [sp, #28]
 800acb8:	9b07      	ldr	r3, [sp, #28]
 800acba:	f1a3 0302 	sub.w	r3, r3, #2
 800acbe:	bfcc      	ite	gt
 800acc0:	2400      	movgt	r4, #0
 800acc2:	2401      	movle	r4, #1
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d863      	bhi.n	800ad90 <_dtoa_r+0x298>
 800acc8:	e8df f003 	tbb	[pc, r3]
 800accc:	2b375452 	.word	0x2b375452
 800acd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800acd4:	441e      	add	r6, r3
 800acd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800acda:	2b20      	cmp	r3, #32
 800acdc:	bfc1      	itttt	gt
 800acde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ace2:	409f      	lslgt	r7, r3
 800ace4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ace8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acec:	bfd6      	itet	le
 800acee:	f1c3 0320 	rsble	r3, r3, #32
 800acf2:	ea47 0003 	orrgt.w	r0, r7, r3
 800acf6:	fa04 f003 	lslle.w	r0, r4, r3
 800acfa:	f7f5 fc03 	bl	8000504 <__aeabi_ui2d>
 800acfe:	2201      	movs	r2, #1
 800ad00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad04:	3e01      	subs	r6, #1
 800ad06:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad08:	e776      	b.n	800abf8 <_dtoa_r+0x100>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e7b7      	b.n	800ac7e <_dtoa_r+0x186>
 800ad0e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad10:	e7b6      	b.n	800ac80 <_dtoa_r+0x188>
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	1bdb      	subs	r3, r3, r7
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	427b      	negs	r3, r7
 800ad1a:	9308      	str	r3, [sp, #32]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad20:	e7c3      	b.n	800acaa <_dtoa_r+0x1b2>
 800ad22:	2301      	movs	r3, #1
 800ad24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad28:	eb07 0b03 	add.w	fp, r7, r3
 800ad2c:	f10b 0301 	add.w	r3, fp, #1
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	9303      	str	r3, [sp, #12]
 800ad34:	bfb8      	it	lt
 800ad36:	2301      	movlt	r3, #1
 800ad38:	e006      	b.n	800ad48 <_dtoa_r+0x250>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dd28      	ble.n	800ad96 <_dtoa_r+0x29e>
 800ad44:	469b      	mov	fp, r3
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	2204      	movs	r2, #4
 800ad50:	f102 0514 	add.w	r5, r2, #20
 800ad54:	429d      	cmp	r5, r3
 800ad56:	d926      	bls.n	800ada6 <_dtoa_r+0x2ae>
 800ad58:	6041      	str	r1, [r0, #4]
 800ad5a:	4648      	mov	r0, r9
 800ad5c:	f000 fd9c 	bl	800b898 <_Balloc>
 800ad60:	4682      	mov	sl, r0
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d142      	bne.n	800adec <_dtoa_r+0x2f4>
 800ad66:	4b1e      	ldr	r3, [pc, #120]	@ (800ade0 <_dtoa_r+0x2e8>)
 800ad68:	4602      	mov	r2, r0
 800ad6a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad6e:	e6da      	b.n	800ab26 <_dtoa_r+0x2e>
 800ad70:	2300      	movs	r3, #0
 800ad72:	e7e3      	b.n	800ad3c <_dtoa_r+0x244>
 800ad74:	2300      	movs	r3, #0
 800ad76:	e7d5      	b.n	800ad24 <_dtoa_r+0x22c>
 800ad78:	2401      	movs	r4, #1
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9307      	str	r3, [sp, #28]
 800ad7e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad80:	f04f 3bff 	mov.w	fp, #4294967295
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad8a:	2312      	movs	r3, #18
 800ad8c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad8e:	e7db      	b.n	800ad48 <_dtoa_r+0x250>
 800ad90:	2301      	movs	r3, #1
 800ad92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad94:	e7f4      	b.n	800ad80 <_dtoa_r+0x288>
 800ad96:	f04f 0b01 	mov.w	fp, #1
 800ad9a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad9e:	465b      	mov	r3, fp
 800ada0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ada4:	e7d0      	b.n	800ad48 <_dtoa_r+0x250>
 800ada6:	3101      	adds	r1, #1
 800ada8:	0052      	lsls	r2, r2, #1
 800adaa:	e7d1      	b.n	800ad50 <_dtoa_r+0x258>
 800adac:	f3af 8000 	nop.w
 800adb0:	636f4361 	.word	0x636f4361
 800adb4:	3fd287a7 	.word	0x3fd287a7
 800adb8:	8b60c8b3 	.word	0x8b60c8b3
 800adbc:	3fc68a28 	.word	0x3fc68a28
 800adc0:	509f79fb 	.word	0x509f79fb
 800adc4:	3fd34413 	.word	0x3fd34413
 800adc8:	0800d03d 	.word	0x0800d03d
 800adcc:	0800d054 	.word	0x0800d054
 800add0:	7ff00000 	.word	0x7ff00000
 800add4:	0800d00d 	.word	0x0800d00d
 800add8:	3ff80000 	.word	0x3ff80000
 800addc:	0800d1a8 	.word	0x0800d1a8
 800ade0:	0800d0ac 	.word	0x0800d0ac
 800ade4:	0800d039 	.word	0x0800d039
 800ade8:	0800d00c 	.word	0x0800d00c
 800adec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800adf0:	6018      	str	r0, [r3, #0]
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	2b0e      	cmp	r3, #14
 800adf6:	f200 80a1 	bhi.w	800af3c <_dtoa_r+0x444>
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	f000 809e 	beq.w	800af3c <_dtoa_r+0x444>
 800ae00:	2f00      	cmp	r7, #0
 800ae02:	dd33      	ble.n	800ae6c <_dtoa_r+0x374>
 800ae04:	4b9c      	ldr	r3, [pc, #624]	@ (800b078 <_dtoa_r+0x580>)
 800ae06:	f007 020f 	and.w	r2, r7, #15
 800ae0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae0e:	ed93 7b00 	vldr	d7, [r3]
 800ae12:	05f8      	lsls	r0, r7, #23
 800ae14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae1c:	d516      	bpl.n	800ae4c <_dtoa_r+0x354>
 800ae1e:	4b97      	ldr	r3, [pc, #604]	@ (800b07c <_dtoa_r+0x584>)
 800ae20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae28:	f7f5 fd10 	bl	800084c <__aeabi_ddiv>
 800ae2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae30:	f004 040f 	and.w	r4, r4, #15
 800ae34:	2603      	movs	r6, #3
 800ae36:	4d91      	ldr	r5, [pc, #580]	@ (800b07c <_dtoa_r+0x584>)
 800ae38:	b954      	cbnz	r4, 800ae50 <_dtoa_r+0x358>
 800ae3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae42:	f7f5 fd03 	bl	800084c <__aeabi_ddiv>
 800ae46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae4a:	e028      	b.n	800ae9e <_dtoa_r+0x3a6>
 800ae4c:	2602      	movs	r6, #2
 800ae4e:	e7f2      	b.n	800ae36 <_dtoa_r+0x33e>
 800ae50:	07e1      	lsls	r1, r4, #31
 800ae52:	d508      	bpl.n	800ae66 <_dtoa_r+0x36e>
 800ae54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae5c:	f7f5 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ae60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae64:	3601      	adds	r6, #1
 800ae66:	1064      	asrs	r4, r4, #1
 800ae68:	3508      	adds	r5, #8
 800ae6a:	e7e5      	b.n	800ae38 <_dtoa_r+0x340>
 800ae6c:	f000 80af 	beq.w	800afce <_dtoa_r+0x4d6>
 800ae70:	427c      	negs	r4, r7
 800ae72:	4b81      	ldr	r3, [pc, #516]	@ (800b078 <_dtoa_r+0x580>)
 800ae74:	4d81      	ldr	r5, [pc, #516]	@ (800b07c <_dtoa_r+0x584>)
 800ae76:	f004 020f 	and.w	r2, r4, #15
 800ae7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae86:	f7f5 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ae8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae8e:	1124      	asrs	r4, r4, #4
 800ae90:	2300      	movs	r3, #0
 800ae92:	2602      	movs	r6, #2
 800ae94:	2c00      	cmp	r4, #0
 800ae96:	f040 808f 	bne.w	800afb8 <_dtoa_r+0x4c0>
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1d3      	bne.n	800ae46 <_dtoa_r+0x34e>
 800ae9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aea0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 8094 	beq.w	800afd2 <_dtoa_r+0x4da>
 800aeaa:	4b75      	ldr	r3, [pc, #468]	@ (800b080 <_dtoa_r+0x588>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7f5 fe13 	bl	8000adc <__aeabi_dcmplt>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f000 808b 	beq.w	800afd2 <_dtoa_r+0x4da>
 800aebc:	9b03      	ldr	r3, [sp, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 8087 	beq.w	800afd2 <_dtoa_r+0x4da>
 800aec4:	f1bb 0f00 	cmp.w	fp, #0
 800aec8:	dd34      	ble.n	800af34 <_dtoa_r+0x43c>
 800aeca:	4620      	mov	r0, r4
 800aecc:	4b6d      	ldr	r3, [pc, #436]	@ (800b084 <_dtoa_r+0x58c>)
 800aece:	2200      	movs	r2, #0
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 fb91 	bl	80005f8 <__aeabi_dmul>
 800aed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeda:	f107 38ff 	add.w	r8, r7, #4294967295
 800aede:	3601      	adds	r6, #1
 800aee0:	465c      	mov	r4, fp
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7f5 fb1e 	bl	8000524 <__aeabi_i2d>
 800aee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeec:	f7f5 fb84 	bl	80005f8 <__aeabi_dmul>
 800aef0:	4b65      	ldr	r3, [pc, #404]	@ (800b088 <_dtoa_r+0x590>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	f7f5 f9ca 	bl	800028c <__adddf3>
 800aef8:	4605      	mov	r5, r0
 800aefa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aefe:	2c00      	cmp	r4, #0
 800af00:	d16a      	bne.n	800afd8 <_dtoa_r+0x4e0>
 800af02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af06:	4b61      	ldr	r3, [pc, #388]	@ (800b08c <_dtoa_r+0x594>)
 800af08:	2200      	movs	r2, #0
 800af0a:	f7f5 f9bd 	bl	8000288 <__aeabi_dsub>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af16:	462a      	mov	r2, r5
 800af18:	4633      	mov	r3, r6
 800af1a:	f7f5 fdfd 	bl	8000b18 <__aeabi_dcmpgt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f040 8298 	bne.w	800b454 <_dtoa_r+0x95c>
 800af24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af28:	462a      	mov	r2, r5
 800af2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af2e:	f7f5 fdd5 	bl	8000adc <__aeabi_dcmplt>
 800af32:	bb38      	cbnz	r0, 800af84 <_dtoa_r+0x48c>
 800af34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800af38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f2c0 8157 	blt.w	800b1f2 <_dtoa_r+0x6fa>
 800af44:	2f0e      	cmp	r7, #14
 800af46:	f300 8154 	bgt.w	800b1f2 <_dtoa_r+0x6fa>
 800af4a:	4b4b      	ldr	r3, [pc, #300]	@ (800b078 <_dtoa_r+0x580>)
 800af4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af50:	ed93 7b00 	vldr	d7, [r3]
 800af54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af56:	2b00      	cmp	r3, #0
 800af58:	ed8d 7b00 	vstr	d7, [sp]
 800af5c:	f280 80e5 	bge.w	800b12a <_dtoa_r+0x632>
 800af60:	9b03      	ldr	r3, [sp, #12]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f300 80e1 	bgt.w	800b12a <_dtoa_r+0x632>
 800af68:	d10c      	bne.n	800af84 <_dtoa_r+0x48c>
 800af6a:	4b48      	ldr	r3, [pc, #288]	@ (800b08c <_dtoa_r+0x594>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	ec51 0b17 	vmov	r0, r1, d7
 800af72:	f7f5 fb41 	bl	80005f8 <__aeabi_dmul>
 800af76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af7a:	f7f5 fdc3 	bl	8000b04 <__aeabi_dcmpge>
 800af7e:	2800      	cmp	r0, #0
 800af80:	f000 8266 	beq.w	800b450 <_dtoa_r+0x958>
 800af84:	2400      	movs	r4, #0
 800af86:	4625      	mov	r5, r4
 800af88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af8a:	4656      	mov	r6, sl
 800af8c:	ea6f 0803 	mvn.w	r8, r3
 800af90:	2700      	movs	r7, #0
 800af92:	4621      	mov	r1, r4
 800af94:	4648      	mov	r0, r9
 800af96:	f000 fcbf 	bl	800b918 <_Bfree>
 800af9a:	2d00      	cmp	r5, #0
 800af9c:	f000 80bd 	beq.w	800b11a <_dtoa_r+0x622>
 800afa0:	b12f      	cbz	r7, 800afae <_dtoa_r+0x4b6>
 800afa2:	42af      	cmp	r7, r5
 800afa4:	d003      	beq.n	800afae <_dtoa_r+0x4b6>
 800afa6:	4639      	mov	r1, r7
 800afa8:	4648      	mov	r0, r9
 800afaa:	f000 fcb5 	bl	800b918 <_Bfree>
 800afae:	4629      	mov	r1, r5
 800afb0:	4648      	mov	r0, r9
 800afb2:	f000 fcb1 	bl	800b918 <_Bfree>
 800afb6:	e0b0      	b.n	800b11a <_dtoa_r+0x622>
 800afb8:	07e2      	lsls	r2, r4, #31
 800afba:	d505      	bpl.n	800afc8 <_dtoa_r+0x4d0>
 800afbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afc0:	f7f5 fb1a 	bl	80005f8 <__aeabi_dmul>
 800afc4:	3601      	adds	r6, #1
 800afc6:	2301      	movs	r3, #1
 800afc8:	1064      	asrs	r4, r4, #1
 800afca:	3508      	adds	r5, #8
 800afcc:	e762      	b.n	800ae94 <_dtoa_r+0x39c>
 800afce:	2602      	movs	r6, #2
 800afd0:	e765      	b.n	800ae9e <_dtoa_r+0x3a6>
 800afd2:	9c03      	ldr	r4, [sp, #12]
 800afd4:	46b8      	mov	r8, r7
 800afd6:	e784      	b.n	800aee2 <_dtoa_r+0x3ea>
 800afd8:	4b27      	ldr	r3, [pc, #156]	@ (800b078 <_dtoa_r+0x580>)
 800afda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afe0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afe4:	4454      	add	r4, sl
 800afe6:	2900      	cmp	r1, #0
 800afe8:	d054      	beq.n	800b094 <_dtoa_r+0x59c>
 800afea:	4929      	ldr	r1, [pc, #164]	@ (800b090 <_dtoa_r+0x598>)
 800afec:	2000      	movs	r0, #0
 800afee:	f7f5 fc2d 	bl	800084c <__aeabi_ddiv>
 800aff2:	4633      	mov	r3, r6
 800aff4:	462a      	mov	r2, r5
 800aff6:	f7f5 f947 	bl	8000288 <__aeabi_dsub>
 800affa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800affe:	4656      	mov	r6, sl
 800b000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b004:	f7f5 fda8 	bl	8000b58 <__aeabi_d2iz>
 800b008:	4605      	mov	r5, r0
 800b00a:	f7f5 fa8b 	bl	8000524 <__aeabi_i2d>
 800b00e:	4602      	mov	r2, r0
 800b010:	460b      	mov	r3, r1
 800b012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b016:	f7f5 f937 	bl	8000288 <__aeabi_dsub>
 800b01a:	3530      	adds	r5, #48	@ 0x30
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b024:	f806 5b01 	strb.w	r5, [r6], #1
 800b028:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b02c:	f7f5 fd56 	bl	8000adc <__aeabi_dcmplt>
 800b030:	2800      	cmp	r0, #0
 800b032:	d172      	bne.n	800b11a <_dtoa_r+0x622>
 800b034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b038:	4911      	ldr	r1, [pc, #68]	@ (800b080 <_dtoa_r+0x588>)
 800b03a:	2000      	movs	r0, #0
 800b03c:	f7f5 f924 	bl	8000288 <__aeabi_dsub>
 800b040:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b044:	f7f5 fd4a 	bl	8000adc <__aeabi_dcmplt>
 800b048:	2800      	cmp	r0, #0
 800b04a:	f040 80b4 	bne.w	800b1b6 <_dtoa_r+0x6be>
 800b04e:	42a6      	cmp	r6, r4
 800b050:	f43f af70 	beq.w	800af34 <_dtoa_r+0x43c>
 800b054:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b058:	4b0a      	ldr	r3, [pc, #40]	@ (800b084 <_dtoa_r+0x58c>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	f7f5 facc 	bl	80005f8 <__aeabi_dmul>
 800b060:	4b08      	ldr	r3, [pc, #32]	@ (800b084 <_dtoa_r+0x58c>)
 800b062:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b066:	2200      	movs	r2, #0
 800b068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b06c:	f7f5 fac4 	bl	80005f8 <__aeabi_dmul>
 800b070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b074:	e7c4      	b.n	800b000 <_dtoa_r+0x508>
 800b076:	bf00      	nop
 800b078:	0800d1a8 	.word	0x0800d1a8
 800b07c:	0800d180 	.word	0x0800d180
 800b080:	3ff00000 	.word	0x3ff00000
 800b084:	40240000 	.word	0x40240000
 800b088:	401c0000 	.word	0x401c0000
 800b08c:	40140000 	.word	0x40140000
 800b090:	3fe00000 	.word	0x3fe00000
 800b094:	4631      	mov	r1, r6
 800b096:	4628      	mov	r0, r5
 800b098:	f7f5 faae 	bl	80005f8 <__aeabi_dmul>
 800b09c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b0a2:	4656      	mov	r6, sl
 800b0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0a8:	f7f5 fd56 	bl	8000b58 <__aeabi_d2iz>
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	f7f5 fa39 	bl	8000524 <__aeabi_i2d>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0ba:	f7f5 f8e5 	bl	8000288 <__aeabi_dsub>
 800b0be:	3530      	adds	r5, #48	@ 0x30
 800b0c0:	f806 5b01 	strb.w	r5, [r6], #1
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	42a6      	cmp	r6, r4
 800b0ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0ce:	f04f 0200 	mov.w	r2, #0
 800b0d2:	d124      	bne.n	800b11e <_dtoa_r+0x626>
 800b0d4:	4baf      	ldr	r3, [pc, #700]	@ (800b394 <_dtoa_r+0x89c>)
 800b0d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0da:	f7f5 f8d7 	bl	800028c <__adddf3>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e6:	f7f5 fd17 	bl	8000b18 <__aeabi_dcmpgt>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d163      	bne.n	800b1b6 <_dtoa_r+0x6be>
 800b0ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0f2:	49a8      	ldr	r1, [pc, #672]	@ (800b394 <_dtoa_r+0x89c>)
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	f7f5 f8c7 	bl	8000288 <__aeabi_dsub>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b102:	f7f5 fceb 	bl	8000adc <__aeabi_dcmplt>
 800b106:	2800      	cmp	r0, #0
 800b108:	f43f af14 	beq.w	800af34 <_dtoa_r+0x43c>
 800b10c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b10e:	1e73      	subs	r3, r6, #1
 800b110:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b112:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b116:	2b30      	cmp	r3, #48	@ 0x30
 800b118:	d0f8      	beq.n	800b10c <_dtoa_r+0x614>
 800b11a:	4647      	mov	r7, r8
 800b11c:	e03b      	b.n	800b196 <_dtoa_r+0x69e>
 800b11e:	4b9e      	ldr	r3, [pc, #632]	@ (800b398 <_dtoa_r+0x8a0>)
 800b120:	f7f5 fa6a 	bl	80005f8 <__aeabi_dmul>
 800b124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b128:	e7bc      	b.n	800b0a4 <_dtoa_r+0x5ac>
 800b12a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b12e:	4656      	mov	r6, sl
 800b130:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b134:	4620      	mov	r0, r4
 800b136:	4629      	mov	r1, r5
 800b138:	f7f5 fb88 	bl	800084c <__aeabi_ddiv>
 800b13c:	f7f5 fd0c 	bl	8000b58 <__aeabi_d2iz>
 800b140:	4680      	mov	r8, r0
 800b142:	f7f5 f9ef 	bl	8000524 <__aeabi_i2d>
 800b146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b14a:	f7f5 fa55 	bl	80005f8 <__aeabi_dmul>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4620      	mov	r0, r4
 800b154:	4629      	mov	r1, r5
 800b156:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b15a:	f7f5 f895 	bl	8000288 <__aeabi_dsub>
 800b15e:	f806 4b01 	strb.w	r4, [r6], #1
 800b162:	9d03      	ldr	r5, [sp, #12]
 800b164:	eba6 040a 	sub.w	r4, r6, sl
 800b168:	42a5      	cmp	r5, r4
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	d133      	bne.n	800b1d8 <_dtoa_r+0x6e0>
 800b170:	f7f5 f88c 	bl	800028c <__adddf3>
 800b174:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	f7f5 fccc 	bl	8000b18 <__aeabi_dcmpgt>
 800b180:	b9c0      	cbnz	r0, 800b1b4 <_dtoa_r+0x6bc>
 800b182:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b186:	4620      	mov	r0, r4
 800b188:	4629      	mov	r1, r5
 800b18a:	f7f5 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b18e:	b110      	cbz	r0, 800b196 <_dtoa_r+0x69e>
 800b190:	f018 0f01 	tst.w	r8, #1
 800b194:	d10e      	bne.n	800b1b4 <_dtoa_r+0x6bc>
 800b196:	9902      	ldr	r1, [sp, #8]
 800b198:	4648      	mov	r0, r9
 800b19a:	f000 fbbd 	bl	800b918 <_Bfree>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	7033      	strb	r3, [r6, #0]
 800b1a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1a4:	3701      	adds	r7, #1
 800b1a6:	601f      	str	r7, [r3, #0]
 800b1a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 824b 	beq.w	800b646 <_dtoa_r+0xb4e>
 800b1b0:	601e      	str	r6, [r3, #0]
 800b1b2:	e248      	b.n	800b646 <_dtoa_r+0xb4e>
 800b1b4:	46b8      	mov	r8, r7
 800b1b6:	4633      	mov	r3, r6
 800b1b8:	461e      	mov	r6, r3
 800b1ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1be:	2a39      	cmp	r2, #57	@ 0x39
 800b1c0:	d106      	bne.n	800b1d0 <_dtoa_r+0x6d8>
 800b1c2:	459a      	cmp	sl, r3
 800b1c4:	d1f8      	bne.n	800b1b8 <_dtoa_r+0x6c0>
 800b1c6:	2230      	movs	r2, #48	@ 0x30
 800b1c8:	f108 0801 	add.w	r8, r8, #1
 800b1cc:	f88a 2000 	strb.w	r2, [sl]
 800b1d0:	781a      	ldrb	r2, [r3, #0]
 800b1d2:	3201      	adds	r2, #1
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	e7a0      	b.n	800b11a <_dtoa_r+0x622>
 800b1d8:	4b6f      	ldr	r3, [pc, #444]	@ (800b398 <_dtoa_r+0x8a0>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	f7f5 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d09f      	beq.n	800b130 <_dtoa_r+0x638>
 800b1f0:	e7d1      	b.n	800b196 <_dtoa_r+0x69e>
 800b1f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	f000 80ea 	beq.w	800b3ce <_dtoa_r+0x8d6>
 800b1fa:	9a07      	ldr	r2, [sp, #28]
 800b1fc:	2a01      	cmp	r2, #1
 800b1fe:	f300 80cd 	bgt.w	800b39c <_dtoa_r+0x8a4>
 800b202:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b204:	2a00      	cmp	r2, #0
 800b206:	f000 80c1 	beq.w	800b38c <_dtoa_r+0x894>
 800b20a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b20e:	9c08      	ldr	r4, [sp, #32]
 800b210:	9e00      	ldr	r6, [sp, #0]
 800b212:	9a00      	ldr	r2, [sp, #0]
 800b214:	441a      	add	r2, r3
 800b216:	9200      	str	r2, [sp, #0]
 800b218:	9a06      	ldr	r2, [sp, #24]
 800b21a:	2101      	movs	r1, #1
 800b21c:	441a      	add	r2, r3
 800b21e:	4648      	mov	r0, r9
 800b220:	9206      	str	r2, [sp, #24]
 800b222:	f000 fc2d 	bl	800ba80 <__i2b>
 800b226:	4605      	mov	r5, r0
 800b228:	b166      	cbz	r6, 800b244 <_dtoa_r+0x74c>
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dd09      	ble.n	800b244 <_dtoa_r+0x74c>
 800b230:	42b3      	cmp	r3, r6
 800b232:	9a00      	ldr	r2, [sp, #0]
 800b234:	bfa8      	it	ge
 800b236:	4633      	movge	r3, r6
 800b238:	1ad2      	subs	r2, r2, r3
 800b23a:	9200      	str	r2, [sp, #0]
 800b23c:	9a06      	ldr	r2, [sp, #24]
 800b23e:	1af6      	subs	r6, r6, r3
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	9306      	str	r3, [sp, #24]
 800b244:	9b08      	ldr	r3, [sp, #32]
 800b246:	b30b      	cbz	r3, 800b28c <_dtoa_r+0x794>
 800b248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 80c6 	beq.w	800b3dc <_dtoa_r+0x8e4>
 800b250:	2c00      	cmp	r4, #0
 800b252:	f000 80c0 	beq.w	800b3d6 <_dtoa_r+0x8de>
 800b256:	4629      	mov	r1, r5
 800b258:	4622      	mov	r2, r4
 800b25a:	4648      	mov	r0, r9
 800b25c:	f000 fcc8 	bl	800bbf0 <__pow5mult>
 800b260:	9a02      	ldr	r2, [sp, #8]
 800b262:	4601      	mov	r1, r0
 800b264:	4605      	mov	r5, r0
 800b266:	4648      	mov	r0, r9
 800b268:	f000 fc20 	bl	800baac <__multiply>
 800b26c:	9902      	ldr	r1, [sp, #8]
 800b26e:	4680      	mov	r8, r0
 800b270:	4648      	mov	r0, r9
 800b272:	f000 fb51 	bl	800b918 <_Bfree>
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	1b1b      	subs	r3, r3, r4
 800b27a:	9308      	str	r3, [sp, #32]
 800b27c:	f000 80b1 	beq.w	800b3e2 <_dtoa_r+0x8ea>
 800b280:	9a08      	ldr	r2, [sp, #32]
 800b282:	4641      	mov	r1, r8
 800b284:	4648      	mov	r0, r9
 800b286:	f000 fcb3 	bl	800bbf0 <__pow5mult>
 800b28a:	9002      	str	r0, [sp, #8]
 800b28c:	2101      	movs	r1, #1
 800b28e:	4648      	mov	r0, r9
 800b290:	f000 fbf6 	bl	800ba80 <__i2b>
 800b294:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b296:	4604      	mov	r4, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 81d8 	beq.w	800b64e <_dtoa_r+0xb56>
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	4648      	mov	r0, r9
 800b2a4:	f000 fca4 	bl	800bbf0 <__pow5mult>
 800b2a8:	9b07      	ldr	r3, [sp, #28]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	f300 809f 	bgt.w	800b3f0 <_dtoa_r+0x8f8>
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f040 8097 	bne.w	800b3e8 <_dtoa_r+0x8f0>
 800b2ba:	9b05      	ldr	r3, [sp, #20]
 800b2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f040 8093 	bne.w	800b3ec <_dtoa_r+0x8f4>
 800b2c6:	9b05      	ldr	r3, [sp, #20]
 800b2c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2cc:	0d1b      	lsrs	r3, r3, #20
 800b2ce:	051b      	lsls	r3, r3, #20
 800b2d0:	b133      	cbz	r3, 800b2e0 <_dtoa_r+0x7e8>
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	9b06      	ldr	r3, [sp, #24]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	9306      	str	r3, [sp, #24]
 800b2de:	2301      	movs	r3, #1
 800b2e0:	9308      	str	r3, [sp, #32]
 800b2e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 81b8 	beq.w	800b65a <_dtoa_r+0xb62>
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2f0:	6918      	ldr	r0, [r3, #16]
 800b2f2:	f000 fb79 	bl	800b9e8 <__hi0bits>
 800b2f6:	f1c0 0020 	rsb	r0, r0, #32
 800b2fa:	9b06      	ldr	r3, [sp, #24]
 800b2fc:	4418      	add	r0, r3
 800b2fe:	f010 001f 	ands.w	r0, r0, #31
 800b302:	f000 8082 	beq.w	800b40a <_dtoa_r+0x912>
 800b306:	f1c0 0320 	rsb	r3, r0, #32
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	dd73      	ble.n	800b3f6 <_dtoa_r+0x8fe>
 800b30e:	9b00      	ldr	r3, [sp, #0]
 800b310:	f1c0 001c 	rsb	r0, r0, #28
 800b314:	4403      	add	r3, r0
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	9b06      	ldr	r3, [sp, #24]
 800b31a:	4403      	add	r3, r0
 800b31c:	4406      	add	r6, r0
 800b31e:	9306      	str	r3, [sp, #24]
 800b320:	9b00      	ldr	r3, [sp, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	dd05      	ble.n	800b332 <_dtoa_r+0x83a>
 800b326:	9902      	ldr	r1, [sp, #8]
 800b328:	461a      	mov	r2, r3
 800b32a:	4648      	mov	r0, r9
 800b32c:	f000 fcba 	bl	800bca4 <__lshift>
 800b330:	9002      	str	r0, [sp, #8]
 800b332:	9b06      	ldr	r3, [sp, #24]
 800b334:	2b00      	cmp	r3, #0
 800b336:	dd05      	ble.n	800b344 <_dtoa_r+0x84c>
 800b338:	4621      	mov	r1, r4
 800b33a:	461a      	mov	r2, r3
 800b33c:	4648      	mov	r0, r9
 800b33e:	f000 fcb1 	bl	800bca4 <__lshift>
 800b342:	4604      	mov	r4, r0
 800b344:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b346:	2b00      	cmp	r3, #0
 800b348:	d061      	beq.n	800b40e <_dtoa_r+0x916>
 800b34a:	9802      	ldr	r0, [sp, #8]
 800b34c:	4621      	mov	r1, r4
 800b34e:	f000 fd15 	bl	800bd7c <__mcmp>
 800b352:	2800      	cmp	r0, #0
 800b354:	da5b      	bge.n	800b40e <_dtoa_r+0x916>
 800b356:	2300      	movs	r3, #0
 800b358:	9902      	ldr	r1, [sp, #8]
 800b35a:	220a      	movs	r2, #10
 800b35c:	4648      	mov	r0, r9
 800b35e:	f000 fafd 	bl	800b95c <__multadd>
 800b362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b364:	9002      	str	r0, [sp, #8]
 800b366:	f107 38ff 	add.w	r8, r7, #4294967295
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 8177 	beq.w	800b65e <_dtoa_r+0xb66>
 800b370:	4629      	mov	r1, r5
 800b372:	2300      	movs	r3, #0
 800b374:	220a      	movs	r2, #10
 800b376:	4648      	mov	r0, r9
 800b378:	f000 faf0 	bl	800b95c <__multadd>
 800b37c:	f1bb 0f00 	cmp.w	fp, #0
 800b380:	4605      	mov	r5, r0
 800b382:	dc6f      	bgt.n	800b464 <_dtoa_r+0x96c>
 800b384:	9b07      	ldr	r3, [sp, #28]
 800b386:	2b02      	cmp	r3, #2
 800b388:	dc49      	bgt.n	800b41e <_dtoa_r+0x926>
 800b38a:	e06b      	b.n	800b464 <_dtoa_r+0x96c>
 800b38c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b38e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b392:	e73c      	b.n	800b20e <_dtoa_r+0x716>
 800b394:	3fe00000 	.word	0x3fe00000
 800b398:	40240000 	.word	0x40240000
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	1e5c      	subs	r4, r3, #1
 800b3a0:	9b08      	ldr	r3, [sp, #32]
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	db09      	blt.n	800b3ba <_dtoa_r+0x8c2>
 800b3a6:	1b1c      	subs	r4, r3, r4
 800b3a8:	9b03      	ldr	r3, [sp, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f6bf af30 	bge.w	800b210 <_dtoa_r+0x718>
 800b3b0:	9b00      	ldr	r3, [sp, #0]
 800b3b2:	9a03      	ldr	r2, [sp, #12]
 800b3b4:	1a9e      	subs	r6, r3, r2
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e72b      	b.n	800b212 <_dtoa_r+0x71a>
 800b3ba:	9b08      	ldr	r3, [sp, #32]
 800b3bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3be:	9408      	str	r4, [sp, #32]
 800b3c0:	1ae3      	subs	r3, r4, r3
 800b3c2:	441a      	add	r2, r3
 800b3c4:	9e00      	ldr	r6, [sp, #0]
 800b3c6:	9b03      	ldr	r3, [sp, #12]
 800b3c8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b3ca:	2400      	movs	r4, #0
 800b3cc:	e721      	b.n	800b212 <_dtoa_r+0x71a>
 800b3ce:	9c08      	ldr	r4, [sp, #32]
 800b3d0:	9e00      	ldr	r6, [sp, #0]
 800b3d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b3d4:	e728      	b.n	800b228 <_dtoa_r+0x730>
 800b3d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3da:	e751      	b.n	800b280 <_dtoa_r+0x788>
 800b3dc:	9a08      	ldr	r2, [sp, #32]
 800b3de:	9902      	ldr	r1, [sp, #8]
 800b3e0:	e750      	b.n	800b284 <_dtoa_r+0x78c>
 800b3e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3e6:	e751      	b.n	800b28c <_dtoa_r+0x794>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e779      	b.n	800b2e0 <_dtoa_r+0x7e8>
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	e777      	b.n	800b2e0 <_dtoa_r+0x7e8>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9308      	str	r3, [sp, #32]
 800b3f4:	e779      	b.n	800b2ea <_dtoa_r+0x7f2>
 800b3f6:	d093      	beq.n	800b320 <_dtoa_r+0x828>
 800b3f8:	9a00      	ldr	r2, [sp, #0]
 800b3fa:	331c      	adds	r3, #28
 800b3fc:	441a      	add	r2, r3
 800b3fe:	9200      	str	r2, [sp, #0]
 800b400:	9a06      	ldr	r2, [sp, #24]
 800b402:	441a      	add	r2, r3
 800b404:	441e      	add	r6, r3
 800b406:	9206      	str	r2, [sp, #24]
 800b408:	e78a      	b.n	800b320 <_dtoa_r+0x828>
 800b40a:	4603      	mov	r3, r0
 800b40c:	e7f4      	b.n	800b3f8 <_dtoa_r+0x900>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	46b8      	mov	r8, r7
 800b414:	dc20      	bgt.n	800b458 <_dtoa_r+0x960>
 800b416:	469b      	mov	fp, r3
 800b418:	9b07      	ldr	r3, [sp, #28]
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	dd1e      	ble.n	800b45c <_dtoa_r+0x964>
 800b41e:	f1bb 0f00 	cmp.w	fp, #0
 800b422:	f47f adb1 	bne.w	800af88 <_dtoa_r+0x490>
 800b426:	4621      	mov	r1, r4
 800b428:	465b      	mov	r3, fp
 800b42a:	2205      	movs	r2, #5
 800b42c:	4648      	mov	r0, r9
 800b42e:	f000 fa95 	bl	800b95c <__multadd>
 800b432:	4601      	mov	r1, r0
 800b434:	4604      	mov	r4, r0
 800b436:	9802      	ldr	r0, [sp, #8]
 800b438:	f000 fca0 	bl	800bd7c <__mcmp>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f77f ada3 	ble.w	800af88 <_dtoa_r+0x490>
 800b442:	4656      	mov	r6, sl
 800b444:	2331      	movs	r3, #49	@ 0x31
 800b446:	f806 3b01 	strb.w	r3, [r6], #1
 800b44a:	f108 0801 	add.w	r8, r8, #1
 800b44e:	e59f      	b.n	800af90 <_dtoa_r+0x498>
 800b450:	9c03      	ldr	r4, [sp, #12]
 800b452:	46b8      	mov	r8, r7
 800b454:	4625      	mov	r5, r4
 800b456:	e7f4      	b.n	800b442 <_dtoa_r+0x94a>
 800b458:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 8101 	beq.w	800b666 <_dtoa_r+0xb6e>
 800b464:	2e00      	cmp	r6, #0
 800b466:	dd05      	ble.n	800b474 <_dtoa_r+0x97c>
 800b468:	4629      	mov	r1, r5
 800b46a:	4632      	mov	r2, r6
 800b46c:	4648      	mov	r0, r9
 800b46e:	f000 fc19 	bl	800bca4 <__lshift>
 800b472:	4605      	mov	r5, r0
 800b474:	9b08      	ldr	r3, [sp, #32]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d05c      	beq.n	800b534 <_dtoa_r+0xa3c>
 800b47a:	6869      	ldr	r1, [r5, #4]
 800b47c:	4648      	mov	r0, r9
 800b47e:	f000 fa0b 	bl	800b898 <_Balloc>
 800b482:	4606      	mov	r6, r0
 800b484:	b928      	cbnz	r0, 800b492 <_dtoa_r+0x99a>
 800b486:	4b82      	ldr	r3, [pc, #520]	@ (800b690 <_dtoa_r+0xb98>)
 800b488:	4602      	mov	r2, r0
 800b48a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b48e:	f7ff bb4a 	b.w	800ab26 <_dtoa_r+0x2e>
 800b492:	692a      	ldr	r2, [r5, #16]
 800b494:	3202      	adds	r2, #2
 800b496:	0092      	lsls	r2, r2, #2
 800b498:	f105 010c 	add.w	r1, r5, #12
 800b49c:	300c      	adds	r0, #12
 800b49e:	f000 ffa3 	bl	800c3e8 <memcpy>
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	4648      	mov	r0, r9
 800b4a8:	f000 fbfc 	bl	800bca4 <__lshift>
 800b4ac:	f10a 0301 	add.w	r3, sl, #1
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	eb0a 030b 	add.w	r3, sl, fp
 800b4b6:	9308      	str	r3, [sp, #32]
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	462f      	mov	r7, r5
 800b4c0:	9306      	str	r3, [sp, #24]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	9b00      	ldr	r3, [sp, #0]
 800b4c6:	9802      	ldr	r0, [sp, #8]
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4ce:	f7ff fa8a 	bl	800a9e6 <quorem>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	3330      	adds	r3, #48	@ 0x30
 800b4d6:	9003      	str	r0, [sp, #12]
 800b4d8:	4639      	mov	r1, r7
 800b4da:	9802      	ldr	r0, [sp, #8]
 800b4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4de:	f000 fc4d 	bl	800bd7c <__mcmp>
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	9004      	str	r0, [sp, #16]
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	4648      	mov	r0, r9
 800b4ea:	f000 fc63 	bl	800bdb4 <__mdiff>
 800b4ee:	68c2      	ldr	r2, [r0, #12]
 800b4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	bb02      	cbnz	r2, 800b538 <_dtoa_r+0xa40>
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	9802      	ldr	r0, [sp, #8]
 800b4fa:	f000 fc3f 	bl	800bd7c <__mcmp>
 800b4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b500:	4602      	mov	r2, r0
 800b502:	4631      	mov	r1, r6
 800b504:	4648      	mov	r0, r9
 800b506:	920c      	str	r2, [sp, #48]	@ 0x30
 800b508:	9309      	str	r3, [sp, #36]	@ 0x24
 800b50a:	f000 fa05 	bl	800b918 <_Bfree>
 800b50e:	9b07      	ldr	r3, [sp, #28]
 800b510:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b512:	9e00      	ldr	r6, [sp, #0]
 800b514:	ea42 0103 	orr.w	r1, r2, r3
 800b518:	9b06      	ldr	r3, [sp, #24]
 800b51a:	4319      	orrs	r1, r3
 800b51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51e:	d10d      	bne.n	800b53c <_dtoa_r+0xa44>
 800b520:	2b39      	cmp	r3, #57	@ 0x39
 800b522:	d027      	beq.n	800b574 <_dtoa_r+0xa7c>
 800b524:	9a04      	ldr	r2, [sp, #16]
 800b526:	2a00      	cmp	r2, #0
 800b528:	dd01      	ble.n	800b52e <_dtoa_r+0xa36>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	3331      	adds	r3, #49	@ 0x31
 800b52e:	f88b 3000 	strb.w	r3, [fp]
 800b532:	e52e      	b.n	800af92 <_dtoa_r+0x49a>
 800b534:	4628      	mov	r0, r5
 800b536:	e7b9      	b.n	800b4ac <_dtoa_r+0x9b4>
 800b538:	2201      	movs	r2, #1
 800b53a:	e7e2      	b.n	800b502 <_dtoa_r+0xa0a>
 800b53c:	9904      	ldr	r1, [sp, #16]
 800b53e:	2900      	cmp	r1, #0
 800b540:	db04      	blt.n	800b54c <_dtoa_r+0xa54>
 800b542:	9807      	ldr	r0, [sp, #28]
 800b544:	4301      	orrs	r1, r0
 800b546:	9806      	ldr	r0, [sp, #24]
 800b548:	4301      	orrs	r1, r0
 800b54a:	d120      	bne.n	800b58e <_dtoa_r+0xa96>
 800b54c:	2a00      	cmp	r2, #0
 800b54e:	ddee      	ble.n	800b52e <_dtoa_r+0xa36>
 800b550:	9902      	ldr	r1, [sp, #8]
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	2201      	movs	r2, #1
 800b556:	4648      	mov	r0, r9
 800b558:	f000 fba4 	bl	800bca4 <__lshift>
 800b55c:	4621      	mov	r1, r4
 800b55e:	9002      	str	r0, [sp, #8]
 800b560:	f000 fc0c 	bl	800bd7c <__mcmp>
 800b564:	2800      	cmp	r0, #0
 800b566:	9b00      	ldr	r3, [sp, #0]
 800b568:	dc02      	bgt.n	800b570 <_dtoa_r+0xa78>
 800b56a:	d1e0      	bne.n	800b52e <_dtoa_r+0xa36>
 800b56c:	07da      	lsls	r2, r3, #31
 800b56e:	d5de      	bpl.n	800b52e <_dtoa_r+0xa36>
 800b570:	2b39      	cmp	r3, #57	@ 0x39
 800b572:	d1da      	bne.n	800b52a <_dtoa_r+0xa32>
 800b574:	2339      	movs	r3, #57	@ 0x39
 800b576:	f88b 3000 	strb.w	r3, [fp]
 800b57a:	4633      	mov	r3, r6
 800b57c:	461e      	mov	r6, r3
 800b57e:	3b01      	subs	r3, #1
 800b580:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b584:	2a39      	cmp	r2, #57	@ 0x39
 800b586:	d04e      	beq.n	800b626 <_dtoa_r+0xb2e>
 800b588:	3201      	adds	r2, #1
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	e501      	b.n	800af92 <_dtoa_r+0x49a>
 800b58e:	2a00      	cmp	r2, #0
 800b590:	dd03      	ble.n	800b59a <_dtoa_r+0xaa2>
 800b592:	2b39      	cmp	r3, #57	@ 0x39
 800b594:	d0ee      	beq.n	800b574 <_dtoa_r+0xa7c>
 800b596:	3301      	adds	r3, #1
 800b598:	e7c9      	b.n	800b52e <_dtoa_r+0xa36>
 800b59a:	9a00      	ldr	r2, [sp, #0]
 800b59c:	9908      	ldr	r1, [sp, #32]
 800b59e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b5a2:	428a      	cmp	r2, r1
 800b5a4:	d028      	beq.n	800b5f8 <_dtoa_r+0xb00>
 800b5a6:	9902      	ldr	r1, [sp, #8]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	220a      	movs	r2, #10
 800b5ac:	4648      	mov	r0, r9
 800b5ae:	f000 f9d5 	bl	800b95c <__multadd>
 800b5b2:	42af      	cmp	r7, r5
 800b5b4:	9002      	str	r0, [sp, #8]
 800b5b6:	f04f 0300 	mov.w	r3, #0
 800b5ba:	f04f 020a 	mov.w	r2, #10
 800b5be:	4639      	mov	r1, r7
 800b5c0:	4648      	mov	r0, r9
 800b5c2:	d107      	bne.n	800b5d4 <_dtoa_r+0xadc>
 800b5c4:	f000 f9ca 	bl	800b95c <__multadd>
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	9b00      	ldr	r3, [sp, #0]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	e777      	b.n	800b4c4 <_dtoa_r+0x9cc>
 800b5d4:	f000 f9c2 	bl	800b95c <__multadd>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4607      	mov	r7, r0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	220a      	movs	r2, #10
 800b5e0:	4648      	mov	r0, r9
 800b5e2:	f000 f9bb 	bl	800b95c <__multadd>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	e7f0      	b.n	800b5cc <_dtoa_r+0xad4>
 800b5ea:	f1bb 0f00 	cmp.w	fp, #0
 800b5ee:	bfcc      	ite	gt
 800b5f0:	465e      	movgt	r6, fp
 800b5f2:	2601      	movle	r6, #1
 800b5f4:	4456      	add	r6, sl
 800b5f6:	2700      	movs	r7, #0
 800b5f8:	9902      	ldr	r1, [sp, #8]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	4648      	mov	r0, r9
 800b600:	f000 fb50 	bl	800bca4 <__lshift>
 800b604:	4621      	mov	r1, r4
 800b606:	9002      	str	r0, [sp, #8]
 800b608:	f000 fbb8 	bl	800bd7c <__mcmp>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	dcb4      	bgt.n	800b57a <_dtoa_r+0xa82>
 800b610:	d102      	bne.n	800b618 <_dtoa_r+0xb20>
 800b612:	9b00      	ldr	r3, [sp, #0]
 800b614:	07db      	lsls	r3, r3, #31
 800b616:	d4b0      	bmi.n	800b57a <_dtoa_r+0xa82>
 800b618:	4633      	mov	r3, r6
 800b61a:	461e      	mov	r6, r3
 800b61c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b620:	2a30      	cmp	r2, #48	@ 0x30
 800b622:	d0fa      	beq.n	800b61a <_dtoa_r+0xb22>
 800b624:	e4b5      	b.n	800af92 <_dtoa_r+0x49a>
 800b626:	459a      	cmp	sl, r3
 800b628:	d1a8      	bne.n	800b57c <_dtoa_r+0xa84>
 800b62a:	2331      	movs	r3, #49	@ 0x31
 800b62c:	f108 0801 	add.w	r8, r8, #1
 800b630:	f88a 3000 	strb.w	r3, [sl]
 800b634:	e4ad      	b.n	800af92 <_dtoa_r+0x49a>
 800b636:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b638:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b694 <_dtoa_r+0xb9c>
 800b63c:	b11b      	cbz	r3, 800b646 <_dtoa_r+0xb4e>
 800b63e:	f10a 0308 	add.w	r3, sl, #8
 800b642:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	4650      	mov	r0, sl
 800b648:	b017      	add	sp, #92	@ 0x5c
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	9b07      	ldr	r3, [sp, #28]
 800b650:	2b01      	cmp	r3, #1
 800b652:	f77f ae2e 	ble.w	800b2b2 <_dtoa_r+0x7ba>
 800b656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b658:	9308      	str	r3, [sp, #32]
 800b65a:	2001      	movs	r0, #1
 800b65c:	e64d      	b.n	800b2fa <_dtoa_r+0x802>
 800b65e:	f1bb 0f00 	cmp.w	fp, #0
 800b662:	f77f aed9 	ble.w	800b418 <_dtoa_r+0x920>
 800b666:	4656      	mov	r6, sl
 800b668:	9802      	ldr	r0, [sp, #8]
 800b66a:	4621      	mov	r1, r4
 800b66c:	f7ff f9bb 	bl	800a9e6 <quorem>
 800b670:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b674:	f806 3b01 	strb.w	r3, [r6], #1
 800b678:	eba6 020a 	sub.w	r2, r6, sl
 800b67c:	4593      	cmp	fp, r2
 800b67e:	ddb4      	ble.n	800b5ea <_dtoa_r+0xaf2>
 800b680:	9902      	ldr	r1, [sp, #8]
 800b682:	2300      	movs	r3, #0
 800b684:	220a      	movs	r2, #10
 800b686:	4648      	mov	r0, r9
 800b688:	f000 f968 	bl	800b95c <__multadd>
 800b68c:	9002      	str	r0, [sp, #8]
 800b68e:	e7eb      	b.n	800b668 <_dtoa_r+0xb70>
 800b690:	0800d0ac 	.word	0x0800d0ac
 800b694:	0800d030 	.word	0x0800d030

0800b698 <_free_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4605      	mov	r5, r0
 800b69c:	2900      	cmp	r1, #0
 800b69e:	d041      	beq.n	800b724 <_free_r+0x8c>
 800b6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a4:	1f0c      	subs	r4, r1, #4
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	bfb8      	it	lt
 800b6aa:	18e4      	addlt	r4, r4, r3
 800b6ac:	f000 f8e8 	bl	800b880 <__malloc_lock>
 800b6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b728 <_free_r+0x90>)
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	b933      	cbnz	r3, 800b6c4 <_free_r+0x2c>
 800b6b6:	6063      	str	r3, [r4, #4]
 800b6b8:	6014      	str	r4, [r2, #0]
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6c0:	f000 b8e4 	b.w	800b88c <__malloc_unlock>
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d908      	bls.n	800b6da <_free_r+0x42>
 800b6c8:	6820      	ldr	r0, [r4, #0]
 800b6ca:	1821      	adds	r1, r4, r0
 800b6cc:	428b      	cmp	r3, r1
 800b6ce:	bf01      	itttt	eq
 800b6d0:	6819      	ldreq	r1, [r3, #0]
 800b6d2:	685b      	ldreq	r3, [r3, #4]
 800b6d4:	1809      	addeq	r1, r1, r0
 800b6d6:	6021      	streq	r1, [r4, #0]
 800b6d8:	e7ed      	b.n	800b6b6 <_free_r+0x1e>
 800b6da:	461a      	mov	r2, r3
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	b10b      	cbz	r3, 800b6e4 <_free_r+0x4c>
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d9fa      	bls.n	800b6da <_free_r+0x42>
 800b6e4:	6811      	ldr	r1, [r2, #0]
 800b6e6:	1850      	adds	r0, r2, r1
 800b6e8:	42a0      	cmp	r0, r4
 800b6ea:	d10b      	bne.n	800b704 <_free_r+0x6c>
 800b6ec:	6820      	ldr	r0, [r4, #0]
 800b6ee:	4401      	add	r1, r0
 800b6f0:	1850      	adds	r0, r2, r1
 800b6f2:	4283      	cmp	r3, r0
 800b6f4:	6011      	str	r1, [r2, #0]
 800b6f6:	d1e0      	bne.n	800b6ba <_free_r+0x22>
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	6053      	str	r3, [r2, #4]
 800b6fe:	4408      	add	r0, r1
 800b700:	6010      	str	r0, [r2, #0]
 800b702:	e7da      	b.n	800b6ba <_free_r+0x22>
 800b704:	d902      	bls.n	800b70c <_free_r+0x74>
 800b706:	230c      	movs	r3, #12
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	e7d6      	b.n	800b6ba <_free_r+0x22>
 800b70c:	6820      	ldr	r0, [r4, #0]
 800b70e:	1821      	adds	r1, r4, r0
 800b710:	428b      	cmp	r3, r1
 800b712:	bf04      	itt	eq
 800b714:	6819      	ldreq	r1, [r3, #0]
 800b716:	685b      	ldreq	r3, [r3, #4]
 800b718:	6063      	str	r3, [r4, #4]
 800b71a:	bf04      	itt	eq
 800b71c:	1809      	addeq	r1, r1, r0
 800b71e:	6021      	streq	r1, [r4, #0]
 800b720:	6054      	str	r4, [r2, #4]
 800b722:	e7ca      	b.n	800b6ba <_free_r+0x22>
 800b724:	bd38      	pop	{r3, r4, r5, pc}
 800b726:	bf00      	nop
 800b728:	20000700 	.word	0x20000700

0800b72c <malloc>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	@ (800b738 <malloc+0xc>)
 800b72e:	4601      	mov	r1, r0
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	f000 b825 	b.w	800b780 <_malloc_r>
 800b736:	bf00      	nop
 800b738:	2000001c 	.word	0x2000001c

0800b73c <sbrk_aligned>:
 800b73c:	b570      	push	{r4, r5, r6, lr}
 800b73e:	4e0f      	ldr	r6, [pc, #60]	@ (800b77c <sbrk_aligned+0x40>)
 800b740:	460c      	mov	r4, r1
 800b742:	6831      	ldr	r1, [r6, #0]
 800b744:	4605      	mov	r5, r0
 800b746:	b911      	cbnz	r1, 800b74e <sbrk_aligned+0x12>
 800b748:	f000 fe3e 	bl	800c3c8 <_sbrk_r>
 800b74c:	6030      	str	r0, [r6, #0]
 800b74e:	4621      	mov	r1, r4
 800b750:	4628      	mov	r0, r5
 800b752:	f000 fe39 	bl	800c3c8 <_sbrk_r>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d103      	bne.n	800b762 <sbrk_aligned+0x26>
 800b75a:	f04f 34ff 	mov.w	r4, #4294967295
 800b75e:	4620      	mov	r0, r4
 800b760:	bd70      	pop	{r4, r5, r6, pc}
 800b762:	1cc4      	adds	r4, r0, #3
 800b764:	f024 0403 	bic.w	r4, r4, #3
 800b768:	42a0      	cmp	r0, r4
 800b76a:	d0f8      	beq.n	800b75e <sbrk_aligned+0x22>
 800b76c:	1a21      	subs	r1, r4, r0
 800b76e:	4628      	mov	r0, r5
 800b770:	f000 fe2a 	bl	800c3c8 <_sbrk_r>
 800b774:	3001      	adds	r0, #1
 800b776:	d1f2      	bne.n	800b75e <sbrk_aligned+0x22>
 800b778:	e7ef      	b.n	800b75a <sbrk_aligned+0x1e>
 800b77a:	bf00      	nop
 800b77c:	200006fc 	.word	0x200006fc

0800b780 <_malloc_r>:
 800b780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b784:	1ccd      	adds	r5, r1, #3
 800b786:	f025 0503 	bic.w	r5, r5, #3
 800b78a:	3508      	adds	r5, #8
 800b78c:	2d0c      	cmp	r5, #12
 800b78e:	bf38      	it	cc
 800b790:	250c      	movcc	r5, #12
 800b792:	2d00      	cmp	r5, #0
 800b794:	4606      	mov	r6, r0
 800b796:	db01      	blt.n	800b79c <_malloc_r+0x1c>
 800b798:	42a9      	cmp	r1, r5
 800b79a:	d904      	bls.n	800b7a6 <_malloc_r+0x26>
 800b79c:	230c      	movs	r3, #12
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b87c <_malloc_r+0xfc>
 800b7aa:	f000 f869 	bl	800b880 <__malloc_lock>
 800b7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b7b2:	461c      	mov	r4, r3
 800b7b4:	bb44      	cbnz	r4, 800b808 <_malloc_r+0x88>
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7ff ffbf 	bl	800b73c <sbrk_aligned>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	d158      	bne.n	800b876 <_malloc_r+0xf6>
 800b7c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7c8:	4627      	mov	r7, r4
 800b7ca:	2f00      	cmp	r7, #0
 800b7cc:	d143      	bne.n	800b856 <_malloc_r+0xd6>
 800b7ce:	2c00      	cmp	r4, #0
 800b7d0:	d04b      	beq.n	800b86a <_malloc_r+0xea>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	eb04 0903 	add.w	r9, r4, r3
 800b7dc:	f000 fdf4 	bl	800c3c8 <_sbrk_r>
 800b7e0:	4581      	cmp	r9, r0
 800b7e2:	d142      	bne.n	800b86a <_malloc_r+0xea>
 800b7e4:	6821      	ldr	r1, [r4, #0]
 800b7e6:	1a6d      	subs	r5, r5, r1
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff ffa6 	bl	800b73c <sbrk_aligned>
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d03a      	beq.n	800b86a <_malloc_r+0xea>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	442b      	add	r3, r5
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	bb62      	cbnz	r2, 800b85c <_malloc_r+0xdc>
 800b802:	f8c8 7000 	str.w	r7, [r8]
 800b806:	e00f      	b.n	800b828 <_malloc_r+0xa8>
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	1b52      	subs	r2, r2, r5
 800b80c:	d420      	bmi.n	800b850 <_malloc_r+0xd0>
 800b80e:	2a0b      	cmp	r2, #11
 800b810:	d917      	bls.n	800b842 <_malloc_r+0xc2>
 800b812:	1961      	adds	r1, r4, r5
 800b814:	42a3      	cmp	r3, r4
 800b816:	6025      	str	r5, [r4, #0]
 800b818:	bf18      	it	ne
 800b81a:	6059      	strne	r1, [r3, #4]
 800b81c:	6863      	ldr	r3, [r4, #4]
 800b81e:	bf08      	it	eq
 800b820:	f8c8 1000 	streq.w	r1, [r8]
 800b824:	5162      	str	r2, [r4, r5]
 800b826:	604b      	str	r3, [r1, #4]
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f82f 	bl	800b88c <__malloc_unlock>
 800b82e:	f104 000b 	add.w	r0, r4, #11
 800b832:	1d23      	adds	r3, r4, #4
 800b834:	f020 0007 	bic.w	r0, r0, #7
 800b838:	1ac2      	subs	r2, r0, r3
 800b83a:	bf1c      	itt	ne
 800b83c:	1a1b      	subne	r3, r3, r0
 800b83e:	50a3      	strne	r3, [r4, r2]
 800b840:	e7af      	b.n	800b7a2 <_malloc_r+0x22>
 800b842:	6862      	ldr	r2, [r4, #4]
 800b844:	42a3      	cmp	r3, r4
 800b846:	bf0c      	ite	eq
 800b848:	f8c8 2000 	streq.w	r2, [r8]
 800b84c:	605a      	strne	r2, [r3, #4]
 800b84e:	e7eb      	b.n	800b828 <_malloc_r+0xa8>
 800b850:	4623      	mov	r3, r4
 800b852:	6864      	ldr	r4, [r4, #4]
 800b854:	e7ae      	b.n	800b7b4 <_malloc_r+0x34>
 800b856:	463c      	mov	r4, r7
 800b858:	687f      	ldr	r7, [r7, #4]
 800b85a:	e7b6      	b.n	800b7ca <_malloc_r+0x4a>
 800b85c:	461a      	mov	r2, r3
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	42a3      	cmp	r3, r4
 800b862:	d1fb      	bne.n	800b85c <_malloc_r+0xdc>
 800b864:	2300      	movs	r3, #0
 800b866:	6053      	str	r3, [r2, #4]
 800b868:	e7de      	b.n	800b828 <_malloc_r+0xa8>
 800b86a:	230c      	movs	r3, #12
 800b86c:	6033      	str	r3, [r6, #0]
 800b86e:	4630      	mov	r0, r6
 800b870:	f000 f80c 	bl	800b88c <__malloc_unlock>
 800b874:	e794      	b.n	800b7a0 <_malloc_r+0x20>
 800b876:	6005      	str	r5, [r0, #0]
 800b878:	e7d6      	b.n	800b828 <_malloc_r+0xa8>
 800b87a:	bf00      	nop
 800b87c:	20000700 	.word	0x20000700

0800b880 <__malloc_lock>:
 800b880:	4801      	ldr	r0, [pc, #4]	@ (800b888 <__malloc_lock+0x8>)
 800b882:	f7ff b8ae 	b.w	800a9e2 <__retarget_lock_acquire_recursive>
 800b886:	bf00      	nop
 800b888:	200006f8 	.word	0x200006f8

0800b88c <__malloc_unlock>:
 800b88c:	4801      	ldr	r0, [pc, #4]	@ (800b894 <__malloc_unlock+0x8>)
 800b88e:	f7ff b8a9 	b.w	800a9e4 <__retarget_lock_release_recursive>
 800b892:	bf00      	nop
 800b894:	200006f8 	.word	0x200006f8

0800b898 <_Balloc>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	69c6      	ldr	r6, [r0, #28]
 800b89c:	4604      	mov	r4, r0
 800b89e:	460d      	mov	r5, r1
 800b8a0:	b976      	cbnz	r6, 800b8c0 <_Balloc+0x28>
 800b8a2:	2010      	movs	r0, #16
 800b8a4:	f7ff ff42 	bl	800b72c <malloc>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	61e0      	str	r0, [r4, #28]
 800b8ac:	b920      	cbnz	r0, 800b8b8 <_Balloc+0x20>
 800b8ae:	4b18      	ldr	r3, [pc, #96]	@ (800b910 <_Balloc+0x78>)
 800b8b0:	4818      	ldr	r0, [pc, #96]	@ (800b914 <_Balloc+0x7c>)
 800b8b2:	216b      	movs	r1, #107	@ 0x6b
 800b8b4:	f000 fda6 	bl	800c404 <__assert_func>
 800b8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8bc:	6006      	str	r6, [r0, #0]
 800b8be:	60c6      	str	r6, [r0, #12]
 800b8c0:	69e6      	ldr	r6, [r4, #28]
 800b8c2:	68f3      	ldr	r3, [r6, #12]
 800b8c4:	b183      	cbz	r3, 800b8e8 <_Balloc+0x50>
 800b8c6:	69e3      	ldr	r3, [r4, #28]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8ce:	b9b8      	cbnz	r0, 800b900 <_Balloc+0x68>
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8d6:	1d72      	adds	r2, r6, #5
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 fdb0 	bl	800c440 <_calloc_r>
 800b8e0:	b160      	cbz	r0, 800b8fc <_Balloc+0x64>
 800b8e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8e6:	e00e      	b.n	800b906 <_Balloc+0x6e>
 800b8e8:	2221      	movs	r2, #33	@ 0x21
 800b8ea:	2104      	movs	r1, #4
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fda7 	bl	800c440 <_calloc_r>
 800b8f2:	69e3      	ldr	r3, [r4, #28]
 800b8f4:	60f0      	str	r0, [r6, #12]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e4      	bne.n	800b8c6 <_Balloc+0x2e>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}
 800b900:	6802      	ldr	r2, [r0, #0]
 800b902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b906:	2300      	movs	r3, #0
 800b908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b90c:	e7f7      	b.n	800b8fe <_Balloc+0x66>
 800b90e:	bf00      	nop
 800b910:	0800d03d 	.word	0x0800d03d
 800b914:	0800d0bd 	.word	0x0800d0bd

0800b918 <_Bfree>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	69c6      	ldr	r6, [r0, #28]
 800b91c:	4605      	mov	r5, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	b976      	cbnz	r6, 800b940 <_Bfree+0x28>
 800b922:	2010      	movs	r0, #16
 800b924:	f7ff ff02 	bl	800b72c <malloc>
 800b928:	4602      	mov	r2, r0
 800b92a:	61e8      	str	r0, [r5, #28]
 800b92c:	b920      	cbnz	r0, 800b938 <_Bfree+0x20>
 800b92e:	4b09      	ldr	r3, [pc, #36]	@ (800b954 <_Bfree+0x3c>)
 800b930:	4809      	ldr	r0, [pc, #36]	@ (800b958 <_Bfree+0x40>)
 800b932:	218f      	movs	r1, #143	@ 0x8f
 800b934:	f000 fd66 	bl	800c404 <__assert_func>
 800b938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b93c:	6006      	str	r6, [r0, #0]
 800b93e:	60c6      	str	r6, [r0, #12]
 800b940:	b13c      	cbz	r4, 800b952 <_Bfree+0x3a>
 800b942:	69eb      	ldr	r3, [r5, #28]
 800b944:	6862      	ldr	r2, [r4, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b94c:	6021      	str	r1, [r4, #0]
 800b94e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b952:	bd70      	pop	{r4, r5, r6, pc}
 800b954:	0800d03d 	.word	0x0800d03d
 800b958:	0800d0bd 	.word	0x0800d0bd

0800b95c <__multadd>:
 800b95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	690d      	ldr	r5, [r1, #16]
 800b962:	4607      	mov	r7, r0
 800b964:	460c      	mov	r4, r1
 800b966:	461e      	mov	r6, r3
 800b968:	f101 0c14 	add.w	ip, r1, #20
 800b96c:	2000      	movs	r0, #0
 800b96e:	f8dc 3000 	ldr.w	r3, [ip]
 800b972:	b299      	uxth	r1, r3
 800b974:	fb02 6101 	mla	r1, r2, r1, r6
 800b978:	0c1e      	lsrs	r6, r3, #16
 800b97a:	0c0b      	lsrs	r3, r1, #16
 800b97c:	fb02 3306 	mla	r3, r2, r6, r3
 800b980:	b289      	uxth	r1, r1
 800b982:	3001      	adds	r0, #1
 800b984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b988:	4285      	cmp	r5, r0
 800b98a:	f84c 1b04 	str.w	r1, [ip], #4
 800b98e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b992:	dcec      	bgt.n	800b96e <__multadd+0x12>
 800b994:	b30e      	cbz	r6, 800b9da <__multadd+0x7e>
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	42ab      	cmp	r3, r5
 800b99a:	dc19      	bgt.n	800b9d0 <__multadd+0x74>
 800b99c:	6861      	ldr	r1, [r4, #4]
 800b99e:	4638      	mov	r0, r7
 800b9a0:	3101      	adds	r1, #1
 800b9a2:	f7ff ff79 	bl	800b898 <_Balloc>
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	b928      	cbnz	r0, 800b9b6 <__multadd+0x5a>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e0 <__multadd+0x84>)
 800b9ae:	480d      	ldr	r0, [pc, #52]	@ (800b9e4 <__multadd+0x88>)
 800b9b0:	21ba      	movs	r1, #186	@ 0xba
 800b9b2:	f000 fd27 	bl	800c404 <__assert_func>
 800b9b6:	6922      	ldr	r2, [r4, #16]
 800b9b8:	3202      	adds	r2, #2
 800b9ba:	f104 010c 	add.w	r1, r4, #12
 800b9be:	0092      	lsls	r2, r2, #2
 800b9c0:	300c      	adds	r0, #12
 800b9c2:	f000 fd11 	bl	800c3e8 <memcpy>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff ffa5 	bl	800b918 <_Bfree>
 800b9ce:	4644      	mov	r4, r8
 800b9d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	615e      	str	r6, [r3, #20]
 800b9d8:	6125      	str	r5, [r4, #16]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	0800d0ac 	.word	0x0800d0ac
 800b9e4:	0800d0bd 	.word	0x0800d0bd

0800b9e8 <__hi0bits>:
 800b9e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	bf36      	itet	cc
 800b9f0:	0403      	lslcc	r3, r0, #16
 800b9f2:	2000      	movcs	r0, #0
 800b9f4:	2010      	movcc	r0, #16
 800b9f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9fa:	bf3c      	itt	cc
 800b9fc:	021b      	lslcc	r3, r3, #8
 800b9fe:	3008      	addcc	r0, #8
 800ba00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba04:	bf3c      	itt	cc
 800ba06:	011b      	lslcc	r3, r3, #4
 800ba08:	3004      	addcc	r0, #4
 800ba0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba0e:	bf3c      	itt	cc
 800ba10:	009b      	lslcc	r3, r3, #2
 800ba12:	3002      	addcc	r0, #2
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	db05      	blt.n	800ba24 <__hi0bits+0x3c>
 800ba18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba1c:	f100 0001 	add.w	r0, r0, #1
 800ba20:	bf08      	it	eq
 800ba22:	2020      	moveq	r0, #32
 800ba24:	4770      	bx	lr

0800ba26 <__lo0bits>:
 800ba26:	6803      	ldr	r3, [r0, #0]
 800ba28:	4602      	mov	r2, r0
 800ba2a:	f013 0007 	ands.w	r0, r3, #7
 800ba2e:	d00b      	beq.n	800ba48 <__lo0bits+0x22>
 800ba30:	07d9      	lsls	r1, r3, #31
 800ba32:	d421      	bmi.n	800ba78 <__lo0bits+0x52>
 800ba34:	0798      	lsls	r0, r3, #30
 800ba36:	bf49      	itett	mi
 800ba38:	085b      	lsrmi	r3, r3, #1
 800ba3a:	089b      	lsrpl	r3, r3, #2
 800ba3c:	2001      	movmi	r0, #1
 800ba3e:	6013      	strmi	r3, [r2, #0]
 800ba40:	bf5c      	itt	pl
 800ba42:	6013      	strpl	r3, [r2, #0]
 800ba44:	2002      	movpl	r0, #2
 800ba46:	4770      	bx	lr
 800ba48:	b299      	uxth	r1, r3
 800ba4a:	b909      	cbnz	r1, 800ba50 <__lo0bits+0x2a>
 800ba4c:	0c1b      	lsrs	r3, r3, #16
 800ba4e:	2010      	movs	r0, #16
 800ba50:	b2d9      	uxtb	r1, r3
 800ba52:	b909      	cbnz	r1, 800ba58 <__lo0bits+0x32>
 800ba54:	3008      	adds	r0, #8
 800ba56:	0a1b      	lsrs	r3, r3, #8
 800ba58:	0719      	lsls	r1, r3, #28
 800ba5a:	bf04      	itt	eq
 800ba5c:	091b      	lsreq	r3, r3, #4
 800ba5e:	3004      	addeq	r0, #4
 800ba60:	0799      	lsls	r1, r3, #30
 800ba62:	bf04      	itt	eq
 800ba64:	089b      	lsreq	r3, r3, #2
 800ba66:	3002      	addeq	r0, #2
 800ba68:	07d9      	lsls	r1, r3, #31
 800ba6a:	d403      	bmi.n	800ba74 <__lo0bits+0x4e>
 800ba6c:	085b      	lsrs	r3, r3, #1
 800ba6e:	f100 0001 	add.w	r0, r0, #1
 800ba72:	d003      	beq.n	800ba7c <__lo0bits+0x56>
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	4770      	bx	lr
 800ba78:	2000      	movs	r0, #0
 800ba7a:	4770      	bx	lr
 800ba7c:	2020      	movs	r0, #32
 800ba7e:	4770      	bx	lr

0800ba80 <__i2b>:
 800ba80:	b510      	push	{r4, lr}
 800ba82:	460c      	mov	r4, r1
 800ba84:	2101      	movs	r1, #1
 800ba86:	f7ff ff07 	bl	800b898 <_Balloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	b928      	cbnz	r0, 800ba9a <__i2b+0x1a>
 800ba8e:	4b05      	ldr	r3, [pc, #20]	@ (800baa4 <__i2b+0x24>)
 800ba90:	4805      	ldr	r0, [pc, #20]	@ (800baa8 <__i2b+0x28>)
 800ba92:	f240 1145 	movw	r1, #325	@ 0x145
 800ba96:	f000 fcb5 	bl	800c404 <__assert_func>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	6144      	str	r4, [r0, #20]
 800ba9e:	6103      	str	r3, [r0, #16]
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	bf00      	nop
 800baa4:	0800d0ac 	.word	0x0800d0ac
 800baa8:	0800d0bd 	.word	0x0800d0bd

0800baac <__multiply>:
 800baac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	4617      	mov	r7, r2
 800bab2:	690a      	ldr	r2, [r1, #16]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	bfa8      	it	ge
 800baba:	463b      	movge	r3, r7
 800babc:	4689      	mov	r9, r1
 800babe:	bfa4      	itt	ge
 800bac0:	460f      	movge	r7, r1
 800bac2:	4699      	movge	r9, r3
 800bac4:	693d      	ldr	r5, [r7, #16]
 800bac6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6879      	ldr	r1, [r7, #4]
 800bace:	eb05 060a 	add.w	r6, r5, sl
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	b085      	sub	sp, #20
 800bad6:	bfb8      	it	lt
 800bad8:	3101      	addlt	r1, #1
 800bada:	f7ff fedd 	bl	800b898 <_Balloc>
 800bade:	b930      	cbnz	r0, 800baee <__multiply+0x42>
 800bae0:	4602      	mov	r2, r0
 800bae2:	4b41      	ldr	r3, [pc, #260]	@ (800bbe8 <__multiply+0x13c>)
 800bae4:	4841      	ldr	r0, [pc, #260]	@ (800bbec <__multiply+0x140>)
 800bae6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800baea:	f000 fc8b 	bl	800c404 <__assert_func>
 800baee:	f100 0414 	add.w	r4, r0, #20
 800baf2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800baf6:	4623      	mov	r3, r4
 800baf8:	2200      	movs	r2, #0
 800bafa:	4573      	cmp	r3, lr
 800bafc:	d320      	bcc.n	800bb40 <__multiply+0x94>
 800bafe:	f107 0814 	add.w	r8, r7, #20
 800bb02:	f109 0114 	add.w	r1, r9, #20
 800bb06:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bb0a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bb0e:	9302      	str	r3, [sp, #8]
 800bb10:	1beb      	subs	r3, r5, r7
 800bb12:	3b15      	subs	r3, #21
 800bb14:	f023 0303 	bic.w	r3, r3, #3
 800bb18:	3304      	adds	r3, #4
 800bb1a:	3715      	adds	r7, #21
 800bb1c:	42bd      	cmp	r5, r7
 800bb1e:	bf38      	it	cc
 800bb20:	2304      	movcc	r3, #4
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	9103      	str	r1, [sp, #12]
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	d80c      	bhi.n	800bb46 <__multiply+0x9a>
 800bb2c:	2e00      	cmp	r6, #0
 800bb2e:	dd03      	ble.n	800bb38 <__multiply+0x8c>
 800bb30:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d055      	beq.n	800bbe4 <__multiply+0x138>
 800bb38:	6106      	str	r6, [r0, #16]
 800bb3a:	b005      	add	sp, #20
 800bb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb40:	f843 2b04 	str.w	r2, [r3], #4
 800bb44:	e7d9      	b.n	800bafa <__multiply+0x4e>
 800bb46:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb4a:	f1ba 0f00 	cmp.w	sl, #0
 800bb4e:	d01f      	beq.n	800bb90 <__multiply+0xe4>
 800bb50:	46c4      	mov	ip, r8
 800bb52:	46a1      	mov	r9, r4
 800bb54:	2700      	movs	r7, #0
 800bb56:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb5a:	f8d9 3000 	ldr.w	r3, [r9]
 800bb5e:	fa1f fb82 	uxth.w	fp, r2
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb68:	443b      	add	r3, r7
 800bb6a:	f8d9 7000 	ldr.w	r7, [r9]
 800bb6e:	0c12      	lsrs	r2, r2, #16
 800bb70:	0c3f      	lsrs	r7, r7, #16
 800bb72:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb76:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb80:	4565      	cmp	r5, ip
 800bb82:	f849 3b04 	str.w	r3, [r9], #4
 800bb86:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb8a:	d8e4      	bhi.n	800bb56 <__multiply+0xaa>
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	50e7      	str	r7, [r4, r3]
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb96:	3104      	adds	r1, #4
 800bb98:	f1b9 0f00 	cmp.w	r9, #0
 800bb9c:	d020      	beq.n	800bbe0 <__multiply+0x134>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	4647      	mov	r7, r8
 800bba2:	46a4      	mov	ip, r4
 800bba4:	f04f 0a00 	mov.w	sl, #0
 800bba8:	f8b7 b000 	ldrh.w	fp, [r7]
 800bbac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bbb0:	fb09 220b 	mla	r2, r9, fp, r2
 800bbb4:	4452      	add	r2, sl
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbbc:	f84c 3b04 	str.w	r3, [ip], #4
 800bbc0:	f857 3b04 	ldr.w	r3, [r7], #4
 800bbc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbc8:	f8bc 3000 	ldrh.w	r3, [ip]
 800bbcc:	fb09 330a 	mla	r3, r9, sl, r3
 800bbd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bbd4:	42bd      	cmp	r5, r7
 800bbd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbda:	d8e5      	bhi.n	800bba8 <__multiply+0xfc>
 800bbdc:	9a01      	ldr	r2, [sp, #4]
 800bbde:	50a3      	str	r3, [r4, r2]
 800bbe0:	3404      	adds	r4, #4
 800bbe2:	e79f      	b.n	800bb24 <__multiply+0x78>
 800bbe4:	3e01      	subs	r6, #1
 800bbe6:	e7a1      	b.n	800bb2c <__multiply+0x80>
 800bbe8:	0800d0ac 	.word	0x0800d0ac
 800bbec:	0800d0bd 	.word	0x0800d0bd

0800bbf0 <__pow5mult>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	4615      	mov	r5, r2
 800bbf6:	f012 0203 	ands.w	r2, r2, #3
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	460e      	mov	r6, r1
 800bbfe:	d007      	beq.n	800bc10 <__pow5mult+0x20>
 800bc00:	4c25      	ldr	r4, [pc, #148]	@ (800bc98 <__pow5mult+0xa8>)
 800bc02:	3a01      	subs	r2, #1
 800bc04:	2300      	movs	r3, #0
 800bc06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc0a:	f7ff fea7 	bl	800b95c <__multadd>
 800bc0e:	4606      	mov	r6, r0
 800bc10:	10ad      	asrs	r5, r5, #2
 800bc12:	d03d      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc14:	69fc      	ldr	r4, [r7, #28]
 800bc16:	b97c      	cbnz	r4, 800bc38 <__pow5mult+0x48>
 800bc18:	2010      	movs	r0, #16
 800bc1a:	f7ff fd87 	bl	800b72c <malloc>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	61f8      	str	r0, [r7, #28]
 800bc22:	b928      	cbnz	r0, 800bc30 <__pow5mult+0x40>
 800bc24:	4b1d      	ldr	r3, [pc, #116]	@ (800bc9c <__pow5mult+0xac>)
 800bc26:	481e      	ldr	r0, [pc, #120]	@ (800bca0 <__pow5mult+0xb0>)
 800bc28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc2c:	f000 fbea 	bl	800c404 <__assert_func>
 800bc30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc34:	6004      	str	r4, [r0, #0]
 800bc36:	60c4      	str	r4, [r0, #12]
 800bc38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc40:	b94c      	cbnz	r4, 800bc56 <__pow5mult+0x66>
 800bc42:	f240 2171 	movw	r1, #625	@ 0x271
 800bc46:	4638      	mov	r0, r7
 800bc48:	f7ff ff1a 	bl	800ba80 <__i2b>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc52:	4604      	mov	r4, r0
 800bc54:	6003      	str	r3, [r0, #0]
 800bc56:	f04f 0900 	mov.w	r9, #0
 800bc5a:	07eb      	lsls	r3, r5, #31
 800bc5c:	d50a      	bpl.n	800bc74 <__pow5mult+0x84>
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4622      	mov	r2, r4
 800bc62:	4638      	mov	r0, r7
 800bc64:	f7ff ff22 	bl	800baac <__multiply>
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	f7ff fe53 	bl	800b918 <_Bfree>
 800bc72:	4646      	mov	r6, r8
 800bc74:	106d      	asrs	r5, r5, #1
 800bc76:	d00b      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	b938      	cbnz	r0, 800bc8c <__pow5mult+0x9c>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ff13 	bl	800baac <__multiply>
 800bc86:	6020      	str	r0, [r4, #0]
 800bc88:	f8c0 9000 	str.w	r9, [r0]
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	e7e4      	b.n	800bc5a <__pow5mult+0x6a>
 800bc90:	4630      	mov	r0, r6
 800bc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc96:	bf00      	nop
 800bc98:	0800d170 	.word	0x0800d170
 800bc9c:	0800d03d 	.word	0x0800d03d
 800bca0:	0800d0bd 	.word	0x0800d0bd

0800bca4 <__lshift>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6849      	ldr	r1, [r1, #4]
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	4691      	mov	r9, r2
 800bcb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcbc:	f108 0601 	add.w	r6, r8, #1
 800bcc0:	42b3      	cmp	r3, r6
 800bcc2:	db0b      	blt.n	800bcdc <__lshift+0x38>
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	f7ff fde7 	bl	800b898 <_Balloc>
 800bcca:	4605      	mov	r5, r0
 800bccc:	b948      	cbnz	r0, 800bce2 <__lshift+0x3e>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	4b28      	ldr	r3, [pc, #160]	@ (800bd74 <__lshift+0xd0>)
 800bcd2:	4829      	ldr	r0, [pc, #164]	@ (800bd78 <__lshift+0xd4>)
 800bcd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcd8:	f000 fb94 	bl	800c404 <__assert_func>
 800bcdc:	3101      	adds	r1, #1
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	e7ee      	b.n	800bcc0 <__lshift+0x1c>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f100 0114 	add.w	r1, r0, #20
 800bce8:	f100 0210 	add.w	r2, r0, #16
 800bcec:	4618      	mov	r0, r3
 800bcee:	4553      	cmp	r3, sl
 800bcf0:	db33      	blt.n	800bd5a <__lshift+0xb6>
 800bcf2:	6920      	ldr	r0, [r4, #16]
 800bcf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcf8:	f104 0314 	add.w	r3, r4, #20
 800bcfc:	f019 091f 	ands.w	r9, r9, #31
 800bd00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd08:	d02b      	beq.n	800bd62 <__lshift+0xbe>
 800bd0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd0e:	468a      	mov	sl, r1
 800bd10:	2200      	movs	r2, #0
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	fa00 f009 	lsl.w	r0, r0, r9
 800bd18:	4310      	orrs	r0, r2
 800bd1a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd22:	459c      	cmp	ip, r3
 800bd24:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd28:	d8f3      	bhi.n	800bd12 <__lshift+0x6e>
 800bd2a:	ebac 0304 	sub.w	r3, ip, r4
 800bd2e:	3b15      	subs	r3, #21
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	3304      	adds	r3, #4
 800bd36:	f104 0015 	add.w	r0, r4, #21
 800bd3a:	4560      	cmp	r0, ip
 800bd3c:	bf88      	it	hi
 800bd3e:	2304      	movhi	r3, #4
 800bd40:	50ca      	str	r2, [r1, r3]
 800bd42:	b10a      	cbz	r2, 800bd48 <__lshift+0xa4>
 800bd44:	f108 0602 	add.w	r6, r8, #2
 800bd48:	3e01      	subs	r6, #1
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	612e      	str	r6, [r5, #16]
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f7ff fde2 	bl	800b918 <_Bfree>
 800bd54:	4628      	mov	r0, r5
 800bd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd5e:	3301      	adds	r3, #1
 800bd60:	e7c5      	b.n	800bcee <__lshift+0x4a>
 800bd62:	3904      	subs	r1, #4
 800bd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd68:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd6c:	459c      	cmp	ip, r3
 800bd6e:	d8f9      	bhi.n	800bd64 <__lshift+0xc0>
 800bd70:	e7ea      	b.n	800bd48 <__lshift+0xa4>
 800bd72:	bf00      	nop
 800bd74:	0800d0ac 	.word	0x0800d0ac
 800bd78:	0800d0bd 	.word	0x0800d0bd

0800bd7c <__mcmp>:
 800bd7c:	690a      	ldr	r2, [r1, #16]
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6900      	ldr	r0, [r0, #16]
 800bd82:	1a80      	subs	r0, r0, r2
 800bd84:	b530      	push	{r4, r5, lr}
 800bd86:	d10e      	bne.n	800bda6 <__mcmp+0x2a>
 800bd88:	3314      	adds	r3, #20
 800bd8a:	3114      	adds	r1, #20
 800bd8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd9c:	4295      	cmp	r5, r2
 800bd9e:	d003      	beq.n	800bda8 <__mcmp+0x2c>
 800bda0:	d205      	bcs.n	800bdae <__mcmp+0x32>
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	bd30      	pop	{r4, r5, pc}
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	d3f3      	bcc.n	800bd94 <__mcmp+0x18>
 800bdac:	e7fb      	b.n	800bda6 <__mcmp+0x2a>
 800bdae:	2001      	movs	r0, #1
 800bdb0:	e7f9      	b.n	800bda6 <__mcmp+0x2a>
	...

0800bdb4 <__mdiff>:
 800bdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	4689      	mov	r9, r1
 800bdba:	4606      	mov	r6, r0
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4648      	mov	r0, r9
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	f7ff ffdb 	bl	800bd7c <__mcmp>
 800bdc6:	1e05      	subs	r5, r0, #0
 800bdc8:	d112      	bne.n	800bdf0 <__mdiff+0x3c>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f7ff fd63 	bl	800b898 <_Balloc>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	b928      	cbnz	r0, 800bde2 <__mdiff+0x2e>
 800bdd6:	4b3f      	ldr	r3, [pc, #252]	@ (800bed4 <__mdiff+0x120>)
 800bdd8:	f240 2137 	movw	r1, #567	@ 0x237
 800bddc:	483e      	ldr	r0, [pc, #248]	@ (800bed8 <__mdiff+0x124>)
 800bdde:	f000 fb11 	bl	800c404 <__assert_func>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bde8:	4610      	mov	r0, r2
 800bdea:	b003      	add	sp, #12
 800bdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf0:	bfbc      	itt	lt
 800bdf2:	464b      	movlt	r3, r9
 800bdf4:	46a1      	movlt	r9, r4
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdfc:	bfba      	itte	lt
 800bdfe:	461c      	movlt	r4, r3
 800be00:	2501      	movlt	r5, #1
 800be02:	2500      	movge	r5, #0
 800be04:	f7ff fd48 	bl	800b898 <_Balloc>
 800be08:	4602      	mov	r2, r0
 800be0a:	b918      	cbnz	r0, 800be14 <__mdiff+0x60>
 800be0c:	4b31      	ldr	r3, [pc, #196]	@ (800bed4 <__mdiff+0x120>)
 800be0e:	f240 2145 	movw	r1, #581	@ 0x245
 800be12:	e7e3      	b.n	800bddc <__mdiff+0x28>
 800be14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be18:	6926      	ldr	r6, [r4, #16]
 800be1a:	60c5      	str	r5, [r0, #12]
 800be1c:	f109 0310 	add.w	r3, r9, #16
 800be20:	f109 0514 	add.w	r5, r9, #20
 800be24:	f104 0e14 	add.w	lr, r4, #20
 800be28:	f100 0b14 	add.w	fp, r0, #20
 800be2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	46d9      	mov	r9, fp
 800be38:	f04f 0c00 	mov.w	ip, #0
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	fa1f f38a 	uxth.w	r3, sl
 800be4c:	4619      	mov	r1, r3
 800be4e:	b283      	uxth	r3, r0
 800be50:	1acb      	subs	r3, r1, r3
 800be52:	0c00      	lsrs	r0, r0, #16
 800be54:	4463      	add	r3, ip
 800be56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be5e:	b29b      	uxth	r3, r3
 800be60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be64:	4576      	cmp	r6, lr
 800be66:	f849 3b04 	str.w	r3, [r9], #4
 800be6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be6e:	d8e5      	bhi.n	800be3c <__mdiff+0x88>
 800be70:	1b33      	subs	r3, r6, r4
 800be72:	3b15      	subs	r3, #21
 800be74:	f023 0303 	bic.w	r3, r3, #3
 800be78:	3415      	adds	r4, #21
 800be7a:	3304      	adds	r3, #4
 800be7c:	42a6      	cmp	r6, r4
 800be7e:	bf38      	it	cc
 800be80:	2304      	movcc	r3, #4
 800be82:	441d      	add	r5, r3
 800be84:	445b      	add	r3, fp
 800be86:	461e      	mov	r6, r3
 800be88:	462c      	mov	r4, r5
 800be8a:	4544      	cmp	r4, r8
 800be8c:	d30e      	bcc.n	800beac <__mdiff+0xf8>
 800be8e:	f108 0103 	add.w	r1, r8, #3
 800be92:	1b49      	subs	r1, r1, r5
 800be94:	f021 0103 	bic.w	r1, r1, #3
 800be98:	3d03      	subs	r5, #3
 800be9a:	45a8      	cmp	r8, r5
 800be9c:	bf38      	it	cc
 800be9e:	2100      	movcc	r1, #0
 800bea0:	440b      	add	r3, r1
 800bea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bea6:	b191      	cbz	r1, 800bece <__mdiff+0x11a>
 800bea8:	6117      	str	r7, [r2, #16]
 800beaa:	e79d      	b.n	800bde8 <__mdiff+0x34>
 800beac:	f854 1b04 	ldr.w	r1, [r4], #4
 800beb0:	46e6      	mov	lr, ip
 800beb2:	0c08      	lsrs	r0, r1, #16
 800beb4:	fa1c fc81 	uxtah	ip, ip, r1
 800beb8:	4471      	add	r1, lr
 800beba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bebe:	b289      	uxth	r1, r1
 800bec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bec4:	f846 1b04 	str.w	r1, [r6], #4
 800bec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800becc:	e7dd      	b.n	800be8a <__mdiff+0xd6>
 800bece:	3f01      	subs	r7, #1
 800bed0:	e7e7      	b.n	800bea2 <__mdiff+0xee>
 800bed2:	bf00      	nop
 800bed4:	0800d0ac 	.word	0x0800d0ac
 800bed8:	0800d0bd 	.word	0x0800d0bd

0800bedc <__d2b>:
 800bedc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee0:	460f      	mov	r7, r1
 800bee2:	2101      	movs	r1, #1
 800bee4:	ec59 8b10 	vmov	r8, r9, d0
 800bee8:	4616      	mov	r6, r2
 800beea:	f7ff fcd5 	bl	800b898 <_Balloc>
 800beee:	4604      	mov	r4, r0
 800bef0:	b930      	cbnz	r0, 800bf00 <__d2b+0x24>
 800bef2:	4602      	mov	r2, r0
 800bef4:	4b23      	ldr	r3, [pc, #140]	@ (800bf84 <__d2b+0xa8>)
 800bef6:	4824      	ldr	r0, [pc, #144]	@ (800bf88 <__d2b+0xac>)
 800bef8:	f240 310f 	movw	r1, #783	@ 0x30f
 800befc:	f000 fa82 	bl	800c404 <__assert_func>
 800bf00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf08:	b10d      	cbz	r5, 800bf0e <__d2b+0x32>
 800bf0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	f1b8 0300 	subs.w	r3, r8, #0
 800bf14:	d023      	beq.n	800bf5e <__d2b+0x82>
 800bf16:	4668      	mov	r0, sp
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	f7ff fd84 	bl	800ba26 <__lo0bits>
 800bf1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf22:	b1d0      	cbz	r0, 800bf5a <__d2b+0x7e>
 800bf24:	f1c0 0320 	rsb	r3, r0, #32
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	40c2      	lsrs	r2, r0
 800bf30:	6163      	str	r3, [r4, #20]
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	61a3      	str	r3, [r4, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bf0c      	ite	eq
 800bf3c:	2201      	moveq	r2, #1
 800bf3e:	2202      	movne	r2, #2
 800bf40:	6122      	str	r2, [r4, #16]
 800bf42:	b1a5      	cbz	r5, 800bf6e <__d2b+0x92>
 800bf44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf48:	4405      	add	r5, r0
 800bf4a:	603d      	str	r5, [r7, #0]
 800bf4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf50:	6030      	str	r0, [r6, #0]
 800bf52:	4620      	mov	r0, r4
 800bf54:	b003      	add	sp, #12
 800bf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	6161      	str	r1, [r4, #20]
 800bf5c:	e7ea      	b.n	800bf34 <__d2b+0x58>
 800bf5e:	a801      	add	r0, sp, #4
 800bf60:	f7ff fd61 	bl	800ba26 <__lo0bits>
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	6163      	str	r3, [r4, #20]
 800bf68:	3020      	adds	r0, #32
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	e7e8      	b.n	800bf40 <__d2b+0x64>
 800bf6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf76:	6038      	str	r0, [r7, #0]
 800bf78:	6918      	ldr	r0, [r3, #16]
 800bf7a:	f7ff fd35 	bl	800b9e8 <__hi0bits>
 800bf7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf82:	e7e5      	b.n	800bf50 <__d2b+0x74>
 800bf84:	0800d0ac 	.word	0x0800d0ac
 800bf88:	0800d0bd 	.word	0x0800d0bd

0800bf8c <__ssputs_r>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	688e      	ldr	r6, [r1, #8]
 800bf92:	461f      	mov	r7, r3
 800bf94:	42be      	cmp	r6, r7
 800bf96:	680b      	ldr	r3, [r1, #0]
 800bf98:	4682      	mov	sl, r0
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	4690      	mov	r8, r2
 800bf9e:	d82d      	bhi.n	800bffc <__ssputs_r+0x70>
 800bfa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bfa8:	d026      	beq.n	800bff8 <__ssputs_r+0x6c>
 800bfaa:	6965      	ldr	r5, [r4, #20]
 800bfac:	6909      	ldr	r1, [r1, #16]
 800bfae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfb2:	eba3 0901 	sub.w	r9, r3, r1
 800bfb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfba:	1c7b      	adds	r3, r7, #1
 800bfbc:	444b      	add	r3, r9
 800bfbe:	106d      	asrs	r5, r5, #1
 800bfc0:	429d      	cmp	r5, r3
 800bfc2:	bf38      	it	cc
 800bfc4:	461d      	movcc	r5, r3
 800bfc6:	0553      	lsls	r3, r2, #21
 800bfc8:	d527      	bpl.n	800c01a <__ssputs_r+0x8e>
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7ff fbd8 	bl	800b780 <_malloc_r>
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	b360      	cbz	r0, 800c02e <__ssputs_r+0xa2>
 800bfd4:	6921      	ldr	r1, [r4, #16]
 800bfd6:	464a      	mov	r2, r9
 800bfd8:	f000 fa06 	bl	800c3e8 <memcpy>
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	6126      	str	r6, [r4, #16]
 800bfea:	6165      	str	r5, [r4, #20]
 800bfec:	444e      	add	r6, r9
 800bfee:	eba5 0509 	sub.w	r5, r5, r9
 800bff2:	6026      	str	r6, [r4, #0]
 800bff4:	60a5      	str	r5, [r4, #8]
 800bff6:	463e      	mov	r6, r7
 800bff8:	42be      	cmp	r6, r7
 800bffa:	d900      	bls.n	800bffe <__ssputs_r+0x72>
 800bffc:	463e      	mov	r6, r7
 800bffe:	6820      	ldr	r0, [r4, #0]
 800c000:	4632      	mov	r2, r6
 800c002:	4641      	mov	r1, r8
 800c004:	f000 f9c6 	bl	800c394 <memmove>
 800c008:	68a3      	ldr	r3, [r4, #8]
 800c00a:	1b9b      	subs	r3, r3, r6
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	4433      	add	r3, r6
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	2000      	movs	r0, #0
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	462a      	mov	r2, r5
 800c01c:	f000 fa36 	bl	800c48c <_realloc_r>
 800c020:	4606      	mov	r6, r0
 800c022:	2800      	cmp	r0, #0
 800c024:	d1e0      	bne.n	800bfe8 <__ssputs_r+0x5c>
 800c026:	6921      	ldr	r1, [r4, #16]
 800c028:	4650      	mov	r0, sl
 800c02a:	f7ff fb35 	bl	800b698 <_free_r>
 800c02e:	230c      	movs	r3, #12
 800c030:	f8ca 3000 	str.w	r3, [sl]
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	e7e9      	b.n	800c016 <__ssputs_r+0x8a>
	...

0800c044 <_svfiprintf_r>:
 800c044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c048:	4698      	mov	r8, r3
 800c04a:	898b      	ldrh	r3, [r1, #12]
 800c04c:	061b      	lsls	r3, r3, #24
 800c04e:	b09d      	sub	sp, #116	@ 0x74
 800c050:	4607      	mov	r7, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4614      	mov	r4, r2
 800c056:	d510      	bpl.n	800c07a <_svfiprintf_r+0x36>
 800c058:	690b      	ldr	r3, [r1, #16]
 800c05a:	b973      	cbnz	r3, 800c07a <_svfiprintf_r+0x36>
 800c05c:	2140      	movs	r1, #64	@ 0x40
 800c05e:	f7ff fb8f 	bl	800b780 <_malloc_r>
 800c062:	6028      	str	r0, [r5, #0]
 800c064:	6128      	str	r0, [r5, #16]
 800c066:	b930      	cbnz	r0, 800c076 <_svfiprintf_r+0x32>
 800c068:	230c      	movs	r3, #12
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	b01d      	add	sp, #116	@ 0x74
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c076:	2340      	movs	r3, #64	@ 0x40
 800c078:	616b      	str	r3, [r5, #20]
 800c07a:	2300      	movs	r3, #0
 800c07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c07e:	2320      	movs	r3, #32
 800c080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c084:	f8cd 800c 	str.w	r8, [sp, #12]
 800c088:	2330      	movs	r3, #48	@ 0x30
 800c08a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c228 <_svfiprintf_r+0x1e4>
 800c08e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c092:	f04f 0901 	mov.w	r9, #1
 800c096:	4623      	mov	r3, r4
 800c098:	469a      	mov	sl, r3
 800c09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09e:	b10a      	cbz	r2, 800c0a4 <_svfiprintf_r+0x60>
 800c0a0:	2a25      	cmp	r2, #37	@ 0x25
 800c0a2:	d1f9      	bne.n	800c098 <_svfiprintf_r+0x54>
 800c0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0a8:	d00b      	beq.n	800c0c2 <_svfiprintf_r+0x7e>
 800c0aa:	465b      	mov	r3, fp
 800c0ac:	4622      	mov	r2, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f7ff ff6b 	bl	800bf8c <__ssputs_r>
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	f000 80a7 	beq.w	800c20a <_svfiprintf_r+0x1c6>
 800c0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0be:	445a      	add	r2, fp
 800c0c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 809f 	beq.w	800c20a <_svfiprintf_r+0x1c6>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0d6:	f10a 0a01 	add.w	sl, sl, #1
 800c0da:	9304      	str	r3, [sp, #16]
 800c0dc:	9307      	str	r3, [sp, #28]
 800c0de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0e4:	4654      	mov	r4, sl
 800c0e6:	2205      	movs	r2, #5
 800c0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ec:	484e      	ldr	r0, [pc, #312]	@ (800c228 <_svfiprintf_r+0x1e4>)
 800c0ee:	f7f4 f86f 	bl	80001d0 <memchr>
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	b9d8      	cbnz	r0, 800c12e <_svfiprintf_r+0xea>
 800c0f6:	06d0      	lsls	r0, r2, #27
 800c0f8:	bf44      	itt	mi
 800c0fa:	2320      	movmi	r3, #32
 800c0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c100:	0711      	lsls	r1, r2, #28
 800c102:	bf44      	itt	mi
 800c104:	232b      	movmi	r3, #43	@ 0x2b
 800c106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c10a:	f89a 3000 	ldrb.w	r3, [sl]
 800c10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c110:	d015      	beq.n	800c13e <_svfiprintf_r+0xfa>
 800c112:	9a07      	ldr	r2, [sp, #28]
 800c114:	4654      	mov	r4, sl
 800c116:	2000      	movs	r0, #0
 800c118:	f04f 0c0a 	mov.w	ip, #10
 800c11c:	4621      	mov	r1, r4
 800c11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c122:	3b30      	subs	r3, #48	@ 0x30
 800c124:	2b09      	cmp	r3, #9
 800c126:	d94b      	bls.n	800c1c0 <_svfiprintf_r+0x17c>
 800c128:	b1b0      	cbz	r0, 800c158 <_svfiprintf_r+0x114>
 800c12a:	9207      	str	r2, [sp, #28]
 800c12c:	e014      	b.n	800c158 <_svfiprintf_r+0x114>
 800c12e:	eba0 0308 	sub.w	r3, r0, r8
 800c132:	fa09 f303 	lsl.w	r3, r9, r3
 800c136:	4313      	orrs	r3, r2
 800c138:	9304      	str	r3, [sp, #16]
 800c13a:	46a2      	mov	sl, r4
 800c13c:	e7d2      	b.n	800c0e4 <_svfiprintf_r+0xa0>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	1d19      	adds	r1, r3, #4
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	9103      	str	r1, [sp, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfbb      	ittet	lt
 800c14a:	425b      	neglt	r3, r3
 800c14c:	f042 0202 	orrlt.w	r2, r2, #2
 800c150:	9307      	strge	r3, [sp, #28]
 800c152:	9307      	strlt	r3, [sp, #28]
 800c154:	bfb8      	it	lt
 800c156:	9204      	strlt	r2, [sp, #16]
 800c158:	7823      	ldrb	r3, [r4, #0]
 800c15a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c15c:	d10a      	bne.n	800c174 <_svfiprintf_r+0x130>
 800c15e:	7863      	ldrb	r3, [r4, #1]
 800c160:	2b2a      	cmp	r3, #42	@ 0x2a
 800c162:	d132      	bne.n	800c1ca <_svfiprintf_r+0x186>
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	1d1a      	adds	r2, r3, #4
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	9203      	str	r2, [sp, #12]
 800c16c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c170:	3402      	adds	r4, #2
 800c172:	9305      	str	r3, [sp, #20]
 800c174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c238 <_svfiprintf_r+0x1f4>
 800c178:	7821      	ldrb	r1, [r4, #0]
 800c17a:	2203      	movs	r2, #3
 800c17c:	4650      	mov	r0, sl
 800c17e:	f7f4 f827 	bl	80001d0 <memchr>
 800c182:	b138      	cbz	r0, 800c194 <_svfiprintf_r+0x150>
 800c184:	9b04      	ldr	r3, [sp, #16]
 800c186:	eba0 000a 	sub.w	r0, r0, sl
 800c18a:	2240      	movs	r2, #64	@ 0x40
 800c18c:	4082      	lsls	r2, r0
 800c18e:	4313      	orrs	r3, r2
 800c190:	3401      	adds	r4, #1
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c198:	4824      	ldr	r0, [pc, #144]	@ (800c22c <_svfiprintf_r+0x1e8>)
 800c19a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c19e:	2206      	movs	r2, #6
 800c1a0:	f7f4 f816 	bl	80001d0 <memchr>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d036      	beq.n	800c216 <_svfiprintf_r+0x1d2>
 800c1a8:	4b21      	ldr	r3, [pc, #132]	@ (800c230 <_svfiprintf_r+0x1ec>)
 800c1aa:	bb1b      	cbnz	r3, 800c1f4 <_svfiprintf_r+0x1b0>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	3307      	adds	r3, #7
 800c1b0:	f023 0307 	bic.w	r3, r3, #7
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	9303      	str	r3, [sp, #12]
 800c1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ba:	4433      	add	r3, r6
 800c1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1be:	e76a      	b.n	800c096 <_svfiprintf_r+0x52>
 800c1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	e7a8      	b.n	800c11c <_svfiprintf_r+0xd8>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	3401      	adds	r4, #1
 800c1ce:	9305      	str	r3, [sp, #20]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	f04f 0c0a 	mov.w	ip, #10
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1dc:	3a30      	subs	r2, #48	@ 0x30
 800c1de:	2a09      	cmp	r2, #9
 800c1e0:	d903      	bls.n	800c1ea <_svfiprintf_r+0x1a6>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0c6      	beq.n	800c174 <_svfiprintf_r+0x130>
 800c1e6:	9105      	str	r1, [sp, #20]
 800c1e8:	e7c4      	b.n	800c174 <_svfiprintf_r+0x130>
 800c1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e7f0      	b.n	800c1d6 <_svfiprintf_r+0x192>
 800c1f4:	ab03      	add	r3, sp, #12
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c234 <_svfiprintf_r+0x1f0>)
 800c1fc:	a904      	add	r1, sp, #16
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7fd fe80 	bl	8009f04 <_printf_float>
 800c204:	1c42      	adds	r2, r0, #1
 800c206:	4606      	mov	r6, r0
 800c208:	d1d6      	bne.n	800c1b8 <_svfiprintf_r+0x174>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	065b      	lsls	r3, r3, #25
 800c20e:	f53f af2d 	bmi.w	800c06c <_svfiprintf_r+0x28>
 800c212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c214:	e72c      	b.n	800c070 <_svfiprintf_r+0x2c>
 800c216:	ab03      	add	r3, sp, #12
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	462a      	mov	r2, r5
 800c21c:	4b05      	ldr	r3, [pc, #20]	@ (800c234 <_svfiprintf_r+0x1f0>)
 800c21e:	a904      	add	r1, sp, #16
 800c220:	4638      	mov	r0, r7
 800c222:	f7fe f907 	bl	800a434 <_printf_i>
 800c226:	e7ed      	b.n	800c204 <_svfiprintf_r+0x1c0>
 800c228:	0800d116 	.word	0x0800d116
 800c22c:	0800d120 	.word	0x0800d120
 800c230:	08009f05 	.word	0x08009f05
 800c234:	0800bf8d 	.word	0x0800bf8d
 800c238:	0800d11c 	.word	0x0800d11c

0800c23c <__sflush_r>:
 800c23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c244:	0716      	lsls	r6, r2, #28
 800c246:	4605      	mov	r5, r0
 800c248:	460c      	mov	r4, r1
 800c24a:	d454      	bmi.n	800c2f6 <__sflush_r+0xba>
 800c24c:	684b      	ldr	r3, [r1, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	dc02      	bgt.n	800c258 <__sflush_r+0x1c>
 800c252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c254:	2b00      	cmp	r3, #0
 800c256:	dd48      	ble.n	800c2ea <__sflush_r+0xae>
 800c258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c25a:	2e00      	cmp	r6, #0
 800c25c:	d045      	beq.n	800c2ea <__sflush_r+0xae>
 800c25e:	2300      	movs	r3, #0
 800c260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c264:	682f      	ldr	r7, [r5, #0]
 800c266:	6a21      	ldr	r1, [r4, #32]
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	d030      	beq.n	800c2ce <__sflush_r+0x92>
 800c26c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	0759      	lsls	r1, r3, #29
 800c272:	d505      	bpl.n	800c280 <__sflush_r+0x44>
 800c274:	6863      	ldr	r3, [r4, #4]
 800c276:	1ad2      	subs	r2, r2, r3
 800c278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c27a:	b10b      	cbz	r3, 800c280 <__sflush_r+0x44>
 800c27c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	2300      	movs	r3, #0
 800c282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c284:	6a21      	ldr	r1, [r4, #32]
 800c286:	4628      	mov	r0, r5
 800c288:	47b0      	blx	r6
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	d106      	bne.n	800c29e <__sflush_r+0x62>
 800c290:	6829      	ldr	r1, [r5, #0]
 800c292:	291d      	cmp	r1, #29
 800c294:	d82b      	bhi.n	800c2ee <__sflush_r+0xb2>
 800c296:	4a2a      	ldr	r2, [pc, #168]	@ (800c340 <__sflush_r+0x104>)
 800c298:	40ca      	lsrs	r2, r1
 800c29a:	07d6      	lsls	r6, r2, #31
 800c29c:	d527      	bpl.n	800c2ee <__sflush_r+0xb2>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	6062      	str	r2, [r4, #4]
 800c2a2:	04d9      	lsls	r1, r3, #19
 800c2a4:	6922      	ldr	r2, [r4, #16]
 800c2a6:	6022      	str	r2, [r4, #0]
 800c2a8:	d504      	bpl.n	800c2b4 <__sflush_r+0x78>
 800c2aa:	1c42      	adds	r2, r0, #1
 800c2ac:	d101      	bne.n	800c2b2 <__sflush_r+0x76>
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	b903      	cbnz	r3, 800c2b4 <__sflush_r+0x78>
 800c2b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2b6:	602f      	str	r7, [r5, #0]
 800c2b8:	b1b9      	cbz	r1, 800c2ea <__sflush_r+0xae>
 800c2ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2be:	4299      	cmp	r1, r3
 800c2c0:	d002      	beq.n	800c2c8 <__sflush_r+0x8c>
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f7ff f9e8 	bl	800b698 <_free_r>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2cc:	e00d      	b.n	800c2ea <__sflush_r+0xae>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	47b0      	blx	r6
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	1c50      	adds	r0, r2, #1
 800c2d8:	d1c9      	bne.n	800c26e <__sflush_r+0x32>
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0c6      	beq.n	800c26e <__sflush_r+0x32>
 800c2e0:	2b1d      	cmp	r3, #29
 800c2e2:	d001      	beq.n	800c2e8 <__sflush_r+0xac>
 800c2e4:	2b16      	cmp	r3, #22
 800c2e6:	d11e      	bne.n	800c326 <__sflush_r+0xea>
 800c2e8:	602f      	str	r7, [r5, #0]
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	e022      	b.n	800c334 <__sflush_r+0xf8>
 800c2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2f2:	b21b      	sxth	r3, r3
 800c2f4:	e01b      	b.n	800c32e <__sflush_r+0xf2>
 800c2f6:	690f      	ldr	r7, [r1, #16]
 800c2f8:	2f00      	cmp	r7, #0
 800c2fa:	d0f6      	beq.n	800c2ea <__sflush_r+0xae>
 800c2fc:	0793      	lsls	r3, r2, #30
 800c2fe:	680e      	ldr	r6, [r1, #0]
 800c300:	bf08      	it	eq
 800c302:	694b      	ldreq	r3, [r1, #20]
 800c304:	600f      	str	r7, [r1, #0]
 800c306:	bf18      	it	ne
 800c308:	2300      	movne	r3, #0
 800c30a:	eba6 0807 	sub.w	r8, r6, r7
 800c30e:	608b      	str	r3, [r1, #8]
 800c310:	f1b8 0f00 	cmp.w	r8, #0
 800c314:	dde9      	ble.n	800c2ea <__sflush_r+0xae>
 800c316:	6a21      	ldr	r1, [r4, #32]
 800c318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c31a:	4643      	mov	r3, r8
 800c31c:	463a      	mov	r2, r7
 800c31e:	4628      	mov	r0, r5
 800c320:	47b0      	blx	r6
 800c322:	2800      	cmp	r0, #0
 800c324:	dc08      	bgt.n	800c338 <__sflush_r+0xfc>
 800c326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c32a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c32e:	81a3      	strh	r3, [r4, #12]
 800c330:	f04f 30ff 	mov.w	r0, #4294967295
 800c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c338:	4407      	add	r7, r0
 800c33a:	eba8 0800 	sub.w	r8, r8, r0
 800c33e:	e7e7      	b.n	800c310 <__sflush_r+0xd4>
 800c340:	20400001 	.word	0x20400001

0800c344 <_fflush_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	690b      	ldr	r3, [r1, #16]
 800c348:	4605      	mov	r5, r0
 800c34a:	460c      	mov	r4, r1
 800c34c:	b913      	cbnz	r3, 800c354 <_fflush_r+0x10>
 800c34e:	2500      	movs	r5, #0
 800c350:	4628      	mov	r0, r5
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	b118      	cbz	r0, 800c35e <_fflush_r+0x1a>
 800c356:	6a03      	ldr	r3, [r0, #32]
 800c358:	b90b      	cbnz	r3, 800c35e <_fflush_r+0x1a>
 800c35a:	f7fe fa15 	bl	800a788 <__sinit>
 800c35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f3      	beq.n	800c34e <_fflush_r+0xa>
 800c366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c368:	07d0      	lsls	r0, r2, #31
 800c36a:	d404      	bmi.n	800c376 <_fflush_r+0x32>
 800c36c:	0599      	lsls	r1, r3, #22
 800c36e:	d402      	bmi.n	800c376 <_fflush_r+0x32>
 800c370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c372:	f7fe fb36 	bl	800a9e2 <__retarget_lock_acquire_recursive>
 800c376:	4628      	mov	r0, r5
 800c378:	4621      	mov	r1, r4
 800c37a:	f7ff ff5f 	bl	800c23c <__sflush_r>
 800c37e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c380:	07da      	lsls	r2, r3, #31
 800c382:	4605      	mov	r5, r0
 800c384:	d4e4      	bmi.n	800c350 <_fflush_r+0xc>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	059b      	lsls	r3, r3, #22
 800c38a:	d4e1      	bmi.n	800c350 <_fflush_r+0xc>
 800c38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c38e:	f7fe fb29 	bl	800a9e4 <__retarget_lock_release_recursive>
 800c392:	e7dd      	b.n	800c350 <_fflush_r+0xc>

0800c394 <memmove>:
 800c394:	4288      	cmp	r0, r1
 800c396:	b510      	push	{r4, lr}
 800c398:	eb01 0402 	add.w	r4, r1, r2
 800c39c:	d902      	bls.n	800c3a4 <memmove+0x10>
 800c39e:	4284      	cmp	r4, r0
 800c3a0:	4623      	mov	r3, r4
 800c3a2:	d807      	bhi.n	800c3b4 <memmove+0x20>
 800c3a4:	1e43      	subs	r3, r0, #1
 800c3a6:	42a1      	cmp	r1, r4
 800c3a8:	d008      	beq.n	800c3bc <memmove+0x28>
 800c3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3b2:	e7f8      	b.n	800c3a6 <memmove+0x12>
 800c3b4:	4402      	add	r2, r0
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	428a      	cmp	r2, r1
 800c3ba:	d100      	bne.n	800c3be <memmove+0x2a>
 800c3bc:	bd10      	pop	{r4, pc}
 800c3be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3c6:	e7f7      	b.n	800c3b8 <memmove+0x24>

0800c3c8 <_sbrk_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d06      	ldr	r5, [pc, #24]	@ (800c3e4 <_sbrk_r+0x1c>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	602b      	str	r3, [r5, #0]
 800c3d4:	f7f7 f8a0 	bl	8003518 <_sbrk>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d102      	bne.n	800c3e2 <_sbrk_r+0x1a>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b103      	cbz	r3, 800c3e2 <_sbrk_r+0x1a>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	200006f4 	.word	0x200006f4

0800c3e8 <memcpy>:
 800c3e8:	440a      	add	r2, r1
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f0:	d100      	bne.n	800c3f4 <memcpy+0xc>
 800c3f2:	4770      	bx	lr
 800c3f4:	b510      	push	{r4, lr}
 800c3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3fe:	4291      	cmp	r1, r2
 800c400:	d1f9      	bne.n	800c3f6 <memcpy+0xe>
 800c402:	bd10      	pop	{r4, pc}

0800c404 <__assert_func>:
 800c404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c406:	4614      	mov	r4, r2
 800c408:	461a      	mov	r2, r3
 800c40a:	4b09      	ldr	r3, [pc, #36]	@ (800c430 <__assert_func+0x2c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4605      	mov	r5, r0
 800c410:	68d8      	ldr	r0, [r3, #12]
 800c412:	b14c      	cbz	r4, 800c428 <__assert_func+0x24>
 800c414:	4b07      	ldr	r3, [pc, #28]	@ (800c434 <__assert_func+0x30>)
 800c416:	9100      	str	r1, [sp, #0]
 800c418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c41c:	4906      	ldr	r1, [pc, #24]	@ (800c438 <__assert_func+0x34>)
 800c41e:	462b      	mov	r3, r5
 800c420:	f000 f870 	bl	800c504 <fiprintf>
 800c424:	f000 f880 	bl	800c528 <abort>
 800c428:	4b04      	ldr	r3, [pc, #16]	@ (800c43c <__assert_func+0x38>)
 800c42a:	461c      	mov	r4, r3
 800c42c:	e7f3      	b.n	800c416 <__assert_func+0x12>
 800c42e:	bf00      	nop
 800c430:	2000001c 	.word	0x2000001c
 800c434:	0800d131 	.word	0x0800d131
 800c438:	0800d13e 	.word	0x0800d13e
 800c43c:	0800d16c 	.word	0x0800d16c

0800c440 <_calloc_r>:
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	fba1 5402 	umull	r5, r4, r1, r2
 800c446:	b934      	cbnz	r4, 800c456 <_calloc_r+0x16>
 800c448:	4629      	mov	r1, r5
 800c44a:	f7ff f999 	bl	800b780 <_malloc_r>
 800c44e:	4606      	mov	r6, r0
 800c450:	b928      	cbnz	r0, 800c45e <_calloc_r+0x1e>
 800c452:	4630      	mov	r0, r6
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	220c      	movs	r2, #12
 800c458:	6002      	str	r2, [r0, #0]
 800c45a:	2600      	movs	r6, #0
 800c45c:	e7f9      	b.n	800c452 <_calloc_r+0x12>
 800c45e:	462a      	mov	r2, r5
 800c460:	4621      	mov	r1, r4
 800c462:	f7fe fa40 	bl	800a8e6 <memset>
 800c466:	e7f4      	b.n	800c452 <_calloc_r+0x12>

0800c468 <__ascii_mbtowc>:
 800c468:	b082      	sub	sp, #8
 800c46a:	b901      	cbnz	r1, 800c46e <__ascii_mbtowc+0x6>
 800c46c:	a901      	add	r1, sp, #4
 800c46e:	b142      	cbz	r2, 800c482 <__ascii_mbtowc+0x1a>
 800c470:	b14b      	cbz	r3, 800c486 <__ascii_mbtowc+0x1e>
 800c472:	7813      	ldrb	r3, [r2, #0]
 800c474:	600b      	str	r3, [r1, #0]
 800c476:	7812      	ldrb	r2, [r2, #0]
 800c478:	1e10      	subs	r0, r2, #0
 800c47a:	bf18      	it	ne
 800c47c:	2001      	movne	r0, #1
 800c47e:	b002      	add	sp, #8
 800c480:	4770      	bx	lr
 800c482:	4610      	mov	r0, r2
 800c484:	e7fb      	b.n	800c47e <__ascii_mbtowc+0x16>
 800c486:	f06f 0001 	mvn.w	r0, #1
 800c48a:	e7f8      	b.n	800c47e <__ascii_mbtowc+0x16>

0800c48c <_realloc_r>:
 800c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	4607      	mov	r7, r0
 800c492:	4614      	mov	r4, r2
 800c494:	460d      	mov	r5, r1
 800c496:	b921      	cbnz	r1, 800c4a2 <_realloc_r+0x16>
 800c498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c49c:	4611      	mov	r1, r2
 800c49e:	f7ff b96f 	b.w	800b780 <_malloc_r>
 800c4a2:	b92a      	cbnz	r2, 800c4b0 <_realloc_r+0x24>
 800c4a4:	f7ff f8f8 	bl	800b698 <_free_r>
 800c4a8:	4625      	mov	r5, r4
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b0:	f000 f841 	bl	800c536 <_malloc_usable_size_r>
 800c4b4:	4284      	cmp	r4, r0
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	d802      	bhi.n	800c4c0 <_realloc_r+0x34>
 800c4ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4be:	d8f4      	bhi.n	800c4aa <_realloc_r+0x1e>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	f7ff f95c 	bl	800b780 <_malloc_r>
 800c4c8:	4680      	mov	r8, r0
 800c4ca:	b908      	cbnz	r0, 800c4d0 <_realloc_r+0x44>
 800c4cc:	4645      	mov	r5, r8
 800c4ce:	e7ec      	b.n	800c4aa <_realloc_r+0x1e>
 800c4d0:	42b4      	cmp	r4, r6
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	bf28      	it	cs
 800c4d8:	4632      	movcs	r2, r6
 800c4da:	f7ff ff85 	bl	800c3e8 <memcpy>
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f7ff f8d9 	bl	800b698 <_free_r>
 800c4e6:	e7f1      	b.n	800c4cc <_realloc_r+0x40>

0800c4e8 <__ascii_wctomb>:
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	b141      	cbz	r1, 800c500 <__ascii_wctomb+0x18>
 800c4ee:	2aff      	cmp	r2, #255	@ 0xff
 800c4f0:	d904      	bls.n	800c4fc <__ascii_wctomb+0x14>
 800c4f2:	228a      	movs	r2, #138	@ 0x8a
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fa:	4770      	bx	lr
 800c4fc:	700a      	strb	r2, [r1, #0]
 800c4fe:	2001      	movs	r0, #1
 800c500:	4770      	bx	lr
	...

0800c504 <fiprintf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	b503      	push	{r0, r1, lr}
 800c508:	4601      	mov	r1, r0
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	4805      	ldr	r0, [pc, #20]	@ (800c524 <fiprintf+0x20>)
 800c50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c512:	6800      	ldr	r0, [r0, #0]
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	f000 f83f 	bl	800c598 <_vfiprintf_r>
 800c51a:	b002      	add	sp, #8
 800c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c520:	b003      	add	sp, #12
 800c522:	4770      	bx	lr
 800c524:	2000001c 	.word	0x2000001c

0800c528 <abort>:
 800c528:	b508      	push	{r3, lr}
 800c52a:	2006      	movs	r0, #6
 800c52c:	f000 fa08 	bl	800c940 <raise>
 800c530:	2001      	movs	r0, #1
 800c532:	f7f6 ff79 	bl	8003428 <_exit>

0800c536 <_malloc_usable_size_r>:
 800c536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c53a:	1f18      	subs	r0, r3, #4
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bfbc      	itt	lt
 800c540:	580b      	ldrlt	r3, [r1, r0]
 800c542:	18c0      	addlt	r0, r0, r3
 800c544:	4770      	bx	lr

0800c546 <__sfputc_r>:
 800c546:	6893      	ldr	r3, [r2, #8]
 800c548:	3b01      	subs	r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	b410      	push	{r4}
 800c54e:	6093      	str	r3, [r2, #8]
 800c550:	da08      	bge.n	800c564 <__sfputc_r+0x1e>
 800c552:	6994      	ldr	r4, [r2, #24]
 800c554:	42a3      	cmp	r3, r4
 800c556:	db01      	blt.n	800c55c <__sfputc_r+0x16>
 800c558:	290a      	cmp	r1, #10
 800c55a:	d103      	bne.n	800c564 <__sfputc_r+0x1e>
 800c55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c560:	f000 b932 	b.w	800c7c8 <__swbuf_r>
 800c564:	6813      	ldr	r3, [r2, #0]
 800c566:	1c58      	adds	r0, r3, #1
 800c568:	6010      	str	r0, [r2, #0]
 800c56a:	7019      	strb	r1, [r3, #0]
 800c56c:	4608      	mov	r0, r1
 800c56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <__sfputs_r>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	4606      	mov	r6, r0
 800c578:	460f      	mov	r7, r1
 800c57a:	4614      	mov	r4, r2
 800c57c:	18d5      	adds	r5, r2, r3
 800c57e:	42ac      	cmp	r4, r5
 800c580:	d101      	bne.n	800c586 <__sfputs_r+0x12>
 800c582:	2000      	movs	r0, #0
 800c584:	e007      	b.n	800c596 <__sfputs_r+0x22>
 800c586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c58a:	463a      	mov	r2, r7
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7ff ffda 	bl	800c546 <__sfputc_r>
 800c592:	1c43      	adds	r3, r0, #1
 800c594:	d1f3      	bne.n	800c57e <__sfputs_r+0xa>
 800c596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c598 <_vfiprintf_r>:
 800c598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	460d      	mov	r5, r1
 800c59e:	b09d      	sub	sp, #116	@ 0x74
 800c5a0:	4614      	mov	r4, r2
 800c5a2:	4698      	mov	r8, r3
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	b118      	cbz	r0, 800c5b0 <_vfiprintf_r+0x18>
 800c5a8:	6a03      	ldr	r3, [r0, #32]
 800c5aa:	b90b      	cbnz	r3, 800c5b0 <_vfiprintf_r+0x18>
 800c5ac:	f7fe f8ec 	bl	800a788 <__sinit>
 800c5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5b2:	07d9      	lsls	r1, r3, #31
 800c5b4:	d405      	bmi.n	800c5c2 <_vfiprintf_r+0x2a>
 800c5b6:	89ab      	ldrh	r3, [r5, #12]
 800c5b8:	059a      	lsls	r2, r3, #22
 800c5ba:	d402      	bmi.n	800c5c2 <_vfiprintf_r+0x2a>
 800c5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5be:	f7fe fa10 	bl	800a9e2 <__retarget_lock_acquire_recursive>
 800c5c2:	89ab      	ldrh	r3, [r5, #12]
 800c5c4:	071b      	lsls	r3, r3, #28
 800c5c6:	d501      	bpl.n	800c5cc <_vfiprintf_r+0x34>
 800c5c8:	692b      	ldr	r3, [r5, #16]
 800c5ca:	b99b      	cbnz	r3, 800c5f4 <_vfiprintf_r+0x5c>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f000 f938 	bl	800c844 <__swsetup_r>
 800c5d4:	b170      	cbz	r0, 800c5f4 <_vfiprintf_r+0x5c>
 800c5d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5d8:	07dc      	lsls	r4, r3, #31
 800c5da:	d504      	bpl.n	800c5e6 <_vfiprintf_r+0x4e>
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e0:	b01d      	add	sp, #116	@ 0x74
 800c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e6:	89ab      	ldrh	r3, [r5, #12]
 800c5e8:	0598      	lsls	r0, r3, #22
 800c5ea:	d4f7      	bmi.n	800c5dc <_vfiprintf_r+0x44>
 800c5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ee:	f7fe f9f9 	bl	800a9e4 <__retarget_lock_release_recursive>
 800c5f2:	e7f3      	b.n	800c5dc <_vfiprintf_r+0x44>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f8:	2320      	movs	r3, #32
 800c5fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c602:	2330      	movs	r3, #48	@ 0x30
 800c604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7b4 <_vfiprintf_r+0x21c>
 800c608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c60c:	f04f 0901 	mov.w	r9, #1
 800c610:	4623      	mov	r3, r4
 800c612:	469a      	mov	sl, r3
 800c614:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c618:	b10a      	cbz	r2, 800c61e <_vfiprintf_r+0x86>
 800c61a:	2a25      	cmp	r2, #37	@ 0x25
 800c61c:	d1f9      	bne.n	800c612 <_vfiprintf_r+0x7a>
 800c61e:	ebba 0b04 	subs.w	fp, sl, r4
 800c622:	d00b      	beq.n	800c63c <_vfiprintf_r+0xa4>
 800c624:	465b      	mov	r3, fp
 800c626:	4622      	mov	r2, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ffa2 	bl	800c574 <__sfputs_r>
 800c630:	3001      	adds	r0, #1
 800c632:	f000 80a7 	beq.w	800c784 <_vfiprintf_r+0x1ec>
 800c636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c638:	445a      	add	r2, fp
 800c63a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c63c:	f89a 3000 	ldrb.w	r3, [sl]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 809f 	beq.w	800c784 <_vfiprintf_r+0x1ec>
 800c646:	2300      	movs	r3, #0
 800c648:	f04f 32ff 	mov.w	r2, #4294967295
 800c64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c650:	f10a 0a01 	add.w	sl, sl, #1
 800c654:	9304      	str	r3, [sp, #16]
 800c656:	9307      	str	r3, [sp, #28]
 800c658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c65c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c65e:	4654      	mov	r4, sl
 800c660:	2205      	movs	r2, #5
 800c662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c666:	4853      	ldr	r0, [pc, #332]	@ (800c7b4 <_vfiprintf_r+0x21c>)
 800c668:	f7f3 fdb2 	bl	80001d0 <memchr>
 800c66c:	9a04      	ldr	r2, [sp, #16]
 800c66e:	b9d8      	cbnz	r0, 800c6a8 <_vfiprintf_r+0x110>
 800c670:	06d1      	lsls	r1, r2, #27
 800c672:	bf44      	itt	mi
 800c674:	2320      	movmi	r3, #32
 800c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c67a:	0713      	lsls	r3, r2, #28
 800c67c:	bf44      	itt	mi
 800c67e:	232b      	movmi	r3, #43	@ 0x2b
 800c680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c684:	f89a 3000 	ldrb.w	r3, [sl]
 800c688:	2b2a      	cmp	r3, #42	@ 0x2a
 800c68a:	d015      	beq.n	800c6b8 <_vfiprintf_r+0x120>
 800c68c:	9a07      	ldr	r2, [sp, #28]
 800c68e:	4654      	mov	r4, sl
 800c690:	2000      	movs	r0, #0
 800c692:	f04f 0c0a 	mov.w	ip, #10
 800c696:	4621      	mov	r1, r4
 800c698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69c:	3b30      	subs	r3, #48	@ 0x30
 800c69e:	2b09      	cmp	r3, #9
 800c6a0:	d94b      	bls.n	800c73a <_vfiprintf_r+0x1a2>
 800c6a2:	b1b0      	cbz	r0, 800c6d2 <_vfiprintf_r+0x13a>
 800c6a4:	9207      	str	r2, [sp, #28]
 800c6a6:	e014      	b.n	800c6d2 <_vfiprintf_r+0x13a>
 800c6a8:	eba0 0308 	sub.w	r3, r0, r8
 800c6ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	9304      	str	r3, [sp, #16]
 800c6b4:	46a2      	mov	sl, r4
 800c6b6:	e7d2      	b.n	800c65e <_vfiprintf_r+0xc6>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	1d19      	adds	r1, r3, #4
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	9103      	str	r1, [sp, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfbb      	ittet	lt
 800c6c4:	425b      	neglt	r3, r3
 800c6c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ca:	9307      	strge	r3, [sp, #28]
 800c6cc:	9307      	strlt	r3, [sp, #28]
 800c6ce:	bfb8      	it	lt
 800c6d0:	9204      	strlt	r2, [sp, #16]
 800c6d2:	7823      	ldrb	r3, [r4, #0]
 800c6d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d6:	d10a      	bne.n	800c6ee <_vfiprintf_r+0x156>
 800c6d8:	7863      	ldrb	r3, [r4, #1]
 800c6da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6dc:	d132      	bne.n	800c744 <_vfiprintf_r+0x1ac>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	1d1a      	adds	r2, r3, #4
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	9203      	str	r2, [sp, #12]
 800c6e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6ea:	3402      	adds	r4, #2
 800c6ec:	9305      	str	r3, [sp, #20]
 800c6ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7c4 <_vfiprintf_r+0x22c>
 800c6f2:	7821      	ldrb	r1, [r4, #0]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	f7f3 fd6a 	bl	80001d0 <memchr>
 800c6fc:	b138      	cbz	r0, 800c70e <_vfiprintf_r+0x176>
 800c6fe:	9b04      	ldr	r3, [sp, #16]
 800c700:	eba0 000a 	sub.w	r0, r0, sl
 800c704:	2240      	movs	r2, #64	@ 0x40
 800c706:	4082      	lsls	r2, r0
 800c708:	4313      	orrs	r3, r2
 800c70a:	3401      	adds	r4, #1
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c712:	4829      	ldr	r0, [pc, #164]	@ (800c7b8 <_vfiprintf_r+0x220>)
 800c714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c718:	2206      	movs	r2, #6
 800c71a:	f7f3 fd59 	bl	80001d0 <memchr>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d03f      	beq.n	800c7a2 <_vfiprintf_r+0x20a>
 800c722:	4b26      	ldr	r3, [pc, #152]	@ (800c7bc <_vfiprintf_r+0x224>)
 800c724:	bb1b      	cbnz	r3, 800c76e <_vfiprintf_r+0x1d6>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	3307      	adds	r3, #7
 800c72a:	f023 0307 	bic.w	r3, r3, #7
 800c72e:	3308      	adds	r3, #8
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c734:	443b      	add	r3, r7
 800c736:	9309      	str	r3, [sp, #36]	@ 0x24
 800c738:	e76a      	b.n	800c610 <_vfiprintf_r+0x78>
 800c73a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73e:	460c      	mov	r4, r1
 800c740:	2001      	movs	r0, #1
 800c742:	e7a8      	b.n	800c696 <_vfiprintf_r+0xfe>
 800c744:	2300      	movs	r3, #0
 800c746:	3401      	adds	r4, #1
 800c748:	9305      	str	r3, [sp, #20]
 800c74a:	4619      	mov	r1, r3
 800c74c:	f04f 0c0a 	mov.w	ip, #10
 800c750:	4620      	mov	r0, r4
 800c752:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c756:	3a30      	subs	r2, #48	@ 0x30
 800c758:	2a09      	cmp	r2, #9
 800c75a:	d903      	bls.n	800c764 <_vfiprintf_r+0x1cc>
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0c6      	beq.n	800c6ee <_vfiprintf_r+0x156>
 800c760:	9105      	str	r1, [sp, #20]
 800c762:	e7c4      	b.n	800c6ee <_vfiprintf_r+0x156>
 800c764:	fb0c 2101 	mla	r1, ip, r1, r2
 800c768:	4604      	mov	r4, r0
 800c76a:	2301      	movs	r3, #1
 800c76c:	e7f0      	b.n	800c750 <_vfiprintf_r+0x1b8>
 800c76e:	ab03      	add	r3, sp, #12
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	462a      	mov	r2, r5
 800c774:	4b12      	ldr	r3, [pc, #72]	@ (800c7c0 <_vfiprintf_r+0x228>)
 800c776:	a904      	add	r1, sp, #16
 800c778:	4630      	mov	r0, r6
 800c77a:	f7fd fbc3 	bl	8009f04 <_printf_float>
 800c77e:	4607      	mov	r7, r0
 800c780:	1c78      	adds	r0, r7, #1
 800c782:	d1d6      	bne.n	800c732 <_vfiprintf_r+0x19a>
 800c784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c786:	07d9      	lsls	r1, r3, #31
 800c788:	d405      	bmi.n	800c796 <_vfiprintf_r+0x1fe>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	059a      	lsls	r2, r3, #22
 800c78e:	d402      	bmi.n	800c796 <_vfiprintf_r+0x1fe>
 800c790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c792:	f7fe f927 	bl	800a9e4 <__retarget_lock_release_recursive>
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	065b      	lsls	r3, r3, #25
 800c79a:	f53f af1f 	bmi.w	800c5dc <_vfiprintf_r+0x44>
 800c79e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7a0:	e71e      	b.n	800c5e0 <_vfiprintf_r+0x48>
 800c7a2:	ab03      	add	r3, sp, #12
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4b05      	ldr	r3, [pc, #20]	@ (800c7c0 <_vfiprintf_r+0x228>)
 800c7aa:	a904      	add	r1, sp, #16
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f7fd fe41 	bl	800a434 <_printf_i>
 800c7b2:	e7e4      	b.n	800c77e <_vfiprintf_r+0x1e6>
 800c7b4:	0800d116 	.word	0x0800d116
 800c7b8:	0800d120 	.word	0x0800d120
 800c7bc:	08009f05 	.word	0x08009f05
 800c7c0:	0800c575 	.word	0x0800c575
 800c7c4:	0800d11c 	.word	0x0800d11c

0800c7c8 <__swbuf_r>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	460e      	mov	r6, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	b118      	cbz	r0, 800c7da <__swbuf_r+0x12>
 800c7d2:	6a03      	ldr	r3, [r0, #32]
 800c7d4:	b90b      	cbnz	r3, 800c7da <__swbuf_r+0x12>
 800c7d6:	f7fd ffd7 	bl	800a788 <__sinit>
 800c7da:	69a3      	ldr	r3, [r4, #24]
 800c7dc:	60a3      	str	r3, [r4, #8]
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	071a      	lsls	r2, r3, #28
 800c7e2:	d501      	bpl.n	800c7e8 <__swbuf_r+0x20>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	b943      	cbnz	r3, 800c7fa <__swbuf_r+0x32>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 f82a 	bl	800c844 <__swsetup_r>
 800c7f0:	b118      	cbz	r0, 800c7fa <__swbuf_r+0x32>
 800c7f2:	f04f 37ff 	mov.w	r7, #4294967295
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	6922      	ldr	r2, [r4, #16]
 800c7fe:	1a98      	subs	r0, r3, r2
 800c800:	6963      	ldr	r3, [r4, #20]
 800c802:	b2f6      	uxtb	r6, r6
 800c804:	4283      	cmp	r3, r0
 800c806:	4637      	mov	r7, r6
 800c808:	dc05      	bgt.n	800c816 <__swbuf_r+0x4e>
 800c80a:	4621      	mov	r1, r4
 800c80c:	4628      	mov	r0, r5
 800c80e:	f7ff fd99 	bl	800c344 <_fflush_r>
 800c812:	2800      	cmp	r0, #0
 800c814:	d1ed      	bne.n	800c7f2 <__swbuf_r+0x2a>
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	3b01      	subs	r3, #1
 800c81a:	60a3      	str	r3, [r4, #8]
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	6022      	str	r2, [r4, #0]
 800c822:	701e      	strb	r6, [r3, #0]
 800c824:	6962      	ldr	r2, [r4, #20]
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	429a      	cmp	r2, r3
 800c82a:	d004      	beq.n	800c836 <__swbuf_r+0x6e>
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	07db      	lsls	r3, r3, #31
 800c830:	d5e1      	bpl.n	800c7f6 <__swbuf_r+0x2e>
 800c832:	2e0a      	cmp	r6, #10
 800c834:	d1df      	bne.n	800c7f6 <__swbuf_r+0x2e>
 800c836:	4621      	mov	r1, r4
 800c838:	4628      	mov	r0, r5
 800c83a:	f7ff fd83 	bl	800c344 <_fflush_r>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d0d9      	beq.n	800c7f6 <__swbuf_r+0x2e>
 800c842:	e7d6      	b.n	800c7f2 <__swbuf_r+0x2a>

0800c844 <__swsetup_r>:
 800c844:	b538      	push	{r3, r4, r5, lr}
 800c846:	4b29      	ldr	r3, [pc, #164]	@ (800c8ec <__swsetup_r+0xa8>)
 800c848:	4605      	mov	r5, r0
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	460c      	mov	r4, r1
 800c84e:	b118      	cbz	r0, 800c858 <__swsetup_r+0x14>
 800c850:	6a03      	ldr	r3, [r0, #32]
 800c852:	b90b      	cbnz	r3, 800c858 <__swsetup_r+0x14>
 800c854:	f7fd ff98 	bl	800a788 <__sinit>
 800c858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c85c:	0719      	lsls	r1, r3, #28
 800c85e:	d422      	bmi.n	800c8a6 <__swsetup_r+0x62>
 800c860:	06da      	lsls	r2, r3, #27
 800c862:	d407      	bmi.n	800c874 <__swsetup_r+0x30>
 800c864:	2209      	movs	r2, #9
 800c866:	602a      	str	r2, [r5, #0]
 800c868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	f04f 30ff 	mov.w	r0, #4294967295
 800c872:	e033      	b.n	800c8dc <__swsetup_r+0x98>
 800c874:	0758      	lsls	r0, r3, #29
 800c876:	d512      	bpl.n	800c89e <__swsetup_r+0x5a>
 800c878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c87a:	b141      	cbz	r1, 800c88e <__swsetup_r+0x4a>
 800c87c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c880:	4299      	cmp	r1, r3
 800c882:	d002      	beq.n	800c88a <__swsetup_r+0x46>
 800c884:	4628      	mov	r0, r5
 800c886:	f7fe ff07 	bl	800b698 <_free_r>
 800c88a:	2300      	movs	r3, #0
 800c88c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c894:	81a3      	strh	r3, [r4, #12]
 800c896:	2300      	movs	r3, #0
 800c898:	6063      	str	r3, [r4, #4]
 800c89a:	6923      	ldr	r3, [r4, #16]
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	f043 0308 	orr.w	r3, r3, #8
 800c8a4:	81a3      	strh	r3, [r4, #12]
 800c8a6:	6923      	ldr	r3, [r4, #16]
 800c8a8:	b94b      	cbnz	r3, 800c8be <__swsetup_r+0x7a>
 800c8aa:	89a3      	ldrh	r3, [r4, #12]
 800c8ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8b4:	d003      	beq.n	800c8be <__swsetup_r+0x7a>
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f000 f883 	bl	800c9c4 <__smakebuf_r>
 800c8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c2:	f013 0201 	ands.w	r2, r3, #1
 800c8c6:	d00a      	beq.n	800c8de <__swsetup_r+0x9a>
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	60a2      	str	r2, [r4, #8]
 800c8cc:	6962      	ldr	r2, [r4, #20]
 800c8ce:	4252      	negs	r2, r2
 800c8d0:	61a2      	str	r2, [r4, #24]
 800c8d2:	6922      	ldr	r2, [r4, #16]
 800c8d4:	b942      	cbnz	r2, 800c8e8 <__swsetup_r+0xa4>
 800c8d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c8da:	d1c5      	bne.n	800c868 <__swsetup_r+0x24>
 800c8dc:	bd38      	pop	{r3, r4, r5, pc}
 800c8de:	0799      	lsls	r1, r3, #30
 800c8e0:	bf58      	it	pl
 800c8e2:	6962      	ldrpl	r2, [r4, #20]
 800c8e4:	60a2      	str	r2, [r4, #8]
 800c8e6:	e7f4      	b.n	800c8d2 <__swsetup_r+0x8e>
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e7f7      	b.n	800c8dc <__swsetup_r+0x98>
 800c8ec:	2000001c 	.word	0x2000001c

0800c8f0 <_raise_r>:
 800c8f0:	291f      	cmp	r1, #31
 800c8f2:	b538      	push	{r3, r4, r5, lr}
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	d904      	bls.n	800c904 <_raise_r+0x14>
 800c8fa:	2316      	movs	r3, #22
 800c8fc:	6003      	str	r3, [r0, #0]
 800c8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c906:	b112      	cbz	r2, 800c90e <_raise_r+0x1e>
 800c908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c90c:	b94b      	cbnz	r3, 800c922 <_raise_r+0x32>
 800c90e:	4628      	mov	r0, r5
 800c910:	f000 f830 	bl	800c974 <_getpid_r>
 800c914:	4622      	mov	r2, r4
 800c916:	4601      	mov	r1, r0
 800c918:	4628      	mov	r0, r5
 800c91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c91e:	f000 b817 	b.w	800c950 <_kill_r>
 800c922:	2b01      	cmp	r3, #1
 800c924:	d00a      	beq.n	800c93c <_raise_r+0x4c>
 800c926:	1c59      	adds	r1, r3, #1
 800c928:	d103      	bne.n	800c932 <_raise_r+0x42>
 800c92a:	2316      	movs	r3, #22
 800c92c:	6003      	str	r3, [r0, #0]
 800c92e:	2001      	movs	r0, #1
 800c930:	e7e7      	b.n	800c902 <_raise_r+0x12>
 800c932:	2100      	movs	r1, #0
 800c934:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c938:	4620      	mov	r0, r4
 800c93a:	4798      	blx	r3
 800c93c:	2000      	movs	r0, #0
 800c93e:	e7e0      	b.n	800c902 <_raise_r+0x12>

0800c940 <raise>:
 800c940:	4b02      	ldr	r3, [pc, #8]	@ (800c94c <raise+0xc>)
 800c942:	4601      	mov	r1, r0
 800c944:	6818      	ldr	r0, [r3, #0]
 800c946:	f7ff bfd3 	b.w	800c8f0 <_raise_r>
 800c94a:	bf00      	nop
 800c94c:	2000001c 	.word	0x2000001c

0800c950 <_kill_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	4d07      	ldr	r5, [pc, #28]	@ (800c970 <_kill_r+0x20>)
 800c954:	2300      	movs	r3, #0
 800c956:	4604      	mov	r4, r0
 800c958:	4608      	mov	r0, r1
 800c95a:	4611      	mov	r1, r2
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	f7f6 fd53 	bl	8003408 <_kill>
 800c962:	1c43      	adds	r3, r0, #1
 800c964:	d102      	bne.n	800c96c <_kill_r+0x1c>
 800c966:	682b      	ldr	r3, [r5, #0]
 800c968:	b103      	cbz	r3, 800c96c <_kill_r+0x1c>
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	bd38      	pop	{r3, r4, r5, pc}
 800c96e:	bf00      	nop
 800c970:	200006f4 	.word	0x200006f4

0800c974 <_getpid_r>:
 800c974:	f7f6 bd40 	b.w	80033f8 <_getpid>

0800c978 <__swhatbuf_r>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	460c      	mov	r4, r1
 800c97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c980:	2900      	cmp	r1, #0
 800c982:	b096      	sub	sp, #88	@ 0x58
 800c984:	4615      	mov	r5, r2
 800c986:	461e      	mov	r6, r3
 800c988:	da0d      	bge.n	800c9a6 <__swhatbuf_r+0x2e>
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c990:	f04f 0100 	mov.w	r1, #0
 800c994:	bf14      	ite	ne
 800c996:	2340      	movne	r3, #64	@ 0x40
 800c998:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c99c:	2000      	movs	r0, #0
 800c99e:	6031      	str	r1, [r6, #0]
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	b016      	add	sp, #88	@ 0x58
 800c9a4:	bd70      	pop	{r4, r5, r6, pc}
 800c9a6:	466a      	mov	r2, sp
 800c9a8:	f000 f848 	bl	800ca3c <_fstat_r>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	dbec      	blt.n	800c98a <__swhatbuf_r+0x12>
 800c9b0:	9901      	ldr	r1, [sp, #4]
 800c9b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9ba:	4259      	negs	r1, r3
 800c9bc:	4159      	adcs	r1, r3
 800c9be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9c2:	e7eb      	b.n	800c99c <__swhatbuf_r+0x24>

0800c9c4 <__smakebuf_r>:
 800c9c4:	898b      	ldrh	r3, [r1, #12]
 800c9c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9c8:	079d      	lsls	r5, r3, #30
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	d507      	bpl.n	800c9e0 <__smakebuf_r+0x1c>
 800c9d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9d4:	6023      	str	r3, [r4, #0]
 800c9d6:	6123      	str	r3, [r4, #16]
 800c9d8:	2301      	movs	r3, #1
 800c9da:	6163      	str	r3, [r4, #20]
 800c9dc:	b003      	add	sp, #12
 800c9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9e0:	ab01      	add	r3, sp, #4
 800c9e2:	466a      	mov	r2, sp
 800c9e4:	f7ff ffc8 	bl	800c978 <__swhatbuf_r>
 800c9e8:	9f00      	ldr	r7, [sp, #0]
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	4639      	mov	r1, r7
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7fe fec6 	bl	800b780 <_malloc_r>
 800c9f4:	b948      	cbnz	r0, 800ca0a <__smakebuf_r+0x46>
 800c9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9fa:	059a      	lsls	r2, r3, #22
 800c9fc:	d4ee      	bmi.n	800c9dc <__smakebuf_r+0x18>
 800c9fe:	f023 0303 	bic.w	r3, r3, #3
 800ca02:	f043 0302 	orr.w	r3, r3, #2
 800ca06:	81a3      	strh	r3, [r4, #12]
 800ca08:	e7e2      	b.n	800c9d0 <__smakebuf_r+0xc>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	6020      	str	r0, [r4, #0]
 800ca0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca1a:	b15b      	cbz	r3, 800ca34 <__smakebuf_r+0x70>
 800ca1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca20:	4630      	mov	r0, r6
 800ca22:	f000 f81d 	bl	800ca60 <_isatty_r>
 800ca26:	b128      	cbz	r0, 800ca34 <__smakebuf_r+0x70>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f023 0303 	bic.w	r3, r3, #3
 800ca2e:	f043 0301 	orr.w	r3, r3, #1
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	431d      	orrs	r5, r3
 800ca38:	81a5      	strh	r5, [r4, #12]
 800ca3a:	e7cf      	b.n	800c9dc <__smakebuf_r+0x18>

0800ca3c <_fstat_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	@ (800ca5c <_fstat_r+0x20>)
 800ca40:	2300      	movs	r3, #0
 800ca42:	4604      	mov	r4, r0
 800ca44:	4608      	mov	r0, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	f7f6 fd3d 	bl	80034c8 <_fstat>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	d102      	bne.n	800ca58 <_fstat_r+0x1c>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	b103      	cbz	r3, 800ca58 <_fstat_r+0x1c>
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	bd38      	pop	{r3, r4, r5, pc}
 800ca5a:	bf00      	nop
 800ca5c:	200006f4 	.word	0x200006f4

0800ca60 <_isatty_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d06      	ldr	r5, [pc, #24]	@ (800ca7c <_isatty_r+0x1c>)
 800ca64:	2300      	movs	r3, #0
 800ca66:	4604      	mov	r4, r0
 800ca68:	4608      	mov	r0, r1
 800ca6a:	602b      	str	r3, [r5, #0]
 800ca6c:	f7f6 fd3c 	bl	80034e8 <_isatty>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d102      	bne.n	800ca7a <_isatty_r+0x1a>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	b103      	cbz	r3, 800ca7a <_isatty_r+0x1a>
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	200006f4 	.word	0x200006f4

0800ca80 <_init>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	bf00      	nop
 800ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca86:	bc08      	pop	{r3}
 800ca88:	469e      	mov	lr, r3
 800ca8a:	4770      	bx	lr

0800ca8c <_fini>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr
