
CANOpenNode-STM32F407-Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  0800c968  0800c968  0000d968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d24c  0800d24c  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d24c  0800d24c  0000e24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d254  0800d254  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d254  0800d254  0000e254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d258  0800d258  0000e258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d25c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d8  2**0
                  CONTENTS
 10 .bss          00000528  200001d8  200001d8  0000f1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000700  20000700  0000f1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015383  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cd  00000000  00000000  0002458b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00026d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001018  00000000  00000000  000281b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003656  00000000  00000000  000291d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182ab  00000000  00000000  0002c826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55a6  00000000  00000000  00044ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a077  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000697c  00000000  00000000  0011a0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00120a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c94c 	.word	0x0800c94c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c94c 	.word	0x0800c94c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <print_uart>:
	  uint8_t RxData[8];
CAN_TxHeaderTypeDef TxHeader;
uint8_t TxData[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
uint32_t TxMailbox;

void print_uart(const char *msg) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff f9c7 	bl	8000270 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <print_uart+0x28>)
 8000eee:	f007 feaf 	bl	8008c50 <HAL_UART_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200004bc 	.word	0x200004bc

08000f00 <handle_uart_command>:
#define UART_RX_BUF_SIZE 64
char uart_rx_buf[UART_RX_BUF_SIZE];
volatile uint8_t uart_rx_index = 0;
volatile uint8_t uart_rx_ready = 0;
void handle_uart_command(const char* cmd) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    if (strncmp(cmd, "1", 1) == 0) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <handle_uart_command+0x48>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <handle_uart_command+0x24>
        current_mode = MODE_PS2;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <handle_uart_command+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
        print_uart("✅PS2 Mode\r\n");
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <handle_uart_command+0x50>)
 8000f1e:	f7ff ffd9 	bl	8000ed4 <print_uart>
    } else if (strncmp(cmd, "2",1) == 0) {
        current_mode = MODE_AUTO;
        print_uart("✅AUTO Mode\r\n");
    }
}
 8000f22:	e00c      	b.n	8000f3e <handle_uart_command+0x3e>
    } else if (strncmp(cmd, "2",1) == 0) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <handle_uart_command+0x54>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <handle_uart_command+0x3e>
        current_mode = MODE_AUTO;
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <handle_uart_command+0x4c>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
        print_uart("✅AUTO Mode\r\n");
 8000f38:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <handle_uart_command+0x58>)
 8000f3a:	f7ff ffcb 	bl	8000ed4 <print_uart>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	0800c968 	.word	0x0800c968
 8000f4c:	20000504 	.word	0x20000504
 8000f50:	0800c96c 	.word	0x0800c96c
 8000f54:	0800c97c 	.word	0x0800c97c
 8000f58:	0800c980 	.word	0x0800c980

08000f5c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <HAL_UART_RxCpltCallback+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d134      	bne.n	8000fd8 <HAL_UART_RxCpltCallback+0x7c>
        char received = uart_rx_buf[uart_rx_index];
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x8c>)
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	73fb      	strb	r3, [r7, #15]

        if (received == '\n' || received == '\r') {
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d002      	beq.n	8000f88 <HAL_UART_RxCpltCallback+0x2c>
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b0d      	cmp	r3, #13
 8000f86:	d10d      	bne.n	8000fa4 <HAL_UART_RxCpltCallback+0x48>
            uart_rx_buf[uart_rx_index] = '\0';
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x8c>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	5499      	strb	r1, [r3, r2]
            uart_rx_ready = 1;
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_UART_RxCpltCallback+0x90>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
            uart_rx_index = 0;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e00e      	b.n	8000fc2 <HAL_UART_RxCpltCallback+0x66>
        } else {
            uart_rx_index++;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000fb0:	701a      	strb	r2, [r3, #0]
            if (uart_rx_index >= UART_RX_BUF_SIZE)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fba:	d902      	bls.n	8000fc2 <HAL_UART_RxCpltCallback+0x66>
                uart_rx_index = 0;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart2, (uint8_t *)&uart_rx_buf[uart_rx_index], 1);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_UART_RxCpltCallback+0x88>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x8c>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x94>)
 8000fd4:	f007 fec7 	bl	8008d66 <HAL_UART_Receive_IT>
    }
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	20000574 	.word	0x20000574
 8000fe8:	20000534 	.word	0x20000534
 8000fec:	20000575 	.word	0x20000575
 8000ff0:	200004bc 	.word	0x200004bc

08000ff4 <set_drive_mode>:



void set_drive_mode(uint8_t mode, uint8_t nodeId) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0a4      	sub	sp, #144	@ 0x90
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
    uint32_t txMailbox;
    uint8_t data[8];
    char msg[64];

    // === Gửi NMT Start Node ===
    TxHeader.StdId = 0x000;
 8001004:	2300      	movs	r3, #0
 8001006:	67bb      	str	r3, [r7, #120]	@ 0x78
    TxHeader.IDE = CAN_ID_STD;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    TxHeader.RTR = CAN_RTR_DATA;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    TxHeader.DLC = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    data[0] = 0x01;       // Command: Start remote node
 800101a:	2301      	movs	r3, #1
 800101c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    data[1] = nodeId;     // Node ID
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &txMailbox);
 8001026:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800102a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800102e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001032:	4844      	ldr	r0, [pc, #272]	@ (8001144 <set_drive_mode+0x150>)
 8001034:	f002 fddd 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	@ 0x64
 800103a:	f002 fb2d 	bl	8003698 <HAL_Delay>
    snprintf(msg, sizeof(msg), "🔌 NMT Start sent to Node %d\r\n", nodeId);
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001044:	4a40      	ldr	r2, [pc, #256]	@ (8001148 <set_drive_mode+0x154>)
 8001046:	2140      	movs	r1, #64	@ 0x40
 8001048:	f009 fb36 	bl	800a6b8 <sniprintf>
    print_uart(msg);
 800104c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff3f 	bl	8000ed4 <print_uart>

    // === Set Mode to Velocity (0x6060 = 3) ===
    TxHeader.StdId = 0x600 + nodeId;  // COB-ID for SDO Tx
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800105c:	67bb      	str	r3, [r7, #120]	@ 0x78
    TxHeader.DLC = 8;
 800105e:	2308      	movs	r3, #8
 8001060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint8_t mode_vel[] = {0x2F, 0x60, 0x60, 0x00, mode, 0x00, 0x00, 0x00};
 8001064:	232f      	movs	r3, #47	@ 0x2f
 8001066:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800106a:	2360      	movs	r3, #96	@ 0x60
 800106c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001070:	2360      	movs	r3, #96	@ 0x60
 8001072:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001076:	2300      	movs	r3, #0
 8001078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001082:	2300      	movs	r3, #0
 8001084:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001088:	2300      	movs	r3, #0
 800108a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800108e:	2300      	movs	r3, #0
 8001090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, mode_vel, &txMailbox);
 8001094:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001098:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800109c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80010a0:	4828      	ldr	r0, [pc, #160]	@ (8001144 <set_drive_mode+0x150>)
 80010a2:	f002 fda6 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(50);
 80010a6:	2032      	movs	r0, #50	@ 0x32
 80010a8:	f002 faf6 	bl	8003698 <HAL_Delay>
    print_uart("⚙️ Set mode to Velocity (0x6060 = 3)\r\n");
 80010ac:	4827      	ldr	r0, [pc, #156]	@ (800114c <set_drive_mode+0x158>)
 80010ae:	f7ff ff11 	bl	8000ed4 <print_uart>

    // === Gửi chuỗi enable: 0x06 → 0x07 → 0x0F ===

    // 1. Shutdown (0x06)
    uint8_t cw_shutdown[] = {0x2F, 0x40, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00};
 80010b2:	4a27      	ldr	r2, [pc, #156]	@ (8001150 <set_drive_mode+0x15c>)
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010bc:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, cw_shutdown, &txMailbox);
 80010c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010c4:	f107 021c 	add.w	r2, r7, #28
 80010c8:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80010cc:	481d      	ldr	r0, [pc, #116]	@ (8001144 <set_drive_mode+0x150>)
 80010ce:	f002 fd90 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(50);
 80010d2:	2032      	movs	r0, #50	@ 0x32
 80010d4:	f002 fae0 	bl	8003698 <HAL_Delay>
    print_uart("🔄 CW = 0x06 (Shutdown)\r\n");
 80010d8:	481e      	ldr	r0, [pc, #120]	@ (8001154 <set_drive_mode+0x160>)
 80010da:	f7ff fefb 	bl	8000ed4 <print_uart>

    // 2. Switch ON (0x07)
    uint8_t cw_switchon[] = {0x2F, 0x40, 0x60, 0x00, 0x07, 0x00, 0x00, 0x00};
 80010de:	4a1e      	ldr	r2, [pc, #120]	@ (8001158 <set_drive_mode+0x164>)
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e8:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, cw_switchon, &txMailbox);
 80010ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010f0:	f107 0214 	add.w	r2, r7, #20
 80010f4:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80010f8:	4812      	ldr	r0, [pc, #72]	@ (8001144 <set_drive_mode+0x150>)
 80010fa:	f002 fd7a 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(50);
 80010fe:	2032      	movs	r0, #50	@ 0x32
 8001100:	f002 faca 	bl	8003698 <HAL_Delay>
    print_uart("🔄 CW = 0x07 (Switch ON)\r\n");
 8001104:	4815      	ldr	r0, [pc, #84]	@ (800115c <set_drive_mode+0x168>)
 8001106:	f7ff fee5 	bl	8000ed4 <print_uart>

    // 3. Enable operation (0x0F)
    uint8_t cw_enable[] = {0x2F, 0x40, 0x60, 0x00, 0x0F, 0x00, 0x00, 0x00};
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <set_drive_mode+0x16c>)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, cw_enable, &txMailbox);
 8001118:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <set_drive_mode+0x150>)
 8001126:	f002 fd64 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	@ 0x64
 800112c:	f002 fab4 	bl	8003698 <HAL_Delay>
    print_uart("✅ CW = 0x0F (Enable Operation)\r\n");
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <set_drive_mode+0x170>)
 8001132:	f7ff fecf 	bl	8000ed4 <print_uart>

    print_uart("✅ Servo is now enabled in Velocity Mode!\r\n");
 8001136:	480c      	ldr	r0, [pc, #48]	@ (8001168 <set_drive_mode+0x174>)
 8001138:	f7ff fecc 	bl	8000ed4 <print_uart>
}
 800113c:	bf00      	nop
 800113e:	3790      	adds	r7, #144	@ 0x90
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001fc 	.word	0x200001fc
 8001148:	0800c990 	.word	0x0800c990
 800114c:	0800c9b4 	.word	0x0800c9b4
 8001150:	0800ca70 	.word	0x0800ca70
 8001154:	0800c9e0 	.word	0x0800c9e0
 8001158:	0800ca78 	.word	0x0800ca78
 800115c:	0800c9fc 	.word	0x0800c9fc
 8001160:	0800ca80 	.word	0x0800ca80
 8001164:	0800ca1c 	.word	0x0800ca1c
 8001168:	0800ca40 	.word	0x0800ca40

0800116c <delay_us>:



void delay_us(uint16_t us) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
   htim1.Instance->CNT=0;
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <delay_us+0x34>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);            // Start timer
 800117e:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <delay_us+0x34>)
 8001180:	f007 f87e 	bl	8008280 <HAL_TIM_Base_Start>
    while (htim1.Instance->CNT < us);
 8001184:	bf00      	nop
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <delay_us+0x34>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	429a      	cmp	r2, r3
 8001190:	d3f9      	bcc.n	8001186 <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim1);             // Optional: Stop to save power
 8001192:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <delay_us+0x34>)
 8001194:	f007 f8dc 	bl	8008350 <HAL_TIM_Base_Stop>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200003e4 	.word	0x200003e4

080011a4 <PS2_ATT_LOW>:

//LAP TRINH DIEU KHIEN TAY CAM
void PS2_ATT_LOW() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2108      	movs	r1, #8
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <PS2_ATT_LOW+0x14>)
 80011ae:	f004 f8c3 	bl	8005338 <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <PS2_ATT_HIGH>:

void PS2_ATT_HIGH() {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2108      	movs	r1, #8
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <PS2_ATT_HIGH+0x14>)
 80011c6:	f004 f8b7 	bl	8005338 <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <PS2_SendCommand>:
// === PS2 Controller Interface for STM32 ===
// === PS2 Initialization (3 command sequences) ===
void PS2_SendCommand(const uint8_t *tx, uint8_t *rx, uint8_t len) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4613      	mov	r3, r2
 80011e0:	71fb      	strb	r3, [r7, #7]
    PS2_ATT_LOW(); delay_us(15);
 80011e2:	f7ff ffdf 	bl	80011a4 <PS2_ATT_LOW>
 80011e6:	200f      	movs	r0, #15
 80011e8:	f7ff ffc0 	bl	800116c <delay_us>
    for (uint8_t i = 0; i < len; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]
 80011f0:	e011      	b.n	8001216 <PS2_SendCommand+0x42>
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx[i], (uint8_t*)&rx[i], 1, 100);
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	18d1      	adds	r1, r2, r3
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	441a      	add	r2, r3
 80011fe:	2364      	movs	r3, #100	@ 0x64
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	480a      	ldr	r0, [pc, #40]	@ (8001230 <PS2_SendCommand+0x5c>)
 8001206:	f006 fc48 	bl	8007a9a <HAL_SPI_TransmitReceive>
        delay_us(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ffae 	bl	800116c <delay_us>
    for (uint8_t i = 0; i < len; i++) {
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	3301      	adds	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
 8001216:	7dfa      	ldrb	r2, [r7, #23]
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3e9      	bcc.n	80011f2 <PS2_SendCommand+0x1e>
    }
    PS2_ATT_HIGH(); delay_us(30);
 800121e:	f7ff ffcd 	bl	80011bc <PS2_ATT_HIGH>
 8001222:	201e      	movs	r0, #30
 8001224:	f7ff ffa2 	bl	800116c <delay_us>
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000038c 	.word	0x2000038c

08001234 <PS2_Init>:
void PS2_Init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	@ 0x30
 8001238:	af00      	add	r7, sp, #0
    const uint8_t enter_cfg[]   = {0x01, 0x43, 0x00, 0x01, 0x00};
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <PS2_Init+0x90>)
 800123c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800123e:	2300      	movs	r3, #0
 8001240:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    const uint8_t set_analog[]  = {0x01, 0x44, 0x00, 0x01, 0x03};
 8001244:	4a20      	ldr	r2, [pc, #128]	@ (80012c8 <PS2_Init+0x94>)
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124e:	6018      	str	r0, [r3, #0]
 8001250:	3304      	adds	r3, #4
 8001252:	7019      	strb	r1, [r3, #0]
    const uint8_t enable_rumble[]= {0x01, 0x4D, 0x00, 0x00, 0x01};
 8001254:	4a1d      	ldr	r2, [pc, #116]	@ (80012cc <PS2_Init+0x98>)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125e:	6018      	str	r0, [r3, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	7019      	strb	r1, [r3, #0]
    const uint8_t exit_cfg[]    = {0x01, 0x43, 0x00, 0x00, 0x5A};
 8001264:	4a1a      	ldr	r2, [pc, #104]	@ (80012d0 <PS2_Init+0x9c>)
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126e:	6018      	str	r0, [r3, #0]
 8001270:	3304      	adds	r3, #4
 8001272:	7019      	strb	r1, [r3, #0]
    uint8_t rx[9];

    PS2_SendCommand(enter_cfg, rx, sizeof(enter_cfg));
 8001274:	1d39      	adds	r1, r7, #4
 8001276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800127a:	2205      	movs	r2, #5
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffa9 	bl	80011d4 <PS2_SendCommand>
    PS2_SendCommand(set_analog, rx, sizeof(set_analog));
 8001282:	1d39      	adds	r1, r7, #4
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	2205      	movs	r2, #5
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffa2 	bl	80011d4 <PS2_SendCommand>
    PS2_SendCommand(enable_rumble, rx, sizeof(enable_rumble));
 8001290:	1d39      	adds	r1, r7, #4
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	2205      	movs	r2, #5
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff9b 	bl	80011d4 <PS2_SendCommand>
    PS2_SendCommand(exit_cfg, rx, sizeof(exit_cfg));
 800129e:	1d39      	adds	r1, r7, #4
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	2205      	movs	r2, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff94 	bl	80011d4 <PS2_SendCommand>

    HAL_Delay(500);
 80012ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012b0:	f002 f9f2 	bl	8003698 <HAL_Delay>
    print_uart("✅ PS2 Init Done\r\n");
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <PS2_Init+0xa0>)
 80012b6:	f7ff fe0d 	bl	8000ed4 <print_uart>
}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	@ 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	01004301 	.word	0x01004301
 80012c8:	0800ca9c 	.word	0x0800ca9c
 80012cc:	0800caa4 	.word	0x0800caa4
 80012d0:	0800caac 	.word	0x0800caac
 80012d4:	0800ca88 	.word	0x0800ca88

080012d8 <PS2_ReadButtons>:
    uint8_t rx, ry, lx, ly;
} PS2_Data;

bool isAnalog = false;

PS2_Data PS2_ReadButtons(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    PS2_Data result = {0xFFFF, 128, 128, 128, 128};
 80012e0:	4a23      	ldr	r2, [pc, #140]	@ (8001370 <PS2_ReadButtons+0x98>)
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ea:	6018      	str	r0, [r3, #0]
 80012ec:	3304      	adds	r3, #4
 80012ee:	8019      	strh	r1, [r3, #0]
    uint8_t tx[9] = {0x01, 0x42, 0x00, 0, 0, 0, 0, 0, 0};
 80012f0:	f244 2301 	movw	r3, #16897	@ 0x4201
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	711a      	strb	r2, [r3, #4]
    uint8_t rx[9] = {0};
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	721a      	strb	r2, [r3, #8]
    PS2_SendCommand(tx, rx, 9);
 800130c:	f107 0108 	add.w	r1, r7, #8
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2209      	movs	r2, #9
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff5c 	bl	80011d4 <PS2_SendCommand>
    isAnalog = (rx[1] == 0x73);
 800131c:	7a7b      	ldrb	r3, [r7, #9]
 800131e:	2b73      	cmp	r3, #115	@ 0x73
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <PS2_ReadButtons+0x9c>)
 800132a:	701a      	strb	r2, [r3, #0]

    result.buttons = (rx[4] << 8) | rx[3];
 800132c:	7b3b      	ldrb	r3, [r7, #12]
 800132e:	b21b      	sxth	r3, r3
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	b29b      	uxth	r3, r3
 800133e:	843b      	strh	r3, [r7, #32]
    result.rx = rx[5];
 8001340:	7b7b      	ldrb	r3, [r7, #13]
 8001342:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    result.ry = rx[6];
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    result.lx = rx[7];
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    result.ly = rx[8];
 8001352:	7c3b      	ldrb	r3, [r7, #16]
 8001354:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    return result;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	461a      	mov	r2, r3
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	6010      	str	r0, [r2, #0]
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	8093      	strh	r3, [r2, #4]
}
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	0800cab4 	.word	0x0800cab4
 8001374:	20000576 	.word	0x20000576

08001378 <Test_SPI_1Byte>:

void Test_SPI_1Byte(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	@ 0x50
 800137c:	af02      	add	r7, sp, #8
    uint8_t tx = 0x01;       // Gửi byte 0x01 (giống trong PS2 poll)
 800137e:	2301      	movs	r3, #1
 8001380:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t rx = 0x00;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    PS2_ATT_LOW();           // Kéo ATT xuống (CS = LOW)
 800138a:	f7ff ff0b 	bl	80011a4 <PS2_ATT_LOW>
    delay_us(15);
 800138e:	200f      	movs	r0, #15
 8001390:	f7ff feec 	bl	800116c <delay_us>

    HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 100);
 8001394:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 8001398:	f107 0147 	add.w	r1, r7, #71	@ 0x47
 800139c:	2364      	movs	r3, #100	@ 0x64
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	480a      	ldr	r0, [pc, #40]	@ (80013cc <Test_SPI_1Byte+0x54>)
 80013a4:	f006 fb79 	bl	8007a9a <HAL_SPI_TransmitReceive>

    PS2_ATT_HIGH();          // Thả ATT lên (CS = HIGH)
 80013a8:	f7ff ff08 	bl	80011bc <PS2_ATT_HIGH>

    char msg[64];
    snprintf(msg, sizeof(msg), "SPI test RX: 0x%02X\r\n", rx);
 80013ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80013b0:	1d38      	adds	r0, r7, #4
 80013b2:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <Test_SPI_1Byte+0x58>)
 80013b4:	2140      	movs	r1, #64	@ 0x40
 80013b6:	f009 f97f 	bl	800a6b8 <sniprintf>
    print_uart(msg);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fd89 	bl	8000ed4 <print_uart>
}
 80013c2:	bf00      	nop
 80013c4:	3748      	adds	r7, #72	@ 0x48
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000038c 	.word	0x2000038c
 80013d0:	0800cabc 	.word	0x0800cabc

080013d4 <send_sdo_write_u8>:
    print_uart(msg);
}

                            //CAN THUẦN LẬP TRÌNH THEO TIÊU CHUẨN CIA402,301 -> ĐIỀU KHIỂN ĐỘNG CƠ//

void send_sdo_write_u8(uint8_t nodeId, uint16_t index, uint8_t subidx, uint8_t value) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08d      	sub	sp, #52	@ 0x34
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4623      	mov	r3, r4
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	71bb      	strb	r3, [r7, #6]
 80013ee:	4613      	mov	r3, r2
 80013f0:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 80013f2:	232f      	movs	r3, #47	@ 0x2f
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	88bb      	ldrh	r3, [r7, #4]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	737b      	strb	r3, [r7, #13]
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	73bb      	strb	r3, [r7, #14]
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	743b      	strb	r3, [r7, #16]
 800140e:	2300      	movs	r3, #0
 8001410:	747b      	strb	r3, [r7, #17]
 8001412:	2300      	movs	r3, #0
 8001414:	74bb      	strb	r3, [r7, #18]
 8001416:	2300      	movs	r3, #0
 8001418:	74fb      	strb	r3, [r7, #19]
        0x00,
        0x00,
        0x00
    };

    TxHeader.StdId = 0x600 + nodeId;
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001420:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 8001422:	2308      	movs	r3, #8
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &txMailbox);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	f107 0118 	add.w	r1, r7, #24
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <send_sdo_write_u8+0x7c>)
 800143c:	f002 fbd9 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(10);
 8001440:	200a      	movs	r0, #10
 8001442:	f002 f929 	bl	8003698 <HAL_Delay>
}
 8001446:	bf00      	nop
 8001448:	3734      	adds	r7, #52	@ 0x34
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	200001fc 	.word	0x200001fc

08001454 <send_sdo_write_u16>:
void send_sdo_write_u16(uint8_t nodeId, uint16_t index, uint8_t subidx, uint16_t value) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08d      	sub	sp, #52	@ 0x34
 8001458:	af00      	add	r7, sp, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	4603      	mov	r3, r0
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	4613      	mov	r3, r2
 8001470:	807b      	strh	r3, [r7, #2]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 8001472:	232b      	movs	r3, #43	@ 0x2b
 8001474:	733b      	strb	r3, [r7, #12]
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	737b      	strb	r3, [r7, #13]
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29b      	uxth	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	73bb      	strb	r3, [r7, #14]
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	743b      	strb	r3, [r7, #16]
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b29b      	uxth	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	747b      	strb	r3, [r7, #17]
 800149a:	2300      	movs	r3, #0
 800149c:	74bb      	strb	r3, [r7, #18]
 800149e:	2300      	movs	r3, #0
 80014a0:	74fb      	strb	r3, [r7, #19]
        (value >> 8) & 0xFF,
        0x00,
        0x00
    };

    TxHeader.StdId = 0x600 + nodeId;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80014a8:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 80014aa:	2308      	movs	r3, #8
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &txMailbox);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	f107 020c 	add.w	r2, r7, #12
 80014be:	f107 0118 	add.w	r1, r7, #24
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <send_sdo_write_u16+0x84>)
 80014c4:	f002 fb95 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f002 f8e5 	bl	8003698 <HAL_Delay>
}
 80014ce:	bf00      	nop
 80014d0:	3734      	adds	r7, #52	@ 0x34
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001fc 	.word	0x200001fc

080014dc <send_sdo_write_u32>:
void send_sdo_write_u32(uint8_t nodeId, uint16_t index, uint8_t subidx, uint32_t value) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	460b      	mov	r3, r1
 80014ea:	80bb      	strh	r3, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 80014f0:	2323      	movs	r3, #35	@ 0x23
 80014f2:	733b      	strb	r3, [r7, #12]
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	737b      	strb	r3, [r7, #13]
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	73bb      	strb	r3, [r7, #14]
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	743b      	strb	r3, [r7, #16]
        0x23,
        index & 0xFF,
        (index >> 8) & 0xFF,
        subidx,
        value & 0xFF,
        (value >> 8) & 0xFF,
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	0a1b      	lsrs	r3, r3, #8
    uint8_t data[8] = {
 8001512:	b2db      	uxtb	r3, r3
 8001514:	747b      	strb	r3, [r7, #17]
        (value >> 16) & 0xFF,
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	0c1b      	lsrs	r3, r3, #16
    uint8_t data[8] = {
 800151a:	b2db      	uxtb	r3, r3
 800151c:	74bb      	strb	r3, [r7, #18]
        (value >> 24) & 0xFF
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	0e1b      	lsrs	r3, r3, #24
    uint8_t data[8] = {
 8001522:	b2db      	uxtb	r3, r3
 8001524:	74fb      	strb	r3, [r7, #19]
    };

    TxHeader.StdId = 0x600 + nodeId;
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800152c:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 800152e:	2308      	movs	r3, #8
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &txMailbox);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	f107 0118 	add.w	r1, r7, #24
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <send_sdo_write_u32+0x80>)
 8001548:	f002 fb53 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(10);
 800154c:	200a      	movs	r0, #10
 800154e:	f002 f8a3 	bl	8003698 <HAL_Delay>
}
 8001552:	bf00      	nop
 8001554:	3730      	adds	r7, #48	@ 0x30
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200001fc 	.word	0x200001fc

08001560 <remap_rpdo1_for_velocity>:
void remap_rpdo1_for_velocity(uint8_t nodeId) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
    // 1. Disable RPDO1
    send_sdo_write_u32(nodeId, 0x1400, 0x01, 0x80000200);
 800156a:	79f8      	ldrb	r0, [r7, #7]
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <remap_rpdo1_for_velocity+0x70>)
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001574:	f7ff ffb2 	bl	80014dc <send_sdo_write_u32>

    // 2. Clear existing mapping
    send_sdo_write_u8(nodeId, 0x1600, 0x00, 0);
 8001578:	79f8      	ldrb	r0, [r7, #7]
 800157a:	2300      	movs	r3, #0
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 8001582:	f7ff ff27 	bl	80013d4 <send_sdo_write_u8>

    // 3. Map Controlword (0x6040, 16-bit)
    send_sdo_write_u32(nodeId, 0x1600, 0x01, 0x60400010);
 8001586:	79f8      	ldrb	r0, [r7, #7]
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <remap_rpdo1_for_velocity+0x74>)
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 8001590:	f7ff ffa4 	bl	80014dc <send_sdo_write_u32>

    // 4. Map Target Velocity (0x60FF, 32-bit)
    send_sdo_write_u32(nodeId, 0x1600, 0x02, 0x60FF0020);
 8001594:	79f8      	ldrb	r0, [r7, #7]
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <remap_rpdo1_for_velocity+0x78>)
 8001598:	2202      	movs	r2, #2
 800159a:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 800159e:	f7ff ff9d 	bl	80014dc <send_sdo_write_u32>

    // 5. Set number of mapped entries = 2
    send_sdo_write_u8(nodeId, 0x1600, 0x00, 2);
 80015a2:	79f8      	ldrb	r0, [r7, #7]
 80015a4:	2302      	movs	r3, #2
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015ac:	f7ff ff12 	bl	80013d4 <send_sdo_write_u8>

    // 6. Enable RPDO1 (SYNC: 0x00000200)
    send_sdo_write_u32(nodeId, 0x1400, 0x01, 0x00000200);
 80015b0:	79f8      	ldrb	r0, [r7, #7]
 80015b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80015bc:	f7ff ff8e 	bl	80014dc <send_sdo_write_u32>

    print_uart("✅ RPDO1 re-mapped for CW + Target Velocity!\r\n");
 80015c0:	4806      	ldr	r0, [pc, #24]	@ (80015dc <remap_rpdo1_for_velocity+0x7c>)
 80015c2:	f7ff fc87 	bl	8000ed4 <print_uart>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	80000200 	.word	0x80000200
 80015d4:	60400010 	.word	0x60400010
 80015d8:	60ff0020 	.word	0x60ff0020
 80015dc:	0800cb98 	.word	0x0800cb98

080015e0 <remap_tpdo1_velocity>:
void remap_tpdo1_velocity(uint8_t nodeId) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
    send_sdo_write_u32(nodeId, 0x1800, 0x01, 0x80000200); // disable TPDO1
 80015ea:	79f8      	ldrb	r0, [r7, #7]
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <remap_tpdo1_velocity+0x5c>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80015f4:	f7ff ff72 	bl	80014dc <send_sdo_write_u32>
    send_sdo_write_u8(nodeId,  0x1A00, 0x00, 0);           // clear mapping
 80015f8:	79f8      	ldrb	r0, [r7, #7]
 80015fa:	2300      	movs	r3, #0
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001602:	f7ff fee7 	bl	80013d4 <send_sdo_write_u8>
    send_sdo_write_u32(nodeId, 0x1A00, 0x01, 0x606C0020);  // map 606C: 32-bit
 8001606:	79f8      	ldrb	r0, [r7, #7]
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <remap_tpdo1_velocity+0x60>)
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001610:	f7ff ff64 	bl	80014dc <send_sdo_write_u32>
    send_sdo_write_u8(nodeId,  0x1A00, 0x00, 1);           // 1 entry
 8001614:	79f8      	ldrb	r0, [r7, #7]
 8001616:	2301      	movs	r3, #1
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 800161e:	f7ff fed9 	bl	80013d4 <send_sdo_write_u8>
    send_sdo_write_u32(nodeId, 0x1800, 0x01, 0x00000200);  // enable TPDO1
 8001622:	79f8      	ldrb	r0, [r7, #7]
 8001624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800162e:	f7ff ff55 	bl	80014dc <send_sdo_write_u32>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	80000200 	.word	0x80000200
 8001640:	606c0020 	.word	0x606c0020

08001644 <send_enable_sequence>:

void send_enable_sequence(uint8_t nodeId) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	// 1. Fault Reset trước
	    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x0080);
 800164e:	79f8      	ldrb	r0, [r7, #7]
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	2200      	movs	r2, #0
 8001654:	f246 0140 	movw	r1, #24640	@ 0x6040
 8001658:	f7ff fefc 	bl	8001454 <send_sdo_write_u16>
	    HAL_Delay(10);
 800165c:	200a      	movs	r0, #10
 800165e:	f002 f81b 	bl	8003698 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x06); HAL_Delay(10); // Shutdown
 8001662:	79f8      	ldrb	r0, [r7, #7]
 8001664:	2306      	movs	r3, #6
 8001666:	2200      	movs	r2, #0
 8001668:	f246 0140 	movw	r1, #24640	@ 0x6040
 800166c:	f7ff fef2 	bl	8001454 <send_sdo_write_u16>
 8001670:	200a      	movs	r0, #10
 8001672:	f002 f811 	bl	8003698 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x07); HAL_Delay(10); // Switch on
 8001676:	79f8      	ldrb	r0, [r7, #7]
 8001678:	2307      	movs	r3, #7
 800167a:	2200      	movs	r2, #0
 800167c:	f246 0140 	movw	r1, #24640	@ 0x6040
 8001680:	f7ff fee8 	bl	8001454 <send_sdo_write_u16>
 8001684:	200a      	movs	r0, #10
 8001686:	f002 f807 	bl	8003698 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x0F); HAL_Delay(10); // Enable operation
 800168a:	79f8      	ldrb	r0, [r7, #7]
 800168c:	230f      	movs	r3, #15
 800168e:	2200      	movs	r2, #0
 8001690:	f246 0140 	movw	r1, #24640	@ 0x6040
 8001694:	f7ff fede 	bl	8001454 <send_sdo_write_u16>
 8001698:	200a      	movs	r0, #10
 800169a:	f001 fffd 	bl	8003698 <HAL_Delay>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <send_sync_frame>:

void send_sync_frame() {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef tx;
    uint8_t dummy = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
    uint32_t mbox;
    tx.StdId = 0x080;
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	60bb      	str	r3, [r7, #8]
    tx.IDE = CAN_ID_STD;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
    tx.RTR = CAN_RTR_DATA;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
    tx.DLC = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
    HAL_CAN_AddTxMessage(&hcan2, &tx, &dummy, &mbox);
 80016c2:	463b      	mov	r3, r7
 80016c4:	1dfa      	adds	r2, r7, #7
 80016c6:	f107 0108 	add.w	r1, r7, #8
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <send_sync_frame+0x3c>)
 80016cc:	f002 fa91 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    count_sync++;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <send_sync_frame+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <send_sync_frame+0x40>)
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001fc 	.word	0x200001fc
 80016e8:	20000508 	.word	0x20000508

080016ec <send_velocity_rpdo>:

uint32_t txMailbox;

void send_velocity_rpdo(uint8_t node, int32_t velocity, bool toggle_cw, uint32_t accel, uint32_t decel) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	4613      	mov	r3, r2
 80016fc:	73bb      	strb	r3, [r7, #14]
    static bool toggle = false;
    uint8_t data[8];

    // 1. Set acceleration & deceleration trước khi gửi velocity
    send_sdo_write_u32(node, 0x6083, 0x00, accel);  // acceleration
 80016fe:	7bf8      	ldrb	r0, [r7, #15]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f246 0183 	movw	r1, #24707	@ 0x6083
 8001708:	f7ff fee8 	bl	80014dc <send_sdo_write_u32>
    HAL_Delay(2);
 800170c:	2002      	movs	r0, #2
 800170e:	f001 ffc3 	bl	8003698 <HAL_Delay>
    send_sdo_write_u32(node, 0x6084, 0x00, decel);  // deceleration
 8001712:	7bf8      	ldrb	r0, [r7, #15]
 8001714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	f246 0184 	movw	r1, #24708	@ 0x6084
 800171c:	f7ff fede 	bl	80014dc <send_sdo_write_u32>
    HAL_Delay(2);
 8001720:	2002      	movs	r0, #2
 8001722:	f001 ffb9 	bl	8003698 <HAL_Delay>

    // 2. Toggle CW
    uint16_t cw = toggle_cw ? (toggle ? 0x1F : 0x0F) : 0x0F;
 8001726:	7bbb      	ldrb	r3, [r7, #14]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <send_velocity_rpdo+0x50>
 800172c:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <send_velocity_rpdo+0xe4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <send_velocity_rpdo+0x4c>
 8001734:	231f      	movs	r3, #31
 8001736:	e002      	b.n	800173e <send_velocity_rpdo+0x52>
 8001738:	230f      	movs	r3, #15
 800173a:	e000      	b.n	800173e <send_velocity_rpdo+0x52>
 800173c:	230f      	movs	r3, #15
 800173e:	83fb      	strh	r3, [r7, #30]
    toggle = !toggle;
 8001740:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <send_velocity_rpdo+0xe4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <send_velocity_rpdo+0xe4>)
 800175c:	701a      	strb	r2, [r3, #0]

    // 3. Build RPDO data (CW + velocity)
    data[0] = cw & 0xFF;
 800175e:	8bfb      	ldrh	r3, [r7, #30]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	753b      	strb	r3, [r7, #20]
    data[1] = (cw >> 8) & 0xFF;
 8001764:	8bfb      	ldrh	r3, [r7, #30]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b29b      	uxth	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	757b      	strb	r3, [r7, #21]

    data[2] = (velocity >> 0) & 0xFF;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	75bb      	strb	r3, [r7, #22]
    data[3] = (velocity >> 8) & 0xFF;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	121b      	asrs	r3, r3, #8
 8001778:	b2db      	uxtb	r3, r3
 800177a:	75fb      	strb	r3, [r7, #23]
    data[4] = (velocity >> 16) & 0xFF;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	141b      	asrs	r3, r3, #16
 8001780:	b2db      	uxtb	r3, r3
 8001782:	763b      	strb	r3, [r7, #24]
    data[5] = (velocity >> 24) & 0xFF;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	0e1b      	lsrs	r3, r3, #24
 8001788:	b2db      	uxtb	r3, r3
 800178a:	767b      	strb	r3, [r7, #25]

    data[6] = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	76bb      	strb	r3, [r7, #26]
    data[7] = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	76fb      	strb	r3, [r7, #27]

    // 4. Gửi RPDO
    TxHeader.StdId = 0x200 + node;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800179a:	461a      	mov	r2, r3
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <send_velocity_rpdo+0xe8>)
 800179e:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <send_velocity_rpdo+0xe8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <send_velocity_rpdo+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <send_velocity_rpdo+0xe8>)
 80017ae:	2208      	movs	r2, #8
 80017b0:	611a      	str	r2, [r3, #16]

    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &txMailbox);
 80017b2:	f107 0214 	add.w	r2, r7, #20
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <send_velocity_rpdo+0xec>)
 80017b8:	4906      	ldr	r1, [pc, #24]	@ (80017d4 <send_velocity_rpdo+0xe8>)
 80017ba:	4808      	ldr	r0, [pc, #32]	@ (80017dc <send_velocity_rpdo+0xf0>)
 80017bc:	f002 fa19 	bl	8003bf2 <HAL_CAN_AddTxMessage>
    HAL_Delay(5);
 80017c0:	2005      	movs	r0, #5
 80017c2:	f001 ff69 	bl	8003698 <HAL_Delay>
}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000595 	.word	0x20000595
 80017d4:	2000051c 	.word	0x2000051c
 80017d8:	20000578 	.word	0x20000578
 80017dc:	200001fc 	.word	0x200001fc

080017e0 <send_temp_to_usbcan>:
//static uint8_t lostCounter1 = 0, lostCounter2 = 0;
//extern volatile bool need_reenable_node1, need_reenable_node2;
//extern int32_t prevVel1=0, prevVel2=0;  // vận tốc yêu cầu gần nhất
volatile uint8_t ready1=0;
volatile uint8_t ready2=0;
void send_temp_to_usbcan(int32_t temperature) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	@ 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x018;
 80017f2:	2318      	movs	r3, #24
 80017f4:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 4;
 80017f6:	2304      	movs	r3, #4
 80017f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24

    data[0] = (uint8_t)(temperature & 0xFF);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)((temperature >> 8) & 0xFF);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	121b      	asrs	r3, r3, #8
 800180c:	b2db      	uxtb	r3, r3
 800180e:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)((temperature >> 16) & 0xFF);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	141b      	asrs	r3, r3, #16
 8001814:	b2db      	uxtb	r3, r3
 8001816:	73bb      	strb	r3, [r7, #14]
    data[3] = (uint8_t)((temperature >> 24) & 0xFF);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	161b      	asrs	r3, r3, #24
 800181c:	b2db      	uxtb	r3, r3
 800181e:	73fb      	strb	r3, [r7, #15]

    HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &txMailbox);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	f107 020c 	add.w	r2, r7, #12
 8001828:	f107 0118 	add.w	r1, r7, #24
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <send_temp_to_usbcan+0x5c>)
 800182e:	f002 f9e0 	bl	8003bf2 <HAL_CAN_AddTxMessage>
}
 8001832:	bf00      	nop
 8001834:	3730      	adds	r7, #48	@ 0x30
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200001fc 	.word	0x200001fc

08001840 <HAL_CAN_RxFifo0MsgPendingCallback>:
//Xử lý LED command (0x021).
//
//Xử lý PS2 block command (0x022).
//
//Xử lý Auto velocity update (0x013).
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b0b9      	sub	sp, #228	@ 0xe4
 8001844:	af04      	add	r7, sp, #16
 8001846:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
  static bool toggle = false;
  uint8_t rxData[8];
  uint32_t now = HAL_GetTick();
 8001848:	f001 ff1a 	bl	8003680 <HAL_GetTick>
 800184c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  (void)toggle; (void)now; /* Silence unused-variable warnings when not used */
    can_rx_count++;
 8001850:	4b92      	ldr	r3, [pc, #584]	@ (8001a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	4a91      	ldr	r2, [pc, #580]	@ (8001a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001858:	6013      	str	r3, [r2, #0]
    can_rx_flag ++;
 800185a:	4b91      	ldr	r3, [pc, #580]	@ (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4a8f      	ldr	r2, [pc, #572]	@ (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001862:	6013      	str	r3, [r2, #0]
   // static uint32_t lastCheck = 0;  // ✅ dùng static, không reset mỗi lần
    char buf[64];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001864:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001868:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800186c:	2100      	movs	r1, #0
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f002 fa8f 	bl	8003d92 <HAL_CAN_GetRxMessage>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
        print_uart("❌ Failed to get RX message in callback\r\n");
 800187a:	488a      	ldr	r0, [pc, #552]	@ (8001aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 800187c:	f7ff fb2a 	bl	8000ed4 <print_uart>
        return;
 8001880:	e1bd      	b.n	8001bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x3be>
    }

    if ((rxHeader.StdId == 0x701 || rxHeader.StdId == 0x702) &&
 8001882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001886:	f240 7201 	movw	r2, #1793	@ 0x701
 800188a:	4293      	cmp	r3, r2
 800188c:	d005      	beq.n	800189a <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 800188e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001892:	f240 7202 	movw	r2, #1794	@ 0x702
 8001896:	4293      	cmp	r3, r2
 8001898:	d110      	bne.n	80018bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
        rxHeader.DLC == 1 && rxData[0] == 0x00) {
 800189a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    if ((rxHeader.StdId == 0x701 || rxHeader.StdId == 0x702) &&
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10c      	bne.n	80018bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
        rxHeader.DLC == 1 && rxData[0] == 0x00) {
 80018a2:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d108      	bne.n	80018bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>

        uint8_t nodeId = rxHeader.StdId - 0x700;
 80018aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018ae:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        node_booted[nodeId] = 1;
 80018b2:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80018b6:	4a7c      	ldr	r2, [pc, #496]	@ (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80018b8:	2101      	movs	r1, #1
 80018ba:	54d1      	strb	r1, [r2, r3]

    }


    // Kiểm tra nếu đây là phản hồi từ node1 hoặc node2 cho SDO Actual Velocity
    if (rxHeader.StdId == 0x581 || rxHeader.StdId == 0x582) {
 80018bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018c0:	f240 5281 	movw	r2, #1409	@ 0x581
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d005      	beq.n	80018d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
 80018c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018cc:	f240 5282 	movw	r2, #1410	@ 0x582
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d142      	bne.n	800195a <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
        if (rxData[0] == 0x43 && rxData[1] == 0x6C && rxData[2] == 0x60) {
 80018d4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80018d8:	2b43      	cmp	r3, #67	@ 0x43
 80018da:	d13e      	bne.n	800195a <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
 80018dc:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80018e0:	2b6c      	cmp	r3, #108	@ 0x6c
 80018e2:	d13a      	bne.n	800195a <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
 80018e4:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80018e8:	2b60      	cmp	r3, #96	@ 0x60
 80018ea:	d136      	bne.n	800195a <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
            int nodeId = rxHeader.StdId - 0x580;
 80018ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018f0:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 80018f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
//            Byte 2: Index high (0x60)   → Object 0x606C: Actual Velocity
//            Byte 3: Subindex (usually 0)
//            Byte 4–7: Dữ liệu 32-bit (int32_t velocity)

            int32_t velocity = (int32_t)(
                ((uint32_t)rxData[4]) |
 80018f8:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80018fc:	461a      	mov	r2, r3
                ((uint32_t)rxData[5] << 8) |
 80018fe:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001902:	021b      	lsls	r3, r3, #8
                ((uint32_t)rxData[4]) |
 8001904:	431a      	orrs	r2, r3
                ((uint32_t)rxData[6] << 16) |
 8001906:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800190a:	041b      	lsls	r3, r3, #16
                ((uint32_t)rxData[5] << 8) |
 800190c:	431a      	orrs	r2, r3
                ((uint32_t)rxData[7] << 24)
 800190e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001912:	061b      	lsls	r3, r3, #24
                ((uint32_t)rxData[6] << 16) |
 8001914:	4313      	orrs	r3, r2
            int32_t velocity = (int32_t)(
 8001916:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            );
            if(nodeId==1) currentVel1=velocity;
 800191a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800191e:	2b01      	cmp	r3, #1
 8001920:	d103      	bne.n	800192a <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
 8001922:	4a62      	ldr	r2, [pc, #392]	@ (8001aac <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001924:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001928:	6013      	str	r3, [r2, #0]
            if(nodeId==2) currentVel2=velocity;
 800192a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800192e:	2b02      	cmp	r3, #2
 8001930:	d103      	bne.n	800193a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 8001932:	4a5f      	ldr	r2, [pc, #380]	@ (8001ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001938:	6013      	str	r3, [r2, #0]
            snprintf(buf, sizeof(buf),
 800193a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800193e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001948:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800194a:	2140      	movs	r1, #64	@ 0x40
 800194c:	f008 feb4 	bl	800a6b8 <sniprintf>
                     "🔄 Node %d Actual Velocity: %ld\r\n", nodeId, velocity);

            print_uart(buf);
 8001950:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fabd 	bl	8000ed4 <print_uart>

                  }
    }
    if ((rxHeader.StdId == 0x013) && (rxHeader.DLC == 8)) { // frame chứa 2 vận tốc
 800195a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800195e:	2b13      	cmp	r3, #19
 8001960:	d176      	bne.n	8001a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>
 8001962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001966:	2b08      	cmp	r3, #8
 8001968:	d172      	bne.n	8001a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>
    	   if (current_mode != MODE_AUTO) {
 800196a:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	f040 8143 	bne.w	8001bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>
    	        // Không xử lý gói 0x013 nếu không ở AUTO mode
    	        return;
    	    }
        print_uart("oke\r\n");
 8001976:	4851      	ldr	r0, [pc, #324]	@ (8001abc <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001978:	f7ff faac 	bl	8000ed4 <print_uart>
        memcpy(&up_vel1, &rxData[0], 4);
 800197c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001980:	4a4f      	ldr	r2, [pc, #316]	@ (8001ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001982:	6013      	str	r3, [r2, #0]
        memcpy(&up_vel2, &rxData[4], 4);
 8001984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001988:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 800198a:	6013      	str	r3, [r2, #0]
        ready1 = 1; ready2 = 1;
 800198c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	4b4e      	ldr	r3, [pc, #312]	@ (8001acc <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
//        if( up_vel1 >= 80000 ) up_vel1=80000;
//        else if( up_vel1 <= -80000) up_vel1=-80000;
//        if( up_vel2 >= 80000 ) up_vel2=80000;
//        else if( up_vel2 <= -80000) up_vel2=-80000;
        snprintf(buf, sizeof(buf), "✅ Velocity 1 (Motor1) updated: %ld\r\n", up_vel1);
 8001998:	4b49      	ldr	r3, [pc, #292]	@ (8001ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80019a0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80019a2:	2140      	movs	r1, #64	@ 0x40
 80019a4:	f008 fe88 	bl	800a6b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80019a8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc5f 	bl	8000270 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	4845      	ldr	r0, [pc, #276]	@ (8001ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80019c0:	f007 f946 	bl	8008c50 <HAL_UART_Transmit>

        snprintf(buf, sizeof(buf),
            "📦 Data 1: %02X %02X %02X %02X\r\n",
            rxData[0], rxData[1], rxData[2], rxData[3]);
 80019c4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
        snprintf(buf, sizeof(buf),
 80019c8:	461c      	mov	r4, r3
            rxData[0], rxData[1], rxData[2], rxData[3]);
 80019ca:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80019ce:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 80019d2:	f897 109b 	ldrb.w	r1, [r7, #155]	@ 0x9b
        snprintf(buf, sizeof(buf),
 80019d6:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80019da:	9102      	str	r1, [sp, #8]
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4623      	mov	r3, r4
 80019e2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80019e4:	2140      	movs	r1, #64	@ 0x40
 80019e6:	f008 fe67 	bl	800a6b8 <sniprintf>
        print_uart(buf);
 80019ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fa70 	bl	8000ed4 <print_uart>

        snprintf(buf, sizeof(buf), "✅ Velocity 2 (Motor2) updated: %ld\r\n", up_vel2);
 80019f4:	4b33      	ldr	r3, [pc, #204]	@ (8001ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80019fc:	4a37      	ldr	r2, [pc, #220]	@ (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80019fe:	2140      	movs	r1, #64	@ 0x40
 8001a00:	f008 fe5a 	bl	800a6b8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001a04:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc31 	bl	8000270 <strlen>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	482e      	ldr	r0, [pc, #184]	@ (8001ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001a1c:	f007 f918 	bl	8008c50 <HAL_UART_Transmit>

        snprintf(buf, sizeof(buf),
            "📦 Data 2: %02X %02X %02X %02X\r\n",
            rxData[4], rxData[5], rxData[6], rxData[7]);
 8001a20:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
        snprintf(buf, sizeof(buf),
 8001a24:	461c      	mov	r4, r3
            rxData[4], rxData[5], rxData[6], rxData[7]);
 8001a26:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001a2a:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8001a2e:	f897 109f 	ldrb.w	r1, [r7, #159]	@ 0x9f
        snprintf(buf, sizeof(buf),
 8001a32:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001a36:	9102      	str	r1, [sp, #8]
 8001a38:	9201      	str	r2, [sp, #4]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	4a28      	ldr	r2, [pc, #160]	@ (8001ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001a40:	2140      	movs	r1, #64	@ 0x40
 8001a42:	f008 fe39 	bl	800a6b8 <sniprintf>
        print_uart(buf);
 8001a46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fa42 	bl	8000ed4 <print_uart>

    }

    if ((rxHeader.StdId == 0x020) && (rxHeader.DLC == 8)) {
 8001a50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d157      	bne.n	8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
 8001a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d153      	bne.n	8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
        uint32_t mode;
        memcpy(&mode, &rxData[0], 4);
 8001a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a64:	657b      	str	r3, [r7, #84]	@ 0x54

        if (mode == 1) {  // MODE_PS2
 8001a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d109      	bne.n	8001a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>
            current_mode = MODE_PS2;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
            mode_changed_flag = 1;   // Để vòng while reset tốc độ
 8001a72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
            print_uart("✅ PS2 Mode\r\n");
 8001a78:	481b      	ldr	r0, [pc, #108]	@ (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001a7a:	f7ff fa2b 	bl	8000ed4 <print_uart>
 8001a7e:	e043      	b.n	8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
        }
        else if (mode == 2) { // MODE_AUTO
 8001a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d134      	bne.n	8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>
            current_mode = MODE_AUTO;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
            mode_changed_flag = 1;   // Để vòng while reset tốc độ
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
            print_uart("✅ Auto Mode\r\n");
 8001a92:	4816      	ldr	r0, [pc, #88]	@ (8001aec <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001a94:	f7ff fa1e 	bl	8000ed4 <print_uart>
 8001a98:	e036      	b.n	8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>
 8001a9a:	bf00      	nop
 8001a9c:	200001f4 	.word	0x200001f4
 8001aa0:	200001f8 	.word	0x200001f8
 8001aa4:	0800cc88 	.word	0x0800cc88
 8001aa8:	20000590 	.word	0x20000590
 8001aac:	20000584 	.word	0x20000584
 8001ab0:	20000588 	.word	0x20000588
 8001ab4:	0800ccb4 	.word	0x0800ccb4
 8001ab8:	20000504 	.word	0x20000504
 8001abc:	0800ccd8 	.word	0x0800ccd8
 8001ac0:	2000057c 	.word	0x2000057c
 8001ac4:	20000580 	.word	0x20000580
 8001ac8:	2000058c 	.word	0x2000058c
 8001acc:	2000058d 	.word	0x2000058d
 8001ad0:	0800cce0 	.word	0x0800cce0
 8001ad4:	200004bc 	.word	0x200004bc
 8001ad8:	0800cd08 	.word	0x0800cd08
 8001adc:	0800cd2c 	.word	0x0800cd2c
 8001ae0:	0800cd54 	.word	0x0800cd54
 8001ae4:	20000594 	.word	0x20000594
 8001ae8:	0800cd78 	.word	0x0800cd78
 8001aec:	0800cd88 	.word	0x0800cd88
        }
        else {
            char buf[64];
            snprintf(buf, sizeof(buf), "⚠️ Unknown Mode: %lu\r\n", mode);
 8001af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af2:	f107 000c 	add.w	r0, r7, #12
 8001af6:	4a43      	ldr	r2, [pc, #268]	@ (8001c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 8001af8:	2140      	movs	r1, #64	@ 0x40
 8001afa:	f008 fddd 	bl	800a6b8 <sniprintf>
            print_uart(buf);
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f9e6 	bl	8000ed4 <print_uart>
        }
    }

    if ((rxHeader.StdId == 0x581) &&
 8001b08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b0c:	f240 5281 	movw	r2, #1409	@ 0x581
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d131      	bne.n	8001b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>
        rxData[0] == 0x43 &&
 8001b14:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
    if ((rxHeader.StdId == 0x581) &&
 8001b18:	2b43      	cmp	r3, #67	@ 0x43
 8001b1a:	d12d      	bne.n	8001b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>
        rxData[1]==0x12 && rxData[2]==0x50 && rxData[3]==0x00) {
 8001b1c:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
        rxData[0] == 0x43 &&
 8001b20:	2b12      	cmp	r3, #18
 8001b22:	d129      	bne.n	8001b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>
        rxData[1]==0x12 && rxData[2]==0x50 && rxData[3]==0x00) {
 8001b24:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001b28:	2b50      	cmp	r3, #80	@ 0x50
 8001b2a:	d125      	bne.n	8001b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>
 8001b2c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d121      	bne.n	8001b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x338>

        int32_t driver_temp = (int32_t)(
            ((uint32_t)rxData[4]) |
 8001b34:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001b38:	461a      	mov	r2, r3
            ((uint32_t)rxData[5] << 8) |
 8001b3a:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001b3e:	021b      	lsls	r3, r3, #8
            ((uint32_t)rxData[4]) |
 8001b40:	431a      	orrs	r2, r3
            ((uint32_t)rxData[6] << 16) |
 8001b42:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001b46:	041b      	lsls	r3, r3, #16
            ((uint32_t)rxData[5] << 8) |
 8001b48:	431a      	orrs	r2, r3
            ((uint32_t)rxData[7] << 24)
 8001b4a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001b4e:	061b      	lsls	r3, r3, #24
            ((uint32_t)rxData[6] << 16) |
 8001b50:	4313      	orrs	r3, r2
        int32_t driver_temp = (int32_t)(
 8001b52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        );

        char buf[64];
        snprintf(buf, sizeof(buf), "🌡️ Driver Temp = %ld°C\r\n", driver_temp);
 8001b56:	f107 000c 	add.w	r0, r7, #12
 8001b5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c8>)
 8001b60:	2140      	movs	r1, #64	@ 0x40
 8001b62:	f008 fda9 	bl	800a6b8 <sniprintf>
        print_uart(buf);
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f9b2 	bl	8000ed4 <print_uart>

        // Gửi lên CAN ID 0x018 để debug trên USB-CAN
        send_temp_to_usbcan(driver_temp);
 8001b70:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001b74:	f7ff fe34 	bl	80017e0 <send_temp_to_usbcan>
    }
    //nhan lenh bat den sang 0x021
    if ((rxHeader.StdId == 0x021) && (rxHeader.DLC == 8)){
 8001b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b7c:	2b21      	cmp	r3, #33	@ 0x21
 8001b7e:	d121      	bne.n	8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>
 8001b80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d11d      	bne.n	8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>
       	  uint32_t led;
       	memcpy(&led, &rxData[0], 4);
 8001b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b8c:	653b      	str	r3, [r7, #80]	@ 0x50
   //    	                           (rxData[2] << 16) |
   //    	                           (rxData[3] << 24));
        static uint32_t last_led_cmd = 0xFFFFFFFF;  // Lưu lệnh trước để tránh xử lý lại

           // Nếu lệnh mới khác lệnh cũ thì xử lý (tránh lặp lại nhiều lần)
           if (led != last_led_cmd) {
 8001b8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x3cc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d015      	beq.n	8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>
               last_led_cmd = led;
 8001b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x3cc>)
 8001b9c:	6013      	str	r3, [r2, #0]
       	 if (led==1){  //01 00 00 00
 8001b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d106      	bne.n	8001bb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x372>
       		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001baa:	4819      	ldr	r0, [pc, #100]	@ (8001c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>)
 8001bac:	f003 fbc4 	bl	8005338 <HAL_GPIO_WritePin>
 8001bb0:	e008      	b.n	8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>

       	 }
       	 else if (led==2){// 02 00 00 00
 8001bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d105      	bne.n	8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>
       		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bbe:	4814      	ldr	r0, [pc, #80]	@ (8001c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>)
 8001bc0:	f003 fbba 	bl	8005338 <HAL_GPIO_WritePin>
    }
    //dem goi tin nhan duoc trong 1 s
//    can_rx_count++;
    //vo hiẹu hoa ps2 khi co vat can

    if ((rxHeader.StdId == 0x024) && (rxHeader.DLC == 8)){
 8001bc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bc8:	2b24      	cmp	r3, #36	@ 0x24
 8001bca:	d118      	bne.n	8001bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x3be>
 8001bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d114      	bne.n	8001bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x3be>
          	  uint32_t stop;
          	memcpy(&stop, &rxData[0], 4);
 8001bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      //    	 mode = (int32_t)((rxData[0]) |
      //    	                           (rxData[1] << 8) |
      //    	                           (rxData[2] << 16) |
      //    	                           (rxData[3] << 24));
      if (stop==1||stop==2||stop==3){
 8001bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_CAN_RxFifo0MsgPendingCallback+0x3ac>
 8001be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d002      	beq.n	8001bec <HAL_CAN_RxFifo0MsgPendingCallback+0x3ac>
 8001be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d103      	bne.n	8001bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b4>

    	  ps2_blocked=1;
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e004      	b.n	8001bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x3be>
    	  //last_stop_update = HAL_GetTick();
      }
     // else if(stop==0) ps2_blocked=0;
      else ps2_blocked=0;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e000      	b.n	8001bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x3be>
    	        return;
 8001bfc:	bf00      	nop
    }
//    else ps2_blocked=0;

}
 8001bfe:	37d4      	adds	r7, #212	@ 0xd4
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	0800cd98 	.word	0x0800cd98
 8001c08:	0800cdb4 	.word	0x0800cdb4
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	20000593 	.word	0x20000593

08001c18 <send_vel_can>:
void send_vel_can(int32_t vel1, int32_t vel2) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	@ 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8];

    // ===== Giới hạn tần suất gửi: mỗi 20ms một lần (50Hz) =====
    if (HAL_GetTick() - last_tick < 50) return;
 8001c22:	f001 fd2d 	bl	8003680 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <send_vel_can+0x9c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b31      	cmp	r3, #49	@ 0x31
 8001c30:	d93c      	bls.n	8001cac <send_vel_can+0x94>
    last_tick = HAL_GetTick();
 8001c32:	f001 fd25 	bl	8003680 <HAL_GetTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <send_vel_can+0x9c>)
 8001c3a:	6013      	str	r3, [r2, #0]

    // ===== Header CAN =====
    TxHeader.StdId = 0x030;   // ID cố định
 8001c3c:	2330      	movs	r3, #48	@ 0x30
 8001c3e:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC   = 8;       // 8 byte (vel1 + vel2)
 8001c40:	2308      	movs	r3, #8
 8001c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE   = CAN_ID_STD;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
    TxHeader.RTR   = CAN_RTR_DATA;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24

    // ===== Đóng gói vel1 =====
    data[0] = (uint8_t)(vel1 & 0xFF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)((vel1 >> 8) & 0xFF);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	121b      	asrs	r3, r3, #8
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)((vel1 >> 16) & 0xFF);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	141b      	asrs	r3, r3, #16
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73bb      	strb	r3, [r7, #14]
    data[3] = (uint8_t)((vel1 >> 24) & 0xFF);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	161b      	asrs	r3, r3, #24
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	73fb      	strb	r3, [r7, #15]

    // ===== Đóng gói vel2 =====
    data[4] = (uint8_t)(vel2 & 0xFF);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	743b      	strb	r3, [r7, #16]
    data[5] = (uint8_t)((vel2 >> 8) & 0xFF);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	121b      	asrs	r3, r3, #8
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	747b      	strb	r3, [r7, #17]
    data[6] = (uint8_t)((vel2 >> 16) & 0xFF);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	141b      	asrs	r3, r3, #16
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	74bb      	strb	r3, [r7, #18]
    data[7] = (uint8_t)((vel2 >> 24) & 0xFF);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	161b      	asrs	r3, r3, #24
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	74fb      	strb	r3, [r7, #19]

    // ===== Gửi nếu Mailbox rảnh =====
    if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, data, &txMailbox) == HAL_OK) {
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	f107 020c 	add.w	r2, r7, #12
 8001c90:	f107 0118 	add.w	r1, r7, #24
 8001c94:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <send_vel_can+0xa0>)
 8001c96:	f001 ffac 	bl	8003bf2 <HAL_CAN_AddTxMessage>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d106      	bne.n	8001cae <send_vel_can+0x96>
        count_send_vel_can++;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <send_vel_can+0xa4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <send_vel_can+0xa4>)
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e000      	b.n	8001cae <send_vel_can+0x96>
    if (HAL_GetTick() - last_tick < 50) return;
 8001cac:	bf00      	nop
    } else {
        // Nếu mailbox đầy, bỏ qua frame này để tránh nghẽn
        // (có thể thêm debug ở đây nếu muốn)
    }
}
 8001cae:	3730      	adds	r7, #48	@ 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000598 	.word	0x20000598
 8001cb8:	200001fc 	.word	0x200001fc
 8001cbc:	20000518 	.word	0x20000518

08001cc0 <request_actual_velocity>:
	        // (có thể thêm debug ở đây nếu muốn)
	    }
}
// => sau đó gọi update_vel(1,vel1,true,50000, 150000) -> để cập nhật vận tốc đến driver và motor 1
// => sau đó gọi update_vel(2,vel2,true,50000, 150000) -> để cập nhật vận tốc đến driver và motor 2
void request_actual_velocity(uint8_t nodeId) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef tx;
    uint8_t txData[8] = {0x40, 0x6C, 0x60, 0x00, 0, 0, 0, 0};
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <request_actual_velocity+0x40>)
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    uint32_t txMailbox;

    tx.StdId = 0x600 + nodeId;
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001cd8:	61bb      	str	r3, [r7, #24]
    tx.IDE = CAN_ID_STD;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
    tx.RTR = CAN_RTR_DATA;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    tx.DLC = 8;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_CAN_AddTxMessage(&hcan2, &tx, txData, &txMailbox);
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	f107 0210 	add.w	r2, r7, #16
 8001cee:	f107 0118 	add.w	r1, r7, #24
 8001cf2:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <request_actual_velocity+0x44>)
 8001cf4:	f001 ff7d 	bl	8003bf2 <HAL_CAN_AddTxMessage>
}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	@ 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	00606c40 	.word	0x00606c40
 8001d04:	200001fc 	.word	0x200001fc

08001d08 <HAL_CAN_ErrorCallback>:

    uint32_t txMailbox;
    HAL_CAN_AddTxMessage(&hcan2, &txHeader, txData, &txMailbox);
}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    if (hcan->ErrorCode & HAL_CAN_ERROR_BOF) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d010      	beq.n	8001d3e <HAL_CAN_ErrorCallback+0x36>
        HAL_CAN_Stop(hcan);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f001 ff1f 	bl	8003b60 <HAL_CAN_Stop>
        HAL_CAN_DeInit(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f001 fdd7 	bl	80038d6 <HAL_CAN_DeInit>
        HAL_CAN_Init(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f001 fcd9 	bl	80036e0 <HAL_CAN_Init>
        HAL_CAN_Start(hcan);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f001 fed2 	bl	8003ad8 <HAL_CAN_Start>

        // Bật lại interrupt
        HAL_CAN_ActivateNotification(hcan,
 8001d34:	f648 7102 	movw	r1, #36610	@ 0x8f02
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f002 f94c 	bl	8003fd6 <HAL_CAN_ActivateNotification>
            CAN_IT_ERROR);
//
//        char msg[] = "⚡ CAN bus-off recovered\r\n";
//        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	b0b1      	sub	sp, #196	@ 0xc4
 8001d4c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4e:	f001 fc31 	bl	80035b4 <HAL_Init>

  /* USER CODE BEGIN Init */
	    HAL_TIM_Base_Start(&htim1);
 8001d52:	48aa      	ldr	r0, [pc, #680]	@ (8001ffc <main+0x2b4>)
 8001d54:	f006 fa94 	bl	8008280 <HAL_TIM_Base_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d58:	f000 fb4e 	bl	80023f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5c:	f000 fd8e 	bl	800287c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d60:	f000 fd64 	bl	800282c <MX_DMA_Init>
  MX_I2C1_Init();
 8001d64:	f000 fbe8 	bl	8002538 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d68:	f000 fc42 	bl	80025f0 <MX_SPI1_Init>
  MX_TIM14_Init();
 8001d6c:	f000 fd02 	bl	8002774 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8001d70:	f000 fd24 	bl	80027bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001d74:	f000 fc72 	bl	800265c <MX_TIM1_Init>
  MX_I2C3_Init();
 8001d78:	f000 fc0c 	bl	8002594 <MX_I2C3_Init>
  MX_CAN2_Init();
 8001d7c:	f000 fba6 	bl	80024cc <MX_CAN2_Init>
  MX_TIM8_Init();
 8001d80:	f000 fcbc 	bl	80026fc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
    // === Cấu hình CAN filter ===
    HAL_CAN_Start(&hcan2);
 8001d84:	489e      	ldr	r0, [pc, #632]	@ (8002000 <main+0x2b8>)
 8001d86:	f001 fea7 	bl	8003ad8 <HAL_CAN_Start>
    set_drive_mode(3,1);  set_drive_mode(3,2);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f7ff f931 	bl	8000ff4 <set_drive_mode>
 8001d92:	2102      	movs	r1, #2
 8001d94:	2003      	movs	r0, #3
 8001d96:	f7ff f92d 	bl	8000ff4 <set_drive_mode>
    remap_rpdo1_for_velocity(1); remap_rpdo1_for_velocity(2);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fbe0 	bl	8001560 <remap_rpdo1_for_velocity>
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff fbdd 	bl	8001560 <remap_rpdo1_for_velocity>
    CAN_FilterTypeDef filter;
    filter.FilterActivation = CAN_FILTER_ENABLE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	66bb      	str	r3, [r7, #104]	@ 0x68
    filter.FilterBank = 14;
 8001daa:	230e      	movs	r3, #14
 8001dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	65bb      	str	r3, [r7, #88]	@ 0x58
    filter.FilterIdHigh = 0x0000;
 8001db2:	2300      	movs	r3, #0
 8001db4:	64bb      	str	r3, [r7, #72]	@ 0x48
    filter.FilterIdLow = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    filter.FilterMaskIdHigh = 0x0000;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	653b      	str	r3, [r7, #80]	@ 0x50
    filter.FilterMaskIdLow = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	657b      	str	r3, [r7, #84]	@ 0x54
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	663b      	str	r3, [r7, #96]	@ 0x60
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	667b      	str	r3, [r7, #100]	@ 0x64
    filter.SlaveStartFilterBank = 14;
 8001dca:	230e      	movs	r3, #14
 8001dcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_CAN_ConfigFilter(&hcan2, &filter);
 8001dce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	488a      	ldr	r0, [pc, #552]	@ (8002000 <main+0x2b8>)
 8001dd6:	f001 fda1 	bl	800391c <HAL_CAN_ConfigFilter>
//    filter.SlaveStartFilterBank = 14;
//    HAL_CAN_ConfigFilter(&hcan2, &filter);

//    HAL_CAN_Start(&hcan2);
//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
HAL_CAN_ActivateNotification(&hcan2,
 8001dda:	f648 7102 	movw	r1, #36610	@ 0x8f02
 8001dde:	4888      	ldr	r0, [pc, #544]	@ (8002000 <main+0x2b8>)
 8001de0:	f002 f8f9 	bl	8003fd6 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   // print_uart("🔧 Bắt đầu khởi tạo Velocity Mode...\r\n");
// CANopenNodeSTM32 axis;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);//on led
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dea:	4886      	ldr	r0, [pc, #536]	@ (8002004 <main+0x2bc>)
 8001dec:	f003 faa4 	bl	8005338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
 8001df2:	2108      	movs	r1, #8
 8001df4:	4884      	ldr	r0, [pc, #528]	@ (8002008 <main+0x2c0>)
 8001df6:	f003 fa9f 	bl	8005338 <HAL_GPIO_WritePin>
    //print_uart("Nhấn MODE nếu cần cho Analog\r\n");
   // HAL_Delay(1000);
    PS2_Init();
 8001dfa:	f7ff fa1b 	bl	8001234 <PS2_Init>
   // print_uart("Đang test SPI đơn giản...\r\n");
    Test_SPI_1Byte();
 8001dfe:	f7ff fabb 	bl	8001378 <Test_SPI_1Byte>

       set_drive_mode(3,1);  set_drive_mode(3,2);
 8001e02:	2101      	movs	r1, #1
 8001e04:	2003      	movs	r0, #3
 8001e06:	f7ff f8f5 	bl	8000ff4 <set_drive_mode>
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f7ff f8f1 	bl	8000ff4 <set_drive_mode>
       remap_rpdo1_for_velocity(1); remap_rpdo1_for_velocity(2);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fba4 	bl	8001560 <remap_rpdo1_for_velocity>
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f7ff fba1 	bl	8001560 <remap_rpdo1_for_velocity>
       remap_tpdo1_velocity(1);  // Remap TPDO1 để chứa Actual Velocity
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fbde 	bl	80015e0 <remap_tpdo1_velocity>
       remap_tpdo1_velocity(2);
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7ff fbdb 	bl	80015e0 <remap_tpdo1_velocity>
    // === Gửi lệnh quay bằng RPDO ===
  //  int32_t target_velocity1 = 50000;  // hoặc -100000 để quay ngược
    uint32_t lastSend = HAL_GetTick();
 8001e2a:	f001 fc29 	bl	8003680 <HAL_GetTick>
 8001e2e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
//    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // === Biến toàn cục trong main ===
  int32_t prevVel1 = 0, prevVel2 = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t lastPrint = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  static uint8_t last_block_state = 0;
  uint32_t last_upvel1_time = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t last_upvel2_time = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    	  /* USER CODE END WHILE */

    	   /* USER CODE BEGIN 3 */
    	// Nếu cả 2 node booted cùng lúc
    	if (node_booted[1] && node_booted[2]) {
 8001e50:	4b6e      	ldr	r3, [pc, #440]	@ (800200c <main+0x2c4>)
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03f      	beq.n	8001eda <main+0x192>
 8001e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800200c <main+0x2c4>)
 8001e5c:	789b      	ldrb	r3, [r3, #2]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d03a      	beq.n	8001eda <main+0x192>
    	    node_booted[1] = 0;
 8001e64:	4b69      	ldr	r3, [pc, #420]	@ (800200c <main+0x2c4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
    	    node_booted[2] = 0;
 8001e6a:	4b68      	ldr	r3, [pc, #416]	@ (800200c <main+0x2c4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	709a      	strb	r2, [r3, #2]
    	    HAL_Delay(100);
 8001e70:	2064      	movs	r0, #100	@ 0x64
 8001e72:	f001 fc11 	bl	8003698 <HAL_Delay>
//    	    send_nmt_start(1);
//    	    send_nmt_start(2);
//    	    HAL_Delay(10);

    	    // --- Cấu hình Mode + PDO ---
    	    set_drive_mode(3,1);
 8001e76:	2101      	movs	r1, #1
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f7ff f8bb 	bl	8000ff4 <set_drive_mode>
    	    set_drive_mode(3,2);
 8001e7e:	2102      	movs	r1, #2
 8001e80:	2003      	movs	r0, #3
 8001e82:	f7ff f8b7 	bl	8000ff4 <set_drive_mode>

    	    remap_rpdo1_for_velocity(1);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff fb6a 	bl	8001560 <remap_rpdo1_for_velocity>
    	    remap_rpdo1_for_velocity(2);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f7ff fb67 	bl	8001560 <remap_rpdo1_for_velocity>

    	    remap_tpdo1_velocity(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff fba4 	bl	80015e0 <remap_tpdo1_velocity>
    	    remap_tpdo1_velocity(2);
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f7ff fba1 	bl	80015e0 <remap_tpdo1_velocity>

    	    // --- Reset vận tốc về 0 ---
    	    send_velocity_rpdo(1, 0, true, 50000, 200000);
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002010 <main+0x2c8>)
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff fc1e 	bl	80016ec <send_velocity_rpdo>
    	    send_velocity_rpdo(2, 0, true, 50000, 200000);
 8001eb0:	4b57      	ldr	r3, [pc, #348]	@ (8002010 <main+0x2c8>)
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f7ff fc15 	bl	80016ec <send_velocity_rpdo>
    	    HAL_Delay(20);
 8001ec2:	2014      	movs	r0, #20
 8001ec4:	f001 fbe8 	bl	8003698 <HAL_Delay>

    	    // --- Enable đồng thời ---
    	    send_enable_sequence(1);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff fbbb 	bl	8001644 <send_enable_sequence>
    	    send_enable_sequence(2);
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7ff fbb8 	bl	8001644 <send_enable_sequence>

    	    print_uart("✅ Cả 2 node đã re-enable đồng bộ\r\n");
 8001ed4:	484f      	ldr	r0, [pc, #316]	@ (8002014 <main+0x2cc>)
 8001ed6:	f7fe fffd 	bl	8000ed4 <print_uart>
    	}


    	 int32_t vel1 = 0, vel2 = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    	if (can_rx_flag){
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8002018 <main+0x2d0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01a      	beq.n	8001f24 <main+0x1dc>
    	    	char buf [64];
    	        if (HAL_GetTick() - lastPrint >= 1000) { //1s
 8001eee:	f001 fbc7 	bl	8003680 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001efe:	d311      	bcc.n	8001f24 <main+0x1dc>
    	            snprintf(buf, sizeof(buf), "📥 Gói CAN nhận/giây: %lu\r\n", can_rx_count);
 8001f00:	4b46      	ldr	r3, [pc, #280]	@ (800201c <main+0x2d4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4638      	mov	r0, r7
 8001f06:	4a46      	ldr	r2, [pc, #280]	@ (8002020 <main+0x2d8>)
 8001f08:	2140      	movs	r1, #64	@ 0x40
 8001f0a:	f008 fbd5 	bl	800a6b8 <sniprintf>
    	         print_uart(buf);
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ffdf 	bl	8000ed4 <print_uart>
    	   can_rx_count=0;
 8001f16:	4b41      	ldr	r3, [pc, #260]	@ (800201c <main+0x2d4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
    	         lastPrint=HAL_GetTick();
 8001f1c:	f001 fbb0 	bl	8003680 <HAL_GetTick>
 8001f20:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    	        }
    	}
    	//gửi gói CAN
        uint32_t now = HAL_GetTick();
 8001f24:	f001 fbac 	bl	8003680 <HAL_GetTick>
 8001f28:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        // Nếu vừa đổi mode → reset vận tốc ngay
          if (mode_changed_flag) {
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <main+0x2dc>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d022      	beq.n	8001f7c <main+0x234>
              vel1 = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
              vel2 = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
              prevVel1 = -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
              prevVel2 = -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
              send_velocity_rpdo(1, 0, true, 50000, 250000);
 8001f52:	4b35      	ldr	r3, [pc, #212]	@ (8002028 <main+0x2e0>)
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff fbc4 	bl	80016ec <send_velocity_rpdo>
              send_velocity_rpdo(2, 0, true, 50000, 250000);
 8001f64:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <main+0x2e0>)
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7ff fbbb 	bl	80016ec <send_velocity_rpdo>
              mode_changed_flag = 0;
 8001f76:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <main+0x2dc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
          }
        static uint32_t lastPS2 = 0;
        static uint32_t last_ps2_update = 0;
        uint32_t last_stop_time = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        (void)last_stop_time; /* Silence unused-variable warning */
        const int32_t jogVel = 100000; //max =180000;
 8001f82:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <main+0x2e4>)
 8001f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if(uart_rx_ready ){
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <main+0x2e8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <main+0x254>
        	uart_rx_ready=0;
 8001f90:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <main+0x2e8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
        	handle_uart_command(uart_rx_buf);
 8001f96:	4827      	ldr	r0, [pc, #156]	@ (8002034 <main+0x2ec>)
 8001f98:	f7fe ffb2 	bl	8000f00 <handle_uart_command>
        }
        // === Gửi SYNC + cập nhật vận tốc định kỳ ===
        if (now - lastSend >= 50) { //ban dau la 50, tần so hoat dong spi tam 20
 8001f9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001fa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b31      	cmp	r3, #49	@ 0x31
 8001fa8:	d905      	bls.n	8001fb6 <main+0x26e>

        //	set_drive_mode(3,1);  set_drive_mode(3,2);
            lastSend = now;
 8001faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            send_sync_frame();  // Nếu RPDO cần SYNC
 8001fb2:	f7ff fb79 	bl	80016a8 <send_sync_frame>

        }
        // --- Kiểm tra block/unblock ---
        if (ps2_blocked != last_block_state) {
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <main+0x2f0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <main+0x2f4>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d049      	beq.n	8002058 <main+0x310>
            if (ps2_blocked == 0) {
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <main+0x2f0>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d13c      	bne.n	8002048 <main+0x300>
                // Vừa bỏ block → reset hết cờ
                vel1 = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                vel2 = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                prevVel1 = -1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                prevVel2 = -1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                last_ps2_update = HAL_GetTick();
 8001fea:	f001 fb49 	bl	8003680 <HAL_GetTick>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <main+0x2f8>)
 8001ff2:	6013      	str	r3, [r2, #0]
                print_uart("✅ Unblocked → PS2 ready\n");
 8001ff4:	4813      	ldr	r0, [pc, #76]	@ (8002044 <main+0x2fc>)
 8001ff6:	f7fe ff6d 	bl	8000ed4 <print_uart>
 8001ffa:	e028      	b.n	800204e <main+0x306>
 8001ffc:	200003e4 	.word	0x200003e4
 8002000:	200001fc 	.word	0x200001fc
 8002004:	40020400 	.word	0x40020400
 8002008:	40021000 	.word	0x40021000
 800200c:	20000590 	.word	0x20000590
 8002010:	00030d40 	.word	0x00030d40
 8002014:	0800cdd4 	.word	0x0800cdd4
 8002018:	200001f8 	.word	0x200001f8
 800201c:	200001f4 	.word	0x200001f4
 8002020:	0800ce04 	.word	0x0800ce04
 8002024:	20000594 	.word	0x20000594
 8002028:	0003d090 	.word	0x0003d090
 800202c:	000186a0 	.word	0x000186a0
 8002030:	20000575 	.word	0x20000575
 8002034:	20000534 	.word	0x20000534
 8002038:	20000593 	.word	0x20000593
 800203c:	2000059c 	.word	0x2000059c
 8002040:	200005a0 	.word	0x200005a0
 8002044:	0800ce28 	.word	0x0800ce28
            } else {
                print_uart("⛔ Blocked by sensor\n");
 8002048:	4895      	ldr	r0, [pc, #596]	@ (80022a0 <main+0x558>)
 800204a:	f7fe ff43 	bl	8000ed4 <print_uart>
            }
            last_block_state = ps2_blocked;
 800204e:	4b95      	ldr	r3, [pc, #596]	@ (80022a4 <main+0x55c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b94      	ldr	r3, [pc, #592]	@ (80022a8 <main+0x560>)
 8002056:	701a      	strb	r2, [r3, #0]
        }

  static uint8_t ps2_init_ok = 0; // 0 = chưa sẵn sàng, 1 = đã thấy trạng thái không nhấn
  (void)ps2_init_ok; /* Silence unused-variable warning until used */
        if ((current_mode==MODE_PS2) && (now - lastPS2 >= 20)) {
 8002058:	4b94      	ldr	r3, [pc, #592]	@ (80022ac <main+0x564>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80e4 	bne.w	800222c <main+0x4e4>
 8002064:	4b92      	ldr	r3, [pc, #584]	@ (80022b0 <main+0x568>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b13      	cmp	r3, #19
 8002070:	f240 80dc 	bls.w	800222c <main+0x4e4>
            lastPS2 = now;
 8002074:	4a8e      	ldr	r2, [pc, #568]	@ (80022b0 <main+0x568>)
 8002076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800207a:	6013      	str	r3, [r2, #0]
        // === Đọc tay cầm PS2 ===
        PS2_Data ps2 = PS2_ReadButtons();
 800207c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f929 	bl	80012d8 <PS2_ReadButtons>

        //loc nhieu

        bool up_now     = !(ps2.buttons & BTN_UP);
 8002086:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf0c      	ite	eq
 8002092:	2301      	moveq	r3, #1
 8002094:	2300      	movne	r3, #0
 8002096:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        bool down_now   = !(ps2.buttons & BTN_DOWN);
 800209a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800209e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
        bool tri_now    = !(ps2.buttons & BTN_TRIANGLE);
 80020ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
        bool cross_now  = !(ps2.buttons & BTN_CROSS);
 80020c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
        bool right_now  = !(ps2.buttons & BTN_RIGHT);
 80020d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        bool square_now = !(ps2.buttons & BTN_SQUARE);
 80020ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	0bdb      	lsrs	r3, r3, #15
 80020f6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        // Debug nút nhấn
        char msg[64];
       // char buf[64];
        snprintf(msg, sizeof(msg),
 80020fa:	f897 607b 	ldrb.w	r6, [r7, #123]	@ 0x7b
 80020fe:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8002102:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 8002106:	f897 1078 	ldrb.w	r1, [r7, #120]	@ 0x78
 800210a:	f897 0077 	ldrb.w	r0, [r7, #119]	@ 0x77
 800210e:	f897 4076 	ldrb.w	r4, [r7, #118]	@ 0x76
 8002112:	463d      	mov	r5, r7
 8002114:	9404      	str	r4, [sp, #16]
 8002116:	9003      	str	r0, [sp, #12]
 8002118:	9102      	str	r1, [sp, #8]
 800211a:	9201      	str	r2, [sp, #4]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4633      	mov	r3, r6
 8002120:	4a64      	ldr	r2, [pc, #400]	@ (80022b4 <main+0x56c>)
 8002122:	2140      	movs	r1, #64	@ 0x40
 8002124:	4628      	mov	r0, r5
 8002126:	f008 fac7 	bl	800a6b8 <sniprintf>
            "BTN: UP=%d DW=%d TR=%d CR=%d RI=%d SQ=%d\r\n",
            up_now, down_now, tri_now, cross_now, right_now, square_now);
        print_uart(msg);
 800212a:	463b      	mov	r3, r7
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fed1 	bl	8000ed4 <print_uart>

        // === Gán vận tốc theo nút nhấn ===

        if (!ps2_blocked) {
 8002132:	4b5c      	ldr	r3, [pc, #368]	@ (80022a4 <main+0x55c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10e      	bne.n	800215a <main+0x412>
        	if (up_now )         vel1 = -jogVel;
 800213c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <main+0x404>
 8002144:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002146:	425b      	negs	r3, r3
 8002148:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        	 if (tri_now)        vel2 = +jogVel;
 800214c:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <main+0x412>
 8002154:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        if (down_now)  vel1 = +jogVel;
 800215a:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <main+0x420>
 8002162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002164:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        if (cross_now) vel2 = -jogVel;
 8002168:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <main+0x430>
 8002170:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002172:	425b      	negs	r3, r3
 8002174:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        if (right_now) {
 8002178:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <main+0x460>
            vel1 = -0.5 * jogVel;
 8002180:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002182:	f7fe f9cf 	bl	8000524 <__aeabi_i2d>
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b4b      	ldr	r3, [pc, #300]	@ (80022b8 <main+0x570>)
 800218c:	f7fe fa34 	bl	80005f8 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fcde 	bl	8000b58 <__aeabi_d2iz>
 800219c:	4603      	mov	r3, r0
 800219e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            vel2 = +jogVel;
 80021a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        if (square_now) {
 80021a8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d014      	beq.n	80021da <main+0x492>
            vel1 = -jogVel;
 80021b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021b2:	425b      	negs	r3, r3
 80021b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            vel2 = +0.5 * jogVel;
 80021b8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80021ba:	f7fe f9b3 	bl	8000524 <__aeabi_i2d>
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b3e      	ldr	r3, [pc, #248]	@ (80022bc <main+0x574>)
 80021c4:	f7fe fa18 	bl	80005f8 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fcc2 	bl	8000b58 <__aeabi_d2iz>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }


        // Nếu dữ liệu thay đổi → cập nhật thời gian cuối nhận PS2
        if (ps2.buttons != 0xFF) {
 80021da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80021de:	2bff      	cmp	r3, #255	@ 0xff
 80021e0:	d003      	beq.n	80021ea <main+0x4a2>
            last_ps2_update = now;
 80021e2:	4a37      	ldr	r2, [pc, #220]	@ (80022c0 <main+0x578>)
 80021e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021e8:	6013      	str	r3, [r2, #0]
        }
       // }
        if (now - last_ps2_update > 500) {
 80021ea:	4b35      	ldr	r3, [pc, #212]	@ (80022c0 <main+0x578>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80021f8:	d918      	bls.n	800222c <main+0x4e4>
            if (vel1 != 0 || vel2 != 0) {
 80021fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <main+0x4c2>
 8002202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <main+0x4e4>
                print_uart("❌ PS2 timeout, reset động cơ\r\n");
 800220a:	482e      	ldr	r0, [pc, #184]	@ (80022c4 <main+0x57c>)
 800220c:	f7fe fe62 	bl	8000ed4 <print_uart>
                vel1 = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                vel2 = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                // ✅ Gán giá trị khác để buộc gửi RPDO lại
                        prevVel1 = -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                        prevVel2 = -1;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

             	 }
        	}
        }
        if (current_mode == MODE_AUTO) {
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <main+0x564>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d17e      	bne.n	8002334 <main+0x5ec>
            static uint32_t lastSendAuto = 0;
            uint32_t now = HAL_GetTick();
 8002236:	f001 fa23 	bl	8003680 <HAL_GetTick>
 800223a:	6738      	str	r0, [r7, #112]	@ 0x70

            // Cập nhật giá trị mới cho từng bánh nếu có gói mới
            if (ready1) {
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <main+0x580>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d019      	beq.n	800227a <main+0x532>
                vel1 = up_vel1;
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <main+0x584>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                if (vel1 > jogVel) vel1 = jogVel;
 800224e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002252:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002254:	429a      	cmp	r2, r3
 8002256:	dd03      	ble.n	8002260 <main+0x518>
 8002258:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800225a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800225e:	e009      	b.n	8002274 <main+0x52c>
                else if (vel1 < -jogVel) vel1 = -jogVel;
 8002260:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002262:	425b      	negs	r3, r3
 8002264:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002268:	429a      	cmp	r2, r3
 800226a:	da03      	bge.n	8002274 <main+0x52c>
 800226c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800226e:	425b      	negs	r3, r3
 8002270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
               // last_upvel1_time = now;
                ready1 = 0;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <main+0x580>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
            }
            if (ready2) {
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <main+0x588>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d036      	beq.n	80022f2 <main+0x5aa>
                vel2 = up_vel2;
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <main+0x58c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                if (vel2 > jogVel) vel2 = jogVel;
 800228c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002292:	429a      	cmp	r2, r3
 8002294:	dd20      	ble.n	80022d8 <main+0x590>
 8002296:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800229c:	e026      	b.n	80022ec <main+0x5a4>
 800229e:	bf00      	nop
 80022a0:	0800ce48 	.word	0x0800ce48
 80022a4:	20000593 	.word	0x20000593
 80022a8:	2000059c 	.word	0x2000059c
 80022ac:	20000504 	.word	0x20000504
 80022b0:	200005a4 	.word	0x200005a4
 80022b4:	0800ce60 	.word	0x0800ce60
 80022b8:	bfe00000 	.word	0xbfe00000
 80022bc:	3fe00000 	.word	0x3fe00000
 80022c0:	200005a0 	.word	0x200005a0
 80022c4:	0800ce8c 	.word	0x0800ce8c
 80022c8:	2000058c 	.word	0x2000058c
 80022cc:	2000057c 	.word	0x2000057c
 80022d0:	2000058d 	.word	0x2000058d
 80022d4:	20000580 	.word	0x20000580
                else if (vel2 < -jogVel) vel2 = -jogVel;
 80022d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022da:	425b      	negs	r3, r3
 80022dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80022e0:	429a      	cmp	r2, r3
 80022e2:	da03      	bge.n	80022ec <main+0x5a4>
 80022e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022e6:	425b      	negs	r3, r3
 80022e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
              //  last_upvel2_time = now;
                ready2 = 0;
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <main+0x690>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
            }

            // Gửi RPDO định kỳ (50 ms)
            if (now - lastSendAuto >= 10) {
 80022f2:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <main+0x694>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d91a      	bls.n	8002334 <main+0x5ec>
             //   lastSendAuto = now;
            	lastSendAuto += 50;  // giữ nhịp đều
 80022fe:	4b37      	ldr	r3, [pc, #220]	@ (80023dc <main+0x694>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3332      	adds	r3, #50	@ 0x32
 8002304:	4a35      	ldr	r2, [pc, #212]	@ (80023dc <main+0x694>)
 8002306:	6013      	str	r3, [r2, #0]
                send_velocity_rpdo(1, vel1, false, 50000, 250000);
 8002308:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <main+0x698>)
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002310:	2200      	movs	r2, #0
 8002312:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff f9e8 	bl	80016ec <send_velocity_rpdo>
                send_velocity_rpdo(2, vel2, false, 50000, 250000);
 800231c:	4b30      	ldr	r3, [pc, #192]	@ (80023e0 <main+0x698>)
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002324:	2200      	movs	r2, #0
 8002326:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800232a:	2002      	movs	r0, #2
 800232c:	f7ff f9de 	bl	80016ec <send_velocity_rpdo>
                send_sync_frame();
 8002330:	f7ff f9ba 	bl	80016a8 <send_sync_frame>
            }
        }
        // === Gửi RPDO nếu vận tốc thay đổi ===
        if (vel1 != prevVel1) {
 8002334:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800233c:	429a      	cmp	r2, r3
 800233e:	d012      	beq.n	8002366 <main+0x61e>
            send_velocity_rpdo(1, vel1, true, 50000, 250000); // node 1
 8002340:	4b27      	ldr	r3, [pc, #156]	@ (80023e0 <main+0x698>)
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002348:	2201      	movs	r2, #1
 800234a:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800234e:	2001      	movs	r0, #1
 8002350:	f7ff f9cc 	bl	80016ec <send_velocity_rpdo>
            count_rpdo1++;
 8002354:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <main+0x69c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a22      	ldr	r2, [pc, #136]	@ (80023e4 <main+0x69c>)
 800235c:	6013      	str	r3, [r2, #0]
            prevVel1 = vel1;
 800235e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        }

        if (vel2 != prevVel2) {
 8002366:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800236a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800236e:	429a      	cmp	r2, r3
 8002370:	d012      	beq.n	8002398 <main+0x650>
            send_velocity_rpdo(2, vel2, true, 50000, 250000); // node 2
 8002372:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <main+0x698>)
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800237a:	2201      	movs	r2, #1
 800237c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002380:	2002      	movs	r0, #2
 8002382:	f7ff f9b3 	bl	80016ec <send_velocity_rpdo>
            count_rpdo2++;
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <main+0x6a0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a16      	ldr	r2, [pc, #88]	@ (80023e8 <main+0x6a0>)
 800238e:	6013      	str	r3, [r2, #0]
            prevVel2 = vel2;
 8002390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        }
        // === Đọc tốc độ thực tế mỗi 200ms ===
        if (now - lastPrint >= 200) { // cứ 100ms gửi vận tốc lên 1 làn
 8002398:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800239c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80023a4:	f67f ad54 	bls.w	8001e50 <main+0x108>
            lastPrint = now;
 80023a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
          request_actual_velocity(1);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7ff fc85 	bl	8001cc0 <request_actual_velocity>
          request_actual_velocity(2);
 80023b6:	2002      	movs	r0, #2
 80023b8:	f7ff fc82 	bl	8001cc0 <request_actual_velocity>
          count_request_vel++;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <main+0x6a4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <main+0x6a4>)
 80023c4:	6013      	str	r3, [r2, #0]
          send_vel_can(currentVel1, currentVel2);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <main+0x6a8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <main+0x6ac>)
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fc21 	bl	8001c18 <send_vel_can>
    while (1) {
 80023d6:	e53b      	b.n	8001e50 <main+0x108>
 80023d8:	2000058d 	.word	0x2000058d
 80023dc:	200005a8 	.word	0x200005a8
 80023e0:	0003d090 	.word	0x0003d090
 80023e4:	2000050c 	.word	0x2000050c
 80023e8:	20000510 	.word	0x20000510
 80023ec:	20000514 	.word	0x20000514
 80023f0:	20000584 	.word	0x20000584
 80023f4:	20000588 	.word	0x20000588

080023f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b094      	sub	sp, #80	@ 0x50
 80023fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fe:	f107 0320 	add.w	r3, r7, #32
 8002402:	2230      	movs	r2, #48	@ 0x30
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f008 fa64 	bl	800a8d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <SystemClock_Config+0xcc>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	4a27      	ldr	r2, [pc, #156]	@ (80024c4 <SystemClock_Config+0xcc>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	@ 0x40
 800242c:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <SystemClock_Config+0xcc>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <SystemClock_Config+0xd0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <SystemClock_Config+0xd0>)
 8002442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <SystemClock_Config+0xd0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002454:	2301      	movs	r3, #1
 8002456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002458:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245e:	2302      	movs	r3, #2
 8002460:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002462:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002468:	2304      	movs	r3, #4
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800246c:	23a8      	movs	r3, #168	@ 0xa8
 800246e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002470:	2302      	movs	r3, #2
 8002472:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002474:	2307      	movs	r3, #7
 8002476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002478:	f107 0320 	add.w	r3, r7, #32
 800247c:	4618      	mov	r0, r3
 800247e:	f004 fdeb 	bl	8007058 <HAL_RCC_OscConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002488:	f000 fb86 	bl	8002b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800248c:	230f      	movs	r3, #15
 800248e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002490:	2302      	movs	r3, #2
 8002492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002498:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800249c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800249e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2105      	movs	r1, #5
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 f84c 	bl	8007548 <HAL_RCC_ClockConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024b6:	f000 fb6f 	bl	8002b98 <Error_Handler>
  }
}
 80024ba:	bf00      	nop
 80024bc:	3750      	adds	r7, #80	@ 0x50
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000

080024cc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80024d0:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024d2:	4a18      	ldr	r2, [pc, #96]	@ (8002534 <MX_CAN2_Init+0x68>)
 80024d4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80024d6:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024d8:	2203      	movs	r2, #3
 80024da:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80024dc:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024e2:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024ea:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80024ee:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <MX_CAN2_Init+0x64>)
 80024fe:	2201      	movs	r2, #1
 8002500:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <MX_CAN2_Init+0x64>)
 8002504:	2201      	movs	r2, #1
 8002506:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <MX_CAN2_Init+0x64>)
 800250a:	2201      	movs	r2, #1
 800250c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <MX_CAN2_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <MX_CAN2_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_CAN2_Init+0x64>)
 800251c:	f001 f8e0 	bl	80036e0 <HAL_CAN_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8002526:	f000 fb37 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200001fc 	.word	0x200001fc
 8002534:	40006800 	.word	0x40006800

08002538 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <MX_I2C1_Init+0x50>)
 800253e:	4a13      	ldr	r2, [pc, #76]	@ (800258c <MX_I2C1_Init+0x54>)
 8002540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002542:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <MX_I2C1_Init+0x50>)
 8002544:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <MX_I2C1_Init+0x58>)
 8002546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002548:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <MX_I2C1_Init+0x50>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800254e:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <MX_I2C1_Init+0x50>)
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <MX_I2C1_Init+0x50>)
 8002556:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800255a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800255c:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <MX_I2C1_Init+0x50>)
 800255e:	2200      	movs	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <MX_I2C1_Init+0x50>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <MX_I2C1_Init+0x50>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <MX_I2C1_Init+0x50>)
 8002570:	2200      	movs	r2, #0
 8002572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002574:	4804      	ldr	r0, [pc, #16]	@ (8002588 <MX_I2C1_Init+0x50>)
 8002576:	f002 ff1d 	bl	80053b4 <HAL_I2C_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002580:	f000 fb0a 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000224 	.word	0x20000224
 800258c:	40005400 	.word	0x40005400
 8002590:	000186a0 	.word	0x000186a0

08002594 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002598:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <MX_I2C3_Init+0x50>)
 800259a:	4a13      	ldr	r2, [pc, #76]	@ (80025e8 <MX_I2C3_Init+0x54>)
 800259c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800259e:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025a0:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <MX_I2C3_Init+0x58>)
 80025a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025c6:	2240      	movs	r2, #64	@ 0x40
 80025c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ca:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025d0:	4804      	ldr	r0, [pc, #16]	@ (80025e4 <MX_I2C3_Init+0x50>)
 80025d2:	f002 feef 	bl	80053b4 <HAL_I2C_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80025dc:	f000 fadc 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000278 	.word	0x20000278
 80025e8:	40005c00 	.word	0x40005c00
 80025ec:	000186a0 	.word	0x000186a0

080025f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025f4:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <MX_SPI1_Init+0x64>)
 80025f6:	4a18      	ldr	r2, [pc, #96]	@ (8002658 <MX_SPI1_Init+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025fa:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <MX_SPI1_Init+0x64>)
 80025fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002602:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <MX_SPI1_Init+0x64>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <MX_SPI1_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <MX_SPI1_Init+0x64>)
 8002610:	2202      	movs	r2, #2
 8002612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002614:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <MX_SPI1_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <MX_SPI1_Init+0x64>)
 800261c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002620:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002622:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <MX_SPI1_Init+0x64>)
 8002624:	2238      	movs	r2, #56	@ 0x38
 8002626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <MX_SPI1_Init+0x64>)
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <MX_SPI1_Init+0x64>)
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002634:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <MX_SPI1_Init+0x64>)
 8002636:	2200      	movs	r2, #0
 8002638:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <MX_SPI1_Init+0x64>)
 800263c:	220a      	movs	r2, #10
 800263e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002640:	4804      	ldr	r0, [pc, #16]	@ (8002654 <MX_SPI1_Init+0x64>)
 8002642:	f005 f9a1 	bl	8007988 <HAL_SPI_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800264c:	f000 faa4 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2000038c 	.word	0x2000038c
 8002658:	40013000 	.word	0x40013000

0800265c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	463b      	mov	r3, r7
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002678:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <MX_TIM1_Init+0x98>)
 800267a:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <MX_TIM1_Init+0x9c>)
 800267c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800267e:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <MX_TIM1_Init+0x98>)
 8002680:	22a7      	movs	r2, #167	@ 0xa7
 8002682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <MX_TIM1_Init+0x98>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <MX_TIM1_Init+0x98>)
 800268c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002692:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <MX_TIM1_Init+0x98>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002698:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <MX_TIM1_Init+0x98>)
 800269a:	2200      	movs	r2, #0
 800269c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <MX_TIM1_Init+0x98>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026a4:	4813      	ldr	r0, [pc, #76]	@ (80026f4 <MX_TIM1_Init+0x98>)
 80026a6:	f005 fd9b 	bl	80081e0 <HAL_TIM_Base_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80026b0:	f000 fa72 	bl	8002b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	4619      	mov	r1, r3
 80026c0:	480c      	ldr	r0, [pc, #48]	@ (80026f4 <MX_TIM1_Init+0x98>)
 80026c2:	f005 ffac 	bl	800861e <HAL_TIM_ConfigClockSource>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80026cc:	f000 fa64 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026d8:	463b      	mov	r3, r7
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <MX_TIM1_Init+0x98>)
 80026de:	f006 f9d7 	bl	8008a90 <HAL_TIMEx_MasterConfigSynchronization>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026e8:	f000 fa56 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026ec:	bf00      	nop
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200003e4 	.word	0x200003e4
 80026f8:	40010000 	.word	0x40010000

080026fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002702:	463b      	mov	r3, r7
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800270a:	4b18      	ldr	r3, [pc, #96]	@ (800276c <MX_TIM8_Init+0x70>)
 800270c:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <MX_TIM8_Init+0x74>)
 800270e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002710:	4b16      	ldr	r3, [pc, #88]	@ (800276c <MX_TIM8_Init+0x70>)
 8002712:	2253      	movs	r2, #83	@ 0x53
 8002714:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <MX_TIM8_Init+0x70>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 800271c:	4b13      	ldr	r3, [pc, #76]	@ (800276c <MX_TIM8_Init+0x70>)
 800271e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002722:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <MX_TIM8_Init+0x70>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800272a:	4b10      	ldr	r3, [pc, #64]	@ (800276c <MX_TIM8_Init+0x70>)
 800272c:	2200      	movs	r2, #0
 800272e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002730:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <MX_TIM8_Init+0x70>)
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8002736:	2108      	movs	r1, #8
 8002738:	480c      	ldr	r0, [pc, #48]	@ (800276c <MX_TIM8_Init+0x70>)
 800273a:	f005 fe30 	bl	800839e <HAL_TIM_OnePulse_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 8002744:	f000 fa28 	bl	8002b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002750:	463b      	mov	r3, r7
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	@ (800276c <MX_TIM8_Init+0x70>)
 8002756:	f006 f99b 	bl	8008a90 <HAL_TIMEx_MasterConfigSynchronization>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002760:	f000 fa1a 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000042c 	.word	0x2000042c
 8002770:	40010400 	.word	0x40010400

08002774 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <MX_TIM14_Init+0x40>)
 800277a:	4a0f      	ldr	r2, [pc, #60]	@ (80027b8 <MX_TIM14_Init+0x44>)
 800277c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 800277e:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <MX_TIM14_Init+0x40>)
 8002780:	2253      	movs	r2, #83	@ 0x53
 8002782:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <MX_TIM14_Init+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800278a:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <MX_TIM14_Init+0x40>)
 800278c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002790:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <MX_TIM14_Init+0x40>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <MX_TIM14_Init+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800279e:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <MX_TIM14_Init+0x40>)
 80027a0:	f005 fd1e 	bl	80081e0 <HAL_TIM_Base_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80027aa:	f000 f9f5 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000474 	.word	0x20000474
 80027b8:	40002000 	.word	0x40002000

080027bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027c0:	4b16      	ldr	r3, [pc, #88]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027c2:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <MX_USART2_UART_Init+0x64>)
 80027c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ce:	4b13      	ldr	r3, [pc, #76]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027d4:	4b11      	ldr	r3, [pc, #68]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027da:	4b10      	ldr	r3, [pc, #64]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027e2:	220c      	movs	r2, #12
 80027e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027f2:	480a      	ldr	r0, [pc, #40]	@ (800281c <MX_USART2_UART_Init+0x60>)
 80027f4:	f006 f9dc 	bl	8008bb0 <HAL_UART_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027fe:	f000 f9cb 	bl	8002b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&uart_rx_buf[uart_rx_index], 1);
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <MX_USART2_UART_Init+0x68>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <MX_USART2_UART_Init+0x6c>)
 800280c:	4413      	add	r3, r2
 800280e:	2201      	movs	r2, #1
 8002810:	4619      	mov	r1, r3
 8002812:	4802      	ldr	r0, [pc, #8]	@ (800281c <MX_USART2_UART_Init+0x60>)
 8002814:	f006 faa7 	bl	8008d66 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200004bc 	.word	0x200004bc
 8002820:	40004400 	.word	0x40004400
 8002824:	20000574 	.word	0x20000574
 8002828:	20000534 	.word	0x20000534

0800282c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <MX_DMA_Init+0x4c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a0f      	ldr	r2, [pc, #60]	@ (8002878 <MX_DMA_Init+0x4c>)
 800283c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <MX_DMA_Init+0x4c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	200d      	movs	r0, #13
 8002854:	f001 ff09 	bl	800466a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002858:	200d      	movs	r0, #13
 800285a:	f001 ff22 	bl	80046a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	200f      	movs	r0, #15
 8002864:	f001 ff01 	bl	800466a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002868:	200f      	movs	r0, #15
 800286a:	f001 ff1a 	bl	80046a2 <HAL_NVIC_EnableIRQ>

}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	@ 0x30
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	4bb7      	ldr	r3, [pc, #732]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4ab6      	ldr	r2, [pc, #728]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 800289c:	f043 0310 	orr.w	r3, r3, #16
 80028a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a2:	4bb4      	ldr	r3, [pc, #720]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4bb0      	ldr	r3, [pc, #704]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4aaf      	ldr	r2, [pc, #700]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4bad      	ldr	r3, [pc, #692]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4ba9      	ldr	r3, [pc, #676]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4aa8      	ldr	r2, [pc, #672]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4ba6      	ldr	r3, [pc, #664]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4ba2      	ldr	r3, [pc, #648]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4aa1      	ldr	r2, [pc, #644]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b9b      	ldr	r3, [pc, #620]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a9a      	ldr	r2, [pc, #616]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b98      	ldr	r3, [pc, #608]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4b94      	ldr	r3, [pc, #592]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a93      	ldr	r2, [pc, #588]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b91      	ldr	r3, [pc, #580]	@ (8002b74 <MX_GPIO_Init+0x2f8>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	2188      	movs	r1, #136	@ 0x88
 800293e:	488e      	ldr	r0, [pc, #568]	@ (8002b78 <MX_GPIO_Init+0x2fc>)
 8002940:	f002 fcfa 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	2101      	movs	r1, #1
 8002948:	488c      	ldr	r0, [pc, #560]	@ (8002b7c <MX_GPIO_Init+0x300>)
 800294a:	f002 fcf5 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002954:	488a      	ldr	r0, [pc, #552]	@ (8002b80 <MX_GPIO_Init+0x304>)
 8002956:	f002 fcef 	bl	8005338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800295a:	2200      	movs	r2, #0
 800295c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002960:	4888      	ldr	r0, [pc, #544]	@ (8002b84 <MX_GPIO_Init+0x308>)
 8002962:	f002 fce9 	bl	8005338 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002966:	2308      	movs	r3, #8
 8002968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	2301      	movs	r3, #1
 800296c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	4619      	mov	r1, r3
 800297c:	487e      	ldr	r0, [pc, #504]	@ (8002b78 <MX_GPIO_Init+0x2fc>)
 800297e:	f002 fa43 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002982:	2301      	movs	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	4878      	ldr	r0, [pc, #480]	@ (8002b7c <MX_GPIO_Init+0x300>)
 800299a:	f002 fa35 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800299e:	2308      	movs	r3, #8
 80029a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029ae:	2305      	movs	r3, #5
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	4870      	ldr	r0, [pc, #448]	@ (8002b7c <MX_GPIO_Init+0x300>)
 80029ba:	f002 fa25 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	4619      	mov	r1, r3
 80029d2:	486d      	ldr	r0, [pc, #436]	@ (8002b88 <MX_GPIO_Init+0x30c>)
 80029d4:	f002 fa18 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80029d8:	2310      	movs	r3, #16
 80029da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029e8:	2306      	movs	r3, #6
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4619      	mov	r1, r3
 80029f2:	4865      	ldr	r0, [pc, #404]	@ (8002b88 <MX_GPIO_Init+0x30c>)
 80029f4:	f002 fa08 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80029f8:	2304      	movs	r3, #4
 80029fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	485d      	ldr	r0, [pc, #372]	@ (8002b80 <MX_GPIO_Init+0x304>)
 8002a0c:	f002 f9fc 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	4619      	mov	r1, r3
 8002a26:	4854      	ldr	r0, [pc, #336]	@ (8002b78 <MX_GPIO_Init+0x2fc>)
 8002a28:	f002 f9ee 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	484d      	ldr	r0, [pc, #308]	@ (8002b80 <MX_GPIO_Init+0x304>)
 8002a4a:	f002 f9dd 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	4619      	mov	r1, r3
 8002a66:	4846      	ldr	r0, [pc, #280]	@ (8002b80 <MX_GPIO_Init+0x304>)
 8002a68:	f002 f9ce 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002a6c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002a70:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	483f      	ldr	r0, [pc, #252]	@ (8002b84 <MX_GPIO_Init+0x308>)
 8002a86:	f002 f9bf 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a8a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a9c:	2306      	movs	r3, #6
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4835      	ldr	r0, [pc, #212]	@ (8002b7c <MX_GPIO_Init+0x300>)
 8002aa8:	f002 f9ae 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4831      	ldr	r0, [pc, #196]	@ (8002b88 <MX_GPIO_Init+0x30c>)
 8002ac2:	f002 f9a1 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002ac6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ad8:	230a      	movs	r3, #10
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4829      	ldr	r0, [pc, #164]	@ (8002b88 <MX_GPIO_Init+0x30c>)
 8002ae4:	f002 f990 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002af8:	2309      	movs	r3, #9
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	4820      	ldr	r0, [pc, #128]	@ (8002b84 <MX_GPIO_Init+0x308>)
 8002b04:	f002 f980 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	481a      	ldr	r0, [pc, #104]	@ (8002b84 <MX_GPIO_Init+0x308>)
 8002b1c:	f002 f974 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002b20:	2302      	movs	r3, #2
 8002b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b24:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	4810      	ldr	r0, [pc, #64]	@ (8002b78 <MX_GPIO_Init+0x2fc>)
 8002b36:	f002 f967 	bl	8004e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2006      	movs	r0, #6
 8002b40:	f001 fd93 	bl	800466a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b44:	2006      	movs	r0, #6
 8002b46:	f001 fdac 	bl	80046a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Bật ngắt EXTI cho PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // hoặc RISING, tùy vào mạch
 8002b4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480a      	ldr	r0, [pc, #40]	@ (8002b88 <MX_GPIO_Init+0x30c>)
 8002b60:	f002 f952 	bl	8004e08 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	2006      	movs	r0, #6
 8002b6a:	f001 fd7e 	bl	800466a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b6e:	2006      	movs	r0, #6
 8002b70:	e00c      	b.n	8002b8c <MX_GPIO_Init+0x310>
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	f001 fd89 	bl	80046a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b90:	bf00      	nop
 8002b92:	3730      	adds	r7, #48	@ 0x30
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9c:	b672      	cpsid	i
}
 8002b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <Error_Handler+0x8>

08002ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	4a08      	ldr	r2, [pc, #32]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002be2:	2007      	movs	r0, #7
 8002be4:	f001 fd36 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	@ 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a38      	ldr	r2, [pc, #224]	@ (8002cf4 <HAL_CAN_MspInit+0x100>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d16a      	bne.n	8002cec <HAL_CAN_MspInit+0xf8>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b37      	ldr	r3, [pc, #220]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	4a36      	ldr	r2, [pc, #216]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c26:	4b34      	ldr	r3, [pc, #208]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a28      	ldr	r2, [pc, #160]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b26      	ldr	r3, [pc, #152]	@ (8002cf8 <HAL_CAN_MspInit+0x104>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB13     ------> CAN2_TX
    PB5     ------> CAN2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002c7c:	2309      	movs	r3, #9
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	481d      	ldr	r0, [pc, #116]	@ (8002cfc <HAL_CAN_MspInit+0x108>)
 8002c88:	f002 f8be 	bl	8004e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002c9c:	2309      	movs	r3, #9
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4815      	ldr	r0, [pc, #84]	@ (8002cfc <HAL_CAN_MspInit+0x108>)
 8002ca8:	f002 f8ae 	bl	8004e08 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	203f      	movs	r0, #63	@ 0x3f
 8002cb2:	f001 fcda 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002cb6:	203f      	movs	r0, #63	@ 0x3f
 8002cb8:	f001 fcf3 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2040      	movs	r0, #64	@ 0x40
 8002cc2:	f001 fcd2 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002cc6:	2040      	movs	r0, #64	@ 0x40
 8002cc8:	f001 fceb 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	2041      	movs	r0, #65	@ 0x41
 8002cd2:	f001 fcca 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002cd6:	2041      	movs	r0, #65	@ 0x41
 8002cd8:	f001 fce3 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2042      	movs	r0, #66	@ 0x42
 8002ce2:	f001 fcc2 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8002ce6:	2042      	movs	r0, #66	@ 0x42
 8002ce8:	f001 fcdb 	bl	80046a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 8002cec:	bf00      	nop
 8002cee:	3728      	adds	r7, #40	@ 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40006800 	.word	0x40006800
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020400 	.word	0x40020400

08002d00 <HAL_CAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a11      	ldr	r2, [pc, #68]	@ (8002d54 <HAL_CAN_MspDeInit+0x54>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11c      	bne.n	8002d4c <HAL_CAN_MspDeInit+0x4c>
  {
    /* USER CODE BEGIN CAN2_MspDeInit 0 */

    /* USER CODE END CAN2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN2_CLK_DISABLE();
 8002d12:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_CAN_MspDeInit+0x58>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	4a10      	ldr	r2, [pc, #64]	@ (8002d58 <HAL_CAN_MspDeInit+0x58>)
 8002d18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d1c:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RCC_CAN1_CLK_DISABLE();
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <HAL_CAN_MspDeInit+0x58>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <HAL_CAN_MspDeInit+0x58>)
 8002d24:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002d28:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN2 GPIO Configuration
    PB13     ------> CAN2_TX
    PB5     ------> CAN2_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_5);
 8002d2a:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002d2e:	480b      	ldr	r0, [pc, #44]	@ (8002d5c <HAL_CAN_MspDeInit+0x5c>)
 8002d30:	f002 fa06 	bl	8005140 <HAL_GPIO_DeInit>

    /* CAN2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN2_TX_IRQn);
 8002d34:	203f      	movs	r0, #63	@ 0x3f
 8002d36:	f001 fcc2 	bl	80046be <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 8002d3a:	2040      	movs	r0, #64	@ 0x40
 8002d3c:	f001 fcbf 	bl	80046be <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 8002d40:	2041      	movs	r0, #65	@ 0x41
 8002d42:	f001 fcbc 	bl	80046be <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_SCE_IRQn);
 8002d46:	2042      	movs	r0, #66	@ 0x42
 8002d48:	f001 fcb9 	bl	80046be <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN CAN2_MspDeInit 1 */

    /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40006800 	.word	0x40006800
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020400 	.word	0x40020400

08002d60 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	@ 0x30
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a79      	ldr	r2, [pc, #484]	@ (8002f64 <HAL_I2C_MspInit+0x204>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12d      	bne.n	8002dde <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	4b78      	ldr	r3, [pc, #480]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a77      	ldr	r2, [pc, #476]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b75      	ldr	r3, [pc, #468]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d9e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da4:	2312      	movs	r3, #18
 8002da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db0:	2304      	movs	r3, #4
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	4619      	mov	r1, r3
 8002dba:	486c      	ldr	r0, [pc, #432]	@ (8002f6c <HAL_I2C_MspInit+0x20c>)
 8002dbc:	f002 f824 	bl	8004e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	4b68      	ldr	r3, [pc, #416]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	4a67      	ldr	r2, [pc, #412]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002dca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd0:	4b65      	ldr	r3, [pc, #404]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ddc:	e0bd      	b.n	8002f5a <HAL_I2C_MspInit+0x1fa>
  else if(hi2c->Instance==I2C3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a63      	ldr	r2, [pc, #396]	@ (8002f70 <HAL_I2C_MspInit+0x210>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	f040 80b8 	bne.w	8002f5a <HAL_I2C_MspInit+0x1fa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	4b5e      	ldr	r3, [pc, #376]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b57      	ldr	r3, [pc, #348]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a56      	ldr	r2, [pc, #344]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b54      	ldr	r3, [pc, #336]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e28:	2312      	movs	r3, #18
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e30:	2303      	movs	r3, #3
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e34:	2304      	movs	r3, #4
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	484d      	ldr	r0, [pc, #308]	@ (8002f74 <HAL_I2C_MspInit+0x214>)
 8002e40:	f001 ffe2 	bl	8004e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e4a:	2312      	movs	r3, #18
 8002e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e52:	2303      	movs	r3, #3
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e56:	2304      	movs	r3, #4
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4845      	ldr	r0, [pc, #276]	@ (8002f78 <HAL_I2C_MspInit+0x218>)
 8002e62:	f001 ffd1 	bl	8004e08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002e70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e76:	4b3c      	ldr	r3, [pc, #240]	@ (8002f68 <HAL_I2C_MspInit+0x208>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8002e82:	4b3e      	ldr	r3, [pc, #248]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002e84:	4a3e      	ldr	r2, [pc, #248]	@ (8002f80 <HAL_I2C_MspInit+0x220>)
 8002e86:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8002e88:	4b3c      	ldr	r3, [pc, #240]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002e8a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002e8e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e90:	4b3a      	ldr	r3, [pc, #232]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9c:	4b37      	ldr	r3, [pc, #220]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea4:	4b35      	ldr	r3, [pc, #212]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002eb0:	4b32      	ldr	r3, [pc, #200]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eb6:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002ec2:	482e      	ldr	r0, [pc, #184]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002ec4:	f001 fc16 	bl	80046f4 <HAL_DMA_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_MspInit+0x172>
      Error_Handler();
 8002ece:	f7ff fe63 	bl	8002b98 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a29      	ldr	r2, [pc, #164]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002ed6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ed8:	4a28      	ldr	r2, [pc, #160]	@ (8002f7c <HAL_I2C_MspInit+0x21c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002ede:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002ee0:	4a29      	ldr	r2, [pc, #164]	@ (8002f88 <HAL_I2C_MspInit+0x228>)
 8002ee2:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8002ee4:	4b27      	ldr	r3, [pc, #156]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002ee6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002eea:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eec:	4b25      	ldr	r3, [pc, #148]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002eee:	2240      	movs	r2, #64	@ 0x40
 8002ef0:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef2:	4b24      	ldr	r3, [pc, #144]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef8:	4b22      	ldr	r3, [pc, #136]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002efe:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f00:	4b20      	ldr	r3, [pc, #128]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f06:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002f1e:	4819      	ldr	r0, [pc, #100]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f20:	f001 fbe8 	bl	80046f4 <HAL_DMA_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_MspInit+0x1ce>
      Error_Handler();
 8002f2a:	f7ff fe35 	bl	8002b98 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a14      	ldr	r2, [pc, #80]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f32:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <HAL_I2C_MspInit+0x224>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2048      	movs	r0, #72	@ 0x48
 8002f40:	f001 fb93 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002f44:	2048      	movs	r0, #72	@ 0x48
 8002f46:	f001 fbac 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2049      	movs	r0, #73	@ 0x49
 8002f50:	f001 fb8b 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002f54:	2049      	movs	r0, #73	@ 0x49
 8002f56:	f001 fba4 	bl	80046a2 <HAL_NVIC_EnableIRQ>
}
 8002f5a:	bf00      	nop
 8002f5c:	3730      	adds	r7, #48	@ 0x30
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40005400 	.word	0x40005400
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40005c00 	.word	0x40005c00
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	200002cc 	.word	0x200002cc
 8002f80:	40026040 	.word	0x40026040
 8002f84:	2000032c 	.word	0x2000032c
 8002f88:	40026070 	.word	0x40026070

08002f8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	@ 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_SPI_MspInit+0x94>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d133      	bne.n	8003016 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <HAL_SPI_MspInit+0x98>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_SPI_MspInit+0x98>)
 8002fb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fbe:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_SPI_MspInit+0x98>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <HAL_SPI_MspInit+0x98>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	4a14      	ldr	r2, [pc, #80]	@ (8003024 <HAL_SPI_MspInit+0x98>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <HAL_SPI_MspInit+0x98>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fe6:	23e0      	movs	r3, #224	@ 0xe0
 8002fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	4809      	ldr	r0, [pc, #36]	@ (8003028 <HAL_SPI_MspInit+0x9c>)
 8003002:	f001 ff01 	bl	8004e08 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	2023      	movs	r0, #35	@ 0x23
 800300c:	f001 fb2d 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003010:	2023      	movs	r0, #35	@ 0x23
 8003012:	f001 fb46 	bl	80046a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	@ 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40013000 	.word	0x40013000
 8003024:	40023800 	.word	0x40023800
 8003028:	40020000 	.word	0x40020000

0800302c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <HAL_TIM_Base_MspInit+0xa0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d12e      	bne.n	800309c <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b23      	ldr	r3, [pc, #140]	@ (80030d0 <HAL_TIM_Base_MspInit+0xa4>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003046:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <HAL_TIM_Base_MspInit+0xa4>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6453      	str	r3, [r2, #68]	@ 0x44
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_TIM_Base_MspInit+0xa4>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	2018      	movs	r0, #24
 8003060:	f001 fb03 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003064:	2018      	movs	r0, #24
 8003066:	f001 fb1c 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2019      	movs	r0, #25
 8003070:	f001 fafb 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003074:	2019      	movs	r0, #25
 8003076:	f001 fb14 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	201a      	movs	r0, #26
 8003080:	f001 faf3 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003084:	201a      	movs	r0, #26
 8003086:	f001 fb0c 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	201b      	movs	r0, #27
 8003090:	f001 faeb 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003094:	201b      	movs	r0, #27
 8003096:	f001 fb04 	bl	80046a2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800309a:	e012      	b.n	80030c2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0c      	ldr	r2, [pc, #48]	@ (80030d4 <HAL_TIM_Base_MspInit+0xa8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10d      	bne.n	80030c2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HAL_TIM_Base_MspInit+0xa4>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a08      	ldr	r2, [pc, #32]	@ (80030d0 <HAL_TIM_Base_MspInit+0xa4>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <HAL_TIM_Base_MspInit+0xa4>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40002000 	.word	0x40002000

080030d8 <HAL_TIM_OnePulse_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_onepulse: TIM_OnePulse handle pointer
  * @retval None
  */
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(htim_onepulse->Instance==TIM8)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <HAL_TIM_OnePulse_MspInit+0x94>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d133      	bne.n	8003162 <HAL_TIM_OnePulse_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	6453      	str	r3, [r2, #68]	@ 0x44
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_TIM_OnePulse_MspInit+0x98>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_TIM_OnePulse_MspInit+0x98>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	4a14      	ldr	r2, [pc, #80]	@ (8003170 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6313      	str	r3, [r2, #48]	@ 0x30
 8003126:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_TIM_OnePulse_MspInit+0x98>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003132:	2340      	movs	r3, #64	@ 0x40
 8003134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003142:	2303      	movs	r3, #3
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	4809      	ldr	r0, [pc, #36]	@ (8003174 <HAL_TIM_OnePulse_MspInit+0x9c>)
 800314e:	f001 fe5b 	bl	8004e08 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	202e      	movs	r0, #46	@ 0x2e
 8003158:	f001 fa87 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800315c:	202e      	movs	r0, #46	@ 0x2e
 800315e:	f001 faa0 	bl	80046a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8003162:	bf00      	nop
 8003164:	3728      	adds	r7, #40	@ 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40010400 	.word	0x40010400
 8003170:	40023800 	.word	0x40023800
 8003174:	40020800 	.word	0x40020800

08003178 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	@ 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1d      	ldr	r2, [pc, #116]	@ (800320c <HAL_UART_MspInit+0x94>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d133      	bne.n	8003202 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <HAL_UART_MspInit+0x98>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_UART_MspInit+0x98>)
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031aa:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_UART_MspInit+0x98>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_UART_MspInit+0x98>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <HAL_UART_MspInit+0x98>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_UART_MspInit+0x98>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031d2:	230c      	movs	r3, #12
 80031d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031de:	2303      	movs	r3, #3
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031e2:	2307      	movs	r3, #7
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4619      	mov	r1, r3
 80031ec:	4809      	ldr	r0, [pc, #36]	@ (8003214 <HAL_UART_MspInit+0x9c>)
 80031ee:	f001 fe0b 	bl	8004e08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2100      	movs	r1, #0
 80031f6:	2026      	movs	r0, #38	@ 0x26
 80031f8:	f001 fa37 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031fc:	2026      	movs	r0, #38	@ 0x26
 80031fe:	f001 fa50 	bl	80046a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003202:	bf00      	nop
 8003204:	3728      	adds	r7, #40	@ 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40004400 	.word	0x40004400
 8003210:	40023800 	.word	0x40023800
 8003214:	40020000 	.word	0x40020000

08003218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <NMI_Handler+0x4>

08003220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <HardFault_Handler+0x4>

08003228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <MemManage_Handler+0x4>

08003230 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <BusFault_Handler+0x4>

08003238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <UsageFault_Handler+0x4>

08003240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800326e:	f000 f9f3 	bl	8003658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}

08003276 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800327a:	2001      	movs	r0, #1
 800327c:	f002 f876 	bl	800536c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}

08003284 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003288:	4802      	ldr	r0, [pc, #8]	@ (8003294 <DMA1_Stream2_IRQHandler+0x10>)
 800328a:	f001 fb73 	bl	8004974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200002cc 	.word	0x200002cc

08003298 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800329c:	4802      	ldr	r0, [pc, #8]	@ (80032a8 <DMA1_Stream4_IRQHandler+0x10>)
 800329e:	f001 fb69 	bl	8004974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	2000032c 	.word	0x2000032c

080032ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032b0:	4802      	ldr	r0, [pc, #8]	@ (80032bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80032b2:	f005 f8c4 	bl	800843e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	200003e4 	.word	0x200003e4

080032c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032c4:	4802      	ldr	r0, [pc, #8]	@ (80032d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032c6:	f005 f8ba 	bl	800843e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200003e4 	.word	0x200003e4

080032d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032d8:	4802      	ldr	r0, [pc, #8]	@ (80032e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80032da:	f005 f8b0 	bl	800843e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200003e4 	.word	0x200003e4

080032e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032ec:	4802      	ldr	r0, [pc, #8]	@ (80032f8 <TIM1_CC_IRQHandler+0x10>)
 80032ee:	f005 f8a6 	bl	800843e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200003e4 	.word	0x200003e4

080032fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003300:	4802      	ldr	r0, [pc, #8]	@ (800330c <SPI1_IRQHandler+0x10>)
 8003302:	f004 fd73 	bl	8007dec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000038c 	.word	0x2000038c

08003310 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003314:	4802      	ldr	r0, [pc, #8]	@ (8003320 <USART2_IRQHandler+0x10>)
 8003316:	f005 fd4b 	bl	8008db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200004bc 	.word	0x200004bc

08003324 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003328:	4802      	ldr	r0, [pc, #8]	@ (8003334 <TIM8_CC_IRQHandler+0x10>)
 800332a:	f005 f888 	bl	800843e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000042c 	.word	0x2000042c

08003338 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <CAN2_TX_IRQHandler+0x10>)
 800333e:	f000 fe70 	bl	8004022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200001fc 	.word	0x200001fc

0800334c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003350:	4802      	ldr	r0, [pc, #8]	@ (800335c <CAN2_RX0_IRQHandler+0x10>)
 8003352:	f000 fe66 	bl	8004022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200001fc 	.word	0x200001fc

08003360 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003364:	4802      	ldr	r0, [pc, #8]	@ (8003370 <CAN2_RX1_IRQHandler+0x10>)
 8003366:	f000 fe5c 	bl	8004022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200001fc 	.word	0x200001fc

08003374 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <CAN2_SCE_IRQHandler+0x10>)
 800337a:	f000 fe52 	bl	8004022 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200001fc 	.word	0x200001fc

08003388 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800338c:	4802      	ldr	r0, [pc, #8]	@ (8003398 <I2C3_EV_IRQHandler+0x10>)
 800338e:	f002 f96a 	bl	8005666 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000278 	.word	0x20000278

0800339c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80033a0:	4802      	ldr	r0, [pc, #8]	@ (80033ac <I2C3_ER_IRQHandler+0x10>)
 80033a2:	f002 fad1 	bl	8005948 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000278 	.word	0x20000278

080033b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	return 1;
 80033b4:	2301      	movs	r3, #1
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <_kill>:

int _kill(int pid, int sig)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033ca:	f007 fad5 	bl	800a978 <__errno>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2216      	movs	r2, #22
 80033d2:	601a      	str	r2, [r3, #0]
	return -1;
 80033d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_exit>:

void _exit (int status)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ffe7 	bl	80033c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033f2:	bf00      	nop
 80033f4:	e7fd      	b.n	80033f2 <_exit+0x12>

080033f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e00a      	b.n	800341e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003408:	f3af 8000 	nop.w
 800340c:	4601      	mov	r1, r0
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	60ba      	str	r2, [r7, #8]
 8003414:	b2ca      	uxtb	r2, r1
 8003416:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3301      	adds	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	dbf0      	blt.n	8003408 <_read+0x12>
	}

return len;
 8003426:	687b      	ldr	r3, [r7, #4]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e009      	b.n	8003456 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	60ba      	str	r2, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	3301      	adds	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	dbf1      	blt.n	8003442 <_write+0x12>
	}
	return len;
 800345e:	687b      	ldr	r3, [r7, #4]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_close>:

int _close(int file)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	return -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003490:	605a      	str	r2, [r3, #4]
	return 0;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <_isatty>:

int _isatty(int file)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	return 1;
 80034a8:	2301      	movs	r3, #1
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
	return 0;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <_sbrk+0x5c>)
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <_sbrk+0x60>)
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e4:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034ec:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <_sbrk+0x64>)
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <_sbrk+0x68>)
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034f2:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d207      	bcs.n	8003510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003500:	f007 fa3a 	bl	800a978 <__errno>
 8003504:	4603      	mov	r3, r0
 8003506:	220c      	movs	r2, #12
 8003508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
 800350e:	e009      	b.n	8003524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003510:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <_sbrk+0x64>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <_sbrk+0x64>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	4a05      	ldr	r2, [pc, #20]	@ (8003534 <_sbrk+0x64>)
 8003520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20020000 	.word	0x20020000
 8003530:	00000400 	.word	0x00000400
 8003534:	200005ac 	.word	0x200005ac
 8003538:	20000700 	.word	0x20000700

0800353c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003540:	4b06      	ldr	r3, [pc, #24]	@ (800355c <SystemInit+0x20>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	4a05      	ldr	r2, [pc, #20]	@ (800355c <SystemInit+0x20>)
 8003548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800354c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003564:	480d      	ldr	r0, [pc, #52]	@ (800359c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003566:	490e      	ldr	r1, [pc, #56]	@ (80035a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003568:	4a0e      	ldr	r2, [pc, #56]	@ (80035a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800356c:	e002      	b.n	8003574 <LoopCopyDataInit>

0800356e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003572:	3304      	adds	r3, #4

08003574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003578:	d3f9      	bcc.n	800356e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357a:	4a0b      	ldr	r2, [pc, #44]	@ (80035a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800357c:	4c0b      	ldr	r4, [pc, #44]	@ (80035ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003580:	e001      	b.n	8003586 <LoopFillZerobss>

08003582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003584:	3204      	adds	r2, #4

08003586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800358a:	f7ff ffd7 	bl	800353c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800358e:	f007 f9f9 	bl	800a984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003592:	f7fe fbd9 	bl	8001d48 <main>
  bx  lr    
 8003596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800359c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80035a4:	0800d25c 	.word	0x0800d25c
  ldr r2, =_sbss
 80035a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80035ac:	20000700 	.word	0x20000700

080035b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b0:	e7fe      	b.n	80035b0 <ADC_IRQHandler>
	...

080035b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b8:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	@ (80035f4 <HAL_Init+0x40>)
 80035be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c4:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	@ (80035f4 <HAL_Init+0x40>)
 80035ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d0:	4b08      	ldr	r3, [pc, #32]	@ (80035f4 <HAL_Init+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a07      	ldr	r2, [pc, #28]	@ (80035f4 <HAL_Init+0x40>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035dc:	2003      	movs	r0, #3
 80035de:	f001 f839 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f000 f808 	bl	80035f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e8:	f7ff fadc 	bl	8002ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023c00 	.word	0x40023c00

080035f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <HAL_InitTick+0x54>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_InitTick+0x58>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	4618      	mov	r0, r3
 8003618:	f001 f85f 	bl	80046da <HAL_SYSTICK_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e00e      	b.n	8003644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b0f      	cmp	r3, #15
 800362a:	d80a      	bhi.n	8003642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800362c:	2200      	movs	r2, #0
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f001 f819 	bl	800466a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003638:	4a06      	ldr	r2, [pc, #24]	@ (8003654 <HAL_InitTick+0x5c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000004 	.word	0x20000004
 8003650:	2000000c 	.word	0x2000000c
 8003654:	20000008 	.word	0x20000008

08003658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_IncTick+0x20>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_IncTick+0x24>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4413      	add	r3, r2
 8003668:	4a04      	ldr	r2, [pc, #16]	@ (800367c <HAL_IncTick+0x24>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	2000000c 	.word	0x2000000c
 800367c:	200005b0 	.word	0x200005b0

08003680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return uwTick;
 8003684:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <HAL_GetTick+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	200005b0 	.word	0x200005b0

08003698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7ff ffee 	bl	8003680 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d005      	beq.n	80036be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_Delay+0x44>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036be:	bf00      	nop
 80036c0:	f7ff ffde 	bl	8003680 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d8f7      	bhi.n	80036c0 <HAL_Delay+0x28>
  {
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2000000c 	.word	0x2000000c

080036e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0ed      	b.n	80038ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fa78 	bl	8002bf4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003714:	f7ff ffb4 	bl	8003680 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800371a:	e012      	b.n	8003742 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800371c:	f7ff ffb0 	bl	8003680 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b0a      	cmp	r3, #10
 8003728:	d90b      	bls.n	8003742 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2205      	movs	r2, #5
 800373a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0c5      	b.n	80038ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0e5      	beq.n	800371c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0202 	bic.w	r2, r2, #2
 800375e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003760:	f7ff ff8e 	bl	8003680 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003766:	e012      	b.n	800378e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003768:	f7ff ff8a 	bl	8003680 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b0a      	cmp	r3, #10
 8003774:	d90b      	bls.n	800378e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e09f      	b.n	80038ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	7e1b      	ldrb	r3, [r3, #24]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d108      	bne.n	80037b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e007      	b.n	80037c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7e5b      	ldrb	r3, [r3, #25]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d108      	bne.n	80037e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e007      	b.n	80037f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7e9b      	ldrb	r3, [r3, #26]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d108      	bne.n	800380a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0220 	orr.w	r2, r2, #32
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e007      	b.n	800381a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0220 	bic.w	r2, r2, #32
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7edb      	ldrb	r3, [r3, #27]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0210 	bic.w	r2, r2, #16
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e007      	b.n	8003844 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0210 	orr.w	r2, r2, #16
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7f1b      	ldrb	r3, [r3, #28]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e007      	b.n	800386e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0208 	bic.w	r2, r2, #8
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7f5b      	ldrb	r3, [r3, #29]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d108      	bne.n	8003888 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0204 	orr.w	r2, r2, #4
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e007      	b.n	8003898 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	ea42 0103 	orr.w	r1, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e015      	b.n	8003914 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f939 	bl	8003b60 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fa06 	bl	8002d00 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003902:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d003      	beq.n	800393c <HAL_CAN_ConfigFilter+0x20>
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	2b02      	cmp	r3, #2
 8003938:	f040 80be 	bne.w	8003ab8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800393c:	4b65      	ldr	r3, [pc, #404]	@ (8003ad4 <HAL_CAN_ConfigFilter+0x1b8>)
 800393e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003956:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	431a      	orrs	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2201      	movs	r2, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d123      	bne.n	80039e6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	401a      	ands	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3248      	adds	r2, #72	@ 0x48
 80039c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039dc:	6939      	ldr	r1, [r7, #16]
 80039de:	3348      	adds	r3, #72	@ 0x48
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	440b      	add	r3, r1
 80039e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d122      	bne.n	8003a34 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	3248      	adds	r2, #72	@ 0x48
 8003a14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a2a:	6939      	ldr	r1, [r7, #16]
 8003a2c:	3348      	adds	r3, #72	@ 0x48
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003a4e:	e007      	b.n	8003a60 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003a7a:	e007      	b.n	8003a8c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003aaa:	f023 0201 	bic.w	r2, r3, #1
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e006      	b.n	8003ac6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40006400 	.word	0x40006400

08003ad8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d12e      	bne.n	8003b4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b04:	f7ff fdbc 	bl	8003680 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b0a:	e012      	b.n	8003b32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b0c:	f7ff fdb8 	bl	8003680 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b0a      	cmp	r3, #10
 8003b18:	d90b      	bls.n	8003b32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2205      	movs	r2, #5
 8003b2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e012      	b.n	8003b58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e006      	b.n	8003b58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d133      	bne.n	8003bdc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b84:	f7ff fd7c 	bl	8003680 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b8a:	e012      	b.n	8003bb2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b8c:	f7ff fd78 	bl	8003680 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b0a      	cmp	r3, #10
 8003b98:	d90b      	bls.n	8003bb2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2205      	movs	r2, #5
 8003baa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e01b      	b.n	8003bea <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0e5      	beq.n	8003b8c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0202 	bic.w	r2, r2, #2
 8003bce:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e006      	b.n	8003bea <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b089      	sub	sp, #36	@ 0x24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d003      	beq.n	8003c1e <HAL_CAN_AddTxMessage+0x2c>
 8003c16:	7ffb      	ldrb	r3, [r7, #31]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	f040 80ad 	bne.w	8003d78 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8095 	beq.w	8003d68 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	0e1b      	lsrs	r3, r3, #24
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c48:	2201      	movs	r2, #1
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	6809      	ldr	r1, [r1, #0]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3318      	adds	r3, #24
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	440b      	add	r3, r1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e00f      	b.n	8003c96 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3318      	adds	r3, #24
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	440b      	add	r3, r1
 8003c94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3318      	adds	r3, #24
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	7d1b      	ldrb	r3, [r3, #20]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d111      	bne.n	8003cd6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3318      	adds	r3, #24
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	6811      	ldr	r1, [r2, #0]
 8003cc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3307      	adds	r3, #7
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	061a      	lsls	r2, r3, #24
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3306      	adds	r3, #6
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3305      	adds	r3, #5
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	3204      	adds	r2, #4
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	6811      	ldr	r1, [r2, #0]
 8003cfe:	ea43 0200 	orr.w	r2, r3, r0
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	440b      	add	r3, r1
 8003d08:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003d0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3303      	adds	r3, #3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	061a      	lsls	r2, r3, #24
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3301      	adds	r3, #1
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	4610      	mov	r0, r2
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	6811      	ldr	r1, [r2, #0]
 8003d34:	ea43 0200 	orr.w	r2, r3, r0
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	440b      	add	r3, r1
 8003d3e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003d42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3318      	adds	r3, #24
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	4413      	add	r3, r2
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6811      	ldr	r1, [r2, #0]
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	3318      	adds	r3, #24
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	440b      	add	r3, r1
 8003d62:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e00e      	b.n	8003d86 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e006      	b.n	8003d86 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	@ 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003d92:	b480      	push	{r7}
 8003d94:	b087      	sub	sp, #28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003da6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d003      	beq.n	8003db6 <HAL_CAN_GetRxMessage+0x24>
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	f040 8103 	bne.w	8003fbc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10e      	bne.n	8003dda <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0f7      	b.n	8003fca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0e8      	b.n	8003fca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	331b      	adds	r3, #27
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0204 	and.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10c      	bne.n	8003e30 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	331b      	adds	r3, #27
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	4413      	add	r3, r2
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0d5b      	lsrs	r3, r3, #21
 8003e26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e00b      	b.n	8003e48 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	331b      	adds	r3, #27
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	4413      	add	r3, r2
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	08db      	lsrs	r3, r3, #3
 8003e40:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	331b      	adds	r3, #27
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	4413      	add	r3, r2
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0202 	and.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	331b      	adds	r3, #27
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	4413      	add	r3, r2
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	611a      	str	r2, [r3, #16]
 8003e7c:	e00b      	b.n	8003e96 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	331b      	adds	r3, #27
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	4413      	add	r3, r2
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 020f 	and.w	r2, r3, #15
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	331b      	adds	r3, #27
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	331b      	adds	r3, #27
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	4413      	add	r3, r2
 8003eba:	3304      	adds	r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0a1a      	lsrs	r2, r3, #8
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	0c1a      	lsrs	r2, r3, #16
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	0e1a      	lsrs	r2, r3, #24
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	3303      	adds	r3, #3
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	0a1a      	lsrs	r2, r3, #8
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	3305      	adds	r3, #5
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0c1a      	lsrs	r2, r3, #16
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	3306      	adds	r3, #6
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	0e1a      	lsrs	r2, r3, #24
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	3307      	adds	r3, #7
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0220 	orr.w	r2, r2, #32
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	e007      	b.n	8003fb8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0220 	orr.w	r2, r2, #32
 8003fb6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e006      	b.n	8003fca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d002      	beq.n	8003ff4 <HAL_CAN_ActivateNotification+0x1e>
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d109      	bne.n	8004008 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6959      	ldr	r1, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e006      	b.n	8004016 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b08a      	sub	sp, #40	@ 0x28
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d07c      	beq.n	8004162 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d023      	beq.n	80040ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2201      	movs	r2, #1
 8004078:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f983 	bl	8004390 <HAL_CAN_TxMailbox0CompleteCallback>
 800408a:	e016      	b.n	80040ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d004      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
 800409e:	e00c      	b.n	80040ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b2:	e002      	b.n	80040ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f989 	bl	80043cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d024      	beq.n	800410e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f963 	bl	80043a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80040de:	e016      	b.n	800410e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f2:	e00c      	b.n	800410e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
 8004106:	e002      	b.n	800410e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f969 	bl	80043e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d024      	beq.n	8004162 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004120:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f943 	bl	80043b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004132:	e016      	b.n	8004162 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
 8004146:	e00c      	b.n	8004162 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
 800415a:	e002      	b.n	8004162 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f949 	bl	80043f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00c      	beq.n	8004186 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2210      	movs	r2, #16
 8004184:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2208      	movs	r2, #8
 80041a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f930 	bl	8004408 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fd fb3d 	bl	8001840 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2210      	movs	r2, #16
 80041e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d006      	beq.n	800420c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2208      	movs	r2, #8
 8004204:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f912 	bl	8004430 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8f9 	bl	800441c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d006      	beq.n	800424c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8fc 	bl	8004444 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d006      	beq.n	800426e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8f5 	bl	8004458 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d07b      	beq.n	8004370 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d072      	beq.n	8004368 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	f043 0304 	orr.w	r3, r3, #4
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d043      	beq.n	8004368 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d03e      	beq.n	8004368 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042f0:	2b60      	cmp	r3, #96	@ 0x60
 80042f2:	d02b      	beq.n	800434c <HAL_CAN_IRQHandler+0x32a>
 80042f4:	2b60      	cmp	r3, #96	@ 0x60
 80042f6:	d82e      	bhi.n	8004356 <HAL_CAN_IRQHandler+0x334>
 80042f8:	2b50      	cmp	r3, #80	@ 0x50
 80042fa:	d022      	beq.n	8004342 <HAL_CAN_IRQHandler+0x320>
 80042fc:	2b50      	cmp	r3, #80	@ 0x50
 80042fe:	d82a      	bhi.n	8004356 <HAL_CAN_IRQHandler+0x334>
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d019      	beq.n	8004338 <HAL_CAN_IRQHandler+0x316>
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	d826      	bhi.n	8004356 <HAL_CAN_IRQHandler+0x334>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d010      	beq.n	800432e <HAL_CAN_IRQHandler+0x30c>
 800430c:	2b30      	cmp	r3, #48	@ 0x30
 800430e:	d822      	bhi.n	8004356 <HAL_CAN_IRQHandler+0x334>
 8004310:	2b10      	cmp	r3, #16
 8004312:	d002      	beq.n	800431a <HAL_CAN_IRQHandler+0x2f8>
 8004314:	2b20      	cmp	r3, #32
 8004316:	d005      	beq.n	8004324 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004318:	e01d      	b.n	8004356 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	f043 0308 	orr.w	r3, r3, #8
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004322:	e019      	b.n	8004358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	f043 0310 	orr.w	r3, r3, #16
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800432c:	e014      	b.n	8004358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	f043 0320 	orr.w	r3, r3, #32
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004336:	e00f      	b.n	8004358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004340:	e00a      	b.n	8004358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800434a:	e005      	b.n	8004358 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004354:	e000      	b.n	8004358 <HAL_CAN_IRQHandler+0x336>
            break;
 8004356:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004366:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2204      	movs	r2, #4
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fcc0 	bl	8001d08 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004388:	bf00      	nop
 800438a:	3728      	adds	r7, #40	@ 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <__NVIC_SetPriorityGrouping+0x44>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004488:	4013      	ands	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800449c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800449e:	4a04      	ldr	r2, [pc, #16]	@ (80044b0 <__NVIC_SetPriorityGrouping+0x44>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	60d3      	str	r3, [r2, #12]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b8:	4b04      	ldr	r3, [pc, #16]	@ (80044cc <__NVIC_GetPriorityGrouping+0x18>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 0307 	and.w	r3, r3, #7
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	db0b      	blt.n	80044fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	f003 021f 	and.w	r2, r3, #31
 80044e8:	4907      	ldr	r1, [pc, #28]	@ (8004508 <__NVIC_EnableIRQ+0x38>)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2001      	movs	r0, #1
 80044f2:	fa00 f202 	lsl.w	r2, r0, r2
 80044f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	e000e100 	.word	0xe000e100

0800450c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db12      	blt.n	8004544 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	490a      	ldr	r1, [pc, #40]	@ (8004550 <__NVIC_DisableIRQ+0x44>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2001      	movs	r0, #1
 800452e:	fa00 f202 	lsl.w	r2, r0, r2
 8004532:	3320      	adds	r3, #32
 8004534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004538:	f3bf 8f4f 	dsb	sy
}
 800453c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800453e:	f3bf 8f6f 	isb	sy
}
 8004542:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100

08004554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	6039      	str	r1, [r7, #0]
 800455e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db0a      	blt.n	800457e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	490c      	ldr	r1, [pc, #48]	@ (80045a0 <__NVIC_SetPriority+0x4c>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	440b      	add	r3, r1
 8004578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800457c:	e00a      	b.n	8004594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4908      	ldr	r1, [pc, #32]	@ (80045a4 <__NVIC_SetPriority+0x50>)
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	3b04      	subs	r3, #4
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	440b      	add	r3, r1
 8004592:	761a      	strb	r2, [r3, #24]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000e100 	.word	0xe000e100
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	@ 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f1c3 0307 	rsb	r3, r3, #7
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	bf28      	it	cs
 80045c6:	2304      	movcs	r3, #4
 80045c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d902      	bls.n	80045d8 <NVIC_EncodePriority+0x30>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3b03      	subs	r3, #3
 80045d6:	e000      	b.n	80045da <NVIC_EncodePriority+0x32>
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045dc:	f04f 32ff 	mov.w	r2, #4294967295
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	401a      	ands	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f0:	f04f 31ff 	mov.w	r1, #4294967295
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	43d9      	mvns	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	4313      	orrs	r3, r2
         );
}
 8004602:	4618      	mov	r0, r3
 8004604:	3724      	adds	r7, #36	@ 0x24
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004620:	d301      	bcc.n	8004626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004622:	2301      	movs	r3, #1
 8004624:	e00f      	b.n	8004646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <SysTick_Config+0x40>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800462e:	210f      	movs	r1, #15
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	f7ff ff8e 	bl	8004554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <SysTick_Config+0x40>)
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <SysTick_Config+0x40>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010

08004654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff05 	bl	800446c <__NVIC_SetPriorityGrouping>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	4603      	mov	r3, r0
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800467c:	f7ff ff1a 	bl	80044b4 <__NVIC_GetPriorityGrouping>
 8004680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	6978      	ldr	r0, [r7, #20]
 8004688:	f7ff ff8e 	bl	80045a8 <NVIC_EncodePriority>
 800468c:	4602      	mov	r2, r0
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff5d 	bl	8004554 <__NVIC_SetPriority>
}
 800469a:	bf00      	nop
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	4603      	mov	r3, r0
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff0d 	bl	80044d0 <__NVIC_EnableIRQ>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff1d 	bl	800450c <__NVIC_DisableIRQ>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff ff94 	bl	8004610 <SysTick_Config>
 80046e8:	4603      	mov	r3, r0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7fe ffbe 	bl	8003680 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e099      	b.n	8004844 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004730:	e00f      	b.n	8004752 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004732:	f7fe ffa5 	bl	8003680 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b05      	cmp	r3, #5
 800473e:	d908      	bls.n	8004752 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2203      	movs	r2, #3
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e078      	b.n	8004844 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e8      	bne.n	8004732 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4b38      	ldr	r3, [pc, #224]	@ (800484c <HAL_DMA_Init+0x158>)
 800476c:	4013      	ands	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d107      	bne.n	80047bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	4313      	orrs	r3, r2
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0307 	bic.w	r3, r3, #7
 80047d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d117      	bne.n	8004816 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00e      	beq.n	8004816 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa89 	bl	8004d10 <DMA_CheckFifoParam>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2240      	movs	r2, #64	@ 0x40
 8004808:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004812:	2301      	movs	r3, #1
 8004814:	e016      	b.n	8004844 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa40 	bl	8004ca4 <DMA_CalcBaseAndBitshift>
 8004824:	4603      	mov	r3, r0
 8004826:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482c:	223f      	movs	r2, #63	@ 0x3f
 800482e:	409a      	lsls	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	f010803f 	.word	0xf010803f

08004850 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800485e:	f7fe ff0f 	bl	8003680 <HAL_GetTick>
 8004862:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d008      	beq.n	8004882 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2280      	movs	r2, #128	@ 0x80
 8004874:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e052      	b.n	8004928 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0216 	bic.w	r2, r2, #22
 8004890:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_DMA_Abort+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0208 	bic.w	r2, r2, #8
 80048c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d2:	e013      	b.n	80048fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048d4:	f7fe fed4 	bl	8003680 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d90c      	bls.n	80048fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2203      	movs	r2, #3
 80048ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e015      	b.n	8004928 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e4      	bne.n	80048d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490e:	223f      	movs	r2, #63	@ 0x3f
 8004910:	409a      	lsls	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d004      	beq.n	800494e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2280      	movs	r2, #128	@ 0x80
 8004948:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e00c      	b.n	8004968 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2205      	movs	r2, #5
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004980:	4b8e      	ldr	r3, [pc, #568]	@ (8004bbc <HAL_DMA_IRQHandler+0x248>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a8e      	ldr	r2, [pc, #568]	@ (8004bc0 <HAL_DMA_IRQHandler+0x24c>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499e:	2208      	movs	r2, #8
 80049a0:	409a      	lsls	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01a      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d013      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0204 	bic.w	r2, r2, #4
 80049c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	2208      	movs	r2, #8
 80049ce:	409a      	lsls	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	2201      	movs	r2, #1
 80049e6:	409a      	lsls	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a02:	2201      	movs	r2, #1
 8004a04:	409a      	lsls	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d012      	beq.n	8004a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a38:	2204      	movs	r2, #4
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a44:	f043 0204 	orr.w	r2, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	2210      	movs	r2, #16
 8004a52:	409a      	lsls	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d043      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d03c      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	2210      	movs	r2, #16
 8004a70:	409a      	lsls	r2, r3
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d024      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
 8004aa2:	e01f      	b.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e016      	b.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0208 	bic.w	r2, r2, #8
 8004ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae8:	2220      	movs	r2, #32
 8004aea:	409a      	lsls	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 808f 	beq.w	8004c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8087 	beq.w	8004c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d136      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0216 	bic.w	r2, r2, #22
 8004b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_DMA_IRQHandler+0x1da>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0208 	bic.w	r2, r2, #8
 8004b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b62:	223f      	movs	r2, #63	@ 0x3f
 8004b64:	409a      	lsls	r2, r3
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d07e      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
        }
        return;
 8004b8a:	e079      	b.n	8004c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10d      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d031      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
 8004bb8:	e02c      	b.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
 8004bba:	bf00      	nop
 8004bbc:	20000004 	.word	0x20000004
 8004bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d023      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
 8004bd4:	e01e      	b.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10f      	bne.n	8004c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0210 	bic.w	r2, r2, #16
 8004bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d032      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d022      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2205      	movs	r2, #5
 8004c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d307      	bcc.n	8004c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f2      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x2cc>
 8004c5a:	e000      	b.n	8004c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
 8004c7e:	e000      	b.n	8004c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c80:	bf00      	nop
    }
  }
}
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c96:	b2db      	uxtb	r3, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3b10      	subs	r3, #16
 8004cb4:	4a14      	ldr	r2, [pc, #80]	@ (8004d08 <DMA_CalcBaseAndBitshift+0x64>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cbe:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <DMA_CalcBaseAndBitshift+0x68>)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d909      	bls.n	8004ce6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	1d1a      	adds	r2, r3, #4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ce4:	e007      	b.n	8004cf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	aaaaaaab 	.word	0xaaaaaaab
 8004d0c:	0800cecc 	.word	0x0800cecc

08004d10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d11f      	bne.n	8004d6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d856      	bhi.n	8004dde <DMA_CheckFifoParam+0xce>
 8004d30:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <DMA_CheckFifoParam+0x28>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d5b 	.word	0x08004d5b
 8004d40:	08004d49 	.word	0x08004d49
 8004d44:	08004ddf 	.word	0x08004ddf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d046      	beq.n	8004de2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d58:	e043      	b.n	8004de2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d62:	d140      	bne.n	8004de6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d68:	e03d      	b.n	8004de6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d72:	d121      	bne.n	8004db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d837      	bhi.n	8004dea <DMA_CheckFifoParam+0xda>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <DMA_CheckFifoParam+0x70>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004d97 	.word	0x08004d97
 8004d88:	08004d91 	.word	0x08004d91
 8004d8c:	08004da9 	.word	0x08004da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      break;
 8004d94:	e030      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d025      	beq.n	8004dee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da6:	e022      	b.n	8004dee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004db0:	d11f      	bne.n	8004df2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004db6:	e01c      	b.n	8004df2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d903      	bls.n	8004dc6 <DMA_CheckFifoParam+0xb6>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d003      	beq.n	8004dcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004dc4:	e018      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dca:	e015      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00e      	beq.n	8004df6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      break;
 8004ddc:	e00b      	b.n	8004df6 <DMA_CheckFifoParam+0xe6>
      break;
 8004dde:	bf00      	nop
 8004de0:	e00a      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      break;
 8004de2:	bf00      	nop
 8004de4:	e008      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      break;
 8004de6:	bf00      	nop
 8004de8:	e006      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dea:	bf00      	nop
 8004dec:	e004      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <DMA_CheckFifoParam+0xe8>
      break;
 8004df6:	bf00      	nop
    }
  } 
  
  return status; 
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop

08004e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	@ 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	e16b      	b.n	80050fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e24:	2201      	movs	r2, #1
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	f040 815a 	bne.w	80050f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d005      	beq.n	8004e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d130      	bne.n	8004ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	2203      	movs	r2, #3
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e90:	2201      	movs	r2, #1
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 0201 	and.w	r2, r3, #1
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d017      	beq.n	8004ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d123      	bne.n	8004f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	08da      	lsrs	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3208      	adds	r2, #8
 8004f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	08da      	lsrs	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3208      	adds	r2, #8
 8004f46:	69b9      	ldr	r1, [r7, #24]
 8004f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	2203      	movs	r2, #3
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0203 	and.w	r2, r3, #3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80b4 	beq.w	80050f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	4b60      	ldr	r3, [pc, #384]	@ (8005114 <HAL_GPIO_Init+0x30c>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	4a5f      	ldr	r2, [pc, #380]	@ (8005114 <HAL_GPIO_Init+0x30c>)
 8004f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005114 <HAL_GPIO_Init+0x30c>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004faa:	4a5b      	ldr	r2, [pc, #364]	@ (8005118 <HAL_GPIO_Init+0x310>)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	220f      	movs	r2, #15
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a52      	ldr	r2, [pc, #328]	@ (800511c <HAL_GPIO_Init+0x314>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02b      	beq.n	800502e <HAL_GPIO_Init+0x226>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a51      	ldr	r2, [pc, #324]	@ (8005120 <HAL_GPIO_Init+0x318>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d025      	beq.n	800502a <HAL_GPIO_Init+0x222>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a50      	ldr	r2, [pc, #320]	@ (8005124 <HAL_GPIO_Init+0x31c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <HAL_GPIO_Init+0x21e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8005128 <HAL_GPIO_Init+0x320>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d019      	beq.n	8005022 <HAL_GPIO_Init+0x21a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800512c <HAL_GPIO_Init+0x324>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_GPIO_Init+0x216>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8005130 <HAL_GPIO_Init+0x328>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00d      	beq.n	800501a <HAL_GPIO_Init+0x212>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a4c      	ldr	r2, [pc, #304]	@ (8005134 <HAL_GPIO_Init+0x32c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <HAL_GPIO_Init+0x20e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a4b      	ldr	r2, [pc, #300]	@ (8005138 <HAL_GPIO_Init+0x330>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d101      	bne.n	8005012 <HAL_GPIO_Init+0x20a>
 800500e:	2307      	movs	r3, #7
 8005010:	e00e      	b.n	8005030 <HAL_GPIO_Init+0x228>
 8005012:	2308      	movs	r3, #8
 8005014:	e00c      	b.n	8005030 <HAL_GPIO_Init+0x228>
 8005016:	2306      	movs	r3, #6
 8005018:	e00a      	b.n	8005030 <HAL_GPIO_Init+0x228>
 800501a:	2305      	movs	r3, #5
 800501c:	e008      	b.n	8005030 <HAL_GPIO_Init+0x228>
 800501e:	2304      	movs	r3, #4
 8005020:	e006      	b.n	8005030 <HAL_GPIO_Init+0x228>
 8005022:	2303      	movs	r3, #3
 8005024:	e004      	b.n	8005030 <HAL_GPIO_Init+0x228>
 8005026:	2302      	movs	r3, #2
 8005028:	e002      	b.n	8005030 <HAL_GPIO_Init+0x228>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_GPIO_Init+0x228>
 800502e:	2300      	movs	r3, #0
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	f002 0203 	and.w	r2, r2, #3
 8005036:	0092      	lsls	r2, r2, #2
 8005038:	4093      	lsls	r3, r2
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005040:	4935      	ldr	r1, [pc, #212]	@ (8005118 <HAL_GPIO_Init+0x310>)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	3302      	adds	r3, #2
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800504e:	4b3b      	ldr	r3, [pc, #236]	@ (800513c <HAL_GPIO_Init+0x334>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	43db      	mvns	r3, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4013      	ands	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005072:	4a32      	ldr	r2, [pc, #200]	@ (800513c <HAL_GPIO_Init+0x334>)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005078:	4b30      	ldr	r3, [pc, #192]	@ (800513c <HAL_GPIO_Init+0x334>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800509c:	4a27      	ldr	r2, [pc, #156]	@ (800513c <HAL_GPIO_Init+0x334>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050a2:	4b26      	ldr	r3, [pc, #152]	@ (800513c <HAL_GPIO_Init+0x334>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050c6:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <HAL_GPIO_Init+0x334>)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_GPIO_Init+0x334>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050f0:	4a12      	ldr	r2, [pc, #72]	@ (800513c <HAL_GPIO_Init+0x334>)
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b0f      	cmp	r3, #15
 8005100:	f67f ae90 	bls.w	8004e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3724      	adds	r7, #36	@ 0x24
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
 8005118:	40013800 	.word	0x40013800
 800511c:	40020000 	.word	0x40020000
 8005120:	40020400 	.word	0x40020400
 8005124:	40020800 	.word	0x40020800
 8005128:	40020c00 	.word	0x40020c00
 800512c:	40021000 	.word	0x40021000
 8005130:	40021400 	.word	0x40021400
 8005134:	40021800 	.word	0x40021800
 8005138:	40021c00 	.word	0x40021c00
 800513c:	40013c00 	.word	0x40013c00

08005140 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e0cd      	b.n	80052f8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800515c:	2201      	movs	r2, #1
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4013      	ands	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	429a      	cmp	r2, r3
 8005174:	f040 80bd 	bne.w	80052f2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005178:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_GPIO_DeInit+0x1d0>)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	089b      	lsrs	r3, r3, #2
 800517e:	3302      	adds	r3, #2
 8005180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005184:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	220f      	movs	r2, #15
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a5d      	ldr	r2, [pc, #372]	@ (8005314 <HAL_GPIO_DeInit+0x1d4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d02b      	beq.n	80051fa <HAL_GPIO_DeInit+0xba>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005318 <HAL_GPIO_DeInit+0x1d8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d025      	beq.n	80051f6 <HAL_GPIO_DeInit+0xb6>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a5b      	ldr	r2, [pc, #364]	@ (800531c <HAL_GPIO_DeInit+0x1dc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01f      	beq.n	80051f2 <HAL_GPIO_DeInit+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005320 <HAL_GPIO_DeInit+0x1e0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d019      	beq.n	80051ee <HAL_GPIO_DeInit+0xae>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a59      	ldr	r2, [pc, #356]	@ (8005324 <HAL_GPIO_DeInit+0x1e4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_GPIO_DeInit+0xaa>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a58      	ldr	r2, [pc, #352]	@ (8005328 <HAL_GPIO_DeInit+0x1e8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00d      	beq.n	80051e6 <HAL_GPIO_DeInit+0xa6>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a57      	ldr	r2, [pc, #348]	@ (800532c <HAL_GPIO_DeInit+0x1ec>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <HAL_GPIO_DeInit+0xa2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a56      	ldr	r2, [pc, #344]	@ (8005330 <HAL_GPIO_DeInit+0x1f0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <HAL_GPIO_DeInit+0x9e>
 80051da:	2307      	movs	r3, #7
 80051dc:	e00e      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051de:	2308      	movs	r3, #8
 80051e0:	e00c      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051e2:	2306      	movs	r3, #6
 80051e4:	e00a      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051e6:	2305      	movs	r3, #5
 80051e8:	e008      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051ea:	2304      	movs	r3, #4
 80051ec:	e006      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051ee:	2303      	movs	r3, #3
 80051f0:	e004      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e002      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_GPIO_DeInit+0xbc>
 80051fa:	2300      	movs	r3, #0
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	f002 0203 	and.w	r2, r2, #3
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	4093      	lsls	r3, r2
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d132      	bne.n	8005272 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800520c:	4b49      	ldr	r3, [pc, #292]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	43db      	mvns	r3, r3
 8005214:	4947      	ldr	r1, [pc, #284]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 8005216:	4013      	ands	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800521a:	4b46      	ldr	r3, [pc, #280]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	43db      	mvns	r3, r3
 8005222:	4944      	ldr	r1, [pc, #272]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 8005224:	4013      	ands	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005228:	4b42      	ldr	r3, [pc, #264]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	43db      	mvns	r3, r3
 8005230:	4940      	ldr	r1, [pc, #256]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 8005232:	4013      	ands	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005236:	4b3f      	ldr	r3, [pc, #252]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	43db      	mvns	r3, r3
 800523e:	493d      	ldr	r1, [pc, #244]	@ (8005334 <HAL_GPIO_DeInit+0x1f4>)
 8005240:	4013      	ands	r3, r2
 8005242:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	220f      	movs	r2, #15
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005254:	4a2e      	ldr	r2, [pc, #184]	@ (8005310 <HAL_GPIO_DeInit+0x1d0>)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	3302      	adds	r3, #2
 800525c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	43da      	mvns	r2, r3
 8005264:	482a      	ldr	r0, [pc, #168]	@ (8005310 <HAL_GPIO_DeInit+0x1d0>)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	400a      	ands	r2, r1
 800526c:	3302      	adds	r3, #2
 800526e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	2103      	movs	r1, #3
 800527c:	fa01 f303 	lsl.w	r3, r1, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	08da      	lsrs	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3208      	adds	r2, #8
 8005290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	220f      	movs	r2, #15
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	08d2      	lsrs	r2, r2, #3
 80052a8:	4019      	ands	r1, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3208      	adds	r2, #8
 80052ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	2103      	movs	r1, #3
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	2101      	movs	r1, #1
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	43db      	mvns	r3, r3
 80052d6:	401a      	ands	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	2103      	movs	r1, #3
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	401a      	ands	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3301      	adds	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	f67f af2e 	bls.w	800515c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40013800 	.word	0x40013800
 8005314:	40020000 	.word	0x40020000
 8005318:	40020400 	.word	0x40020400
 800531c:	40020800 	.word	0x40020800
 8005320:	40020c00 	.word	0x40020c00
 8005324:	40021000 	.word	0x40021000
 8005328:	40021400 	.word	0x40021400
 800532c:	40021800 	.word	0x40021800
 8005330:	40021c00 	.word	0x40021c00
 8005334:	40013c00 	.word	0x40013c00

08005338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	807b      	strh	r3, [r7, #2]
 8005344:	4613      	mov	r3, r2
 8005346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005348:	787b      	ldrb	r3, [r7, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800534e:	887a      	ldrh	r2, [r7, #2]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005354:	e003      	b.n	800535e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005356:	887b      	ldrh	r3, [r7, #2]
 8005358:	041a      	lsls	r2, r3, #16
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	619a      	str	r2, [r3, #24]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005376:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d006      	beq.n	8005390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005382:	4a05      	ldr	r2, [pc, #20]	@ (8005398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f806 	bl	800539c <HAL_GPIO_EXTI_Callback>
  }
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40013c00 	.word	0x40013c00

0800539c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e12b      	b.n	800561e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fd fcc0 	bl	8002d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	@ 0x24
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005418:	f002 fa8e 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 800541c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4a81      	ldr	r2, [pc, #516]	@ (8005628 <HAL_I2C_Init+0x274>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d807      	bhi.n	8005438 <HAL_I2C_Init+0x84>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a80      	ldr	r2, [pc, #512]	@ (800562c <HAL_I2C_Init+0x278>)
 800542c:	4293      	cmp	r3, r2
 800542e:	bf94      	ite	ls
 8005430:	2301      	movls	r3, #1
 8005432:	2300      	movhi	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	e006      	b.n	8005446 <HAL_I2C_Init+0x92>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a7d      	ldr	r2, [pc, #500]	@ (8005630 <HAL_I2C_Init+0x27c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	bf94      	ite	ls
 8005440:	2301      	movls	r3, #1
 8005442:	2300      	movhi	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e0e7      	b.n	800561e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a78      	ldr	r2, [pc, #480]	@ (8005634 <HAL_I2C_Init+0x280>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	0c9b      	lsrs	r3, r3, #18
 8005458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a6a      	ldr	r2, [pc, #424]	@ (8005628 <HAL_I2C_Init+0x274>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d802      	bhi.n	8005488 <HAL_I2C_Init+0xd4>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	3301      	adds	r3, #1
 8005486:	e009      	b.n	800549c <HAL_I2C_Init+0xe8>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	4a69      	ldr	r2, [pc, #420]	@ (8005638 <HAL_I2C_Init+0x284>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	099b      	lsrs	r3, r3, #6
 800549a:	3301      	adds	r3, #1
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	495c      	ldr	r1, [pc, #368]	@ (8005628 <HAL_I2C_Init+0x274>)
 80054b8:	428b      	cmp	r3, r1
 80054ba:	d819      	bhi.n	80054f0 <HAL_I2C_Init+0x13c>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1e59      	subs	r1, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054d0:	400b      	ands	r3, r1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_I2C_Init+0x138>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1e59      	subs	r1, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e4:	3301      	adds	r3, #1
 80054e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ea:	e051      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 80054ec:	2304      	movs	r3, #4
 80054ee:	e04f      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d111      	bne.n	800551c <HAL_I2C_Init+0x168>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1e58      	subs	r0, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	440b      	add	r3, r1
 8005506:	fbb0 f3f3 	udiv	r3, r0, r3
 800550a:	3301      	adds	r3, #1
 800550c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e012      	b.n	8005542 <HAL_I2C_Init+0x18e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e58      	subs	r0, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	0099      	lsls	r1, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005532:	3301      	adds	r3, #1
 8005534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Init+0x196>
 8005546:	2301      	movs	r3, #1
 8005548:	e022      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10e      	bne.n	8005570 <HAL_I2C_Init+0x1bc>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1e58      	subs	r0, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	440b      	add	r3, r1
 8005560:	fbb0 f3f3 	udiv	r3, r0, r3
 8005564:	3301      	adds	r3, #1
 8005566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800556e:	e00f      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1e58      	subs	r0, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	0099      	lsls	r1, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	fbb0 f3f3 	udiv	r3, r0, r3
 8005586:	3301      	adds	r3, #1
 8005588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	6809      	ldr	r1, [r1, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6911      	ldr	r1, [r2, #16]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68d2      	ldr	r2, [r2, #12]
 80055ca:	4311      	orrs	r1, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	000186a0 	.word	0x000186a0
 800562c:	001e847f 	.word	0x001e847f
 8005630:	003d08ff 	.word	0x003d08ff
 8005634:	431bde83 	.word	0x431bde83
 8005638:	10624dd3 	.word	0x10624dd3

0800563c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b80      	cmp	r3, #128	@ 0x80
 8005650:	d103      	bne.n	800565a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	611a      	str	r2, [r3, #16]
  }
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b088      	sub	sp, #32
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005686:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800568e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b10      	cmp	r3, #16
 8005694:	d003      	beq.n	800569e <HAL_I2C_EV_IRQHandler+0x38>
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b40      	cmp	r3, #64	@ 0x40
 800569a:	f040 80c1 	bne.w	8005820 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_I2C_EV_IRQHandler+0x6e>
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80056be:	d003      	beq.n	80056c8 <HAL_I2C_EV_IRQHandler+0x62>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056c6:	d101      	bne.n	80056cc <HAL_I2C_EV_IRQHandler+0x66>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_I2C_EV_IRQHandler+0x68>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	f000 8132 	beq.w	8005938 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_I2C_EV_IRQHandler+0x92>
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	0a5b      	lsrs	r3, r3, #9
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d006      	beq.n	80056f8 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f001 fc98 	bl	8007020 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fd9b 	bl	800622c <I2C_Master_SB>
 80056f6:	e092      	b.n	800581e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	08db      	lsrs	r3, r3, #3
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_I2C_EV_IRQHandler+0xb2>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	0a5b      	lsrs	r3, r3, #9
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fe11 	bl	8006338 <I2C_Master_ADD10>
 8005716:	e082      	b.n	800581e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_I2C_EV_IRQHandler+0xd2>
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	0a5b      	lsrs	r3, r3, #9
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fe2b 	bl	800638c <I2C_Master_ADDR>
 8005736:	e072      	b.n	800581e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d03b      	beq.n	80057bc <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800574e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005752:	f000 80f3 	beq.w	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00f      	beq.n	8005782 <HAL_I2C_EV_IRQHandler+0x11c>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	0a9b      	lsrs	r3, r3, #10
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_I2C_EV_IRQHandler+0x11c>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f9f3 	bl	8005b66 <I2C_MasterTransmit_TXE>
 8005780:	e04d      	b.n	800581e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80d6 	beq.w	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	0a5b      	lsrs	r3, r3, #9
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80cf 	beq.w	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	2b21      	cmp	r3, #33	@ 0x21
 80057a2:	d103      	bne.n	80057ac <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa7a 	bl	8005c9e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057aa:	e0c7      	b.n	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b40      	cmp	r3, #64	@ 0x40
 80057b0:	f040 80c4 	bne.w	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fae8 	bl	8005d8a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ba:	e0bf      	b.n	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ca:	f000 80b7 	beq.w	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00f      	beq.n	80057fa <HAL_I2C_EV_IRQHandler+0x194>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	0a9b      	lsrs	r3, r3, #10
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_I2C_EV_IRQHandler+0x194>
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	089b      	lsrs	r3, r3, #2
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb61 	bl	8005eba <I2C_MasterReceive_RXNE>
 80057f8:	e011      	b.n	800581e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	089b      	lsrs	r3, r3, #2
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 809a 	beq.w	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	0a5b      	lsrs	r3, r3, #9
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8093 	beq.w	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fc17 	bl	800604a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800581c:	e08e      	b.n	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
 800581e:	e08d      	b.n	800593c <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	61fb      	str	r3, [r7, #28]
 8005830:	e007      	b.n	8005842 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d012      	beq.n	8005874 <HAL_I2C_EV_IRQHandler+0x20e>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	0a5b      	lsrs	r3, r3, #9
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00c      	beq.n	8005874 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800586a:	69b9      	ldr	r1, [r7, #24]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 ffdc 	bl	800682a <I2C_Slave_ADDR>
 8005872:	e066      	b.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <HAL_I2C_EV_IRQHandler+0x22e>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	0a5b      	lsrs	r3, r3, #9
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 f817 	bl	80068c0 <I2C_Slave_STOPF>
 8005892:	e056      	b.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b21      	cmp	r3, #33	@ 0x21
 8005898:	d002      	beq.n	80058a0 <HAL_I2C_EV_IRQHandler+0x23a>
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	2b29      	cmp	r3, #41	@ 0x29
 800589e:	d125      	bne.n	80058ec <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	09db      	lsrs	r3, r3, #7
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00f      	beq.n	80058cc <HAL_I2C_EV_IRQHandler+0x266>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	0a9b      	lsrs	r3, r3, #10
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_I2C_EV_IRQHandler+0x266>
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fef2 	bl	80066ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058ca:	e039      	b.n	8005940 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d033      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0x2da>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	0a5b      	lsrs	r3, r3, #9
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02d      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 ff1f 	bl	8006728 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058ea:	e029      	b.n	8005940 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	099b      	lsrs	r3, r3, #6
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00f      	beq.n	8005918 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	0a9b      	lsrs	r3, r3, #10
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 ff2a 	bl	800676a <I2C_SlaveReceive_RXNE>
 8005916:	e014      	b.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00e      	beq.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	0a5b      	lsrs	r3, r3, #9
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 ff58 	bl	80067e6 <I2C_SlaveReceive_BTF>
 8005936:	e004      	b.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005938:	bf00      	nop
 800593a:	e002      	b.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005940:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	@ 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800596a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00e      	beq.n	8005996 <HAL_I2C_ER_IRQHandler+0x4e>
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005994:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	0a5b      	lsrs	r3, r3, #9
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00e      	beq.n	80059c0 <HAL_I2C_ER_IRQHandler+0x78>
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80059be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	0a9b      	lsrs	r3, r3, #10
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d03f      	beq.n	8005a4c <HAL_I2C_ER_IRQHandler+0x104>
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d039      	beq.n	8005a4c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80059d8:	7efb      	ldrb	r3, [r7, #27]
 80059da:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ea:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059f2:	7ebb      	ldrb	r3, [r7, #26]
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d112      	bne.n	8005a1e <HAL_I2C_ER_IRQHandler+0xd6>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <HAL_I2C_ER_IRQHandler+0xd6>
 80059fe:	7cfb      	ldrb	r3, [r7, #19]
 8005a00:	2b21      	cmp	r3, #33	@ 0x21
 8005a02:	d008      	beq.n	8005a16 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	2b29      	cmp	r3, #41	@ 0x29
 8005a08:	d005      	beq.n	8005a16 <HAL_I2C_ER_IRQHandler+0xce>
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	2b28      	cmp	r3, #40	@ 0x28
 8005a0e:	d106      	bne.n	8005a1e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b21      	cmp	r3, #33	@ 0x21
 8005a14:	d103      	bne.n	8005a1e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 f882 	bl	8006b20 <I2C_Slave_AF>
 8005a1c:	e016      	b.n	8005a4c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a26:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a30:	7efb      	ldrb	r3, [r7, #27]
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d002      	beq.n	8005a3c <HAL_I2C_ER_IRQHandler+0xf4>
 8005a36:	7efb      	ldrb	r3, [r7, #27]
 8005a38:	2b40      	cmp	r3, #64	@ 0x40
 8005a3a:	d107      	bne.n	8005a4c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	0adb      	lsrs	r3, r3, #11
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <HAL_I2C_ER_IRQHandler+0x12e>
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	f043 0308 	orr.w	r3, r3, #8
 8005a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005a74:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 f8bd 	bl	8006c08 <I2C_ITError>
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3728      	adds	r7, #40	@ 0x28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
 8005af2:	4613      	mov	r3, r2
 8005af4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b7c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d150      	bne.n	8005c2e <I2C_MasterTransmit_TXE+0xc8>
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b21      	cmp	r3, #33	@ 0x21
 8005b90:	d14d      	bne.n	8005c2e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d01d      	beq.n	8005bd4 <I2C_MasterTransmit_TXE+0x6e>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d01a      	beq.n	8005bd4 <I2C_MasterTransmit_TXE+0x6e>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ba4:	d016      	beq.n	8005bd4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bb4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2211      	movs	r2, #17
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ff62 	bl	8005a96 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bd2:	e060      	b.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005be2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b40      	cmp	r3, #64	@ 0x40
 8005c0c:	d107      	bne.n	8005c1e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ff7d 	bl	8005b16 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c1c:	e03b      	b.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff ff35 	bl	8005a96 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c2c:	e033      	b.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b21      	cmp	r3, #33	@ 0x21
 8005c32:	d005      	beq.n	8005c40 <I2C_MasterTransmit_TXE+0xda>
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	d12d      	bne.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b22      	cmp	r3, #34	@ 0x22
 8005c3e:	d12a      	bne.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c58:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c5a:	e01c      	b.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d103      	bne.n	8005c70 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f88e 	bl	8005d8a <I2C_MemoryTransmit_TXE_BTF>
}
 8005c6e:	e012      	b.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c94:	e7ff      	b.n	8005c96 <I2C_MasterTransmit_TXE+0x130>
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b21      	cmp	r3, #33	@ 0x21
 8005cb6:	d164      	bne.n	8005d82 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d012      	beq.n	8005ce8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	781a      	ldrb	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ce6:	e04c      	b.n	8005d82 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d01d      	beq.n	8005d2a <I2C_MasterTransmit_BTF+0x8c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d01a      	beq.n	8005d2a <I2C_MasterTransmit_BTF+0x8c>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cfa:	d016      	beq.n	8005d2a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d0a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2211      	movs	r2, #17
 8005d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff feb7 	bl	8005a96 <HAL_I2C_MasterTxCpltCallback>
}
 8005d28:	e02b      	b.n	8005d82 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d38:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d48:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d107      	bne.n	8005d74 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fed2 	bl	8005b16 <HAL_I2C_MemTxCpltCallback>
}
 8005d72:	e006      	b.n	8005d82 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fe8a 	bl	8005a96 <HAL_I2C_MasterTxCpltCallback>
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d98:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11d      	bne.n	8005dde <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10b      	bne.n	8005dc2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	1c9a      	adds	r2, r3, #2
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005dc0:	e077      	b.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	121b      	asrs	r3, r3, #8
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ddc:	e069      	b.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10b      	bne.n	8005dfe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005dfc:	e059      	b.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d152      	bne.n	8005eac <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b22      	cmp	r3, #34	@ 0x22
 8005e0a:	d10d      	bne.n	8005e28 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e1a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e26:	e044      	b.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b21      	cmp	r3, #33	@ 0x21
 8005e36:	d112      	bne.n	8005e5e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005e5c:	e029      	b.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d124      	bne.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b21      	cmp	r3, #33	@ 0x21
 8005e6c:	d121      	bne.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e7c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e8c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff fe36 	bl	8005b16 <HAL_I2C_MemTxCpltCallback>
}
 8005eaa:	e002      	b.n	8005eb2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fbc5 	bl	800563c <I2C_Flush_DR>
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b22      	cmp	r3, #34	@ 0x22
 8005ecc:	f040 80b9 	bne.w	8006042 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d921      	bls.n	8005f28 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	f040 8096 	bne.w	8006042 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f24:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005f26:	e08c      	b.n	8006042 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d07f      	beq.n	8006030 <I2C_MasterReceive_RXNE+0x176>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d002      	beq.n	8005f3c <I2C_MasterReceive_RXNE+0x82>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d179      	bne.n	8006030 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 f83d 	bl	8006fbc <I2C_WaitOnSTOPRequestThroughIT>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d14c      	bne.n	8005fe2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f56:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f66:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b40      	cmp	r3, #64	@ 0x40
 8005fa0:	d10a      	bne.n	8005fb8 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fdba 	bl	8005b2a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fb6:	e044      	b.n	8006042 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d002      	beq.n	8005fcc <I2C_MasterReceive_RXNE+0x112>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d103      	bne.n	8005fd4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fd2:	e002      	b.n	8005fda <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2212      	movs	r2, #18
 8005fd8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fd65 	bl	8005aaa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fe0:	e02f      	b.n	8006042 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ff0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff fd88 	bl	8005b3e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800602e:	e008      	b.n	8006042 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603e:	605a      	str	r2, [r3, #4]
}
 8006040:	e7ff      	b.n	8006042 <I2C_MasterReceive_RXNE+0x188>
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b04      	cmp	r3, #4
 8006060:	d11b      	bne.n	800609a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006070:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006098:	e0c4      	b.n	8006224 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d129      	bne.n	80060f8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d00a      	beq.n	80060d0 <I2C_MasterReceive_BTF+0x86>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d007      	beq.n	80060d0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060f6:	e095      	b.n	8006224 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d17d      	bne.n	80061fe <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d002      	beq.n	800610e <I2C_MasterReceive_BTF+0xc4>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b10      	cmp	r3, #16
 800610c:	d108      	bne.n	8006120 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e016      	b.n	800614e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b04      	cmp	r3, #4
 8006124:	d002      	beq.n	800612c <I2C_MasterReceive_BTF+0xe2>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d108      	bne.n	800613e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e007      	b.n	800614e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80061a8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d10a      	bne.n	80061d4 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fcac 	bl	8005b2a <HAL_I2C_MemRxCpltCallback>
}
 80061d2:	e027      	b.n	8006224 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d002      	beq.n	80061e8 <I2C_MasterReceive_BTF+0x19e>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d103      	bne.n	80061f0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ee:	e002      	b.n	80061f6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2212      	movs	r2, #18
 80061f4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff fc57 	bl	8005aaa <HAL_I2C_MasterRxCpltCallback>
}
 80061fc:	e012      	b.n	8006224 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b40      	cmp	r3, #64	@ 0x40
 800623e:	d117      	bne.n	8006270 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006258:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800625a:	e067      	b.n	800632c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	b2da      	uxtb	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	611a      	str	r2, [r3, #16]
}
 800626e:	e05d      	b.n	800632c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006278:	d133      	bne.n	80062e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b21      	cmp	r3, #33	@ 0x21
 8006284:	d109      	bne.n	800629a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006296:	611a      	str	r2, [r3, #16]
 8006298:	e008      	b.n	80062ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d004      	beq.n	80062be <I2C_Master_SB+0x92>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d032      	beq.n	800632c <I2C_Master_SB+0x100>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d02d      	beq.n	800632c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062de:	605a      	str	r2, [r3, #4]
}
 80062e0:	e024      	b.n	800632c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10e      	bne.n	8006308 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	11db      	asrs	r3, r3, #7
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0306 	and.w	r3, r3, #6
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f063 030f 	orn	r3, r3, #15
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	611a      	str	r2, [r3, #16]
}
 8006306:	e011      	b.n	800632c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630c:	2b01      	cmp	r3, #1
 800630e:	d10d      	bne.n	800632c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006314:	b29b      	uxth	r3, r3
 8006316:	11db      	asrs	r3, r3, #7
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 0306 	and.w	r3, r3, #6
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f063 030e 	orn	r3, r3, #14
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006344:	b2da      	uxtb	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <I2C_Master_ADD10+0x26>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d108      	bne.n	8006370 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <I2C_Master_ADD10+0x48>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800637e:	605a      	str	r2, [r3, #4]
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800638c:	b480      	push	{r7}
 800638e:	b091      	sub	sp, #68	@ 0x44
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800639a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b22      	cmp	r3, #34	@ 0x22
 80063b4:	f040 8169 	bne.w	800668a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10f      	bne.n	80063e0 <I2C_Master_ADDR+0x54>
 80063c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80063c4:	2b40      	cmp	r3, #64	@ 0x40
 80063c6:	d10b      	bne.n	80063e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c8:	2300      	movs	r3, #0
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	633b      	str	r3, [r7, #48]	@ 0x30
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	e160      	b.n	80066a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11d      	bne.n	8006424 <I2C_Master_ADDR+0x98>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80063f0:	d118      	bne.n	8006424 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f2:	2300      	movs	r3, #0
 80063f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006416:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	651a      	str	r2, [r3, #80]	@ 0x50
 8006422:	e13e      	b.n	80066a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d113      	bne.n	8006456 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642e:	2300      	movs	r3, #0
 8006430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e115      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	f040 808a 	bne.w	8006576 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006468:	d137      	bne.n	80064da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006478:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006488:	d113      	bne.n	80064b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006498:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649a:	2300      	movs	r3, #0
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	e0e7      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e0d3      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80064da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d02e      	beq.n	800653e <I2C_Master_ADDR+0x1b2>
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d02b      	beq.n	800653e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80064e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e8:	2b12      	cmp	r3, #18
 80064ea:	d102      	bne.n	80064f2 <I2C_Master_ADDR+0x166>
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d125      	bne.n	800653e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d00e      	beq.n	8006516 <I2C_Master_ADDR+0x18a>
 80064f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d00b      	beq.n	8006516 <I2C_Master_ADDR+0x18a>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006500:	2b10      	cmp	r3, #16
 8006502:	d008      	beq.n	8006516 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e007      	b.n	8006526 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006524:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	e0a1      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800654c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654e:	2300      	movs	r3, #0
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e085      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d14d      	bne.n	800661c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006582:	2b04      	cmp	r3, #4
 8006584:	d016      	beq.n	80065b4 <I2C_Master_ADDR+0x228>
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	2b02      	cmp	r3, #2
 800658a:	d013      	beq.n	80065b4 <I2C_Master_ADDR+0x228>
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	2b10      	cmp	r3, #16
 8006590:	d010      	beq.n	80065b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e007      	b.n	80065c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065d2:	d117      	bne.n	8006604 <I2C_Master_ADDR+0x278>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065da:	d00b      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d008      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d005      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d002      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d107      	bne.n	8006604 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006602:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	e032      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800662a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800663a:	d117      	bne.n	800666c <I2C_Master_ADDR+0x2e0>
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006642:	d00b      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	2b01      	cmp	r3, #1
 8006648:	d008      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	2b08      	cmp	r3, #8
 800664e:	d005      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	2b10      	cmp	r3, #16
 8006654:	d002      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	2b20      	cmp	r3, #32
 800665a:	d107      	bne.n	800666c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800666a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006688:	e00b      	b.n	80066a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
}
 80066a0:	e7ff      	b.n	80066a2 <I2C_Master_ADDR+0x316>
 80066a2:	bf00      	nop
 80066a4:	3744      	adds	r7, #68	@ 0x44
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d02b      	beq.n	8006720 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d114      	bne.n	8006720 <I2C_SlaveTransmit_TXE+0x72>
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b29      	cmp	r3, #41	@ 0x29
 80066fa:	d111      	bne.n	8006720 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800670a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2221      	movs	r2, #33	@ 0x21
 8006710:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2228      	movs	r2, #40	@ 0x28
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff f9cf 	bl	8005abe <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d011      	beq.n	800675e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006778:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02c      	beq.n	80067de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d114      	bne.n	80067de <I2C_SlaveReceive_RXNE+0x74>
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067b8:	d111      	bne.n	80067de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2222      	movs	r2, #34	@ 0x22
 80067ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2228      	movs	r2, #40	@ 0x28
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff f97a 	bl	8005ad2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d012      	beq.n	800681e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006844:	2b28      	cmp	r3, #40	@ 0x28
 8006846:	d127      	bne.n	8006898 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006856:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	81bb      	strh	r3, [r7, #12]
 800687a:	e002      	b.n	8006882 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800688a:	89ba      	ldrh	r2, [r7, #12]
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff f928 	bl	8005ae6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006896:	e00e      	b.n	80068b6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60bb      	str	r3, [r7, #8]
 80068ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80068e0:	2300      	movs	r3, #0
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800690c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691c:	d172      	bne.n	8006a04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b22      	cmp	r3, #34	@ 0x22
 8006922:	d002      	beq.n	800692a <I2C_Slave_STOPF+0x6a>
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b2a      	cmp	r3, #42	@ 0x2a
 8006928:	d135      	bne.n	8006996 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	f043 0204 	orr.w	r2, r3, #4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800695c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe f990 	bl	8004c88 <HAL_DMA_GetState>
 8006968:	4603      	mov	r3, r0
 800696a:	2b01      	cmp	r3, #1
 800696c:	d049      	beq.n	8006a02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006972:	4a69      	ldr	r2, [pc, #420]	@ (8006b18 <I2C_Slave_STOPF+0x258>)
 8006974:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	4618      	mov	r0, r3
 800697c:	f7fd ffd8 	bl	8004930 <HAL_DMA_Abort_IT>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03d      	beq.n	8006a02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006990:	4610      	mov	r0, r2
 8006992:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006994:	e035      	b.n	8006a02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	b29a      	uxth	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	f043 0204 	orr.w	r2, r3, #4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe f95a 	bl	8004c88 <HAL_DMA_GetState>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d014      	beq.n	8006a04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069de:	4a4e      	ldr	r2, [pc, #312]	@ (8006b18 <I2C_Slave_STOPF+0x258>)
 80069e0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fd ffa2 	bl	8004930 <HAL_DMA_Abort_IT>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	e000      	b.n	8006a04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d03e      	beq.n	8006a8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d112      	bne.n	8006a42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4c:	2b40      	cmp	r3, #64	@ 0x40
 8006a4e:	d112      	bne.n	8006a76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a84:	f043 0204 	orr.w	r2, r3, #4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f8b7 	bl	8006c08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a9a:	e039      	b.n	8006b10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aa0:	d109      	bne.n	8006ab6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2228      	movs	r2, #40	@ 0x28
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff f80e 	bl	8005ad2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b28      	cmp	r3, #40	@ 0x28
 8006ac0:	d111      	bne.n	8006ae6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	@ (8006b1c <I2C_Slave_STOPF+0x25c>)
 8006ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff f80f 	bl	8005b02 <HAL_I2C_ListenCpltCallback>
}
 8006ae4:	e014      	b.n	8006b10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	2b22      	cmp	r3, #34	@ 0x22
 8006aec:	d002      	beq.n	8006af4 <I2C_Slave_STOPF+0x234>
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b22      	cmp	r3, #34	@ 0x22
 8006af2:	d10d      	bne.n	8006b10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fe ffe1 	bl	8005ad2 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	08006e6d 	.word	0x08006e6d
 8006b1c:	ffff0000 	.word	0xffff0000

08006b20 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d002      	beq.n	8006b42 <I2C_Slave_AF+0x22>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d129      	bne.n	8006b96 <I2C_Slave_AF+0x76>
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	2b28      	cmp	r3, #40	@ 0x28
 8006b46:	d126      	bne.n	8006b96 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a2e      	ldr	r2, [pc, #184]	@ (8006c04 <I2C_Slave_AF+0xe4>)
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b5c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b66:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b76:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fe ffb7 	bl	8005b02 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b94:	e031      	b.n	8006bfa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	2b21      	cmp	r3, #33	@ 0x21
 8006b9a:	d129      	bne.n	8006bf0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a19      	ldr	r2, [pc, #100]	@ (8006c04 <I2C_Slave_AF+0xe4>)
 8006ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2221      	movs	r2, #33	@ 0x21
 8006ba6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006bc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bd0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006be0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fe fd2a 	bl	800563c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fe ff68 	bl	8005abe <HAL_I2C_SlaveTxCpltCallback>
}
 8006bee:	e004      	b.n	8006bfa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bf8:	615a      	str	r2, [r3, #20]
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	ffff0000 	.word	0xffff0000

08006c08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d002      	beq.n	8006c2c <I2C_ITError+0x24>
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b40      	cmp	r3, #64	@ 0x40
 8006c2a:	d10a      	bne.n	8006c42 <I2C_ITError+0x3a>
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b22      	cmp	r3, #34	@ 0x22
 8006c30:	d107      	bne.n	8006c42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c48:	2b28      	cmp	r3, #40	@ 0x28
 8006c4a:	d107      	bne.n	8006c5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2228      	movs	r2, #40	@ 0x28
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c5a:	e015      	b.n	8006c88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c6a:	d00a      	beq.n	8006c82 <I2C_ITError+0x7a>
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b60      	cmp	r3, #96	@ 0x60
 8006c70:	d007      	beq.n	8006c82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c96:	d162      	bne.n	8006d5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ca6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d020      	beq.n	8006cf8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cba:	4a6a      	ldr	r2, [pc, #424]	@ (8006e64 <I2C_ITError+0x25c>)
 8006cbc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fd fe34 	bl	8004930 <HAL_DMA_Abort_IT>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8089 	beq.w	8006de2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0201 	bic.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4798      	blx	r3
 8006cf6:	e074      	b.n	8006de2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	4a59      	ldr	r2, [pc, #356]	@ (8006e64 <I2C_ITError+0x25c>)
 8006cfe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fd fe13 	bl	8004930 <HAL_DMA_Abort_IT>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d068      	beq.n	8006de2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1a:	2b40      	cmp	r3, #64	@ 0x40
 8006d1c:	d10b      	bne.n	8006d36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	e041      	b.n	8006de2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b60      	cmp	r3, #96	@ 0x60
 8006d68:	d125      	bne.n	8006db6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d82:	2b40      	cmp	r3, #64	@ 0x40
 8006d84:	d10b      	bne.n	8006d9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fe fecf 	bl	8005b52 <HAL_I2C_AbortCpltCallback>
 8006db4:	e015      	b.n	8006de2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc0:	2b40      	cmp	r3, #64	@ 0x40
 8006dc2:	d10b      	bne.n	8006ddc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fe feae 	bl	8005b3e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10e      	bne.n	8006e10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e1e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d113      	bne.n	8006e5c <I2C_ITError+0x254>
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b28      	cmp	r3, #40	@ 0x28
 8006e38:	d110      	bne.n	8006e5c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e68 <I2C_ITError+0x260>)
 8006e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fe fe53 	bl	8005b02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	08006e6d 	.word	0x08006e6d
 8006e68:	ffff0000 	.word	0xffff0000

08006e6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e84:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e86:	4b4b      	ldr	r3, [pc, #300]	@ (8006fb4 <I2C_DMAAbort+0x148>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	08db      	lsrs	r3, r3, #3
 8006e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8006fb8 <I2C_DMAAbort+0x14c>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	0a1a      	lsrs	r2, r3, #8
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	00da      	lsls	r2, r3, #3
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	f043 0220 	orr.w	r2, r3, #32
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006eb2:	e00a      	b.n	8006eca <I2C_DMAAbort+0x5e>
    }
    count--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec8:	d0ea      	beq.n	8006ea0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ef8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2200      	movs	r2, #0
 8006efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0201 	bic.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b60      	cmp	r3, #96	@ 0x60
 8006f3a:	d10e      	bne.n	8006f5a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f52:	6978      	ldr	r0, [r7, #20]
 8006f54:	f7fe fdfd 	bl	8005b52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f58:	e027      	b.n	8006faa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f5a:	7cfb      	ldrb	r3, [r7, #19]
 8006f5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f60:	2b28      	cmp	r3, #40	@ 0x28
 8006f62:	d117      	bne.n	8006f94 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2228      	movs	r2, #40	@ 0x28
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f92:	e007      	b.n	8006fa4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006fa4:	6978      	ldr	r0, [r7, #20]
 8006fa6:	f7fe fdca 	bl	8005b3e <HAL_I2C_ErrorCallback>
}
 8006faa:	bf00      	nop
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000004 	.word	0x20000004
 8006fb8:	14f8b589 	.word	0x14f8b589

08006fbc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fc8:	4b13      	ldr	r3, [pc, #76]	@ (8007018 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	08db      	lsrs	r3, r3, #3
 8006fce:	4a13      	ldr	r2, [pc, #76]	@ (800701c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	0a1a      	lsrs	r2, r3, #8
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d107      	bne.n	8006ffa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fee:	f043 0220 	orr.w	r2, r3, #32
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e008      	b.n	800700c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007008:	d0e9      	beq.n	8006fde <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20000004 	.word	0x20000004
 800701c:	14f8b589 	.word	0x14f8b589

08007020 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007030:	d103      	bne.n	800703a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007038:	e007      	b.n	800704a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007042:	d102      	bne.n	800704a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2208      	movs	r2, #8
 8007048:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e267      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d075      	beq.n	8007162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007076:	4b88      	ldr	r3, [pc, #544]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 030c 	and.w	r3, r3, #12
 800707e:	2b04      	cmp	r3, #4
 8007080:	d00c      	beq.n	800709c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007082:	4b85      	ldr	r3, [pc, #532]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800708a:	2b08      	cmp	r3, #8
 800708c:	d112      	bne.n	80070b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800708e:	4b82      	ldr	r3, [pc, #520]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800709a:	d10b      	bne.n	80070b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709c:	4b7e      	ldr	r3, [pc, #504]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d05b      	beq.n	8007160 <HAL_RCC_OscConfig+0x108>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d157      	bne.n	8007160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e242      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070bc:	d106      	bne.n	80070cc <HAL_RCC_OscConfig+0x74>
 80070be:	4b76      	ldr	r3, [pc, #472]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a75      	ldr	r2, [pc, #468]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	e01d      	b.n	8007108 <HAL_RCC_OscConfig+0xb0>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070d4:	d10c      	bne.n	80070f0 <HAL_RCC_OscConfig+0x98>
 80070d6:	4b70      	ldr	r3, [pc, #448]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a6f      	ldr	r2, [pc, #444]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	4b6d      	ldr	r3, [pc, #436]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a6c      	ldr	r2, [pc, #432]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e00b      	b.n	8007108 <HAL_RCC_OscConfig+0xb0>
 80070f0:	4b69      	ldr	r3, [pc, #420]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a68      	ldr	r2, [pc, #416]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	4b66      	ldr	r3, [pc, #408]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a65      	ldr	r2, [pc, #404]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d013      	beq.n	8007138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007110:	f7fc fab6 	bl	8003680 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007118:	f7fc fab2 	bl	8003680 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b64      	cmp	r3, #100	@ 0x64
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e207      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712a:	4b5b      	ldr	r3, [pc, #364]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f0      	beq.n	8007118 <HAL_RCC_OscConfig+0xc0>
 8007136:	e014      	b.n	8007162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007138:	f7fc faa2 	bl	8003680 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007140:	f7fc fa9e 	bl	8003680 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b64      	cmp	r3, #100	@ 0x64
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e1f3      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007152:	4b51      	ldr	r3, [pc, #324]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f0      	bne.n	8007140 <HAL_RCC_OscConfig+0xe8>
 800715e:	e000      	b.n	8007162 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d063      	beq.n	8007236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800716e:	4b4a      	ldr	r3, [pc, #296]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 030c 	and.w	r3, r3, #12
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800717a:	4b47      	ldr	r3, [pc, #284]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007182:	2b08      	cmp	r3, #8
 8007184:	d11c      	bne.n	80071c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007186:	4b44      	ldr	r3, [pc, #272]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d116      	bne.n	80071c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007192:	4b41      	ldr	r3, [pc, #260]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_RCC_OscConfig+0x152>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d001      	beq.n	80071aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e1c7      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4937      	ldr	r1, [pc, #220]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071be:	e03a      	b.n	8007236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d020      	beq.n	800720a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071c8:	4b34      	ldr	r3, [pc, #208]	@ (800729c <HAL_RCC_OscConfig+0x244>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ce:	f7fc fa57 	bl	8003680 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d6:	f7fc fa53 	bl	8003680 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e1a8      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0f0      	beq.n	80071d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f4:	4b28      	ldr	r3, [pc, #160]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4925      	ldr	r1, [pc, #148]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 8007204:	4313      	orrs	r3, r2
 8007206:	600b      	str	r3, [r1, #0]
 8007208:	e015      	b.n	8007236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800720a:	4b24      	ldr	r3, [pc, #144]	@ (800729c <HAL_RCC_OscConfig+0x244>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fc fa36 	bl	8003680 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007218:	f7fc fa32 	bl	8003680 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e187      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800722a:	4b1b      	ldr	r3, [pc, #108]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f0      	bne.n	8007218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d036      	beq.n	80072b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800724a:	4b15      	ldr	r3, [pc, #84]	@ (80072a0 <HAL_RCC_OscConfig+0x248>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007250:	f7fc fa16 	bl	8003680 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007258:	f7fc fa12 	bl	8003680 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e167      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_RCC_OscConfig+0x240>)
 800726c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f0      	beq.n	8007258 <HAL_RCC_OscConfig+0x200>
 8007276:	e01b      	b.n	80072b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007278:	4b09      	ldr	r3, [pc, #36]	@ (80072a0 <HAL_RCC_OscConfig+0x248>)
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800727e:	f7fc f9ff 	bl	8003680 <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007284:	e00e      	b.n	80072a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007286:	f7fc f9fb 	bl	8003680 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d907      	bls.n	80072a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e150      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
 8007298:	40023800 	.word	0x40023800
 800729c:	42470000 	.word	0x42470000
 80072a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a4:	4b88      	ldr	r3, [pc, #544]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80072a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ea      	bne.n	8007286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8097 	beq.w	80073ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072c2:	4b81      	ldr	r3, [pc, #516]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10f      	bne.n	80072ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	4b7d      	ldr	r3, [pc, #500]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	4a7c      	ldr	r2, [pc, #496]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80072de:	4b7a      	ldr	r3, [pc, #488]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ea:	2301      	movs	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ee:	4b77      	ldr	r3, [pc, #476]	@ (80074cc <HAL_RCC_OscConfig+0x474>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d118      	bne.n	800732c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072fa:	4b74      	ldr	r3, [pc, #464]	@ (80074cc <HAL_RCC_OscConfig+0x474>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a73      	ldr	r2, [pc, #460]	@ (80074cc <HAL_RCC_OscConfig+0x474>)
 8007300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007306:	f7fc f9bb 	bl	8003680 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800730c:	e008      	b.n	8007320 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800730e:	f7fc f9b7 	bl	8003680 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e10c      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007320:	4b6a      	ldr	r3, [pc, #424]	@ (80074cc <HAL_RCC_OscConfig+0x474>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0f0      	beq.n	800730e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d106      	bne.n	8007342 <HAL_RCC_OscConfig+0x2ea>
 8007334:	4b64      	ldr	r3, [pc, #400]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 8007336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007338:	4a63      	ldr	r2, [pc, #396]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007340:	e01c      	b.n	800737c <HAL_RCC_OscConfig+0x324>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b05      	cmp	r3, #5
 8007348:	d10c      	bne.n	8007364 <HAL_RCC_OscConfig+0x30c>
 800734a:	4b5f      	ldr	r3, [pc, #380]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734e:	4a5e      	ldr	r2, [pc, #376]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 8007350:	f043 0304 	orr.w	r3, r3, #4
 8007354:	6713      	str	r3, [r2, #112]	@ 0x70
 8007356:	4b5c      	ldr	r3, [pc, #368]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735a:	4a5b      	ldr	r2, [pc, #364]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 800735c:	f043 0301 	orr.w	r3, r3, #1
 8007360:	6713      	str	r3, [r2, #112]	@ 0x70
 8007362:	e00b      	b.n	800737c <HAL_RCC_OscConfig+0x324>
 8007364:	4b58      	ldr	r3, [pc, #352]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007368:	4a57      	ldr	r2, [pc, #348]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007370:	4b55      	ldr	r3, [pc, #340]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007374:	4a54      	ldr	r2, [pc, #336]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 8007376:	f023 0304 	bic.w	r3, r3, #4
 800737a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d015      	beq.n	80073b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007384:	f7fc f97c 	bl	8003680 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800738a:	e00a      	b.n	80073a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738c:	f7fc f978 	bl	8003680 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800739a:	4293      	cmp	r3, r2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e0cb      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a2:	4b49      	ldr	r3, [pc, #292]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0ee      	beq.n	800738c <HAL_RCC_OscConfig+0x334>
 80073ae:	e014      	b.n	80073da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073b0:	f7fc f966 	bl	8003680 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073b6:	e00a      	b.n	80073ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073b8:	f7fc f962 	bl	8003680 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e0b5      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ce:	4b3e      	ldr	r3, [pc, #248]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1ee      	bne.n	80073b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d105      	bne.n	80073ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073e0:	4b39      	ldr	r3, [pc, #228]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80073e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e4:	4a38      	ldr	r2, [pc, #224]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80073e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80a1 	beq.w	8007538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073f6:	4b34      	ldr	r3, [pc, #208]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d05c      	beq.n	80074bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d141      	bne.n	800748e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740a:	4b31      	ldr	r3, [pc, #196]	@ (80074d0 <HAL_RCC_OscConfig+0x478>)
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007410:	f7fc f936 	bl	8003680 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007418:	f7fc f932 	bl	8003680 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e087      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	4b27      	ldr	r3, [pc, #156]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007444:	019b      	lsls	r3, r3, #6
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744c:	085b      	lsrs	r3, r3, #1
 800744e:	3b01      	subs	r3, #1
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	061b      	lsls	r3, r3, #24
 800745a:	491b      	ldr	r1, [pc, #108]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 800745c:	4313      	orrs	r3, r2
 800745e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007460:	4b1b      	ldr	r3, [pc, #108]	@ (80074d0 <HAL_RCC_OscConfig+0x478>)
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007466:	f7fc f90b 	bl	8003680 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800746e:	f7fc f907 	bl	8003680 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e05c      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007480:	4b11      	ldr	r3, [pc, #68]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f0      	beq.n	800746e <HAL_RCC_OscConfig+0x416>
 800748c:	e054      	b.n	8007538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800748e:	4b10      	ldr	r3, [pc, #64]	@ (80074d0 <HAL_RCC_OscConfig+0x478>)
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007494:	f7fc f8f4 	bl	8003680 <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800749c:	f7fc f8f0 	bl	8003680 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e045      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ae:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <HAL_RCC_OscConfig+0x470>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f0      	bne.n	800749c <HAL_RCC_OscConfig+0x444>
 80074ba:	e03d      	b.n	8007538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d107      	bne.n	80074d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e038      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
 80074c8:	40023800 	.word	0x40023800
 80074cc:	40007000 	.word	0x40007000
 80074d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007544 <HAL_RCC_OscConfig+0x4ec>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d028      	beq.n	8007534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d121      	bne.n	8007534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d11a      	bne.n	8007534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007504:	4013      	ands	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800750a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800750c:	4293      	cmp	r3, r2
 800750e:	d111      	bne.n	8007534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	3b01      	subs	r3, #1
 800751e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d107      	bne.n	8007534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007530:	429a      	cmp	r2, r3
 8007532:	d001      	beq.n	8007538 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40023800 	.word	0x40023800

08007548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e0cc      	b.n	80076f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800755c:	4b68      	ldr	r3, [pc, #416]	@ (8007700 <HAL_RCC_ClockConfig+0x1b8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d90c      	bls.n	8007584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800756a:	4b65      	ldr	r3, [pc, #404]	@ (8007700 <HAL_RCC_ClockConfig+0x1b8>)
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007572:	4b63      	ldr	r3, [pc, #396]	@ (8007700 <HAL_RCC_ClockConfig+0x1b8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d001      	beq.n	8007584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e0b8      	b.n	80076f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d020      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d005      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800759c:	4b59      	ldr	r3, [pc, #356]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	4a58      	ldr	r2, [pc, #352]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80075a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d005      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075b4:	4b53      	ldr	r3, [pc, #332]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	4a52      	ldr	r2, [pc, #328]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80075ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075c0:	4b50      	ldr	r3, [pc, #320]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	494d      	ldr	r1, [pc, #308]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d044      	beq.n	8007668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d107      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075e6:	4b47      	ldr	r3, [pc, #284]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d119      	bne.n	8007626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e07f      	b.n	80076f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d003      	beq.n	8007606 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007602:	2b03      	cmp	r3, #3
 8007604:	d107      	bne.n	8007616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007606:	4b3f      	ldr	r3, [pc, #252]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e06f      	b.n	80076f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007616:	4b3b      	ldr	r3, [pc, #236]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e067      	b.n	80076f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007626:	4b37      	ldr	r3, [pc, #220]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f023 0203 	bic.w	r2, r3, #3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	4934      	ldr	r1, [pc, #208]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 8007634:	4313      	orrs	r3, r2
 8007636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007638:	f7fc f822 	bl	8003680 <HAL_GetTick>
 800763c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800763e:	e00a      	b.n	8007656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007640:	f7fc f81e 	bl	8003680 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e04f      	b.n	80076f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007656:	4b2b      	ldr	r3, [pc, #172]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 020c 	and.w	r2, r3, #12
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	429a      	cmp	r2, r3
 8007666:	d1eb      	bne.n	8007640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007668:	4b25      	ldr	r3, [pc, #148]	@ (8007700 <HAL_RCC_ClockConfig+0x1b8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d20c      	bcs.n	8007690 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007676:	4b22      	ldr	r3, [pc, #136]	@ (8007700 <HAL_RCC_ClockConfig+0x1b8>)
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767e:	4b20      	ldr	r3, [pc, #128]	@ (8007700 <HAL_RCC_ClockConfig+0x1b8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d001      	beq.n	8007690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e032      	b.n	80076f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800769c:	4b19      	ldr	r3, [pc, #100]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	4916      	ldr	r1, [pc, #88]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ba:	4b12      	ldr	r3, [pc, #72]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	490e      	ldr	r1, [pc, #56]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076ce:	f000 f821 	bl	8007714 <HAL_RCC_GetSysClockFreq>
 80076d2:	4602      	mov	r2, r0
 80076d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <HAL_RCC_ClockConfig+0x1bc>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	490a      	ldr	r1, [pc, #40]	@ (8007708 <HAL_RCC_ClockConfig+0x1c0>)
 80076e0:	5ccb      	ldrb	r3, [r1, r3]
 80076e2:	fa22 f303 	lsr.w	r3, r2, r3
 80076e6:	4a09      	ldr	r2, [pc, #36]	@ (800770c <HAL_RCC_ClockConfig+0x1c4>)
 80076e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <HAL_RCC_ClockConfig+0x1c8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fb ff82 	bl	80035f8 <HAL_InitTick>

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40023c00 	.word	0x40023c00
 8007704:	40023800 	.word	0x40023800
 8007708:	0800ceb4 	.word	0x0800ceb4
 800770c:	20000004 	.word	0x20000004
 8007710:	20000008 	.word	0x20000008

08007714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007718:	b094      	sub	sp, #80	@ 0x50
 800771a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800772c:	4b79      	ldr	r3, [pc, #484]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x200>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 030c 	and.w	r3, r3, #12
 8007734:	2b08      	cmp	r3, #8
 8007736:	d00d      	beq.n	8007754 <HAL_RCC_GetSysClockFreq+0x40>
 8007738:	2b08      	cmp	r3, #8
 800773a:	f200 80e1 	bhi.w	8007900 <HAL_RCC_GetSysClockFreq+0x1ec>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_RCC_GetSysClockFreq+0x34>
 8007742:	2b04      	cmp	r3, #4
 8007744:	d003      	beq.n	800774e <HAL_RCC_GetSysClockFreq+0x3a>
 8007746:	e0db      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007748:	4b73      	ldr	r3, [pc, #460]	@ (8007918 <HAL_RCC_GetSysClockFreq+0x204>)
 800774a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800774c:	e0db      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800774e:	4b73      	ldr	r3, [pc, #460]	@ (800791c <HAL_RCC_GetSysClockFreq+0x208>)
 8007750:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007752:	e0d8      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007754:	4b6f      	ldr	r3, [pc, #444]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x200>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800775c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800775e:	4b6d      	ldr	r3, [pc, #436]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x200>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d063      	beq.n	8007832 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800776a:	4b6a      	ldr	r3, [pc, #424]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x200>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	099b      	lsrs	r3, r3, #6
 8007770:	2200      	movs	r2, #0
 8007772:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007774:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	633b      	str	r3, [r7, #48]	@ 0x30
 800777e:	2300      	movs	r3, #0
 8007780:	637b      	str	r3, [r7, #52]	@ 0x34
 8007782:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007786:	4622      	mov	r2, r4
 8007788:	462b      	mov	r3, r5
 800778a:	f04f 0000 	mov.w	r0, #0
 800778e:	f04f 0100 	mov.w	r1, #0
 8007792:	0159      	lsls	r1, r3, #5
 8007794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007798:	0150      	lsls	r0, r2, #5
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4621      	mov	r1, r4
 80077a0:	1a51      	subs	r1, r2, r1
 80077a2:	6139      	str	r1, [r7, #16]
 80077a4:	4629      	mov	r1, r5
 80077a6:	eb63 0301 	sbc.w	r3, r3, r1
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	f04f 0300 	mov.w	r3, #0
 80077b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077b8:	4659      	mov	r1, fp
 80077ba:	018b      	lsls	r3, r1, #6
 80077bc:	4651      	mov	r1, sl
 80077be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077c2:	4651      	mov	r1, sl
 80077c4:	018a      	lsls	r2, r1, #6
 80077c6:	4651      	mov	r1, sl
 80077c8:	ebb2 0801 	subs.w	r8, r2, r1
 80077cc:	4659      	mov	r1, fp
 80077ce:	eb63 0901 	sbc.w	r9, r3, r1
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077e6:	4690      	mov	r8, r2
 80077e8:	4699      	mov	r9, r3
 80077ea:	4623      	mov	r3, r4
 80077ec:	eb18 0303 	adds.w	r3, r8, r3
 80077f0:	60bb      	str	r3, [r7, #8]
 80077f2:	462b      	mov	r3, r5
 80077f4:	eb49 0303 	adc.w	r3, r9, r3
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007806:	4629      	mov	r1, r5
 8007808:	024b      	lsls	r3, r1, #9
 800780a:	4621      	mov	r1, r4
 800780c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007810:	4621      	mov	r1, r4
 8007812:	024a      	lsls	r2, r1, #9
 8007814:	4610      	mov	r0, r2
 8007816:	4619      	mov	r1, r3
 8007818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800781a:	2200      	movs	r2, #0
 800781c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800781e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007820:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007824:	f7f9 f9c0 	bl	8000ba8 <__aeabi_uldivmod>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4613      	mov	r3, r2
 800782e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007830:	e058      	b.n	80078e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007832:	4b38      	ldr	r3, [pc, #224]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x200>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	099b      	lsrs	r3, r3, #6
 8007838:	2200      	movs	r2, #0
 800783a:	4618      	mov	r0, r3
 800783c:	4611      	mov	r1, r2
 800783e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	2300      	movs	r3, #0
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
 8007848:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800784c:	4642      	mov	r2, r8
 800784e:	464b      	mov	r3, r9
 8007850:	f04f 0000 	mov.w	r0, #0
 8007854:	f04f 0100 	mov.w	r1, #0
 8007858:	0159      	lsls	r1, r3, #5
 800785a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800785e:	0150      	lsls	r0, r2, #5
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4641      	mov	r1, r8
 8007866:	ebb2 0a01 	subs.w	sl, r2, r1
 800786a:	4649      	mov	r1, r9
 800786c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800787c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007880:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007884:	ebb2 040a 	subs.w	r4, r2, sl
 8007888:	eb63 050b 	sbc.w	r5, r3, fp
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	00eb      	lsls	r3, r5, #3
 8007896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800789a:	00e2      	lsls	r2, r4, #3
 800789c:	4614      	mov	r4, r2
 800789e:	461d      	mov	r5, r3
 80078a0:	4643      	mov	r3, r8
 80078a2:	18e3      	adds	r3, r4, r3
 80078a4:	603b      	str	r3, [r7, #0]
 80078a6:	464b      	mov	r3, r9
 80078a8:	eb45 0303 	adc.w	r3, r5, r3
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ba:	4629      	mov	r1, r5
 80078bc:	028b      	lsls	r3, r1, #10
 80078be:	4621      	mov	r1, r4
 80078c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078c4:	4621      	mov	r1, r4
 80078c6:	028a      	lsls	r2, r1, #10
 80078c8:	4610      	mov	r0, r2
 80078ca:	4619      	mov	r1, r3
 80078cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ce:	2200      	movs	r2, #0
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	61fa      	str	r2, [r7, #28]
 80078d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078d8:	f7f9 f966 	bl	8000ba8 <__aeabi_uldivmod>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4613      	mov	r3, r2
 80078e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80078e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <HAL_RCC_GetSysClockFreq+0x200>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	0c1b      	lsrs	r3, r3, #16
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	3301      	adds	r3, #1
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80078f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80078fe:	e002      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <HAL_RCC_GetSysClockFreq+0x204>)
 8007902:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007908:	4618      	mov	r0, r3
 800790a:	3750      	adds	r7, #80	@ 0x50
 800790c:	46bd      	mov	sp, r7
 800790e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007912:	bf00      	nop
 8007914:	40023800 	.word	0x40023800
 8007918:	00f42400 	.word	0x00f42400
 800791c:	007a1200 	.word	0x007a1200

08007920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007924:	4b03      	ldr	r3, [pc, #12]	@ (8007934 <HAL_RCC_GetHCLKFreq+0x14>)
 8007926:	681b      	ldr	r3, [r3, #0]
}
 8007928:	4618      	mov	r0, r3
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000004 	.word	0x20000004

08007938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800793c:	f7ff fff0 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8007940:	4602      	mov	r2, r0
 8007942:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	0a9b      	lsrs	r3, r3, #10
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	4903      	ldr	r1, [pc, #12]	@ (800795c <HAL_RCC_GetPCLK1Freq+0x24>)
 800794e:	5ccb      	ldrb	r3, [r1, r3]
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007954:	4618      	mov	r0, r3
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40023800 	.word	0x40023800
 800795c:	0800cec4 	.word	0x0800cec4

08007960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007964:	f7ff ffdc 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0b5b      	lsrs	r3, r3, #13
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4903      	ldr	r1, [pc, #12]	@ (8007984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007976:	5ccb      	ldrb	r3, [r1, r3]
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40023800 	.word	0x40023800
 8007984:	0800cec4 	.word	0x0800cec4

08007988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e07b      	b.n	8007a92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d108      	bne.n	80079b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079aa:	d009      	beq.n	80079c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	61da      	str	r2, [r3, #28]
 80079b2:	e005      	b.n	80079c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fb fad6 	bl	8002f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a44:	ea42 0103 	orr.w	r1, r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	f003 0104 	and.w	r1, r3, #4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	f003 0210 	and.w	r2, r3, #16
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69da      	ldr	r2, [r3, #28]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b08a      	sub	sp, #40	@ 0x28
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aac:	f7fb fde8 	bl	8003680 <HAL_GetTick>
 8007ab0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ab8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ac0:	887b      	ldrh	r3, [r7, #2]
 8007ac2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ac4:	7ffb      	ldrb	r3, [r7, #31]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d00c      	beq.n	8007ae4 <HAL_SPI_TransmitReceive+0x4a>
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ad0:	d106      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x46>
 8007ada:	7ffb      	ldrb	r3, [r7, #31]
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d001      	beq.n	8007ae4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e17f      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x5c>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x5c>
 8007af0:	887b      	ldrh	r3, [r7, #2]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e174      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x6e>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e16d      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x34a>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d003      	beq.n	8007b24 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2205      	movs	r2, #5
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	887a      	ldrh	r2, [r7, #2]
 8007b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	887a      	ldrh	r2, [r7, #2]
 8007b3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	887a      	ldrh	r2, [r7, #2]
 8007b46:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	887a      	ldrh	r2, [r7, #2]
 8007b4c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b64:	2b40      	cmp	r3, #64	@ 0x40
 8007b66:	d007      	beq.n	8007b78 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b80:	d17e      	bne.n	8007c80 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_SPI_TransmitReceive+0xf6>
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d16c      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b94:	881a      	ldrh	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba0:	1c9a      	adds	r2, r3, #2
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb4:	e059      	b.n	8007c6a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d11b      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x162>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x162>
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d113      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	881a      	ldrh	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be4:	1c9a      	adds	r2, r3, #2
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d119      	bne.n	8007c3e <HAL_SPI_TransmitReceive+0x1a4>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d014      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c26:	1c9a      	adds	r2, r3, #2
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c3e:	f7fb fd1f 	bl	8003680 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d80d      	bhi.n	8007c6a <HAL_SPI_TransmitReceive+0x1d0>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d009      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e0bc      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1a0      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x11c>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d19b      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x11c>
 8007c7e:	e082      	b.n	8007d86 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <HAL_SPI_TransmitReceive+0x1f4>
 8007c88:	8afb      	ldrh	r3, [r7, #22]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d171      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	7812      	ldrb	r2, [r2, #0]
 8007c9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cb4:	e05d      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d11c      	bne.n	8007cfe <HAL_SPI_TransmitReceive+0x264>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d017      	beq.n	8007cfe <HAL_SPI_TransmitReceive+0x264>
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d114      	bne.n	8007cfe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	7812      	ldrb	r2, [r2, #0]
 8007ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d119      	bne.n	8007d40 <HAL_SPI_TransmitReceive+0x2a6>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d014      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d40:	f7fb fc9e 	bl	8003680 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d803      	bhi.n	8007d58 <HAL_SPI_TransmitReceive+0x2be>
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d102      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x2c4>
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e038      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d19c      	bne.n	8007cb6 <HAL_SPI_TransmitReceive+0x21c>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d197      	bne.n	8007cb6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d86:	6a3a      	ldr	r2, [r7, #32]
 8007d88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f9d4 	bl	8008138 <SPI_EndRxTxTransaction>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d008      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e01d      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007db0:	2300      	movs	r3, #0
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	613b      	str	r3, [r7, #16]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007de2:	2300      	movs	r3, #0
  }
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3728      	adds	r7, #40	@ 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10f      	bne.n	8007e30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	099b      	lsrs	r3, r3, #6
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4798      	blx	r3
    return;
 8007e2e:	e0d7      	b.n	8007fe0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <HAL_SPI_IRQHandler+0x66>
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	09db      	lsrs	r3, r3, #7
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d004      	beq.n	8007e52 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
    return;
 8007e50:	e0c6      	b.n	8007fe0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	095b      	lsrs	r3, r3, #5
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10c      	bne.n	8007e78 <HAL_SPI_IRQHandler+0x8c>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	099b      	lsrs	r3, r3, #6
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	0a1b      	lsrs	r3, r3, #8
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 80b4 	beq.w	8007fe0 <HAL_SPI_IRQHandler+0x1f4>
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80ad 	beq.w	8007fe0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	099b      	lsrs	r3, r3, #6
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d023      	beq.n	8007eda <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d011      	beq.n	8007ec2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea2:	f043 0204 	orr.w	r2, r3, #4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	e00b      	b.n	8007eda <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	693b      	ldr	r3, [r7, #16]
        return;
 8007ed8:	e082      	b.n	8007fe0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eea:	f043 0201 	orr.w	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00c      	beq.n	8007f36 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f20:	f043 0208 	orr.w	r2, r3, #8
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	60bb      	str	r3, [r7, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d04f      	beq.n	8007fde <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d104      	bne.n	8007f6a <HAL_SPI_IRQHandler+0x17e>
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d034      	beq.n	8007fd4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0203 	bic.w	r2, r2, #3
 8007f78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d011      	beq.n	8007fa6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f86:	4a18      	ldr	r2, [pc, #96]	@ (8007fe8 <HAL_SPI_IRQHandler+0x1fc>)
 8007f88:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fc fcce 	bl	8004930 <HAL_DMA_Abort_IT>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d016      	beq.n	8007fdc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007fe8 <HAL_SPI_IRQHandler+0x1fc>)
 8007fb4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fc fcb8 	bl	8004930 <HAL_DMA_Abort_IT>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007fd2:	e003      	b.n	8007fdc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f809 	bl	8007fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007fda:	e000      	b.n	8007fde <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007fdc:	bf00      	nop
    return;
 8007fde:	bf00      	nop
  }
}
 8007fe0:	3720      	adds	r7, #32
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	08008001 	.word	0x08008001

08007fec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff ffe6 	bl	8007fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	4613      	mov	r3, r2
 8008036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008038:	f7fb fb22 	bl	8003680 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4413      	add	r3, r2
 8008046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008048:	f7fb fb1a 	bl	8003680 <HAL_GetTick>
 800804c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800804e:	4b39      	ldr	r3, [pc, #228]	@ (8008134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	015b      	lsls	r3, r3, #5
 8008054:	0d1b      	lsrs	r3, r3, #20
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	fb02 f303 	mul.w	r3, r2, r3
 800805c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800805e:	e055      	b.n	800810c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d051      	beq.n	800810c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008068:	f7fb fb0a 	bl	8003680 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	429a      	cmp	r2, r3
 8008076:	d902      	bls.n	800807e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d13d      	bne.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800808c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008096:	d111      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a0:	d004      	beq.n	80080ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080aa:	d107      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c4:	d10f      	bne.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e018      	b.n	800812c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	e002      	b.n	800810c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	3b01      	subs	r3, #1
 800810a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4013      	ands	r3, r2
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	bf0c      	ite	eq
 800811c:	2301      	moveq	r3, #1
 800811e:	2300      	movne	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	429a      	cmp	r2, r3
 8008128:	d19a      	bne.n	8008060 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000004 	.word	0x20000004

08008138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2201      	movs	r2, #1
 800814c:	2102      	movs	r1, #2
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff ff6a 	bl	8008028 <SPI_WaitFlagStateUntilTimeout>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815e:	f043 0220 	orr.w	r2, r3, #32
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e032      	b.n	80081d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800816a:	4b1b      	ldr	r3, [pc, #108]	@ (80081d8 <SPI_EndRxTxTransaction+0xa0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1b      	ldr	r2, [pc, #108]	@ (80081dc <SPI_EndRxTxTransaction+0xa4>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	0d5b      	lsrs	r3, r3, #21
 8008176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800817a:	fb02 f303 	mul.w	r3, r2, r3
 800817e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008188:	d112      	bne.n	80081b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2200      	movs	r2, #0
 8008192:	2180      	movs	r1, #128	@ 0x80
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff ff47 	bl	8008028 <SPI_WaitFlagStateUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d016      	beq.n	80081ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e00f      	b.n	80081d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c6:	2b80      	cmp	r3, #128	@ 0x80
 80081c8:	d0f2      	beq.n	80081b0 <SPI_EndRxTxTransaction+0x78>
 80081ca:	e000      	b.n	80081ce <SPI_EndRxTxTransaction+0x96>
        break;
 80081cc:	bf00      	nop
  }

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	20000004 	.word	0x20000004
 80081dc:	165e9f81 	.word	0x165e9f81

080081e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e041      	b.n	8008276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7fa ff10 	bl	800302c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f000 faf6 	bl	8008810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b01      	cmp	r3, #1
 8008292:	d001      	beq.n	8008298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e046      	b.n	8008326 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a23      	ldr	r2, [pc, #140]	@ (8008334 <HAL_TIM_Base_Start+0xb4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d022      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b2:	d01d      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008338 <HAL_TIM_Base_Start+0xb8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d018      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1e      	ldr	r2, [pc, #120]	@ (800833c <HAL_TIM_Base_Start+0xbc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d013      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008340 <HAL_TIM_Base_Start+0xc0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00e      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008344 <HAL_TIM_Base_Start+0xc4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d009      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a19      	ldr	r2, [pc, #100]	@ (8008348 <HAL_TIM_Base_Start+0xc8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_TIM_Base_Start+0x70>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a18      	ldr	r2, [pc, #96]	@ (800834c <HAL_TIM_Base_Start+0xcc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d111      	bne.n	8008314 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b06      	cmp	r3, #6
 8008300:	d010      	beq.n	8008324 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008312:	e007      	b.n	8008324 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40010400 	.word	0x40010400
 8008348:	40014000 	.word	0x40014000
 800834c:	40001800 	.word	0x40001800

08008350 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6a1a      	ldr	r2, [r3, #32]
 800835e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008362:	4013      	ands	r3, r2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10f      	bne.n	8008388 <HAL_TIM_Base_Stop+0x38>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6a1a      	ldr	r2, [r3, #32]
 800836e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008372:	4013      	ands	r3, r2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d107      	bne.n	8008388 <HAL_TIM_Base_Stop+0x38>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e041      	b.n	8008436 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fa fe86 	bl	80030d8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3304      	adds	r3, #4
 80083dc:	4619      	mov	r1, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	f000 fa16 	bl	8008810 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0208 	bic.w	r2, r2, #8
 80083f2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d020      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01b      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f06f 0202 	mvn.w	r2, #2
 8008472:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f9a3 	bl	80087d4 <HAL_TIM_IC_CaptureCallback>
 800848e:	e005      	b.n	800849c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f995 	bl	80087c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f9a6 	bl	80087e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d020      	beq.n	80084ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01b      	beq.n	80084ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f06f 0204 	mvn.w	r2, #4
 80084be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d003      	beq.n	80084dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f97d 	bl	80087d4 <HAL_TIM_IC_CaptureCallback>
 80084da:	e005      	b.n	80084e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f96f 	bl	80087c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f980 	bl	80087e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d020      	beq.n	800853a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01b      	beq.n	800853a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f06f 0208 	mvn.w	r2, #8
 800850a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2204      	movs	r2, #4
 8008510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f957 	bl	80087d4 <HAL_TIM_IC_CaptureCallback>
 8008526:	e005      	b.n	8008534 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f949 	bl	80087c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f95a 	bl	80087e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b00      	cmp	r3, #0
 8008542:	d020      	beq.n	8008586 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 0310 	and.w	r3, r3, #16
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01b      	beq.n	8008586 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f06f 0210 	mvn.w	r2, #16
 8008556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2208      	movs	r2, #8
 800855c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f931 	bl	80087d4 <HAL_TIM_IC_CaptureCallback>
 8008572:	e005      	b.n	8008580 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f923 	bl	80087c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f934 	bl	80087e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00c      	beq.n	80085aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f06f 0201 	mvn.w	r2, #1
 80085a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f901 	bl	80087ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80085c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fae7 	bl	8008b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00c      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f905 	bl	80087fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00c      	beq.n	8008616 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f06f 0220 	mvn.w	r2, #32
 800860e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fab9 	bl	8008b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008616:	bf00      	nop
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_TIM_ConfigClockSource+0x1c>
 8008636:	2302      	movs	r3, #2
 8008638:	e0b4      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x186>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008658:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008660:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008672:	d03e      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0xd4>
 8008674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008678:	f200 8087 	bhi.w	800878a <HAL_TIM_ConfigClockSource+0x16c>
 800867c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008680:	f000 8086 	beq.w	8008790 <HAL_TIM_ConfigClockSource+0x172>
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008688:	d87f      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
 800868a:	2b70      	cmp	r3, #112	@ 0x70
 800868c:	d01a      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0xa6>
 800868e:	2b70      	cmp	r3, #112	@ 0x70
 8008690:	d87b      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
 8008692:	2b60      	cmp	r3, #96	@ 0x60
 8008694:	d050      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0x11a>
 8008696:	2b60      	cmp	r3, #96	@ 0x60
 8008698:	d877      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
 800869a:	2b50      	cmp	r3, #80	@ 0x50
 800869c:	d03c      	beq.n	8008718 <HAL_TIM_ConfigClockSource+0xfa>
 800869e:	2b50      	cmp	r3, #80	@ 0x50
 80086a0:	d873      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
 80086a2:	2b40      	cmp	r3, #64	@ 0x40
 80086a4:	d058      	beq.n	8008758 <HAL_TIM_ConfigClockSource+0x13a>
 80086a6:	2b40      	cmp	r3, #64	@ 0x40
 80086a8:	d86f      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
 80086aa:	2b30      	cmp	r3, #48	@ 0x30
 80086ac:	d064      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15a>
 80086ae:	2b30      	cmp	r3, #48	@ 0x30
 80086b0:	d86b      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d060      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15a>
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d867      	bhi.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d05c      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15a>
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d05a      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x15a>
 80086c2:	e062      	b.n	800878a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086d4:	f000 f9bc 	bl	8008a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	609a      	str	r2, [r3, #8]
      break;
 80086f0:	e04f      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008702:	f000 f9a5 	bl	8008a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008714:	609a      	str	r2, [r3, #8]
      break;
 8008716:	e03c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008724:	461a      	mov	r2, r3
 8008726:	f000 f919 	bl	800895c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2150      	movs	r1, #80	@ 0x50
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f972 	bl	8008a1a <TIM_ITRx_SetConfig>
      break;
 8008736:	e02c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008744:	461a      	mov	r2, r3
 8008746:	f000 f938 	bl	80089ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2160      	movs	r1, #96	@ 0x60
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f962 	bl	8008a1a <TIM_ITRx_SetConfig>
      break;
 8008756:	e01c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008764:	461a      	mov	r2, r3
 8008766:	f000 f8f9 	bl	800895c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2140      	movs	r1, #64	@ 0x40
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f952 	bl	8008a1a <TIM_ITRx_SetConfig>
      break;
 8008776:	e00c      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4619      	mov	r1, r3
 8008782:	4610      	mov	r0, r2
 8008784:	f000 f949 	bl	8008a1a <TIM_ITRx_SetConfig>
      break;
 8008788:	e003      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]
      break;
 800878e:	e000      	b.n	8008792 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a43      	ldr	r2, [pc, #268]	@ (8008930 <TIM_Base_SetConfig+0x120>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800882e:	d00f      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a40      	ldr	r2, [pc, #256]	@ (8008934 <TIM_Base_SetConfig+0x124>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00b      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a3f      	ldr	r2, [pc, #252]	@ (8008938 <TIM_Base_SetConfig+0x128>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a3e      	ldr	r2, [pc, #248]	@ (800893c <TIM_Base_SetConfig+0x12c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a3d      	ldr	r2, [pc, #244]	@ (8008940 <TIM_Base_SetConfig+0x130>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d108      	bne.n	8008862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a32      	ldr	r2, [pc, #200]	@ (8008930 <TIM_Base_SetConfig+0x120>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d02b      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008870:	d027      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2f      	ldr	r2, [pc, #188]	@ (8008934 <TIM_Base_SetConfig+0x124>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d023      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2e      	ldr	r2, [pc, #184]	@ (8008938 <TIM_Base_SetConfig+0x128>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d01f      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2d      	ldr	r2, [pc, #180]	@ (800893c <TIM_Base_SetConfig+0x12c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01b      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a2c      	ldr	r2, [pc, #176]	@ (8008940 <TIM_Base_SetConfig+0x130>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d017      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a2b      	ldr	r2, [pc, #172]	@ (8008944 <TIM_Base_SetConfig+0x134>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a2a      	ldr	r2, [pc, #168]	@ (8008948 <TIM_Base_SetConfig+0x138>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00f      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a29      	ldr	r2, [pc, #164]	@ (800894c <TIM_Base_SetConfig+0x13c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00b      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a28      	ldr	r2, [pc, #160]	@ (8008950 <TIM_Base_SetConfig+0x140>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d007      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a27      	ldr	r2, [pc, #156]	@ (8008954 <TIM_Base_SetConfig+0x144>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d003      	beq.n	80088c2 <TIM_Base_SetConfig+0xb2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a26      	ldr	r2, [pc, #152]	@ (8008958 <TIM_Base_SetConfig+0x148>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d108      	bne.n	80088d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a0e      	ldr	r2, [pc, #56]	@ (8008930 <TIM_Base_SetConfig+0x120>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d003      	beq.n	8008902 <TIM_Base_SetConfig+0xf2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a10      	ldr	r2, [pc, #64]	@ (8008940 <TIM_Base_SetConfig+0x130>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d103      	bne.n	800890a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f043 0204 	orr.w	r2, r3, #4
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]
}
 8008922:	bf00      	nop
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	40010000 	.word	0x40010000
 8008934:	40000400 	.word	0x40000400
 8008938:	40000800 	.word	0x40000800
 800893c:	40000c00 	.word	0x40000c00
 8008940:	40010400 	.word	0x40010400
 8008944:	40014000 	.word	0x40014000
 8008948:	40014400 	.word	0x40014400
 800894c:	40014800 	.word	0x40014800
 8008950:	40001800 	.word	0x40001800
 8008954:	40001c00 	.word	0x40001c00
 8008958:	40002000 	.word	0x40002000

0800895c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	f023 0201 	bic.w	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 030a 	bic.w	r3, r3, #10
 8008998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b087      	sub	sp, #28
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	f023 0210 	bic.w	r2, r3, #16
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	031b      	lsls	r3, r3, #12
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	f043 0307 	orr.w	r3, r3, #7
 8008a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	609a      	str	r2, [r3, #8]
}
 8008a44:	bf00      	nop
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	021a      	lsls	r2, r3, #8
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	609a      	str	r2, [r3, #8]
}
 8008a84:	bf00      	nop
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e05a      	b.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a21      	ldr	r2, [pc, #132]	@ (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d022      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af4:	d01d      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1d      	ldr	r2, [pc, #116]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d018      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a1b      	ldr	r2, [pc, #108]	@ (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d013      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00e      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a18      	ldr	r2, [pc, #96]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a17      	ldr	r2, [pc, #92]	@ (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a15      	ldr	r2, [pc, #84]	@ (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10c      	bne.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	40010000 	.word	0x40010000
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800
 8008b78:	40000c00 	.word	0x40000c00
 8008b7c:	40010400 	.word	0x40010400
 8008b80:	40014000 	.word	0x40014000
 8008b84:	40001800 	.word	0x40001800

08008b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e042      	b.n	8008c48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7fa face 	bl	8003178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2224      	movs	r2, #36	@ 0x24
 8008be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fdd3 	bl	80097a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	695a      	ldr	r2, [r3, #20]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08a      	sub	sp, #40	@ 0x28
 8008c54:	af02      	add	r7, sp, #8
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b20      	cmp	r3, #32
 8008c6e:	d175      	bne.n	8008d5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <HAL_UART_Transmit+0x2c>
 8008c76:	88fb      	ldrh	r3, [r7, #6]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e06e      	b.n	8008d5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2221      	movs	r2, #33	@ 0x21
 8008c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c8e:	f7fa fcf7 	bl	8003680 <HAL_GetTick>
 8008c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	88fa      	ldrh	r2, [r7, #6]
 8008c98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	88fa      	ldrh	r2, [r7, #6]
 8008c9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ca8:	d108      	bne.n	8008cbc <HAL_UART_Transmit+0x6c>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	e003      	b.n	8008cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cc4:	e02e      	b.n	8008d24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2180      	movs	r1, #128	@ 0x80
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fb37 	bl	8009344 <UART_WaitOnFlagUntilTimeout>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e03a      	b.n	8008d5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	3302      	adds	r3, #2
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	e007      	b.n	8008d16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	3301      	adds	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1cb      	bne.n	8008cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2200      	movs	r2, #0
 8008d36:	2140      	movs	r1, #64	@ 0x40
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 fb03 	bl	8009344 <UART_WaitOnFlagUntilTimeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e006      	b.n	8008d5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e000      	b.n	8008d5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008d5c:	2302      	movs	r3, #2
  }
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	4613      	mov	r3, r2
 8008d72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d112      	bne.n	8008da6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d002      	beq.n	8008d8c <HAL_UART_Receive_IT+0x26>
 8008d86:	88fb      	ldrh	r3, [r7, #6]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e00b      	b.n	8008da8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 fb2a 	bl	80093f6 <UART_Start_Receive_IT>
 8008da2:	4603      	mov	r3, r0
 8008da4:	e000      	b.n	8008da8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b0ba      	sub	sp, #232	@ 0xe8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10f      	bne.n	8008e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <HAL_UART_IRQHandler+0x66>
 8008e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fc07 	bl	8009622 <UART_Receive_IT>
      return;
 8008e14:	e273      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80de 	beq.w	8008fdc <HAL_UART_IRQHandler+0x22c>
 8008e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d106      	bne.n	8008e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80d1 	beq.w	8008fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <HAL_UART_IRQHandler+0xae>
 8008e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e56:	f043 0201 	orr.w	r2, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00b      	beq.n	8008e82 <HAL_UART_IRQHandler+0xd2>
 8008e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d005      	beq.n	8008e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7a:	f043 0202 	orr.w	r2, r3, #2
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <HAL_UART_IRQHandler+0xf6>
 8008e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9e:	f043 0204 	orr.w	r2, r3, #4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eaa:	f003 0308 	and.w	r3, r3, #8
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d011      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x126>
 8008eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d105      	bne.n	8008eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ece:	f043 0208 	orr.w	r2, r3, #8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 820a 	beq.w	80092f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <HAL_UART_IRQHandler+0x14e>
 8008eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef0:	f003 0320 	and.w	r3, r3, #32
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fb92 	bl	8009622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f08:	2b40      	cmp	r3, #64	@ 0x40
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d103      	bne.n	8008f2a <HAL_UART_IRQHandler+0x17a>
 8008f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d04f      	beq.n	8008fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa9d 	bl	800946a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3a:	2b40      	cmp	r3, #64	@ 0x40
 8008f3c:	d141      	bne.n	8008fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3314      	adds	r3, #20
 8008f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3314      	adds	r3, #20
 8008f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d9      	bne.n	8008f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d013      	beq.n	8008fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f96:	4a8a      	ldr	r2, [pc, #552]	@ (80091c0 <HAL_UART_IRQHandler+0x410>)
 8008f98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fb fcc6 	bl	8004930 <HAL_DMA_Abort_IT>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d016      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb8:	e00e      	b.n	8008fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f9ac 	bl	8009318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc0:	e00a      	b.n	8008fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f9a8 	bl	8009318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc8:	e006      	b.n	8008fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f9a4 	bl	8009318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008fd6:	e18d      	b.n	80092f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd8:	bf00      	nop
    return;
 8008fda:	e18b      	b.n	80092f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	f040 8167 	bne.w	80092b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 8160 	beq.w	80092b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 8159 	beq.w	80092b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009002:	2300      	movs	r3, #0
 8009004:	60bb      	str	r3, [r7, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60bb      	str	r3, [r7, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	60bb      	str	r3, [r7, #8]
 8009016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009022:	2b40      	cmp	r3, #64	@ 0x40
 8009024:	f040 80ce 	bne.w	80091c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80a9 	beq.w	8009190 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009046:	429a      	cmp	r2, r3
 8009048:	f080 80a2 	bcs.w	8009190 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009052:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800905e:	f000 8088 	beq.w	8009172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	330c      	adds	r3, #12
 8009068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800907c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	330c      	adds	r3, #12
 800908a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800908e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800909a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1d9      	bne.n	8009062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3314      	adds	r3, #20
 80090ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e1      	bne.n	80090ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3314      	adds	r3, #20
 80090f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3314      	adds	r3, #20
 800910a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800910e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009110:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800911c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e3      	bne.n	80090ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009142:	f023 0310 	bic.w	r3, r3, #16
 8009146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009154:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009156:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800915a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e3      	bne.n	8009130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800916c:	4618      	mov	r0, r3
 800916e:	f7fb fb6f 	bl	8004850 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2202      	movs	r2, #2
 8009176:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009180:	b29b      	uxth	r3, r3
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	b29b      	uxth	r3, r3
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8cf 	bl	800932c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800918e:	e0b3      	b.n	80092f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009198:	429a      	cmp	r2, r3
 800919a:	f040 80ad 	bne.w	80092f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091a8:	f040 80a6 	bne.w	80092f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8b7 	bl	800932c <HAL_UARTEx_RxEventCallback>
      return;
 80091be:	e09b      	b.n	80092f8 <HAL_UART_IRQHandler+0x548>
 80091c0:	08009531 	.word	0x08009531
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 808e 	beq.w	80092fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80091e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8089 	beq.w	80092fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	330c      	adds	r3, #12
 80091f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800920e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800921c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e3      	bne.n	80091ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	623b      	str	r3, [r7, #32]
   return(result);
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009246:	633a      	str	r2, [r7, #48]	@ 0x30
 8009248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800924c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	60fb      	str	r3, [r7, #12]
   return(result);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800928c:	61fa      	str	r2, [r7, #28]
 800928e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	69b9      	ldr	r1, [r7, #24]
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	617b      	str	r3, [r7, #20]
   return(result);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f83d 	bl	800932c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092b2:	e023      	b.n	80092fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <HAL_UART_IRQHandler+0x524>
 80092c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f940 	bl	8009552 <UART_Transmit_IT>
    return;
 80092d2:	e014      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <HAL_UART_IRQHandler+0x54e>
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d008      	beq.n	80092fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f980 	bl	80095f2 <UART_EndTransmit_IT>
    return;
 80092f2:	e004      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
    return;
 80092f4:	bf00      	nop
 80092f6:	e002      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
      return;
 80092f8:	bf00      	nop
 80092fa:	e000      	b.n	80092fe <HAL_UART_IRQHandler+0x54e>
      return;
 80092fc:	bf00      	nop
  }
}
 80092fe:	37e8      	adds	r7, #232	@ 0xe8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4613      	mov	r3, r2
 8009352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009354:	e03b      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d037      	beq.n	80093ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935e:	f7fa f98f 	bl	8003680 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	6a3a      	ldr	r2, [r7, #32]
 800936a:	429a      	cmp	r2, r3
 800936c:	d302      	bcc.n	8009374 <UART_WaitOnFlagUntilTimeout+0x30>
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e03a      	b.n	80093ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	d023      	beq.n	80093ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b80      	cmp	r3, #128	@ 0x80
 800938a:	d020      	beq.n	80093ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b40      	cmp	r3, #64	@ 0x40
 8009390:	d01d      	beq.n	80093ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b08      	cmp	r3, #8
 800939e:	d116      	bne.n	80093ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f857 	bl	800946a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2208      	movs	r2, #8
 80093c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e00f      	b.n	80093ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4013      	ands	r3, r2
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	429a      	cmp	r2, r3
 80093dc:	bf0c      	ite	eq
 80093de:	2301      	moveq	r3, #1
 80093e0:	2300      	movne	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	461a      	mov	r2, r3
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d0b4      	beq.n	8009356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b085      	sub	sp, #20
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	4613      	mov	r3, r2
 8009402:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	88fa      	ldrh	r2, [r7, #6]
 800940e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2222      	movs	r2, #34	@ 0x22
 8009420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d007      	beq.n	800943c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800943a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	695a      	ldr	r2, [r3, #20]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0201 	orr.w	r2, r2, #1
 800944a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0220 	orr.w	r2, r2, #32
 800945a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800946a:	b480      	push	{r7}
 800946c:	b095      	sub	sp, #84	@ 0x54
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	330c      	adds	r3, #12
 8009478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	330c      	adds	r3, #12
 8009490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009492:	643a      	str	r2, [r7, #64]	@ 0x40
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e5      	bne.n	8009472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3314      	adds	r3, #20
 80094ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3314      	adds	r3, #20
 80094c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e5      	bne.n	80094a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d119      	bne.n	8009516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	330c      	adds	r3, #12
 80094e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f023 0310 	bic.w	r3, r3, #16
 80094f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	330c      	adds	r3, #12
 8009500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009502:	61ba      	str	r2, [r7, #24]
 8009504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6979      	ldr	r1, [r7, #20]
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	613b      	str	r3, [r7, #16]
   return(result);
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e5      	bne.n	80094e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2220      	movs	r2, #32
 800951a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009524:	bf00      	nop
 8009526:	3754      	adds	r7, #84	@ 0x54
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff fee7 	bl	8009318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b21      	cmp	r3, #33	@ 0x21
 8009564:	d13e      	bne.n	80095e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800956e:	d114      	bne.n	800959a <UART_Transmit_IT+0x48>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d110      	bne.n	800959a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800958c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	1c9a      	adds	r2, r3, #2
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	621a      	str	r2, [r3, #32]
 8009598:	e008      	b.n	80095ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	1c59      	adds	r1, r3, #1
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6211      	str	r1, [r2, #32]
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4619      	mov	r1, r3
 80095ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10f      	bne.n	80095e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80095ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68da      	ldr	r2, [r3, #12]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e000      	b.n	80095e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095e4:	2302      	movs	r3, #2
  }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7ff fe76 	bl	8009304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b08c      	sub	sp, #48	@ 0x30
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b22      	cmp	r3, #34	@ 0x22
 800963c:	f040 80aa 	bne.w	8009794 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009648:	d115      	bne.n	8009676 <UART_Receive_IT+0x54>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d111      	bne.n	8009676 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	b29b      	uxth	r3, r3
 8009660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009664:	b29a      	uxth	r2, r3
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966e:	1c9a      	adds	r2, r3, #2
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	629a      	str	r2, [r3, #40]	@ 0x28
 8009674:	e024      	b.n	80096c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009684:	d007      	beq.n	8009696 <UART_Receive_IT+0x74>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <UART_Receive_IT+0x82>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	b2da      	uxtb	r2, r3
 800969e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e008      	b.n	80096b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4619      	mov	r1, r3
 80096ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d15d      	bne.n	8009790 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68da      	ldr	r2, [r3, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0220 	bic.w	r2, r2, #32
 80096e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0201 	bic.w	r2, r2, #1
 8009702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2220      	movs	r2, #32
 8009708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009716:	2b01      	cmp	r3, #1
 8009718:	d135      	bne.n	8009786 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	330c      	adds	r3, #12
 8009726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	613b      	str	r3, [r7, #16]
   return(result);
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f023 0310 	bic.w	r3, r3, #16
 8009736:	627b      	str	r3, [r7, #36]	@ 0x24
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	330c      	adds	r3, #12
 800973e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009740:	623a      	str	r2, [r7, #32]
 8009742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	69f9      	ldr	r1, [r7, #28]
 8009746:	6a3a      	ldr	r2, [r7, #32]
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	61bb      	str	r3, [r7, #24]
   return(result);
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e5      	bne.n	8009720 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b10      	cmp	r3, #16
 8009760:	d10a      	bne.n	8009778 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff fdd4 	bl	800932c <HAL_UARTEx_RxEventCallback>
 8009784:	e002      	b.n	800978c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7f7 fbe8 	bl	8000f5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	e002      	b.n	8009796 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	e000      	b.n	8009796 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009794:	2302      	movs	r3, #2
  }
}
 8009796:	4618      	mov	r0, r3
 8009798:	3730      	adds	r7, #48	@ 0x30
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097a4:	b0c0      	sub	sp, #256	@ 0x100
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80097b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097bc:	68d9      	ldr	r1, [r3, #12]
 80097be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	ea40 0301 	orr.w	r3, r0, r1
 80097c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	431a      	orrs	r2, r3
 80097d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	431a      	orrs	r2, r3
 80097e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80097ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80097f8:	f021 010c 	bic.w	r1, r1, #12
 80097fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009806:	430b      	orrs	r3, r1
 8009808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800980a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981a:	6999      	ldr	r1, [r3, #24]
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	ea40 0301 	orr.w	r3, r0, r1
 8009826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b8f      	ldr	r3, [pc, #572]	@ (8009a6c <UART_SetConfig+0x2cc>)
 8009830:	429a      	cmp	r2, r3
 8009832:	d005      	beq.n	8009840 <UART_SetConfig+0xa0>
 8009834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b8d      	ldr	r3, [pc, #564]	@ (8009a70 <UART_SetConfig+0x2d0>)
 800983c:	429a      	cmp	r2, r3
 800983e:	d104      	bne.n	800984a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009840:	f7fe f88e 	bl	8007960 <HAL_RCC_GetPCLK2Freq>
 8009844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009848:	e003      	b.n	8009852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800984a:	f7fe f875 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 800984e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800985c:	f040 810c 	bne.w	8009a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009864:	2200      	movs	r2, #0
 8009866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800986a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800986e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009872:	4622      	mov	r2, r4
 8009874:	462b      	mov	r3, r5
 8009876:	1891      	adds	r1, r2, r2
 8009878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800987a:	415b      	adcs	r3, r3
 800987c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800987e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009882:	4621      	mov	r1, r4
 8009884:	eb12 0801 	adds.w	r8, r2, r1
 8009888:	4629      	mov	r1, r5
 800988a:	eb43 0901 	adc.w	r9, r3, r1
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800989a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800989e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098a2:	4690      	mov	r8, r2
 80098a4:	4699      	mov	r9, r3
 80098a6:	4623      	mov	r3, r4
 80098a8:	eb18 0303 	adds.w	r3, r8, r3
 80098ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098b0:	462b      	mov	r3, r5
 80098b2:	eb49 0303 	adc.w	r3, r9, r3
 80098b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80098ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80098ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80098ce:	460b      	mov	r3, r1
 80098d0:	18db      	adds	r3, r3, r3
 80098d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80098d4:	4613      	mov	r3, r2
 80098d6:	eb42 0303 	adc.w	r3, r2, r3
 80098da:	657b      	str	r3, [r7, #84]	@ 0x54
 80098dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80098e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80098e4:	f7f7 f960 	bl	8000ba8 <__aeabi_uldivmod>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4b61      	ldr	r3, [pc, #388]	@ (8009a74 <UART_SetConfig+0x2d4>)
 80098ee:	fba3 2302 	umull	r2, r3, r3, r2
 80098f2:	095b      	lsrs	r3, r3, #5
 80098f4:	011c      	lsls	r4, r3, #4
 80098f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009908:	4642      	mov	r2, r8
 800990a:	464b      	mov	r3, r9
 800990c:	1891      	adds	r1, r2, r2
 800990e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009910:	415b      	adcs	r3, r3
 8009912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009918:	4641      	mov	r1, r8
 800991a:	eb12 0a01 	adds.w	sl, r2, r1
 800991e:	4649      	mov	r1, r9
 8009920:	eb43 0b01 	adc.w	fp, r3, r1
 8009924:	f04f 0200 	mov.w	r2, #0
 8009928:	f04f 0300 	mov.w	r3, #0
 800992c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009938:	4692      	mov	sl, r2
 800993a:	469b      	mov	fp, r3
 800993c:	4643      	mov	r3, r8
 800993e:	eb1a 0303 	adds.w	r3, sl, r3
 8009942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009946:	464b      	mov	r3, r9
 8009948:	eb4b 0303 	adc.w	r3, fp, r3
 800994c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800995c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009964:	460b      	mov	r3, r1
 8009966:	18db      	adds	r3, r3, r3
 8009968:	643b      	str	r3, [r7, #64]	@ 0x40
 800996a:	4613      	mov	r3, r2
 800996c:	eb42 0303 	adc.w	r3, r2, r3
 8009970:	647b      	str	r3, [r7, #68]	@ 0x44
 8009972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800997a:	f7f7 f915 	bl	8000ba8 <__aeabi_uldivmod>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4611      	mov	r1, r2
 8009984:	4b3b      	ldr	r3, [pc, #236]	@ (8009a74 <UART_SetConfig+0x2d4>)
 8009986:	fba3 2301 	umull	r2, r3, r3, r1
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	2264      	movs	r2, #100	@ 0x64
 800998e:	fb02 f303 	mul.w	r3, r2, r3
 8009992:	1acb      	subs	r3, r1, r3
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800999a:	4b36      	ldr	r3, [pc, #216]	@ (8009a74 <UART_SetConfig+0x2d4>)
 800999c:	fba3 2302 	umull	r2, r3, r3, r2
 80099a0:	095b      	lsrs	r3, r3, #5
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80099a8:	441c      	add	r4, r3
 80099aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80099b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	1891      	adds	r1, r2, r2
 80099c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80099c4:	415b      	adcs	r3, r3
 80099c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80099cc:	4641      	mov	r1, r8
 80099ce:	1851      	adds	r1, r2, r1
 80099d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80099d2:	4649      	mov	r1, r9
 80099d4:	414b      	adcs	r3, r1
 80099d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d8:	f04f 0200 	mov.w	r2, #0
 80099dc:	f04f 0300 	mov.w	r3, #0
 80099e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80099e4:	4659      	mov	r1, fp
 80099e6:	00cb      	lsls	r3, r1, #3
 80099e8:	4651      	mov	r1, sl
 80099ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099ee:	4651      	mov	r1, sl
 80099f0:	00ca      	lsls	r2, r1, #3
 80099f2:	4610      	mov	r0, r2
 80099f4:	4619      	mov	r1, r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	4642      	mov	r2, r8
 80099fa:	189b      	adds	r3, r3, r2
 80099fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a00:	464b      	mov	r3, r9
 8009a02:	460a      	mov	r2, r1
 8009a04:	eb42 0303 	adc.w	r3, r2, r3
 8009a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a20:	460b      	mov	r3, r1
 8009a22:	18db      	adds	r3, r3, r3
 8009a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a26:	4613      	mov	r3, r2
 8009a28:	eb42 0303 	adc.w	r3, r2, r3
 8009a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009a36:	f7f7 f8b7 	bl	8000ba8 <__aeabi_uldivmod>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <UART_SetConfig+0x2d4>)
 8009a40:	fba3 1302 	umull	r1, r3, r3, r2
 8009a44:	095b      	lsrs	r3, r3, #5
 8009a46:	2164      	movs	r1, #100	@ 0x64
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	3332      	adds	r3, #50	@ 0x32
 8009a52:	4a08      	ldr	r2, [pc, #32]	@ (8009a74 <UART_SetConfig+0x2d4>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	f003 0207 	and.w	r2, r3, #7
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4422      	add	r2, r4
 8009a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a68:	e106      	b.n	8009c78 <UART_SetConfig+0x4d8>
 8009a6a:	bf00      	nop
 8009a6c:	40011000 	.word	0x40011000
 8009a70:	40011400 	.word	0x40011400
 8009a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	1891      	adds	r1, r2, r2
 8009a90:	6239      	str	r1, [r7, #32]
 8009a92:	415b      	adcs	r3, r3
 8009a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	1854      	adds	r4, r2, r1
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	eb43 0501 	adc.w	r5, r3, r1
 8009aa4:	f04f 0200 	mov.w	r2, #0
 8009aa8:	f04f 0300 	mov.w	r3, #0
 8009aac:	00eb      	lsls	r3, r5, #3
 8009aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ab2:	00e2      	lsls	r2, r4, #3
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	461d      	mov	r5, r3
 8009ab8:	4643      	mov	r3, r8
 8009aba:	18e3      	adds	r3, r4, r3
 8009abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ac0:	464b      	mov	r3, r9
 8009ac2:	eb45 0303 	adc.w	r3, r5, r3
 8009ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	008b      	lsls	r3, r1, #2
 8009aea:	4621      	mov	r1, r4
 8009aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009af0:	4621      	mov	r1, r4
 8009af2:	008a      	lsls	r2, r1, #2
 8009af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009af8:	f7f7 f856 	bl	8000ba8 <__aeabi_uldivmod>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4b60      	ldr	r3, [pc, #384]	@ (8009c84 <UART_SetConfig+0x4e4>)
 8009b02:	fba3 2302 	umull	r2, r3, r3, r2
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	011c      	lsls	r4, r3, #4
 8009b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	1891      	adds	r1, r2, r2
 8009b22:	61b9      	str	r1, [r7, #24]
 8009b24:	415b      	adcs	r3, r3
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	1851      	adds	r1, r2, r1
 8009b30:	6139      	str	r1, [r7, #16]
 8009b32:	4649      	mov	r1, r9
 8009b34:	414b      	adcs	r3, r1
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b44:	4659      	mov	r1, fp
 8009b46:	00cb      	lsls	r3, r1, #3
 8009b48:	4651      	mov	r1, sl
 8009b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b4e:	4651      	mov	r1, sl
 8009b50:	00ca      	lsls	r2, r1, #3
 8009b52:	4610      	mov	r0, r2
 8009b54:	4619      	mov	r1, r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	4642      	mov	r2, r8
 8009b5a:	189b      	adds	r3, r3, r2
 8009b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b60:	464b      	mov	r3, r9
 8009b62:	460a      	mov	r2, r1
 8009b64:	eb42 0303 	adc.w	r3, r2, r3
 8009b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b78:	f04f 0200 	mov.w	r2, #0
 8009b7c:	f04f 0300 	mov.w	r3, #0
 8009b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b84:	4649      	mov	r1, r9
 8009b86:	008b      	lsls	r3, r1, #2
 8009b88:	4641      	mov	r1, r8
 8009b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b8e:	4641      	mov	r1, r8
 8009b90:	008a      	lsls	r2, r1, #2
 8009b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b96:	f7f7 f807 	bl	8000ba8 <__aeabi_uldivmod>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	4b38      	ldr	r3, [pc, #224]	@ (8009c84 <UART_SetConfig+0x4e4>)
 8009ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	2264      	movs	r2, #100	@ 0x64
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	1acb      	subs	r3, r1, r3
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	3332      	adds	r3, #50	@ 0x32
 8009bb4:	4a33      	ldr	r2, [pc, #204]	@ (8009c84 <UART_SetConfig+0x4e4>)
 8009bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bc0:	441c      	add	r4, r3
 8009bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bca:	677a      	str	r2, [r7, #116]	@ 0x74
 8009bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	1891      	adds	r1, r2, r2
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	415b      	adcs	r3, r3
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009be0:	4641      	mov	r1, r8
 8009be2:	1851      	adds	r1, r2, r1
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	4649      	mov	r1, r9
 8009be8:	414b      	adcs	r3, r1
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009bf8:	4659      	mov	r1, fp
 8009bfa:	00cb      	lsls	r3, r1, #3
 8009bfc:	4651      	mov	r1, sl
 8009bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c02:	4651      	mov	r1, sl
 8009c04:	00ca      	lsls	r2, r1, #3
 8009c06:	4610      	mov	r0, r2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	189b      	adds	r3, r3, r2
 8009c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c12:	464b      	mov	r3, r9
 8009c14:	460a      	mov	r2, r1
 8009c16:	eb42 0303 	adc.w	r3, r2, r3
 8009c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c26:	667a      	str	r2, [r7, #100]	@ 0x64
 8009c28:	f04f 0200 	mov.w	r2, #0
 8009c2c:	f04f 0300 	mov.w	r3, #0
 8009c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009c34:	4649      	mov	r1, r9
 8009c36:	008b      	lsls	r3, r1, #2
 8009c38:	4641      	mov	r1, r8
 8009c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c3e:	4641      	mov	r1, r8
 8009c40:	008a      	lsls	r2, r1, #2
 8009c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009c46:	f7f6 ffaf 	bl	8000ba8 <__aeabi_uldivmod>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c84 <UART_SetConfig+0x4e4>)
 8009c50:	fba3 1302 	umull	r1, r3, r3, r2
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	2164      	movs	r1, #100	@ 0x64
 8009c58:	fb01 f303 	mul.w	r3, r1, r3
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	3332      	adds	r3, #50	@ 0x32
 8009c62:	4a08      	ldr	r2, [pc, #32]	@ (8009c84 <UART_SetConfig+0x4e4>)
 8009c64:	fba2 2303 	umull	r2, r3, r2, r3
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	f003 020f 	and.w	r2, r3, #15
 8009c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4422      	add	r2, r4
 8009c76:	609a      	str	r2, [r3, #8]
}
 8009c78:	bf00      	nop
 8009c7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c84:	51eb851f 	.word	0x51eb851f

08009c88 <__cvt>:
 8009c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8c:	ec57 6b10 	vmov	r6, r7, d0
 8009c90:	2f00      	cmp	r7, #0
 8009c92:	460c      	mov	r4, r1
 8009c94:	4619      	mov	r1, r3
 8009c96:	463b      	mov	r3, r7
 8009c98:	bfbb      	ittet	lt
 8009c9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c9e:	461f      	movlt	r7, r3
 8009ca0:	2300      	movge	r3, #0
 8009ca2:	232d      	movlt	r3, #45	@ 0x2d
 8009ca4:	700b      	strb	r3, [r1, #0]
 8009ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009cac:	4691      	mov	r9, r2
 8009cae:	f023 0820 	bic.w	r8, r3, #32
 8009cb2:	bfbc      	itt	lt
 8009cb4:	4632      	movlt	r2, r6
 8009cb6:	4616      	movlt	r6, r2
 8009cb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cbc:	d005      	beq.n	8009cca <__cvt+0x42>
 8009cbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009cc2:	d100      	bne.n	8009cc6 <__cvt+0x3e>
 8009cc4:	3401      	adds	r4, #1
 8009cc6:	2102      	movs	r1, #2
 8009cc8:	e000      	b.n	8009ccc <__cvt+0x44>
 8009cca:	2103      	movs	r1, #3
 8009ccc:	ab03      	add	r3, sp, #12
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	ab02      	add	r3, sp, #8
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	ec47 6b10 	vmov	d0, r6, r7
 8009cd8:	4653      	mov	r3, sl
 8009cda:	4622      	mov	r2, r4
 8009cdc:	f000 ff04 	bl	800aae8 <_dtoa_r>
 8009ce0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	d119      	bne.n	8009d1c <__cvt+0x94>
 8009ce8:	f019 0f01 	tst.w	r9, #1
 8009cec:	d00e      	beq.n	8009d0c <__cvt+0x84>
 8009cee:	eb00 0904 	add.w	r9, r0, r4
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7f6 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cfe:	b108      	cbz	r0, 8009d04 <__cvt+0x7c>
 8009d00:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d04:	2230      	movs	r2, #48	@ 0x30
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	454b      	cmp	r3, r9
 8009d0a:	d31e      	bcc.n	8009d4a <__cvt+0xc2>
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d10:	1b5b      	subs	r3, r3, r5
 8009d12:	4628      	mov	r0, r5
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	b004      	add	sp, #16
 8009d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d20:	eb00 0904 	add.w	r9, r0, r4
 8009d24:	d1e5      	bne.n	8009cf2 <__cvt+0x6a>
 8009d26:	7803      	ldrb	r3, [r0, #0]
 8009d28:	2b30      	cmp	r3, #48	@ 0x30
 8009d2a:	d10a      	bne.n	8009d42 <__cvt+0xba>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d38:	b918      	cbnz	r0, 8009d42 <__cvt+0xba>
 8009d3a:	f1c4 0401 	rsb	r4, r4, #1
 8009d3e:	f8ca 4000 	str.w	r4, [sl]
 8009d42:	f8da 3000 	ldr.w	r3, [sl]
 8009d46:	4499      	add	r9, r3
 8009d48:	e7d3      	b.n	8009cf2 <__cvt+0x6a>
 8009d4a:	1c59      	adds	r1, r3, #1
 8009d4c:	9103      	str	r1, [sp, #12]
 8009d4e:	701a      	strb	r2, [r3, #0]
 8009d50:	e7d9      	b.n	8009d06 <__cvt+0x7e>

08009d52 <__exponent>:
 8009d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d54:	2900      	cmp	r1, #0
 8009d56:	bfba      	itte	lt
 8009d58:	4249      	neglt	r1, r1
 8009d5a:	232d      	movlt	r3, #45	@ 0x2d
 8009d5c:	232b      	movge	r3, #43	@ 0x2b
 8009d5e:	2909      	cmp	r1, #9
 8009d60:	7002      	strb	r2, [r0, #0]
 8009d62:	7043      	strb	r3, [r0, #1]
 8009d64:	dd29      	ble.n	8009dba <__exponent+0x68>
 8009d66:	f10d 0307 	add.w	r3, sp, #7
 8009d6a:	461d      	mov	r5, r3
 8009d6c:	270a      	movs	r7, #10
 8009d6e:	461a      	mov	r2, r3
 8009d70:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d74:	fb07 1416 	mls	r4, r7, r6, r1
 8009d78:	3430      	adds	r4, #48	@ 0x30
 8009d7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d7e:	460c      	mov	r4, r1
 8009d80:	2c63      	cmp	r4, #99	@ 0x63
 8009d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d86:	4631      	mov	r1, r6
 8009d88:	dcf1      	bgt.n	8009d6e <__exponent+0x1c>
 8009d8a:	3130      	adds	r1, #48	@ 0x30
 8009d8c:	1e94      	subs	r4, r2, #2
 8009d8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d92:	1c41      	adds	r1, r0, #1
 8009d94:	4623      	mov	r3, r4
 8009d96:	42ab      	cmp	r3, r5
 8009d98:	d30a      	bcc.n	8009db0 <__exponent+0x5e>
 8009d9a:	f10d 0309 	add.w	r3, sp, #9
 8009d9e:	1a9b      	subs	r3, r3, r2
 8009da0:	42ac      	cmp	r4, r5
 8009da2:	bf88      	it	hi
 8009da4:	2300      	movhi	r3, #0
 8009da6:	3302      	adds	r3, #2
 8009da8:	4403      	add	r3, r0
 8009daa:	1a18      	subs	r0, r3, r0
 8009dac:	b003      	add	sp, #12
 8009dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009db4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009db8:	e7ed      	b.n	8009d96 <__exponent+0x44>
 8009dba:	2330      	movs	r3, #48	@ 0x30
 8009dbc:	3130      	adds	r1, #48	@ 0x30
 8009dbe:	7083      	strb	r3, [r0, #2]
 8009dc0:	70c1      	strb	r1, [r0, #3]
 8009dc2:	1d03      	adds	r3, r0, #4
 8009dc4:	e7f1      	b.n	8009daa <__exponent+0x58>
	...

08009dc8 <_printf_float>:
 8009dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dcc:	b08d      	sub	sp, #52	@ 0x34
 8009dce:	460c      	mov	r4, r1
 8009dd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	461f      	mov	r7, r3
 8009dd8:	4605      	mov	r5, r0
 8009dda:	f000 fd83 	bl	800a8e4 <_localeconv_r>
 8009dde:	6803      	ldr	r3, [r0, #0]
 8009de0:	9304      	str	r3, [sp, #16]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7f6 fa44 	bl	8000270 <strlen>
 8009de8:	2300      	movs	r3, #0
 8009dea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dec:	f8d8 3000 	ldr.w	r3, [r8]
 8009df0:	9005      	str	r0, [sp, #20]
 8009df2:	3307      	adds	r3, #7
 8009df4:	f023 0307 	bic.w	r3, r3, #7
 8009df8:	f103 0208 	add.w	r2, r3, #8
 8009dfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e00:	f8d4 b000 	ldr.w	fp, [r4]
 8009e04:	f8c8 2000 	str.w	r2, [r8]
 8009e08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e10:	9307      	str	r3, [sp, #28]
 8009e12:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e1e:	4b9c      	ldr	r3, [pc, #624]	@ (800a090 <_printf_float+0x2c8>)
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	f7f6 fe82 	bl	8000b2c <__aeabi_dcmpun>
 8009e28:	bb70      	cbnz	r0, 8009e88 <_printf_float+0xc0>
 8009e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e2e:	4b98      	ldr	r3, [pc, #608]	@ (800a090 <_printf_float+0x2c8>)
 8009e30:	f04f 32ff 	mov.w	r2, #4294967295
 8009e34:	f7f6 fe5c 	bl	8000af0 <__aeabi_dcmple>
 8009e38:	bb30      	cbnz	r0, 8009e88 <_printf_float+0xc0>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8009e46:	b110      	cbz	r0, 8009e4e <_printf_float+0x86>
 8009e48:	232d      	movs	r3, #45	@ 0x2d
 8009e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e4e:	4a91      	ldr	r2, [pc, #580]	@ (800a094 <_printf_float+0x2cc>)
 8009e50:	4b91      	ldr	r3, [pc, #580]	@ (800a098 <_printf_float+0x2d0>)
 8009e52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e56:	bf8c      	ite	hi
 8009e58:	4690      	movhi	r8, r2
 8009e5a:	4698      	movls	r8, r3
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	f02b 0304 	bic.w	r3, fp, #4
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	9700      	str	r7, [sp, #0]
 8009e6c:	4633      	mov	r3, r6
 8009e6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e70:	4621      	mov	r1, r4
 8009e72:	4628      	mov	r0, r5
 8009e74:	f000 f9d2 	bl	800a21c <_printf_common>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f040 808d 	bne.w	8009f98 <_printf_float+0x1d0>
 8009e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e82:	b00d      	add	sp, #52	@ 0x34
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	4649      	mov	r1, r9
 8009e90:	f7f6 fe4c 	bl	8000b2c <__aeabi_dcmpun>
 8009e94:	b140      	cbz	r0, 8009ea8 <_printf_float+0xe0>
 8009e96:	464b      	mov	r3, r9
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfbc      	itt	lt
 8009e9c:	232d      	movlt	r3, #45	@ 0x2d
 8009e9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800a09c <_printf_float+0x2d4>)
 8009ea4:	4b7e      	ldr	r3, [pc, #504]	@ (800a0a0 <_printf_float+0x2d8>)
 8009ea6:	e7d4      	b.n	8009e52 <_printf_float+0x8a>
 8009ea8:	6863      	ldr	r3, [r4, #4]
 8009eaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009eae:	9206      	str	r2, [sp, #24]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	d13b      	bne.n	8009f2c <_printf_float+0x164>
 8009eb4:	2306      	movs	r3, #6
 8009eb6:	6063      	str	r3, [r4, #4]
 8009eb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	6022      	str	r2, [r4, #0]
 8009ec0:	9303      	str	r3, [sp, #12]
 8009ec2:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ec4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ec8:	ab09      	add	r3, sp, #36	@ 0x24
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	6861      	ldr	r1, [r4, #4]
 8009ece:	ec49 8b10 	vmov	d0, r8, r9
 8009ed2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f7ff fed6 	bl	8009c88 <__cvt>
 8009edc:	9b06      	ldr	r3, [sp, #24]
 8009ede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ee0:	2b47      	cmp	r3, #71	@ 0x47
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	d129      	bne.n	8009f3a <_printf_float+0x172>
 8009ee6:	1cc8      	adds	r0, r1, #3
 8009ee8:	db02      	blt.n	8009ef0 <_printf_float+0x128>
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	4299      	cmp	r1, r3
 8009eee:	dd41      	ble.n	8009f74 <_printf_float+0x1ac>
 8009ef0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ef4:	fa5f fa8a 	uxtb.w	sl, sl
 8009ef8:	3901      	subs	r1, #1
 8009efa:	4652      	mov	r2, sl
 8009efc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f00:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f02:	f7ff ff26 	bl	8009d52 <__exponent>
 8009f06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f08:	1813      	adds	r3, r2, r0
 8009f0a:	2a01      	cmp	r2, #1
 8009f0c:	4681      	mov	r9, r0
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	dc02      	bgt.n	8009f18 <_printf_float+0x150>
 8009f12:	6822      	ldr	r2, [r4, #0]
 8009f14:	07d2      	lsls	r2, r2, #31
 8009f16:	d501      	bpl.n	8009f1c <_printf_float+0x154>
 8009f18:	3301      	adds	r3, #1
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0a2      	beq.n	8009e6a <_printf_float+0xa2>
 8009f24:	232d      	movs	r3, #45	@ 0x2d
 8009f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f2a:	e79e      	b.n	8009e6a <_printf_float+0xa2>
 8009f2c:	9a06      	ldr	r2, [sp, #24]
 8009f2e:	2a47      	cmp	r2, #71	@ 0x47
 8009f30:	d1c2      	bne.n	8009eb8 <_printf_float+0xf0>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1c0      	bne.n	8009eb8 <_printf_float+0xf0>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e7bd      	b.n	8009eb6 <_printf_float+0xee>
 8009f3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f3e:	d9db      	bls.n	8009ef8 <_printf_float+0x130>
 8009f40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f44:	d118      	bne.n	8009f78 <_printf_float+0x1b0>
 8009f46:	2900      	cmp	r1, #0
 8009f48:	6863      	ldr	r3, [r4, #4]
 8009f4a:	dd0b      	ble.n	8009f64 <_printf_float+0x19c>
 8009f4c:	6121      	str	r1, [r4, #16]
 8009f4e:	b913      	cbnz	r3, 8009f56 <_printf_float+0x18e>
 8009f50:	6822      	ldr	r2, [r4, #0]
 8009f52:	07d0      	lsls	r0, r2, #31
 8009f54:	d502      	bpl.n	8009f5c <_printf_float+0x194>
 8009f56:	3301      	adds	r3, #1
 8009f58:	440b      	add	r3, r1
 8009f5a:	6123      	str	r3, [r4, #16]
 8009f5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f5e:	f04f 0900 	mov.w	r9, #0
 8009f62:	e7db      	b.n	8009f1c <_printf_float+0x154>
 8009f64:	b913      	cbnz	r3, 8009f6c <_printf_float+0x1a4>
 8009f66:	6822      	ldr	r2, [r4, #0]
 8009f68:	07d2      	lsls	r2, r2, #31
 8009f6a:	d501      	bpl.n	8009f70 <_printf_float+0x1a8>
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	e7f4      	b.n	8009f5a <_printf_float+0x192>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e7f2      	b.n	8009f5a <_printf_float+0x192>
 8009f74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f7a:	4299      	cmp	r1, r3
 8009f7c:	db05      	blt.n	8009f8a <_printf_float+0x1c2>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	6121      	str	r1, [r4, #16]
 8009f82:	07d8      	lsls	r0, r3, #31
 8009f84:	d5ea      	bpl.n	8009f5c <_printf_float+0x194>
 8009f86:	1c4b      	adds	r3, r1, #1
 8009f88:	e7e7      	b.n	8009f5a <_printf_float+0x192>
 8009f8a:	2900      	cmp	r1, #0
 8009f8c:	bfd4      	ite	le
 8009f8e:	f1c1 0202 	rsble	r2, r1, #2
 8009f92:	2201      	movgt	r2, #1
 8009f94:	4413      	add	r3, r2
 8009f96:	e7e0      	b.n	8009f5a <_printf_float+0x192>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	055a      	lsls	r2, r3, #21
 8009f9c:	d407      	bmi.n	8009fae <_printf_float+0x1e6>
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d12b      	bne.n	800a004 <_printf_float+0x23c>
 8009fac:	e767      	b.n	8009e7e <_printf_float+0xb6>
 8009fae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009fb2:	f240 80dd 	bls.w	800a170 <_printf_float+0x3a8>
 8009fb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f7f6 fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d033      	beq.n	800a02e <_printf_float+0x266>
 8009fc6:	4a37      	ldr	r2, [pc, #220]	@ (800a0a4 <_printf_float+0x2dc>)
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f af54 	beq.w	8009e7e <_printf_float+0xb6>
 8009fd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009fda:	4543      	cmp	r3, r8
 8009fdc:	db02      	blt.n	8009fe4 <_printf_float+0x21c>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	07d8      	lsls	r0, r3, #31
 8009fe2:	d50f      	bpl.n	800a004 <_printf_float+0x23c>
 8009fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f43f af45 	beq.w	8009e7e <_printf_float+0xb6>
 8009ff4:	f04f 0900 	mov.w	r9, #0
 8009ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ffc:	f104 0a1a 	add.w	sl, r4, #26
 800a000:	45c8      	cmp	r8, r9
 800a002:	dc09      	bgt.n	800a018 <_printf_float+0x250>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	079b      	lsls	r3, r3, #30
 800a008:	f100 8103 	bmi.w	800a212 <_printf_float+0x44a>
 800a00c:	68e0      	ldr	r0, [r4, #12]
 800a00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a010:	4298      	cmp	r0, r3
 800a012:	bfb8      	it	lt
 800a014:	4618      	movlt	r0, r3
 800a016:	e734      	b.n	8009e82 <_printf_float+0xba>
 800a018:	2301      	movs	r3, #1
 800a01a:	4652      	mov	r2, sl
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	f43f af2b 	beq.w	8009e7e <_printf_float+0xb6>
 800a028:	f109 0901 	add.w	r9, r9, #1
 800a02c:	e7e8      	b.n	800a000 <_printf_float+0x238>
 800a02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	dc39      	bgt.n	800a0a8 <_printf_float+0x2e0>
 800a034:	4a1b      	ldr	r2, [pc, #108]	@ (800a0a4 <_printf_float+0x2dc>)
 800a036:	2301      	movs	r3, #1
 800a038:	4631      	mov	r1, r6
 800a03a:	4628      	mov	r0, r5
 800a03c:	47b8      	blx	r7
 800a03e:	3001      	adds	r0, #1
 800a040:	f43f af1d 	beq.w	8009e7e <_printf_float+0xb6>
 800a044:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a048:	ea59 0303 	orrs.w	r3, r9, r3
 800a04c:	d102      	bne.n	800a054 <_printf_float+0x28c>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	07d9      	lsls	r1, r3, #31
 800a052:	d5d7      	bpl.n	800a004 <_printf_float+0x23c>
 800a054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a058:	4631      	mov	r1, r6
 800a05a:	4628      	mov	r0, r5
 800a05c:	47b8      	blx	r7
 800a05e:	3001      	adds	r0, #1
 800a060:	f43f af0d 	beq.w	8009e7e <_printf_float+0xb6>
 800a064:	f04f 0a00 	mov.w	sl, #0
 800a068:	f104 0b1a 	add.w	fp, r4, #26
 800a06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a06e:	425b      	negs	r3, r3
 800a070:	4553      	cmp	r3, sl
 800a072:	dc01      	bgt.n	800a078 <_printf_float+0x2b0>
 800a074:	464b      	mov	r3, r9
 800a076:	e793      	b.n	8009fa0 <_printf_float+0x1d8>
 800a078:	2301      	movs	r3, #1
 800a07a:	465a      	mov	r2, fp
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f aefb 	beq.w	8009e7e <_printf_float+0xb6>
 800a088:	f10a 0a01 	add.w	sl, sl, #1
 800a08c:	e7ee      	b.n	800a06c <_printf_float+0x2a4>
 800a08e:	bf00      	nop
 800a090:	7fefffff 	.word	0x7fefffff
 800a094:	0800ced8 	.word	0x0800ced8
 800a098:	0800ced4 	.word	0x0800ced4
 800a09c:	0800cee0 	.word	0x0800cee0
 800a0a0:	0800cedc 	.word	0x0800cedc
 800a0a4:	0800cee4 	.word	0x0800cee4
 800a0a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0ae:	4553      	cmp	r3, sl
 800a0b0:	bfa8      	it	ge
 800a0b2:	4653      	movge	r3, sl
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	4699      	mov	r9, r3
 800a0b8:	dc36      	bgt.n	800a128 <_printf_float+0x360>
 800a0ba:	f04f 0b00 	mov.w	fp, #0
 800a0be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0c2:	f104 021a 	add.w	r2, r4, #26
 800a0c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0c8:	9306      	str	r3, [sp, #24]
 800a0ca:	eba3 0309 	sub.w	r3, r3, r9
 800a0ce:	455b      	cmp	r3, fp
 800a0d0:	dc31      	bgt.n	800a136 <_printf_float+0x36e>
 800a0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d4:	459a      	cmp	sl, r3
 800a0d6:	dc3a      	bgt.n	800a14e <_printf_float+0x386>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	07da      	lsls	r2, r3, #31
 800a0dc:	d437      	bmi.n	800a14e <_printf_float+0x386>
 800a0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e0:	ebaa 0903 	sub.w	r9, sl, r3
 800a0e4:	9b06      	ldr	r3, [sp, #24]
 800a0e6:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ea:	4599      	cmp	r9, r3
 800a0ec:	bfa8      	it	ge
 800a0ee:	4699      	movge	r9, r3
 800a0f0:	f1b9 0f00 	cmp.w	r9, #0
 800a0f4:	dc33      	bgt.n	800a15e <_printf_float+0x396>
 800a0f6:	f04f 0800 	mov.w	r8, #0
 800a0fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0fe:	f104 0b1a 	add.w	fp, r4, #26
 800a102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a104:	ebaa 0303 	sub.w	r3, sl, r3
 800a108:	eba3 0309 	sub.w	r3, r3, r9
 800a10c:	4543      	cmp	r3, r8
 800a10e:	f77f af79 	ble.w	800a004 <_printf_float+0x23c>
 800a112:	2301      	movs	r3, #1
 800a114:	465a      	mov	r2, fp
 800a116:	4631      	mov	r1, r6
 800a118:	4628      	mov	r0, r5
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	f43f aeae 	beq.w	8009e7e <_printf_float+0xb6>
 800a122:	f108 0801 	add.w	r8, r8, #1
 800a126:	e7ec      	b.n	800a102 <_printf_float+0x33a>
 800a128:	4642      	mov	r2, r8
 800a12a:	4631      	mov	r1, r6
 800a12c:	4628      	mov	r0, r5
 800a12e:	47b8      	blx	r7
 800a130:	3001      	adds	r0, #1
 800a132:	d1c2      	bne.n	800a0ba <_printf_float+0x2f2>
 800a134:	e6a3      	b.n	8009e7e <_printf_float+0xb6>
 800a136:	2301      	movs	r3, #1
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	9206      	str	r2, [sp, #24]
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f ae9c 	beq.w	8009e7e <_printf_float+0xb6>
 800a146:	9a06      	ldr	r2, [sp, #24]
 800a148:	f10b 0b01 	add.w	fp, fp, #1
 800a14c:	e7bb      	b.n	800a0c6 <_printf_float+0x2fe>
 800a14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a152:	4631      	mov	r1, r6
 800a154:	4628      	mov	r0, r5
 800a156:	47b8      	blx	r7
 800a158:	3001      	adds	r0, #1
 800a15a:	d1c0      	bne.n	800a0de <_printf_float+0x316>
 800a15c:	e68f      	b.n	8009e7e <_printf_float+0xb6>
 800a15e:	9a06      	ldr	r2, [sp, #24]
 800a160:	464b      	mov	r3, r9
 800a162:	4442      	add	r2, r8
 800a164:	4631      	mov	r1, r6
 800a166:	4628      	mov	r0, r5
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	d1c3      	bne.n	800a0f6 <_printf_float+0x32e>
 800a16e:	e686      	b.n	8009e7e <_printf_float+0xb6>
 800a170:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a174:	f1ba 0f01 	cmp.w	sl, #1
 800a178:	dc01      	bgt.n	800a17e <_printf_float+0x3b6>
 800a17a:	07db      	lsls	r3, r3, #31
 800a17c:	d536      	bpl.n	800a1ec <_printf_float+0x424>
 800a17e:	2301      	movs	r3, #1
 800a180:	4642      	mov	r2, r8
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	f43f ae78 	beq.w	8009e7e <_printf_float+0xb6>
 800a18e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	f43f ae70 	beq.w	8009e7e <_printf_float+0xb6>
 800a19e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1aa:	f7f6 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ae:	b9c0      	cbnz	r0, 800a1e2 <_printf_float+0x41a>
 800a1b0:	4653      	mov	r3, sl
 800a1b2:	f108 0201 	add.w	r2, r8, #1
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	47b8      	blx	r7
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d10c      	bne.n	800a1da <_printf_float+0x412>
 800a1c0:	e65d      	b.n	8009e7e <_printf_float+0xb6>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	465a      	mov	r2, fp
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	47b8      	blx	r7
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	f43f ae56 	beq.w	8009e7e <_printf_float+0xb6>
 800a1d2:	f108 0801 	add.w	r8, r8, #1
 800a1d6:	45d0      	cmp	r8, sl
 800a1d8:	dbf3      	blt.n	800a1c2 <_printf_float+0x3fa>
 800a1da:	464b      	mov	r3, r9
 800a1dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1e0:	e6df      	b.n	8009fa2 <_printf_float+0x1da>
 800a1e2:	f04f 0800 	mov.w	r8, #0
 800a1e6:	f104 0b1a 	add.w	fp, r4, #26
 800a1ea:	e7f4      	b.n	800a1d6 <_printf_float+0x40e>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4642      	mov	r2, r8
 800a1f0:	e7e1      	b.n	800a1b6 <_printf_float+0x3ee>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	464a      	mov	r2, r9
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b8      	blx	r7
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	f43f ae3e 	beq.w	8009e7e <_printf_float+0xb6>
 800a202:	f108 0801 	add.w	r8, r8, #1
 800a206:	68e3      	ldr	r3, [r4, #12]
 800a208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a20a:	1a5b      	subs	r3, r3, r1
 800a20c:	4543      	cmp	r3, r8
 800a20e:	dcf0      	bgt.n	800a1f2 <_printf_float+0x42a>
 800a210:	e6fc      	b.n	800a00c <_printf_float+0x244>
 800a212:	f04f 0800 	mov.w	r8, #0
 800a216:	f104 0919 	add.w	r9, r4, #25
 800a21a:	e7f4      	b.n	800a206 <_printf_float+0x43e>

0800a21c <_printf_common>:
 800a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	4616      	mov	r6, r2
 800a222:	4698      	mov	r8, r3
 800a224:	688a      	ldr	r2, [r1, #8]
 800a226:	690b      	ldr	r3, [r1, #16]
 800a228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a22c:	4293      	cmp	r3, r2
 800a22e:	bfb8      	it	lt
 800a230:	4613      	movlt	r3, r2
 800a232:	6033      	str	r3, [r6, #0]
 800a234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a238:	4607      	mov	r7, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	b10a      	cbz	r2, 800a242 <_printf_common+0x26>
 800a23e:	3301      	adds	r3, #1
 800a240:	6033      	str	r3, [r6, #0]
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	0699      	lsls	r1, r3, #26
 800a246:	bf42      	ittt	mi
 800a248:	6833      	ldrmi	r3, [r6, #0]
 800a24a:	3302      	addmi	r3, #2
 800a24c:	6033      	strmi	r3, [r6, #0]
 800a24e:	6825      	ldr	r5, [r4, #0]
 800a250:	f015 0506 	ands.w	r5, r5, #6
 800a254:	d106      	bne.n	800a264 <_printf_common+0x48>
 800a256:	f104 0a19 	add.w	sl, r4, #25
 800a25a:	68e3      	ldr	r3, [r4, #12]
 800a25c:	6832      	ldr	r2, [r6, #0]
 800a25e:	1a9b      	subs	r3, r3, r2
 800a260:	42ab      	cmp	r3, r5
 800a262:	dc26      	bgt.n	800a2b2 <_printf_common+0x96>
 800a264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a268:	6822      	ldr	r2, [r4, #0]
 800a26a:	3b00      	subs	r3, #0
 800a26c:	bf18      	it	ne
 800a26e:	2301      	movne	r3, #1
 800a270:	0692      	lsls	r2, r2, #26
 800a272:	d42b      	bmi.n	800a2cc <_printf_common+0xb0>
 800a274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a278:	4641      	mov	r1, r8
 800a27a:	4638      	mov	r0, r7
 800a27c:	47c8      	blx	r9
 800a27e:	3001      	adds	r0, #1
 800a280:	d01e      	beq.n	800a2c0 <_printf_common+0xa4>
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	f003 0306 	and.w	r3, r3, #6
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	bf02      	ittt	eq
 800a28e:	68e5      	ldreq	r5, [r4, #12]
 800a290:	6833      	ldreq	r3, [r6, #0]
 800a292:	1aed      	subeq	r5, r5, r3
 800a294:	68a3      	ldr	r3, [r4, #8]
 800a296:	bf0c      	ite	eq
 800a298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a29c:	2500      	movne	r5, #0
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	bfc4      	itt	gt
 800a2a2:	1a9b      	subgt	r3, r3, r2
 800a2a4:	18ed      	addgt	r5, r5, r3
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	341a      	adds	r4, #26
 800a2aa:	42b5      	cmp	r5, r6
 800a2ac:	d11a      	bne.n	800a2e4 <_printf_common+0xc8>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e008      	b.n	800a2c4 <_printf_common+0xa8>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	4641      	mov	r1, r8
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	47c8      	blx	r9
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d103      	bne.n	800a2c8 <_printf_common+0xac>
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	e7c6      	b.n	800a25a <_printf_common+0x3e>
 800a2cc:	18e1      	adds	r1, r4, r3
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	2030      	movs	r0, #48	@ 0x30
 800a2d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2d6:	4422      	add	r2, r4
 800a2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	e7c7      	b.n	800a274 <_printf_common+0x58>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	4641      	mov	r1, r8
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	47c8      	blx	r9
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d0e6      	beq.n	800a2c0 <_printf_common+0xa4>
 800a2f2:	3601      	adds	r6, #1
 800a2f4:	e7d9      	b.n	800a2aa <_printf_common+0x8e>
	...

0800a2f8 <_printf_i>:
 800a2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	7e0f      	ldrb	r7, [r1, #24]
 800a2fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a300:	2f78      	cmp	r7, #120	@ 0x78
 800a302:	4691      	mov	r9, r2
 800a304:	4680      	mov	r8, r0
 800a306:	460c      	mov	r4, r1
 800a308:	469a      	mov	sl, r3
 800a30a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a30e:	d807      	bhi.n	800a320 <_printf_i+0x28>
 800a310:	2f62      	cmp	r7, #98	@ 0x62
 800a312:	d80a      	bhi.n	800a32a <_printf_i+0x32>
 800a314:	2f00      	cmp	r7, #0
 800a316:	f000 80d1 	beq.w	800a4bc <_printf_i+0x1c4>
 800a31a:	2f58      	cmp	r7, #88	@ 0x58
 800a31c:	f000 80b8 	beq.w	800a490 <_printf_i+0x198>
 800a320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a328:	e03a      	b.n	800a3a0 <_printf_i+0xa8>
 800a32a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a32e:	2b15      	cmp	r3, #21
 800a330:	d8f6      	bhi.n	800a320 <_printf_i+0x28>
 800a332:	a101      	add	r1, pc, #4	@ (adr r1, 800a338 <_printf_i+0x40>)
 800a334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a338:	0800a391 	.word	0x0800a391
 800a33c:	0800a3a5 	.word	0x0800a3a5
 800a340:	0800a321 	.word	0x0800a321
 800a344:	0800a321 	.word	0x0800a321
 800a348:	0800a321 	.word	0x0800a321
 800a34c:	0800a321 	.word	0x0800a321
 800a350:	0800a3a5 	.word	0x0800a3a5
 800a354:	0800a321 	.word	0x0800a321
 800a358:	0800a321 	.word	0x0800a321
 800a35c:	0800a321 	.word	0x0800a321
 800a360:	0800a321 	.word	0x0800a321
 800a364:	0800a4a3 	.word	0x0800a4a3
 800a368:	0800a3cf 	.word	0x0800a3cf
 800a36c:	0800a45d 	.word	0x0800a45d
 800a370:	0800a321 	.word	0x0800a321
 800a374:	0800a321 	.word	0x0800a321
 800a378:	0800a4c5 	.word	0x0800a4c5
 800a37c:	0800a321 	.word	0x0800a321
 800a380:	0800a3cf 	.word	0x0800a3cf
 800a384:	0800a321 	.word	0x0800a321
 800a388:	0800a321 	.word	0x0800a321
 800a38c:	0800a465 	.word	0x0800a465
 800a390:	6833      	ldr	r3, [r6, #0]
 800a392:	1d1a      	adds	r2, r3, #4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6032      	str	r2, [r6, #0]
 800a398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a39c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e09c      	b.n	800a4de <_printf_i+0x1e6>
 800a3a4:	6833      	ldr	r3, [r6, #0]
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	1d19      	adds	r1, r3, #4
 800a3aa:	6031      	str	r1, [r6, #0]
 800a3ac:	0606      	lsls	r6, r0, #24
 800a3ae:	d501      	bpl.n	800a3b4 <_printf_i+0xbc>
 800a3b0:	681d      	ldr	r5, [r3, #0]
 800a3b2:	e003      	b.n	800a3bc <_printf_i+0xc4>
 800a3b4:	0645      	lsls	r5, r0, #25
 800a3b6:	d5fb      	bpl.n	800a3b0 <_printf_i+0xb8>
 800a3b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3bc:	2d00      	cmp	r5, #0
 800a3be:	da03      	bge.n	800a3c8 <_printf_i+0xd0>
 800a3c0:	232d      	movs	r3, #45	@ 0x2d
 800a3c2:	426d      	negs	r5, r5
 800a3c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3c8:	4858      	ldr	r0, [pc, #352]	@ (800a52c <_printf_i+0x234>)
 800a3ca:	230a      	movs	r3, #10
 800a3cc:	e011      	b.n	800a3f2 <_printf_i+0xfa>
 800a3ce:	6821      	ldr	r1, [r4, #0]
 800a3d0:	6833      	ldr	r3, [r6, #0]
 800a3d2:	0608      	lsls	r0, r1, #24
 800a3d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3d8:	d402      	bmi.n	800a3e0 <_printf_i+0xe8>
 800a3da:	0649      	lsls	r1, r1, #25
 800a3dc:	bf48      	it	mi
 800a3de:	b2ad      	uxthmi	r5, r5
 800a3e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3e2:	4852      	ldr	r0, [pc, #328]	@ (800a52c <_printf_i+0x234>)
 800a3e4:	6033      	str	r3, [r6, #0]
 800a3e6:	bf14      	ite	ne
 800a3e8:	230a      	movne	r3, #10
 800a3ea:	2308      	moveq	r3, #8
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3f2:	6866      	ldr	r6, [r4, #4]
 800a3f4:	60a6      	str	r6, [r4, #8]
 800a3f6:	2e00      	cmp	r6, #0
 800a3f8:	db05      	blt.n	800a406 <_printf_i+0x10e>
 800a3fa:	6821      	ldr	r1, [r4, #0]
 800a3fc:	432e      	orrs	r6, r5
 800a3fe:	f021 0104 	bic.w	r1, r1, #4
 800a402:	6021      	str	r1, [r4, #0]
 800a404:	d04b      	beq.n	800a49e <_printf_i+0x1a6>
 800a406:	4616      	mov	r6, r2
 800a408:	fbb5 f1f3 	udiv	r1, r5, r3
 800a40c:	fb03 5711 	mls	r7, r3, r1, r5
 800a410:	5dc7      	ldrb	r7, [r0, r7]
 800a412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a416:	462f      	mov	r7, r5
 800a418:	42bb      	cmp	r3, r7
 800a41a:	460d      	mov	r5, r1
 800a41c:	d9f4      	bls.n	800a408 <_printf_i+0x110>
 800a41e:	2b08      	cmp	r3, #8
 800a420:	d10b      	bne.n	800a43a <_printf_i+0x142>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	07df      	lsls	r7, r3, #31
 800a426:	d508      	bpl.n	800a43a <_printf_i+0x142>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	6861      	ldr	r1, [r4, #4]
 800a42c:	4299      	cmp	r1, r3
 800a42e:	bfde      	ittt	le
 800a430:	2330      	movle	r3, #48	@ 0x30
 800a432:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a436:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a43a:	1b92      	subs	r2, r2, r6
 800a43c:	6122      	str	r2, [r4, #16]
 800a43e:	f8cd a000 	str.w	sl, [sp]
 800a442:	464b      	mov	r3, r9
 800a444:	aa03      	add	r2, sp, #12
 800a446:	4621      	mov	r1, r4
 800a448:	4640      	mov	r0, r8
 800a44a:	f7ff fee7 	bl	800a21c <_printf_common>
 800a44e:	3001      	adds	r0, #1
 800a450:	d14a      	bne.n	800a4e8 <_printf_i+0x1f0>
 800a452:	f04f 30ff 	mov.w	r0, #4294967295
 800a456:	b004      	add	sp, #16
 800a458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	f043 0320 	orr.w	r3, r3, #32
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	4832      	ldr	r0, [pc, #200]	@ (800a530 <_printf_i+0x238>)
 800a466:	2778      	movs	r7, #120	@ 0x78
 800a468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	6831      	ldr	r1, [r6, #0]
 800a470:	061f      	lsls	r7, r3, #24
 800a472:	f851 5b04 	ldr.w	r5, [r1], #4
 800a476:	d402      	bmi.n	800a47e <_printf_i+0x186>
 800a478:	065f      	lsls	r7, r3, #25
 800a47a:	bf48      	it	mi
 800a47c:	b2ad      	uxthmi	r5, r5
 800a47e:	6031      	str	r1, [r6, #0]
 800a480:	07d9      	lsls	r1, r3, #31
 800a482:	bf44      	itt	mi
 800a484:	f043 0320 	orrmi.w	r3, r3, #32
 800a488:	6023      	strmi	r3, [r4, #0]
 800a48a:	b11d      	cbz	r5, 800a494 <_printf_i+0x19c>
 800a48c:	2310      	movs	r3, #16
 800a48e:	e7ad      	b.n	800a3ec <_printf_i+0xf4>
 800a490:	4826      	ldr	r0, [pc, #152]	@ (800a52c <_printf_i+0x234>)
 800a492:	e7e9      	b.n	800a468 <_printf_i+0x170>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	f023 0320 	bic.w	r3, r3, #32
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	e7f6      	b.n	800a48c <_printf_i+0x194>
 800a49e:	4616      	mov	r6, r2
 800a4a0:	e7bd      	b.n	800a41e <_printf_i+0x126>
 800a4a2:	6833      	ldr	r3, [r6, #0]
 800a4a4:	6825      	ldr	r5, [r4, #0]
 800a4a6:	6961      	ldr	r1, [r4, #20]
 800a4a8:	1d18      	adds	r0, r3, #4
 800a4aa:	6030      	str	r0, [r6, #0]
 800a4ac:	062e      	lsls	r6, r5, #24
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	d501      	bpl.n	800a4b6 <_printf_i+0x1be>
 800a4b2:	6019      	str	r1, [r3, #0]
 800a4b4:	e002      	b.n	800a4bc <_printf_i+0x1c4>
 800a4b6:	0668      	lsls	r0, r5, #25
 800a4b8:	d5fb      	bpl.n	800a4b2 <_printf_i+0x1ba>
 800a4ba:	8019      	strh	r1, [r3, #0]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	e7bc      	b.n	800a43e <_printf_i+0x146>
 800a4c4:	6833      	ldr	r3, [r6, #0]
 800a4c6:	1d1a      	adds	r2, r3, #4
 800a4c8:	6032      	str	r2, [r6, #0]
 800a4ca:	681e      	ldr	r6, [r3, #0]
 800a4cc:	6862      	ldr	r2, [r4, #4]
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7f5 fe7d 	bl	80001d0 <memchr>
 800a4d6:	b108      	cbz	r0, 800a4dc <_printf_i+0x1e4>
 800a4d8:	1b80      	subs	r0, r0, r6
 800a4da:	6060      	str	r0, [r4, #4]
 800a4dc:	6863      	ldr	r3, [r4, #4]
 800a4de:	6123      	str	r3, [r4, #16]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4e6:	e7aa      	b.n	800a43e <_printf_i+0x146>
 800a4e8:	6923      	ldr	r3, [r4, #16]
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	47d0      	blx	sl
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	d0ad      	beq.n	800a452 <_printf_i+0x15a>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	079b      	lsls	r3, r3, #30
 800a4fa:	d413      	bmi.n	800a524 <_printf_i+0x22c>
 800a4fc:	68e0      	ldr	r0, [r4, #12]
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	4298      	cmp	r0, r3
 800a502:	bfb8      	it	lt
 800a504:	4618      	movlt	r0, r3
 800a506:	e7a6      	b.n	800a456 <_printf_i+0x15e>
 800a508:	2301      	movs	r3, #1
 800a50a:	4632      	mov	r2, r6
 800a50c:	4649      	mov	r1, r9
 800a50e:	4640      	mov	r0, r8
 800a510:	47d0      	blx	sl
 800a512:	3001      	adds	r0, #1
 800a514:	d09d      	beq.n	800a452 <_printf_i+0x15a>
 800a516:	3501      	adds	r5, #1
 800a518:	68e3      	ldr	r3, [r4, #12]
 800a51a:	9903      	ldr	r1, [sp, #12]
 800a51c:	1a5b      	subs	r3, r3, r1
 800a51e:	42ab      	cmp	r3, r5
 800a520:	dcf2      	bgt.n	800a508 <_printf_i+0x210>
 800a522:	e7eb      	b.n	800a4fc <_printf_i+0x204>
 800a524:	2500      	movs	r5, #0
 800a526:	f104 0619 	add.w	r6, r4, #25
 800a52a:	e7f5      	b.n	800a518 <_printf_i+0x220>
 800a52c:	0800cee6 	.word	0x0800cee6
 800a530:	0800cef7 	.word	0x0800cef7

0800a534 <std>:
 800a534:	2300      	movs	r3, #0
 800a536:	b510      	push	{r4, lr}
 800a538:	4604      	mov	r4, r0
 800a53a:	e9c0 3300 	strd	r3, r3, [r0]
 800a53e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a542:	6083      	str	r3, [r0, #8]
 800a544:	8181      	strh	r1, [r0, #12]
 800a546:	6643      	str	r3, [r0, #100]	@ 0x64
 800a548:	81c2      	strh	r2, [r0, #14]
 800a54a:	6183      	str	r3, [r0, #24]
 800a54c:	4619      	mov	r1, r3
 800a54e:	2208      	movs	r2, #8
 800a550:	305c      	adds	r0, #92	@ 0x5c
 800a552:	f000 f9bf 	bl	800a8d4 <memset>
 800a556:	4b0d      	ldr	r3, [pc, #52]	@ (800a58c <std+0x58>)
 800a558:	6263      	str	r3, [r4, #36]	@ 0x24
 800a55a:	4b0d      	ldr	r3, [pc, #52]	@ (800a590 <std+0x5c>)
 800a55c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a55e:	4b0d      	ldr	r3, [pc, #52]	@ (800a594 <std+0x60>)
 800a560:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a562:	4b0d      	ldr	r3, [pc, #52]	@ (800a598 <std+0x64>)
 800a564:	6323      	str	r3, [r4, #48]	@ 0x30
 800a566:	4b0d      	ldr	r3, [pc, #52]	@ (800a59c <std+0x68>)
 800a568:	6224      	str	r4, [r4, #32]
 800a56a:	429c      	cmp	r4, r3
 800a56c:	d006      	beq.n	800a57c <std+0x48>
 800a56e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a572:	4294      	cmp	r4, r2
 800a574:	d002      	beq.n	800a57c <std+0x48>
 800a576:	33d0      	adds	r3, #208	@ 0xd0
 800a578:	429c      	cmp	r4, r3
 800a57a:	d105      	bne.n	800a588 <std+0x54>
 800a57c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a584:	f000 ba22 	b.w	800a9cc <__retarget_lock_init_recursive>
 800a588:	bd10      	pop	{r4, pc}
 800a58a:	bf00      	nop
 800a58c:	0800a725 	.word	0x0800a725
 800a590:	0800a747 	.word	0x0800a747
 800a594:	0800a77f 	.word	0x0800a77f
 800a598:	0800a7a3 	.word	0x0800a7a3
 800a59c:	200005b4 	.word	0x200005b4

0800a5a0 <stdio_exit_handler>:
 800a5a0:	4a02      	ldr	r2, [pc, #8]	@ (800a5ac <stdio_exit_handler+0xc>)
 800a5a2:	4903      	ldr	r1, [pc, #12]	@ (800a5b0 <stdio_exit_handler+0x10>)
 800a5a4:	4803      	ldr	r0, [pc, #12]	@ (800a5b4 <stdio_exit_handler+0x14>)
 800a5a6:	f000 b869 	b.w	800a67c <_fwalk_sglue>
 800a5aa:	bf00      	nop
 800a5ac:	20000010 	.word	0x20000010
 800a5b0:	0800c5b9 	.word	0x0800c5b9
 800a5b4:	20000020 	.word	0x20000020

0800a5b8 <cleanup_stdio>:
 800a5b8:	6841      	ldr	r1, [r0, #4]
 800a5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a5ec <cleanup_stdio+0x34>)
 800a5bc:	4299      	cmp	r1, r3
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	d001      	beq.n	800a5c8 <cleanup_stdio+0x10>
 800a5c4:	f001 fff8 	bl	800c5b8 <_fflush_r>
 800a5c8:	68a1      	ldr	r1, [r4, #8]
 800a5ca:	4b09      	ldr	r3, [pc, #36]	@ (800a5f0 <cleanup_stdio+0x38>)
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	d002      	beq.n	800a5d6 <cleanup_stdio+0x1e>
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 fff1 	bl	800c5b8 <_fflush_r>
 800a5d6:	68e1      	ldr	r1, [r4, #12]
 800a5d8:	4b06      	ldr	r3, [pc, #24]	@ (800a5f4 <cleanup_stdio+0x3c>)
 800a5da:	4299      	cmp	r1, r3
 800a5dc:	d004      	beq.n	800a5e8 <cleanup_stdio+0x30>
 800a5de:	4620      	mov	r0, r4
 800a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e4:	f001 bfe8 	b.w	800c5b8 <_fflush_r>
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	bf00      	nop
 800a5ec:	200005b4 	.word	0x200005b4
 800a5f0:	2000061c 	.word	0x2000061c
 800a5f4:	20000684 	.word	0x20000684

0800a5f8 <global_stdio_init.part.0>:
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a628 <global_stdio_init.part.0+0x30>)
 800a5fc:	4c0b      	ldr	r4, [pc, #44]	@ (800a62c <global_stdio_init.part.0+0x34>)
 800a5fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a630 <global_stdio_init.part.0+0x38>)
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	4620      	mov	r0, r4
 800a604:	2200      	movs	r2, #0
 800a606:	2104      	movs	r1, #4
 800a608:	f7ff ff94 	bl	800a534 <std>
 800a60c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a610:	2201      	movs	r2, #1
 800a612:	2109      	movs	r1, #9
 800a614:	f7ff ff8e 	bl	800a534 <std>
 800a618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a61c:	2202      	movs	r2, #2
 800a61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a622:	2112      	movs	r1, #18
 800a624:	f7ff bf86 	b.w	800a534 <std>
 800a628:	200006ec 	.word	0x200006ec
 800a62c:	200005b4 	.word	0x200005b4
 800a630:	0800a5a1 	.word	0x0800a5a1

0800a634 <__sfp_lock_acquire>:
 800a634:	4801      	ldr	r0, [pc, #4]	@ (800a63c <__sfp_lock_acquire+0x8>)
 800a636:	f000 b9ca 	b.w	800a9ce <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	200006f5 	.word	0x200006f5

0800a640 <__sfp_lock_release>:
 800a640:	4801      	ldr	r0, [pc, #4]	@ (800a648 <__sfp_lock_release+0x8>)
 800a642:	f000 b9c5 	b.w	800a9d0 <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	200006f5 	.word	0x200006f5

0800a64c <__sinit>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	4604      	mov	r4, r0
 800a650:	f7ff fff0 	bl	800a634 <__sfp_lock_acquire>
 800a654:	6a23      	ldr	r3, [r4, #32]
 800a656:	b11b      	cbz	r3, 800a660 <__sinit+0x14>
 800a658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a65c:	f7ff bff0 	b.w	800a640 <__sfp_lock_release>
 800a660:	4b04      	ldr	r3, [pc, #16]	@ (800a674 <__sinit+0x28>)
 800a662:	6223      	str	r3, [r4, #32]
 800a664:	4b04      	ldr	r3, [pc, #16]	@ (800a678 <__sinit+0x2c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1f5      	bne.n	800a658 <__sinit+0xc>
 800a66c:	f7ff ffc4 	bl	800a5f8 <global_stdio_init.part.0>
 800a670:	e7f2      	b.n	800a658 <__sinit+0xc>
 800a672:	bf00      	nop
 800a674:	0800a5b9 	.word	0x0800a5b9
 800a678:	200006ec 	.word	0x200006ec

0800a67c <_fwalk_sglue>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4607      	mov	r7, r0
 800a682:	4688      	mov	r8, r1
 800a684:	4614      	mov	r4, r2
 800a686:	2600      	movs	r6, #0
 800a688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a68c:	f1b9 0901 	subs.w	r9, r9, #1
 800a690:	d505      	bpl.n	800a69e <_fwalk_sglue+0x22>
 800a692:	6824      	ldr	r4, [r4, #0]
 800a694:	2c00      	cmp	r4, #0
 800a696:	d1f7      	bne.n	800a688 <_fwalk_sglue+0xc>
 800a698:	4630      	mov	r0, r6
 800a69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d907      	bls.n	800a6b4 <_fwalk_sglue+0x38>
 800a6a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	d003      	beq.n	800a6b4 <_fwalk_sglue+0x38>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	47c0      	blx	r8
 800a6b2:	4306      	orrs	r6, r0
 800a6b4:	3568      	adds	r5, #104	@ 0x68
 800a6b6:	e7e9      	b.n	800a68c <_fwalk_sglue+0x10>

0800a6b8 <sniprintf>:
 800a6b8:	b40c      	push	{r2, r3}
 800a6ba:	b530      	push	{r4, r5, lr}
 800a6bc:	4b18      	ldr	r3, [pc, #96]	@ (800a720 <sniprintf+0x68>)
 800a6be:	1e0c      	subs	r4, r1, #0
 800a6c0:	681d      	ldr	r5, [r3, #0]
 800a6c2:	b09d      	sub	sp, #116	@ 0x74
 800a6c4:	da08      	bge.n	800a6d8 <sniprintf+0x20>
 800a6c6:	238b      	movs	r3, #139	@ 0x8b
 800a6c8:	602b      	str	r3, [r5, #0]
 800a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ce:	b01d      	add	sp, #116	@ 0x74
 800a6d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6d4:	b002      	add	sp, #8
 800a6d6:	4770      	bx	lr
 800a6d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a6dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a6e0:	f04f 0300 	mov.w	r3, #0
 800a6e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a6e6:	bf14      	ite	ne
 800a6e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a6ec:	4623      	moveq	r3, r4
 800a6ee:	9304      	str	r3, [sp, #16]
 800a6f0:	9307      	str	r3, [sp, #28]
 800a6f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6f6:	9002      	str	r0, [sp, #8]
 800a6f8:	9006      	str	r0, [sp, #24]
 800a6fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a6fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a700:	ab21      	add	r3, sp, #132	@ 0x84
 800a702:	a902      	add	r1, sp, #8
 800a704:	4628      	mov	r0, r5
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	f001 fc94 	bl	800c034 <_svfiprintf_r>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	bfbc      	itt	lt
 800a710:	238b      	movlt	r3, #139	@ 0x8b
 800a712:	602b      	strlt	r3, [r5, #0]
 800a714:	2c00      	cmp	r4, #0
 800a716:	d0da      	beq.n	800a6ce <sniprintf+0x16>
 800a718:	9b02      	ldr	r3, [sp, #8]
 800a71a:	2200      	movs	r2, #0
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	e7d6      	b.n	800a6ce <sniprintf+0x16>
 800a720:	2000001c 	.word	0x2000001c

0800a724 <__sread>:
 800a724:	b510      	push	{r4, lr}
 800a726:	460c      	mov	r4, r1
 800a728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72c:	f000 f900 	bl	800a930 <_read_r>
 800a730:	2800      	cmp	r0, #0
 800a732:	bfab      	itete	ge
 800a734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a736:	89a3      	ldrhlt	r3, [r4, #12]
 800a738:	181b      	addge	r3, r3, r0
 800a73a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a73e:	bfac      	ite	ge
 800a740:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a742:	81a3      	strhlt	r3, [r4, #12]
 800a744:	bd10      	pop	{r4, pc}

0800a746 <__swrite>:
 800a746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74a:	461f      	mov	r7, r3
 800a74c:	898b      	ldrh	r3, [r1, #12]
 800a74e:	05db      	lsls	r3, r3, #23
 800a750:	4605      	mov	r5, r0
 800a752:	460c      	mov	r4, r1
 800a754:	4616      	mov	r6, r2
 800a756:	d505      	bpl.n	800a764 <__swrite+0x1e>
 800a758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75c:	2302      	movs	r3, #2
 800a75e:	2200      	movs	r2, #0
 800a760:	f000 f8d4 	bl	800a90c <_lseek_r>
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a76a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	4632      	mov	r2, r6
 800a772:	463b      	mov	r3, r7
 800a774:	4628      	mov	r0, r5
 800a776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a77a:	f000 b8eb 	b.w	800a954 <_write_r>

0800a77e <__sseek>:
 800a77e:	b510      	push	{r4, lr}
 800a780:	460c      	mov	r4, r1
 800a782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a786:	f000 f8c1 	bl	800a90c <_lseek_r>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	bf15      	itete	ne
 800a790:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a79a:	81a3      	strheq	r3, [r4, #12]
 800a79c:	bf18      	it	ne
 800a79e:	81a3      	strhne	r3, [r4, #12]
 800a7a0:	bd10      	pop	{r4, pc}

0800a7a2 <__sclose>:
 800a7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a6:	f000 b8a1 	b.w	800a8ec <_close_r>

0800a7aa <__swbuf_r>:
 800a7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ac:	460e      	mov	r6, r1
 800a7ae:	4614      	mov	r4, r2
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	b118      	cbz	r0, 800a7bc <__swbuf_r+0x12>
 800a7b4:	6a03      	ldr	r3, [r0, #32]
 800a7b6:	b90b      	cbnz	r3, 800a7bc <__swbuf_r+0x12>
 800a7b8:	f7ff ff48 	bl	800a64c <__sinit>
 800a7bc:	69a3      	ldr	r3, [r4, #24]
 800a7be:	60a3      	str	r3, [r4, #8]
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	071a      	lsls	r2, r3, #28
 800a7c4:	d501      	bpl.n	800a7ca <__swbuf_r+0x20>
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	b943      	cbnz	r3, 800a7dc <__swbuf_r+0x32>
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 f82b 	bl	800a828 <__swsetup_r>
 800a7d2:	b118      	cbz	r0, 800a7dc <__swbuf_r+0x32>
 800a7d4:	f04f 37ff 	mov.w	r7, #4294967295
 800a7d8:	4638      	mov	r0, r7
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	6922      	ldr	r2, [r4, #16]
 800a7e0:	1a98      	subs	r0, r3, r2
 800a7e2:	6963      	ldr	r3, [r4, #20]
 800a7e4:	b2f6      	uxtb	r6, r6
 800a7e6:	4283      	cmp	r3, r0
 800a7e8:	4637      	mov	r7, r6
 800a7ea:	dc05      	bgt.n	800a7f8 <__swbuf_r+0x4e>
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f001 fee2 	bl	800c5b8 <_fflush_r>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d1ed      	bne.n	800a7d4 <__swbuf_r+0x2a>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	6022      	str	r2, [r4, #0]
 800a804:	701e      	strb	r6, [r3, #0]
 800a806:	6962      	ldr	r2, [r4, #20]
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d004      	beq.n	800a818 <__swbuf_r+0x6e>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	07db      	lsls	r3, r3, #31
 800a812:	d5e1      	bpl.n	800a7d8 <__swbuf_r+0x2e>
 800a814:	2e0a      	cmp	r6, #10
 800a816:	d1df      	bne.n	800a7d8 <__swbuf_r+0x2e>
 800a818:	4621      	mov	r1, r4
 800a81a:	4628      	mov	r0, r5
 800a81c:	f001 fecc 	bl	800c5b8 <_fflush_r>
 800a820:	2800      	cmp	r0, #0
 800a822:	d0d9      	beq.n	800a7d8 <__swbuf_r+0x2e>
 800a824:	e7d6      	b.n	800a7d4 <__swbuf_r+0x2a>
	...

0800a828 <__swsetup_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4b29      	ldr	r3, [pc, #164]	@ (800a8d0 <__swsetup_r+0xa8>)
 800a82c:	4605      	mov	r5, r0
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	460c      	mov	r4, r1
 800a832:	b118      	cbz	r0, 800a83c <__swsetup_r+0x14>
 800a834:	6a03      	ldr	r3, [r0, #32]
 800a836:	b90b      	cbnz	r3, 800a83c <__swsetup_r+0x14>
 800a838:	f7ff ff08 	bl	800a64c <__sinit>
 800a83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a840:	0719      	lsls	r1, r3, #28
 800a842:	d422      	bmi.n	800a88a <__swsetup_r+0x62>
 800a844:	06da      	lsls	r2, r3, #27
 800a846:	d407      	bmi.n	800a858 <__swsetup_r+0x30>
 800a848:	2209      	movs	r2, #9
 800a84a:	602a      	str	r2, [r5, #0]
 800a84c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a850:	81a3      	strh	r3, [r4, #12]
 800a852:	f04f 30ff 	mov.w	r0, #4294967295
 800a856:	e033      	b.n	800a8c0 <__swsetup_r+0x98>
 800a858:	0758      	lsls	r0, r3, #29
 800a85a:	d512      	bpl.n	800a882 <__swsetup_r+0x5a>
 800a85c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a85e:	b141      	cbz	r1, 800a872 <__swsetup_r+0x4a>
 800a860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a864:	4299      	cmp	r1, r3
 800a866:	d002      	beq.n	800a86e <__swsetup_r+0x46>
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 ff0d 	bl	800b688 <_free_r>
 800a86e:	2300      	movs	r3, #0
 800a870:	6363      	str	r3, [r4, #52]	@ 0x34
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	2300      	movs	r3, #0
 800a87c:	6063      	str	r3, [r4, #4]
 800a87e:	6923      	ldr	r3, [r4, #16]
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f043 0308 	orr.w	r3, r3, #8
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	6923      	ldr	r3, [r4, #16]
 800a88c:	b94b      	cbnz	r3, 800a8a2 <__swsetup_r+0x7a>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a898:	d003      	beq.n	800a8a2 <__swsetup_r+0x7a>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4628      	mov	r0, r5
 800a89e:	f001 fed9 	bl	800c654 <__smakebuf_r>
 800a8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a6:	f013 0201 	ands.w	r2, r3, #1
 800a8aa:	d00a      	beq.n	800a8c2 <__swsetup_r+0x9a>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	60a2      	str	r2, [r4, #8]
 800a8b0:	6962      	ldr	r2, [r4, #20]
 800a8b2:	4252      	negs	r2, r2
 800a8b4:	61a2      	str	r2, [r4, #24]
 800a8b6:	6922      	ldr	r2, [r4, #16]
 800a8b8:	b942      	cbnz	r2, 800a8cc <__swsetup_r+0xa4>
 800a8ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a8be:	d1c5      	bne.n	800a84c <__swsetup_r+0x24>
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
 800a8c2:	0799      	lsls	r1, r3, #30
 800a8c4:	bf58      	it	pl
 800a8c6:	6962      	ldrpl	r2, [r4, #20]
 800a8c8:	60a2      	str	r2, [r4, #8]
 800a8ca:	e7f4      	b.n	800a8b6 <__swsetup_r+0x8e>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e7f7      	b.n	800a8c0 <__swsetup_r+0x98>
 800a8d0:	2000001c 	.word	0x2000001c

0800a8d4 <memset>:
 800a8d4:	4402      	add	r2, r0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d100      	bne.n	800a8de <memset+0xa>
 800a8dc:	4770      	bx	lr
 800a8de:	f803 1b01 	strb.w	r1, [r3], #1
 800a8e2:	e7f9      	b.n	800a8d8 <memset+0x4>

0800a8e4 <_localeconv_r>:
 800a8e4:	4800      	ldr	r0, [pc, #0]	@ (800a8e8 <_localeconv_r+0x4>)
 800a8e6:	4770      	bx	lr
 800a8e8:	2000015c 	.word	0x2000015c

0800a8ec <_close_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4d06      	ldr	r5, [pc, #24]	@ (800a908 <_close_r+0x1c>)
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	f7f8 fdb6 	bl	8003468 <_close>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d102      	bne.n	800a906 <_close_r+0x1a>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	b103      	cbz	r3, 800a906 <_close_r+0x1a>
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	200006f0 	.word	0x200006f0

0800a90c <_lseek_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d07      	ldr	r5, [pc, #28]	@ (800a92c <_lseek_r+0x20>)
 800a910:	4604      	mov	r4, r0
 800a912:	4608      	mov	r0, r1
 800a914:	4611      	mov	r1, r2
 800a916:	2200      	movs	r2, #0
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	f7f8 fdcb 	bl	80034b6 <_lseek>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_lseek_r+0x1e>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	b103      	cbz	r3, 800a92a <_lseek_r+0x1e>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	200006f0 	.word	0x200006f0

0800a930 <_read_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d07      	ldr	r5, [pc, #28]	@ (800a950 <_read_r+0x20>)
 800a934:	4604      	mov	r4, r0
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	602a      	str	r2, [r5, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f7f8 fd59 	bl	80033f6 <_read>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_read_r+0x1e>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_read_r+0x1e>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	200006f0 	.word	0x200006f0

0800a954 <_write_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	@ (800a974 <_write_r+0x20>)
 800a958:	4604      	mov	r4, r0
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	602a      	str	r2, [r5, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	f7f8 fd64 	bl	8003430 <_write>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_write_r+0x1e>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_write_r+0x1e>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	200006f0 	.word	0x200006f0

0800a978 <__errno>:
 800a978:	4b01      	ldr	r3, [pc, #4]	@ (800a980 <__errno+0x8>)
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	2000001c 	.word	0x2000001c

0800a984 <__libc_init_array>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4d0d      	ldr	r5, [pc, #52]	@ (800a9bc <__libc_init_array+0x38>)
 800a988:	4c0d      	ldr	r4, [pc, #52]	@ (800a9c0 <__libc_init_array+0x3c>)
 800a98a:	1b64      	subs	r4, r4, r5
 800a98c:	10a4      	asrs	r4, r4, #2
 800a98e:	2600      	movs	r6, #0
 800a990:	42a6      	cmp	r6, r4
 800a992:	d109      	bne.n	800a9a8 <__libc_init_array+0x24>
 800a994:	4d0b      	ldr	r5, [pc, #44]	@ (800a9c4 <__libc_init_array+0x40>)
 800a996:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c8 <__libc_init_array+0x44>)
 800a998:	f001 ffd8 	bl	800c94c <_init>
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	42a6      	cmp	r6, r4
 800a9a4:	d105      	bne.n	800a9b2 <__libc_init_array+0x2e>
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ac:	4798      	blx	r3
 800a9ae:	3601      	adds	r6, #1
 800a9b0:	e7ee      	b.n	800a990 <__libc_init_array+0xc>
 800a9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b6:	4798      	blx	r3
 800a9b8:	3601      	adds	r6, #1
 800a9ba:	e7f2      	b.n	800a9a2 <__libc_init_array+0x1e>
 800a9bc:	0800d254 	.word	0x0800d254
 800a9c0:	0800d254 	.word	0x0800d254
 800a9c4:	0800d254 	.word	0x0800d254
 800a9c8:	0800d258 	.word	0x0800d258

0800a9cc <__retarget_lock_init_recursive>:
 800a9cc:	4770      	bx	lr

0800a9ce <__retarget_lock_acquire_recursive>:
 800a9ce:	4770      	bx	lr

0800a9d0 <__retarget_lock_release_recursive>:
 800a9d0:	4770      	bx	lr

0800a9d2 <quorem>:
 800a9d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d6:	6903      	ldr	r3, [r0, #16]
 800a9d8:	690c      	ldr	r4, [r1, #16]
 800a9da:	42a3      	cmp	r3, r4
 800a9dc:	4607      	mov	r7, r0
 800a9de:	db7e      	blt.n	800aade <quorem+0x10c>
 800a9e0:	3c01      	subs	r4, #1
 800a9e2:	f101 0814 	add.w	r8, r1, #20
 800a9e6:	00a3      	lsls	r3, r4, #2
 800a9e8:	f100 0514 	add.w	r5, r0, #20
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9f2:	9301      	str	r3, [sp, #4]
 800a9f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa04:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa08:	d32e      	bcc.n	800aa68 <quorem+0x96>
 800aa0a:	f04f 0a00 	mov.w	sl, #0
 800aa0e:	46c4      	mov	ip, r8
 800aa10:	46ae      	mov	lr, r5
 800aa12:	46d3      	mov	fp, sl
 800aa14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa18:	b298      	uxth	r0, r3
 800aa1a:	fb06 a000 	mla	r0, r6, r0, sl
 800aa1e:	0c02      	lsrs	r2, r0, #16
 800aa20:	0c1b      	lsrs	r3, r3, #16
 800aa22:	fb06 2303 	mla	r3, r6, r3, r2
 800aa26:	f8de 2000 	ldr.w	r2, [lr]
 800aa2a:	b280      	uxth	r0, r0
 800aa2c:	b292      	uxth	r2, r2
 800aa2e:	1a12      	subs	r2, r2, r0
 800aa30:	445a      	add	r2, fp
 800aa32:	f8de 0000 	ldr.w	r0, [lr]
 800aa36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa44:	b292      	uxth	r2, r2
 800aa46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa4a:	45e1      	cmp	r9, ip
 800aa4c:	f84e 2b04 	str.w	r2, [lr], #4
 800aa50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa54:	d2de      	bcs.n	800aa14 <quorem+0x42>
 800aa56:	9b00      	ldr	r3, [sp, #0]
 800aa58:	58eb      	ldr	r3, [r5, r3]
 800aa5a:	b92b      	cbnz	r3, 800aa68 <quorem+0x96>
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	3b04      	subs	r3, #4
 800aa60:	429d      	cmp	r5, r3
 800aa62:	461a      	mov	r2, r3
 800aa64:	d32f      	bcc.n	800aac6 <quorem+0xf4>
 800aa66:	613c      	str	r4, [r7, #16]
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f001 f97f 	bl	800bd6c <__mcmp>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	db25      	blt.n	800aabe <quorem+0xec>
 800aa72:	4629      	mov	r1, r5
 800aa74:	2000      	movs	r0, #0
 800aa76:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa7a:	f8d1 c000 	ldr.w	ip, [r1]
 800aa7e:	fa1f fe82 	uxth.w	lr, r2
 800aa82:	fa1f f38c 	uxth.w	r3, ip
 800aa86:	eba3 030e 	sub.w	r3, r3, lr
 800aa8a:	4403      	add	r3, r0
 800aa8c:	0c12      	lsrs	r2, r2, #16
 800aa8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa9c:	45c1      	cmp	r9, r8
 800aa9e:	f841 3b04 	str.w	r3, [r1], #4
 800aaa2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aaa6:	d2e6      	bcs.n	800aa76 <quorem+0xa4>
 800aaa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aab0:	b922      	cbnz	r2, 800aabc <quorem+0xea>
 800aab2:	3b04      	subs	r3, #4
 800aab4:	429d      	cmp	r5, r3
 800aab6:	461a      	mov	r2, r3
 800aab8:	d30b      	bcc.n	800aad2 <quorem+0x100>
 800aaba:	613c      	str	r4, [r7, #16]
 800aabc:	3601      	adds	r6, #1
 800aabe:	4630      	mov	r0, r6
 800aac0:	b003      	add	sp, #12
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	6812      	ldr	r2, [r2, #0]
 800aac8:	3b04      	subs	r3, #4
 800aaca:	2a00      	cmp	r2, #0
 800aacc:	d1cb      	bne.n	800aa66 <quorem+0x94>
 800aace:	3c01      	subs	r4, #1
 800aad0:	e7c6      	b.n	800aa60 <quorem+0x8e>
 800aad2:	6812      	ldr	r2, [r2, #0]
 800aad4:	3b04      	subs	r3, #4
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	d1ef      	bne.n	800aaba <quorem+0xe8>
 800aada:	3c01      	subs	r4, #1
 800aadc:	e7ea      	b.n	800aab4 <quorem+0xe2>
 800aade:	2000      	movs	r0, #0
 800aae0:	e7ee      	b.n	800aac0 <quorem+0xee>
 800aae2:	0000      	movs	r0, r0
 800aae4:	0000      	movs	r0, r0
	...

0800aae8 <_dtoa_r>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	69c7      	ldr	r7, [r0, #28]
 800aaee:	b097      	sub	sp, #92	@ 0x5c
 800aaf0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aaf4:	ec55 4b10 	vmov	r4, r5, d0
 800aaf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aafa:	9107      	str	r1, [sp, #28]
 800aafc:	4681      	mov	r9, r0
 800aafe:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab00:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab02:	b97f      	cbnz	r7, 800ab24 <_dtoa_r+0x3c>
 800ab04:	2010      	movs	r0, #16
 800ab06:	f000 fe09 	bl	800b71c <malloc>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab10:	b920      	cbnz	r0, 800ab1c <_dtoa_r+0x34>
 800ab12:	4ba9      	ldr	r3, [pc, #676]	@ (800adb8 <_dtoa_r+0x2d0>)
 800ab14:	21ef      	movs	r1, #239	@ 0xef
 800ab16:	48a9      	ldr	r0, [pc, #676]	@ (800adbc <_dtoa_r+0x2d4>)
 800ab18:	f001 fe32 	bl	800c780 <__assert_func>
 800ab1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab20:	6007      	str	r7, [r0, #0]
 800ab22:	60c7      	str	r7, [r0, #12]
 800ab24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab28:	6819      	ldr	r1, [r3, #0]
 800ab2a:	b159      	cbz	r1, 800ab44 <_dtoa_r+0x5c>
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	604a      	str	r2, [r1, #4]
 800ab30:	2301      	movs	r3, #1
 800ab32:	4093      	lsls	r3, r2
 800ab34:	608b      	str	r3, [r1, #8]
 800ab36:	4648      	mov	r0, r9
 800ab38:	f000 fee6 	bl	800b908 <_Bfree>
 800ab3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab40:	2200      	movs	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	1e2b      	subs	r3, r5, #0
 800ab46:	bfb9      	ittee	lt
 800ab48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab4c:	9305      	strlt	r3, [sp, #20]
 800ab4e:	2300      	movge	r3, #0
 800ab50:	6033      	strge	r3, [r6, #0]
 800ab52:	9f05      	ldr	r7, [sp, #20]
 800ab54:	4b9a      	ldr	r3, [pc, #616]	@ (800adc0 <_dtoa_r+0x2d8>)
 800ab56:	bfbc      	itt	lt
 800ab58:	2201      	movlt	r2, #1
 800ab5a:	6032      	strlt	r2, [r6, #0]
 800ab5c:	43bb      	bics	r3, r7
 800ab5e:	d112      	bne.n	800ab86 <_dtoa_r+0x9e>
 800ab60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab6c:	4323      	orrs	r3, r4
 800ab6e:	f000 855a 	beq.w	800b626 <_dtoa_r+0xb3e>
 800ab72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800add4 <_dtoa_r+0x2ec>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 855c 	beq.w	800b636 <_dtoa_r+0xb4e>
 800ab7e:	f10a 0303 	add.w	r3, sl, #3
 800ab82:	f000 bd56 	b.w	800b632 <_dtoa_r+0xb4a>
 800ab86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	ec51 0b17 	vmov	r0, r1, d7
 800ab90:	2300      	movs	r3, #0
 800ab92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ab96:	f7f5 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	b158      	cbz	r0, 800abb6 <_dtoa_r+0xce>
 800ab9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aba0:	2301      	movs	r3, #1
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aba6:	b113      	cbz	r3, 800abae <_dtoa_r+0xc6>
 800aba8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abaa:	4b86      	ldr	r3, [pc, #536]	@ (800adc4 <_dtoa_r+0x2dc>)
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800add8 <_dtoa_r+0x2f0>
 800abb2:	f000 bd40 	b.w	800b636 <_dtoa_r+0xb4e>
 800abb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800abba:	aa14      	add	r2, sp, #80	@ 0x50
 800abbc:	a915      	add	r1, sp, #84	@ 0x54
 800abbe:	4648      	mov	r0, r9
 800abc0:	f001 f984 	bl	800becc <__d2b>
 800abc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abc8:	9002      	str	r0, [sp, #8]
 800abca:	2e00      	cmp	r6, #0
 800abcc:	d078      	beq.n	800acc0 <_dtoa_r+0x1d8>
 800abce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800abd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abe0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abe4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800abe8:	4619      	mov	r1, r3
 800abea:	2200      	movs	r2, #0
 800abec:	4b76      	ldr	r3, [pc, #472]	@ (800adc8 <_dtoa_r+0x2e0>)
 800abee:	f7f5 fb4b 	bl	8000288 <__aeabi_dsub>
 800abf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ada0 <_dtoa_r+0x2b8>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fcfe 	bl	80005f8 <__aeabi_dmul>
 800abfc:	a36a      	add	r3, pc, #424	@ (adr r3, 800ada8 <_dtoa_r+0x2c0>)
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f7f5 fb43 	bl	800028c <__adddf3>
 800ac06:	4604      	mov	r4, r0
 800ac08:	4630      	mov	r0, r6
 800ac0a:	460d      	mov	r5, r1
 800ac0c:	f7f5 fc8a 	bl	8000524 <__aeabi_i2d>
 800ac10:	a367      	add	r3, pc, #412	@ (adr r3, 800adb0 <_dtoa_r+0x2c8>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f7f5 fcef 	bl	80005f8 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	f7f5 fb33 	bl	800028c <__adddf3>
 800ac26:	4604      	mov	r4, r0
 800ac28:	460d      	mov	r5, r1
 800ac2a:	f7f5 ff95 	bl	8000b58 <__aeabi_d2iz>
 800ac2e:	2200      	movs	r2, #0
 800ac30:	4607      	mov	r7, r0
 800ac32:	2300      	movs	r3, #0
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 ff50 	bl	8000adc <__aeabi_dcmplt>
 800ac3c:	b140      	cbz	r0, 800ac50 <_dtoa_r+0x168>
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f7f5 fc70 	bl	8000524 <__aeabi_i2d>
 800ac44:	4622      	mov	r2, r4
 800ac46:	462b      	mov	r3, r5
 800ac48:	f7f5 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac4c:	b900      	cbnz	r0, 800ac50 <_dtoa_r+0x168>
 800ac4e:	3f01      	subs	r7, #1
 800ac50:	2f16      	cmp	r7, #22
 800ac52:	d852      	bhi.n	800acfa <_dtoa_r+0x212>
 800ac54:	4b5d      	ldr	r3, [pc, #372]	@ (800adcc <_dtoa_r+0x2e4>)
 800ac56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac62:	f7f5 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d049      	beq.n	800acfe <_dtoa_r+0x216>
 800ac6a:	3f01      	subs	r7, #1
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac72:	1b9b      	subs	r3, r3, r6
 800ac74:	1e5a      	subs	r2, r3, #1
 800ac76:	bf45      	ittet	mi
 800ac78:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac7c:	9300      	strmi	r3, [sp, #0]
 800ac7e:	2300      	movpl	r3, #0
 800ac80:	2300      	movmi	r3, #0
 800ac82:	9206      	str	r2, [sp, #24]
 800ac84:	bf54      	ite	pl
 800ac86:	9300      	strpl	r3, [sp, #0]
 800ac88:	9306      	strmi	r3, [sp, #24]
 800ac8a:	2f00      	cmp	r7, #0
 800ac8c:	db39      	blt.n	800ad02 <_dtoa_r+0x21a>
 800ac8e:	9b06      	ldr	r3, [sp, #24]
 800ac90:	970d      	str	r7, [sp, #52]	@ 0x34
 800ac92:	443b      	add	r3, r7
 800ac94:	9306      	str	r3, [sp, #24]
 800ac96:	2300      	movs	r3, #0
 800ac98:	9308      	str	r3, [sp, #32]
 800ac9a:	9b07      	ldr	r3, [sp, #28]
 800ac9c:	2b09      	cmp	r3, #9
 800ac9e:	d863      	bhi.n	800ad68 <_dtoa_r+0x280>
 800aca0:	2b05      	cmp	r3, #5
 800aca2:	bfc4      	itt	gt
 800aca4:	3b04      	subgt	r3, #4
 800aca6:	9307      	strgt	r3, [sp, #28]
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	f1a3 0302 	sub.w	r3, r3, #2
 800acae:	bfcc      	ite	gt
 800acb0:	2400      	movgt	r4, #0
 800acb2:	2401      	movle	r4, #1
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d863      	bhi.n	800ad80 <_dtoa_r+0x298>
 800acb8:	e8df f003 	tbb	[pc, r3]
 800acbc:	2b375452 	.word	0x2b375452
 800acc0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800acc4:	441e      	add	r6, r3
 800acc6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800acca:	2b20      	cmp	r3, #32
 800accc:	bfc1      	itttt	gt
 800acce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800acd2:	409f      	lslgt	r7, r3
 800acd4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800acd8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800acdc:	bfd6      	itet	le
 800acde:	f1c3 0320 	rsble	r3, r3, #32
 800ace2:	ea47 0003 	orrgt.w	r0, r7, r3
 800ace6:	fa04 f003 	lslle.w	r0, r4, r3
 800acea:	f7f5 fc0b 	bl	8000504 <__aeabi_ui2d>
 800acee:	2201      	movs	r2, #1
 800acf0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800acf4:	3e01      	subs	r6, #1
 800acf6:	9212      	str	r2, [sp, #72]	@ 0x48
 800acf8:	e776      	b.n	800abe8 <_dtoa_r+0x100>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e7b7      	b.n	800ac6e <_dtoa_r+0x186>
 800acfe:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad00:	e7b6      	b.n	800ac70 <_dtoa_r+0x188>
 800ad02:	9b00      	ldr	r3, [sp, #0]
 800ad04:	1bdb      	subs	r3, r3, r7
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	427b      	negs	r3, r7
 800ad0a:	9308      	str	r3, [sp, #32]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad10:	e7c3      	b.n	800ac9a <_dtoa_r+0x1b2>
 800ad12:	2301      	movs	r3, #1
 800ad14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad18:	eb07 0b03 	add.w	fp, r7, r3
 800ad1c:	f10b 0301 	add.w	r3, fp, #1
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	bfb8      	it	lt
 800ad26:	2301      	movlt	r3, #1
 800ad28:	e006      	b.n	800ad38 <_dtoa_r+0x250>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	dd28      	ble.n	800ad86 <_dtoa_r+0x29e>
 800ad34:	469b      	mov	fp, r3
 800ad36:	9303      	str	r3, [sp, #12]
 800ad38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	2204      	movs	r2, #4
 800ad40:	f102 0514 	add.w	r5, r2, #20
 800ad44:	429d      	cmp	r5, r3
 800ad46:	d926      	bls.n	800ad96 <_dtoa_r+0x2ae>
 800ad48:	6041      	str	r1, [r0, #4]
 800ad4a:	4648      	mov	r0, r9
 800ad4c:	f000 fd9c 	bl	800b888 <_Balloc>
 800ad50:	4682      	mov	sl, r0
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d142      	bne.n	800addc <_dtoa_r+0x2f4>
 800ad56:	4b1e      	ldr	r3, [pc, #120]	@ (800add0 <_dtoa_r+0x2e8>)
 800ad58:	4602      	mov	r2, r0
 800ad5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad5e:	e6da      	b.n	800ab16 <_dtoa_r+0x2e>
 800ad60:	2300      	movs	r3, #0
 800ad62:	e7e3      	b.n	800ad2c <_dtoa_r+0x244>
 800ad64:	2300      	movs	r3, #0
 800ad66:	e7d5      	b.n	800ad14 <_dtoa_r+0x22c>
 800ad68:	2401      	movs	r4, #1
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9307      	str	r3, [sp, #28]
 800ad6e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad70:	f04f 3bff 	mov.w	fp, #4294967295
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad7a:	2312      	movs	r3, #18
 800ad7c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad7e:	e7db      	b.n	800ad38 <_dtoa_r+0x250>
 800ad80:	2301      	movs	r3, #1
 800ad82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad84:	e7f4      	b.n	800ad70 <_dtoa_r+0x288>
 800ad86:	f04f 0b01 	mov.w	fp, #1
 800ad8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad8e:	465b      	mov	r3, fp
 800ad90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ad94:	e7d0      	b.n	800ad38 <_dtoa_r+0x250>
 800ad96:	3101      	adds	r1, #1
 800ad98:	0052      	lsls	r2, r2, #1
 800ad9a:	e7d1      	b.n	800ad40 <_dtoa_r+0x258>
 800ad9c:	f3af 8000 	nop.w
 800ada0:	636f4361 	.word	0x636f4361
 800ada4:	3fd287a7 	.word	0x3fd287a7
 800ada8:	8b60c8b3 	.word	0x8b60c8b3
 800adac:	3fc68a28 	.word	0x3fc68a28
 800adb0:	509f79fb 	.word	0x509f79fb
 800adb4:	3fd34413 	.word	0x3fd34413
 800adb8:	0800cf15 	.word	0x0800cf15
 800adbc:	0800cf2c 	.word	0x0800cf2c
 800adc0:	7ff00000 	.word	0x7ff00000
 800adc4:	0800cee5 	.word	0x0800cee5
 800adc8:	3ff80000 	.word	0x3ff80000
 800adcc:	0800d080 	.word	0x0800d080
 800add0:	0800cf84 	.word	0x0800cf84
 800add4:	0800cf11 	.word	0x0800cf11
 800add8:	0800cee4 	.word	0x0800cee4
 800addc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ade0:	6018      	str	r0, [r3, #0]
 800ade2:	9b03      	ldr	r3, [sp, #12]
 800ade4:	2b0e      	cmp	r3, #14
 800ade6:	f200 80a1 	bhi.w	800af2c <_dtoa_r+0x444>
 800adea:	2c00      	cmp	r4, #0
 800adec:	f000 809e 	beq.w	800af2c <_dtoa_r+0x444>
 800adf0:	2f00      	cmp	r7, #0
 800adf2:	dd33      	ble.n	800ae5c <_dtoa_r+0x374>
 800adf4:	4b9c      	ldr	r3, [pc, #624]	@ (800b068 <_dtoa_r+0x580>)
 800adf6:	f007 020f 	and.w	r2, r7, #15
 800adfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adfe:	ed93 7b00 	vldr	d7, [r3]
 800ae02:	05f8      	lsls	r0, r7, #23
 800ae04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae0c:	d516      	bpl.n	800ae3c <_dtoa_r+0x354>
 800ae0e:	4b97      	ldr	r3, [pc, #604]	@ (800b06c <_dtoa_r+0x584>)
 800ae10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae18:	f7f5 fd18 	bl	800084c <__aeabi_ddiv>
 800ae1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae20:	f004 040f 	and.w	r4, r4, #15
 800ae24:	2603      	movs	r6, #3
 800ae26:	4d91      	ldr	r5, [pc, #580]	@ (800b06c <_dtoa_r+0x584>)
 800ae28:	b954      	cbnz	r4, 800ae40 <_dtoa_r+0x358>
 800ae2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae32:	f7f5 fd0b 	bl	800084c <__aeabi_ddiv>
 800ae36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae3a:	e028      	b.n	800ae8e <_dtoa_r+0x3a6>
 800ae3c:	2602      	movs	r6, #2
 800ae3e:	e7f2      	b.n	800ae26 <_dtoa_r+0x33e>
 800ae40:	07e1      	lsls	r1, r4, #31
 800ae42:	d508      	bpl.n	800ae56 <_dtoa_r+0x36e>
 800ae44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae4c:	f7f5 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ae50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae54:	3601      	adds	r6, #1
 800ae56:	1064      	asrs	r4, r4, #1
 800ae58:	3508      	adds	r5, #8
 800ae5a:	e7e5      	b.n	800ae28 <_dtoa_r+0x340>
 800ae5c:	f000 80af 	beq.w	800afbe <_dtoa_r+0x4d6>
 800ae60:	427c      	negs	r4, r7
 800ae62:	4b81      	ldr	r3, [pc, #516]	@ (800b068 <_dtoa_r+0x580>)
 800ae64:	4d81      	ldr	r5, [pc, #516]	@ (800b06c <_dtoa_r+0x584>)
 800ae66:	f004 020f 	and.w	r2, r4, #15
 800ae6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae7e:	1124      	asrs	r4, r4, #4
 800ae80:	2300      	movs	r3, #0
 800ae82:	2602      	movs	r6, #2
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	f040 808f 	bne.w	800afa8 <_dtoa_r+0x4c0>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1d3      	bne.n	800ae36 <_dtoa_r+0x34e>
 800ae8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8094 	beq.w	800afc2 <_dtoa_r+0x4da>
 800ae9a:	4b75      	ldr	r3, [pc, #468]	@ (800b070 <_dtoa_r+0x588>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	f7f5 fe1b 	bl	8000adc <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f000 808b 	beq.w	800afc2 <_dtoa_r+0x4da>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8087 	beq.w	800afc2 <_dtoa_r+0x4da>
 800aeb4:	f1bb 0f00 	cmp.w	fp, #0
 800aeb8:	dd34      	ble.n	800af24 <_dtoa_r+0x43c>
 800aeba:	4620      	mov	r0, r4
 800aebc:	4b6d      	ldr	r3, [pc, #436]	@ (800b074 <_dtoa_r+0x58c>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 fb99 	bl	80005f8 <__aeabi_dmul>
 800aec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeca:	f107 38ff 	add.w	r8, r7, #4294967295
 800aece:	3601      	adds	r6, #1
 800aed0:	465c      	mov	r4, fp
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7f5 fb26 	bl	8000524 <__aeabi_i2d>
 800aed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	4b65      	ldr	r3, [pc, #404]	@ (800b078 <_dtoa_r+0x590>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	f7f5 f9d2 	bl	800028c <__adddf3>
 800aee8:	4605      	mov	r5, r0
 800aeea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aeee:	2c00      	cmp	r4, #0
 800aef0:	d16a      	bne.n	800afc8 <_dtoa_r+0x4e0>
 800aef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef6:	4b61      	ldr	r3, [pc, #388]	@ (800b07c <_dtoa_r+0x594>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	f7f5 f9c5 	bl	8000288 <__aeabi_dsub>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af06:	462a      	mov	r2, r5
 800af08:	4633      	mov	r3, r6
 800af0a:	f7f5 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 800af0e:	2800      	cmp	r0, #0
 800af10:	f040 8298 	bne.w	800b444 <_dtoa_r+0x95c>
 800af14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af18:	462a      	mov	r2, r5
 800af1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af1e:	f7f5 fddd 	bl	8000adc <__aeabi_dcmplt>
 800af22:	bb38      	cbnz	r0, 800af74 <_dtoa_r+0x48c>
 800af24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800af28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f2c0 8157 	blt.w	800b1e2 <_dtoa_r+0x6fa>
 800af34:	2f0e      	cmp	r7, #14
 800af36:	f300 8154 	bgt.w	800b1e2 <_dtoa_r+0x6fa>
 800af3a:	4b4b      	ldr	r3, [pc, #300]	@ (800b068 <_dtoa_r+0x580>)
 800af3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af40:	ed93 7b00 	vldr	d7, [r3]
 800af44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af46:	2b00      	cmp	r3, #0
 800af48:	ed8d 7b00 	vstr	d7, [sp]
 800af4c:	f280 80e5 	bge.w	800b11a <_dtoa_r+0x632>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f300 80e1 	bgt.w	800b11a <_dtoa_r+0x632>
 800af58:	d10c      	bne.n	800af74 <_dtoa_r+0x48c>
 800af5a:	4b48      	ldr	r3, [pc, #288]	@ (800b07c <_dtoa_r+0x594>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	ec51 0b17 	vmov	r0, r1, d7
 800af62:	f7f5 fb49 	bl	80005f8 <__aeabi_dmul>
 800af66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af6a:	f7f5 fdcb 	bl	8000b04 <__aeabi_dcmpge>
 800af6e:	2800      	cmp	r0, #0
 800af70:	f000 8266 	beq.w	800b440 <_dtoa_r+0x958>
 800af74:	2400      	movs	r4, #0
 800af76:	4625      	mov	r5, r4
 800af78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af7a:	4656      	mov	r6, sl
 800af7c:	ea6f 0803 	mvn.w	r8, r3
 800af80:	2700      	movs	r7, #0
 800af82:	4621      	mov	r1, r4
 800af84:	4648      	mov	r0, r9
 800af86:	f000 fcbf 	bl	800b908 <_Bfree>
 800af8a:	2d00      	cmp	r5, #0
 800af8c:	f000 80bd 	beq.w	800b10a <_dtoa_r+0x622>
 800af90:	b12f      	cbz	r7, 800af9e <_dtoa_r+0x4b6>
 800af92:	42af      	cmp	r7, r5
 800af94:	d003      	beq.n	800af9e <_dtoa_r+0x4b6>
 800af96:	4639      	mov	r1, r7
 800af98:	4648      	mov	r0, r9
 800af9a:	f000 fcb5 	bl	800b908 <_Bfree>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4648      	mov	r0, r9
 800afa2:	f000 fcb1 	bl	800b908 <_Bfree>
 800afa6:	e0b0      	b.n	800b10a <_dtoa_r+0x622>
 800afa8:	07e2      	lsls	r2, r4, #31
 800afaa:	d505      	bpl.n	800afb8 <_dtoa_r+0x4d0>
 800afac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afb0:	f7f5 fb22 	bl	80005f8 <__aeabi_dmul>
 800afb4:	3601      	adds	r6, #1
 800afb6:	2301      	movs	r3, #1
 800afb8:	1064      	asrs	r4, r4, #1
 800afba:	3508      	adds	r5, #8
 800afbc:	e762      	b.n	800ae84 <_dtoa_r+0x39c>
 800afbe:	2602      	movs	r6, #2
 800afc0:	e765      	b.n	800ae8e <_dtoa_r+0x3a6>
 800afc2:	9c03      	ldr	r4, [sp, #12]
 800afc4:	46b8      	mov	r8, r7
 800afc6:	e784      	b.n	800aed2 <_dtoa_r+0x3ea>
 800afc8:	4b27      	ldr	r3, [pc, #156]	@ (800b068 <_dtoa_r+0x580>)
 800afca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afd4:	4454      	add	r4, sl
 800afd6:	2900      	cmp	r1, #0
 800afd8:	d054      	beq.n	800b084 <_dtoa_r+0x59c>
 800afda:	4929      	ldr	r1, [pc, #164]	@ (800b080 <_dtoa_r+0x598>)
 800afdc:	2000      	movs	r0, #0
 800afde:	f7f5 fc35 	bl	800084c <__aeabi_ddiv>
 800afe2:	4633      	mov	r3, r6
 800afe4:	462a      	mov	r2, r5
 800afe6:	f7f5 f94f 	bl	8000288 <__aeabi_dsub>
 800afea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afee:	4656      	mov	r6, sl
 800aff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff4:	f7f5 fdb0 	bl	8000b58 <__aeabi_d2iz>
 800aff8:	4605      	mov	r5, r0
 800affa:	f7f5 fa93 	bl	8000524 <__aeabi_i2d>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b006:	f7f5 f93f 	bl	8000288 <__aeabi_dsub>
 800b00a:	3530      	adds	r5, #48	@ 0x30
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b014:	f806 5b01 	strb.w	r5, [r6], #1
 800b018:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b01c:	f7f5 fd5e 	bl	8000adc <__aeabi_dcmplt>
 800b020:	2800      	cmp	r0, #0
 800b022:	d172      	bne.n	800b10a <_dtoa_r+0x622>
 800b024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b028:	4911      	ldr	r1, [pc, #68]	@ (800b070 <_dtoa_r+0x588>)
 800b02a:	2000      	movs	r0, #0
 800b02c:	f7f5 f92c 	bl	8000288 <__aeabi_dsub>
 800b030:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b034:	f7f5 fd52 	bl	8000adc <__aeabi_dcmplt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	f040 80b4 	bne.w	800b1a6 <_dtoa_r+0x6be>
 800b03e:	42a6      	cmp	r6, r4
 800b040:	f43f af70 	beq.w	800af24 <_dtoa_r+0x43c>
 800b044:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b048:	4b0a      	ldr	r3, [pc, #40]	@ (800b074 <_dtoa_r+0x58c>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	4b08      	ldr	r3, [pc, #32]	@ (800b074 <_dtoa_r+0x58c>)
 800b052:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b056:	2200      	movs	r2, #0
 800b058:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b05c:	f7f5 facc 	bl	80005f8 <__aeabi_dmul>
 800b060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b064:	e7c4      	b.n	800aff0 <_dtoa_r+0x508>
 800b066:	bf00      	nop
 800b068:	0800d080 	.word	0x0800d080
 800b06c:	0800d058 	.word	0x0800d058
 800b070:	3ff00000 	.word	0x3ff00000
 800b074:	40240000 	.word	0x40240000
 800b078:	401c0000 	.word	0x401c0000
 800b07c:	40140000 	.word	0x40140000
 800b080:	3fe00000 	.word	0x3fe00000
 800b084:	4631      	mov	r1, r6
 800b086:	4628      	mov	r0, r5
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b090:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b092:	4656      	mov	r6, sl
 800b094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b098:	f7f5 fd5e 	bl	8000b58 <__aeabi_d2iz>
 800b09c:	4605      	mov	r5, r0
 800b09e:	f7f5 fa41 	bl	8000524 <__aeabi_i2d>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0aa:	f7f5 f8ed 	bl	8000288 <__aeabi_dsub>
 800b0ae:	3530      	adds	r5, #48	@ 0x30
 800b0b0:	f806 5b01 	strb.w	r5, [r6], #1
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	42a6      	cmp	r6, r4
 800b0ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	d124      	bne.n	800b10e <_dtoa_r+0x626>
 800b0c4:	4baf      	ldr	r3, [pc, #700]	@ (800b384 <_dtoa_r+0x89c>)
 800b0c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0ca:	f7f5 f8df 	bl	800028c <__adddf3>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d6:	f7f5 fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d163      	bne.n	800b1a6 <_dtoa_r+0x6be>
 800b0de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0e2:	49a8      	ldr	r1, [pc, #672]	@ (800b384 <_dtoa_r+0x89c>)
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	f7f5 f8cf 	bl	8000288 <__aeabi_dsub>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0f2:	f7f5 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f43f af14 	beq.w	800af24 <_dtoa_r+0x43c>
 800b0fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b0fe:	1e73      	subs	r3, r6, #1
 800b100:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b102:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b106:	2b30      	cmp	r3, #48	@ 0x30
 800b108:	d0f8      	beq.n	800b0fc <_dtoa_r+0x614>
 800b10a:	4647      	mov	r7, r8
 800b10c:	e03b      	b.n	800b186 <_dtoa_r+0x69e>
 800b10e:	4b9e      	ldr	r3, [pc, #632]	@ (800b388 <_dtoa_r+0x8a0>)
 800b110:	f7f5 fa72 	bl	80005f8 <__aeabi_dmul>
 800b114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b118:	e7bc      	b.n	800b094 <_dtoa_r+0x5ac>
 800b11a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b11e:	4656      	mov	r6, sl
 800b120:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f7f5 fb90 	bl	800084c <__aeabi_ddiv>
 800b12c:	f7f5 fd14 	bl	8000b58 <__aeabi_d2iz>
 800b130:	4680      	mov	r8, r0
 800b132:	f7f5 f9f7 	bl	8000524 <__aeabi_i2d>
 800b136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13a:	f7f5 fa5d 	bl	80005f8 <__aeabi_dmul>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	4620      	mov	r0, r4
 800b144:	4629      	mov	r1, r5
 800b146:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b14a:	f7f5 f89d 	bl	8000288 <__aeabi_dsub>
 800b14e:	f806 4b01 	strb.w	r4, [r6], #1
 800b152:	9d03      	ldr	r5, [sp, #12]
 800b154:	eba6 040a 	sub.w	r4, r6, sl
 800b158:	42a5      	cmp	r5, r4
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	d133      	bne.n	800b1c8 <_dtoa_r+0x6e0>
 800b160:	f7f5 f894 	bl	800028c <__adddf3>
 800b164:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b168:	4604      	mov	r4, r0
 800b16a:	460d      	mov	r5, r1
 800b16c:	f7f5 fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 800b170:	b9c0      	cbnz	r0, 800b1a4 <_dtoa_r+0x6bc>
 800b172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b176:	4620      	mov	r0, r4
 800b178:	4629      	mov	r1, r5
 800b17a:	f7f5 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b17e:	b110      	cbz	r0, 800b186 <_dtoa_r+0x69e>
 800b180:	f018 0f01 	tst.w	r8, #1
 800b184:	d10e      	bne.n	800b1a4 <_dtoa_r+0x6bc>
 800b186:	9902      	ldr	r1, [sp, #8]
 800b188:	4648      	mov	r0, r9
 800b18a:	f000 fbbd 	bl	800b908 <_Bfree>
 800b18e:	2300      	movs	r3, #0
 800b190:	7033      	strb	r3, [r6, #0]
 800b192:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b194:	3701      	adds	r7, #1
 800b196:	601f      	str	r7, [r3, #0]
 800b198:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 824b 	beq.w	800b636 <_dtoa_r+0xb4e>
 800b1a0:	601e      	str	r6, [r3, #0]
 800b1a2:	e248      	b.n	800b636 <_dtoa_r+0xb4e>
 800b1a4:	46b8      	mov	r8, r7
 800b1a6:	4633      	mov	r3, r6
 800b1a8:	461e      	mov	r6, r3
 800b1aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1ae:	2a39      	cmp	r2, #57	@ 0x39
 800b1b0:	d106      	bne.n	800b1c0 <_dtoa_r+0x6d8>
 800b1b2:	459a      	cmp	sl, r3
 800b1b4:	d1f8      	bne.n	800b1a8 <_dtoa_r+0x6c0>
 800b1b6:	2230      	movs	r2, #48	@ 0x30
 800b1b8:	f108 0801 	add.w	r8, r8, #1
 800b1bc:	f88a 2000 	strb.w	r2, [sl]
 800b1c0:	781a      	ldrb	r2, [r3, #0]
 800b1c2:	3201      	adds	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e7a0      	b.n	800b10a <_dtoa_r+0x622>
 800b1c8:	4b6f      	ldr	r3, [pc, #444]	@ (800b388 <_dtoa_r+0x8a0>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f7f5 fa14 	bl	80005f8 <__aeabi_dmul>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	460d      	mov	r5, r1
 800b1d8:	f7f5 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d09f      	beq.n	800b120 <_dtoa_r+0x638>
 800b1e0:	e7d1      	b.n	800b186 <_dtoa_r+0x69e>
 800b1e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	f000 80ea 	beq.w	800b3be <_dtoa_r+0x8d6>
 800b1ea:	9a07      	ldr	r2, [sp, #28]
 800b1ec:	2a01      	cmp	r2, #1
 800b1ee:	f300 80cd 	bgt.w	800b38c <_dtoa_r+0x8a4>
 800b1f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	f000 80c1 	beq.w	800b37c <_dtoa_r+0x894>
 800b1fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b1fe:	9c08      	ldr	r4, [sp, #32]
 800b200:	9e00      	ldr	r6, [sp, #0]
 800b202:	9a00      	ldr	r2, [sp, #0]
 800b204:	441a      	add	r2, r3
 800b206:	9200      	str	r2, [sp, #0]
 800b208:	9a06      	ldr	r2, [sp, #24]
 800b20a:	2101      	movs	r1, #1
 800b20c:	441a      	add	r2, r3
 800b20e:	4648      	mov	r0, r9
 800b210:	9206      	str	r2, [sp, #24]
 800b212:	f000 fc2d 	bl	800ba70 <__i2b>
 800b216:	4605      	mov	r5, r0
 800b218:	b166      	cbz	r6, 800b234 <_dtoa_r+0x74c>
 800b21a:	9b06      	ldr	r3, [sp, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd09      	ble.n	800b234 <_dtoa_r+0x74c>
 800b220:	42b3      	cmp	r3, r6
 800b222:	9a00      	ldr	r2, [sp, #0]
 800b224:	bfa8      	it	ge
 800b226:	4633      	movge	r3, r6
 800b228:	1ad2      	subs	r2, r2, r3
 800b22a:	9200      	str	r2, [sp, #0]
 800b22c:	9a06      	ldr	r2, [sp, #24]
 800b22e:	1af6      	subs	r6, r6, r3
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	9306      	str	r3, [sp, #24]
 800b234:	9b08      	ldr	r3, [sp, #32]
 800b236:	b30b      	cbz	r3, 800b27c <_dtoa_r+0x794>
 800b238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80c6 	beq.w	800b3cc <_dtoa_r+0x8e4>
 800b240:	2c00      	cmp	r4, #0
 800b242:	f000 80c0 	beq.w	800b3c6 <_dtoa_r+0x8de>
 800b246:	4629      	mov	r1, r5
 800b248:	4622      	mov	r2, r4
 800b24a:	4648      	mov	r0, r9
 800b24c:	f000 fcc8 	bl	800bbe0 <__pow5mult>
 800b250:	9a02      	ldr	r2, [sp, #8]
 800b252:	4601      	mov	r1, r0
 800b254:	4605      	mov	r5, r0
 800b256:	4648      	mov	r0, r9
 800b258:	f000 fc20 	bl	800ba9c <__multiply>
 800b25c:	9902      	ldr	r1, [sp, #8]
 800b25e:	4680      	mov	r8, r0
 800b260:	4648      	mov	r0, r9
 800b262:	f000 fb51 	bl	800b908 <_Bfree>
 800b266:	9b08      	ldr	r3, [sp, #32]
 800b268:	1b1b      	subs	r3, r3, r4
 800b26a:	9308      	str	r3, [sp, #32]
 800b26c:	f000 80b1 	beq.w	800b3d2 <_dtoa_r+0x8ea>
 800b270:	9a08      	ldr	r2, [sp, #32]
 800b272:	4641      	mov	r1, r8
 800b274:	4648      	mov	r0, r9
 800b276:	f000 fcb3 	bl	800bbe0 <__pow5mult>
 800b27a:	9002      	str	r0, [sp, #8]
 800b27c:	2101      	movs	r1, #1
 800b27e:	4648      	mov	r0, r9
 800b280:	f000 fbf6 	bl	800ba70 <__i2b>
 800b284:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b286:	4604      	mov	r4, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 81d8 	beq.w	800b63e <_dtoa_r+0xb56>
 800b28e:	461a      	mov	r2, r3
 800b290:	4601      	mov	r1, r0
 800b292:	4648      	mov	r0, r9
 800b294:	f000 fca4 	bl	800bbe0 <__pow5mult>
 800b298:	9b07      	ldr	r3, [sp, #28]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	4604      	mov	r4, r0
 800b29e:	f300 809f 	bgt.w	800b3e0 <_dtoa_r+0x8f8>
 800b2a2:	9b04      	ldr	r3, [sp, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f040 8097 	bne.w	800b3d8 <_dtoa_r+0x8f0>
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f040 8093 	bne.w	800b3dc <_dtoa_r+0x8f4>
 800b2b6:	9b05      	ldr	r3, [sp, #20]
 800b2b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2bc:	0d1b      	lsrs	r3, r3, #20
 800b2be:	051b      	lsls	r3, r3, #20
 800b2c0:	b133      	cbz	r3, 800b2d0 <_dtoa_r+0x7e8>
 800b2c2:	9b00      	ldr	r3, [sp, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	9b06      	ldr	r3, [sp, #24]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	9306      	str	r3, [sp, #24]
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	9308      	str	r3, [sp, #32]
 800b2d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 81b8 	beq.w	800b64a <_dtoa_r+0xb62>
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2e0:	6918      	ldr	r0, [r3, #16]
 800b2e2:	f000 fb79 	bl	800b9d8 <__hi0bits>
 800b2e6:	f1c0 0020 	rsb	r0, r0, #32
 800b2ea:	9b06      	ldr	r3, [sp, #24]
 800b2ec:	4418      	add	r0, r3
 800b2ee:	f010 001f 	ands.w	r0, r0, #31
 800b2f2:	f000 8082 	beq.w	800b3fa <_dtoa_r+0x912>
 800b2f6:	f1c0 0320 	rsb	r3, r0, #32
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	dd73      	ble.n	800b3e6 <_dtoa_r+0x8fe>
 800b2fe:	9b00      	ldr	r3, [sp, #0]
 800b300:	f1c0 001c 	rsb	r0, r0, #28
 800b304:	4403      	add	r3, r0
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	9b06      	ldr	r3, [sp, #24]
 800b30a:	4403      	add	r3, r0
 800b30c:	4406      	add	r6, r0
 800b30e:	9306      	str	r3, [sp, #24]
 800b310:	9b00      	ldr	r3, [sp, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	dd05      	ble.n	800b322 <_dtoa_r+0x83a>
 800b316:	9902      	ldr	r1, [sp, #8]
 800b318:	461a      	mov	r2, r3
 800b31a:	4648      	mov	r0, r9
 800b31c:	f000 fcba 	bl	800bc94 <__lshift>
 800b320:	9002      	str	r0, [sp, #8]
 800b322:	9b06      	ldr	r3, [sp, #24]
 800b324:	2b00      	cmp	r3, #0
 800b326:	dd05      	ble.n	800b334 <_dtoa_r+0x84c>
 800b328:	4621      	mov	r1, r4
 800b32a:	461a      	mov	r2, r3
 800b32c:	4648      	mov	r0, r9
 800b32e:	f000 fcb1 	bl	800bc94 <__lshift>
 800b332:	4604      	mov	r4, r0
 800b334:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b336:	2b00      	cmp	r3, #0
 800b338:	d061      	beq.n	800b3fe <_dtoa_r+0x916>
 800b33a:	9802      	ldr	r0, [sp, #8]
 800b33c:	4621      	mov	r1, r4
 800b33e:	f000 fd15 	bl	800bd6c <__mcmp>
 800b342:	2800      	cmp	r0, #0
 800b344:	da5b      	bge.n	800b3fe <_dtoa_r+0x916>
 800b346:	2300      	movs	r3, #0
 800b348:	9902      	ldr	r1, [sp, #8]
 800b34a:	220a      	movs	r2, #10
 800b34c:	4648      	mov	r0, r9
 800b34e:	f000 fafd 	bl	800b94c <__multadd>
 800b352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b354:	9002      	str	r0, [sp, #8]
 800b356:	f107 38ff 	add.w	r8, r7, #4294967295
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f000 8177 	beq.w	800b64e <_dtoa_r+0xb66>
 800b360:	4629      	mov	r1, r5
 800b362:	2300      	movs	r3, #0
 800b364:	220a      	movs	r2, #10
 800b366:	4648      	mov	r0, r9
 800b368:	f000 faf0 	bl	800b94c <__multadd>
 800b36c:	f1bb 0f00 	cmp.w	fp, #0
 800b370:	4605      	mov	r5, r0
 800b372:	dc6f      	bgt.n	800b454 <_dtoa_r+0x96c>
 800b374:	9b07      	ldr	r3, [sp, #28]
 800b376:	2b02      	cmp	r3, #2
 800b378:	dc49      	bgt.n	800b40e <_dtoa_r+0x926>
 800b37a:	e06b      	b.n	800b454 <_dtoa_r+0x96c>
 800b37c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b37e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b382:	e73c      	b.n	800b1fe <_dtoa_r+0x716>
 800b384:	3fe00000 	.word	0x3fe00000
 800b388:	40240000 	.word	0x40240000
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	1e5c      	subs	r4, r3, #1
 800b390:	9b08      	ldr	r3, [sp, #32]
 800b392:	42a3      	cmp	r3, r4
 800b394:	db09      	blt.n	800b3aa <_dtoa_r+0x8c2>
 800b396:	1b1c      	subs	r4, r3, r4
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f6bf af30 	bge.w	800b200 <_dtoa_r+0x718>
 800b3a0:	9b00      	ldr	r3, [sp, #0]
 800b3a2:	9a03      	ldr	r2, [sp, #12]
 800b3a4:	1a9e      	subs	r6, r3, r2
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e72b      	b.n	800b202 <_dtoa_r+0x71a>
 800b3aa:	9b08      	ldr	r3, [sp, #32]
 800b3ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3ae:	9408      	str	r4, [sp, #32]
 800b3b0:	1ae3      	subs	r3, r4, r3
 800b3b2:	441a      	add	r2, r3
 800b3b4:	9e00      	ldr	r6, [sp, #0]
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b3ba:	2400      	movs	r4, #0
 800b3bc:	e721      	b.n	800b202 <_dtoa_r+0x71a>
 800b3be:	9c08      	ldr	r4, [sp, #32]
 800b3c0:	9e00      	ldr	r6, [sp, #0]
 800b3c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b3c4:	e728      	b.n	800b218 <_dtoa_r+0x730>
 800b3c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3ca:	e751      	b.n	800b270 <_dtoa_r+0x788>
 800b3cc:	9a08      	ldr	r2, [sp, #32]
 800b3ce:	9902      	ldr	r1, [sp, #8]
 800b3d0:	e750      	b.n	800b274 <_dtoa_r+0x78c>
 800b3d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3d6:	e751      	b.n	800b27c <_dtoa_r+0x794>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e779      	b.n	800b2d0 <_dtoa_r+0x7e8>
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	e777      	b.n	800b2d0 <_dtoa_r+0x7e8>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	9308      	str	r3, [sp, #32]
 800b3e4:	e779      	b.n	800b2da <_dtoa_r+0x7f2>
 800b3e6:	d093      	beq.n	800b310 <_dtoa_r+0x828>
 800b3e8:	9a00      	ldr	r2, [sp, #0]
 800b3ea:	331c      	adds	r3, #28
 800b3ec:	441a      	add	r2, r3
 800b3ee:	9200      	str	r2, [sp, #0]
 800b3f0:	9a06      	ldr	r2, [sp, #24]
 800b3f2:	441a      	add	r2, r3
 800b3f4:	441e      	add	r6, r3
 800b3f6:	9206      	str	r2, [sp, #24]
 800b3f8:	e78a      	b.n	800b310 <_dtoa_r+0x828>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	e7f4      	b.n	800b3e8 <_dtoa_r+0x900>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	46b8      	mov	r8, r7
 800b404:	dc20      	bgt.n	800b448 <_dtoa_r+0x960>
 800b406:	469b      	mov	fp, r3
 800b408:	9b07      	ldr	r3, [sp, #28]
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	dd1e      	ble.n	800b44c <_dtoa_r+0x964>
 800b40e:	f1bb 0f00 	cmp.w	fp, #0
 800b412:	f47f adb1 	bne.w	800af78 <_dtoa_r+0x490>
 800b416:	4621      	mov	r1, r4
 800b418:	465b      	mov	r3, fp
 800b41a:	2205      	movs	r2, #5
 800b41c:	4648      	mov	r0, r9
 800b41e:	f000 fa95 	bl	800b94c <__multadd>
 800b422:	4601      	mov	r1, r0
 800b424:	4604      	mov	r4, r0
 800b426:	9802      	ldr	r0, [sp, #8]
 800b428:	f000 fca0 	bl	800bd6c <__mcmp>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	f77f ada3 	ble.w	800af78 <_dtoa_r+0x490>
 800b432:	4656      	mov	r6, sl
 800b434:	2331      	movs	r3, #49	@ 0x31
 800b436:	f806 3b01 	strb.w	r3, [r6], #1
 800b43a:	f108 0801 	add.w	r8, r8, #1
 800b43e:	e59f      	b.n	800af80 <_dtoa_r+0x498>
 800b440:	9c03      	ldr	r4, [sp, #12]
 800b442:	46b8      	mov	r8, r7
 800b444:	4625      	mov	r5, r4
 800b446:	e7f4      	b.n	800b432 <_dtoa_r+0x94a>
 800b448:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f000 8101 	beq.w	800b656 <_dtoa_r+0xb6e>
 800b454:	2e00      	cmp	r6, #0
 800b456:	dd05      	ble.n	800b464 <_dtoa_r+0x97c>
 800b458:	4629      	mov	r1, r5
 800b45a:	4632      	mov	r2, r6
 800b45c:	4648      	mov	r0, r9
 800b45e:	f000 fc19 	bl	800bc94 <__lshift>
 800b462:	4605      	mov	r5, r0
 800b464:	9b08      	ldr	r3, [sp, #32]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d05c      	beq.n	800b524 <_dtoa_r+0xa3c>
 800b46a:	6869      	ldr	r1, [r5, #4]
 800b46c:	4648      	mov	r0, r9
 800b46e:	f000 fa0b 	bl	800b888 <_Balloc>
 800b472:	4606      	mov	r6, r0
 800b474:	b928      	cbnz	r0, 800b482 <_dtoa_r+0x99a>
 800b476:	4b82      	ldr	r3, [pc, #520]	@ (800b680 <_dtoa_r+0xb98>)
 800b478:	4602      	mov	r2, r0
 800b47a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b47e:	f7ff bb4a 	b.w	800ab16 <_dtoa_r+0x2e>
 800b482:	692a      	ldr	r2, [r5, #16]
 800b484:	3202      	adds	r2, #2
 800b486:	0092      	lsls	r2, r2, #2
 800b488:	f105 010c 	add.w	r1, r5, #12
 800b48c:	300c      	adds	r0, #12
 800b48e:	f001 f969 	bl	800c764 <memcpy>
 800b492:	2201      	movs	r2, #1
 800b494:	4631      	mov	r1, r6
 800b496:	4648      	mov	r0, r9
 800b498:	f000 fbfc 	bl	800bc94 <__lshift>
 800b49c:	f10a 0301 	add.w	r3, sl, #1
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	eb0a 030b 	add.w	r3, sl, fp
 800b4a6:	9308      	str	r3, [sp, #32]
 800b4a8:	9b04      	ldr	r3, [sp, #16]
 800b4aa:	f003 0301 	and.w	r3, r3, #1
 800b4ae:	462f      	mov	r7, r5
 800b4b0:	9306      	str	r3, [sp, #24]
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	9b00      	ldr	r3, [sp, #0]
 800b4b6:	9802      	ldr	r0, [sp, #8]
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4be:	f7ff fa88 	bl	800a9d2 <quorem>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	3330      	adds	r3, #48	@ 0x30
 800b4c6:	9003      	str	r0, [sp, #12]
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	9802      	ldr	r0, [sp, #8]
 800b4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ce:	f000 fc4d 	bl	800bd6c <__mcmp>
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	9004      	str	r0, [sp, #16]
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4648      	mov	r0, r9
 800b4da:	f000 fc63 	bl	800bda4 <__mdiff>
 800b4de:	68c2      	ldr	r2, [r0, #12]
 800b4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	bb02      	cbnz	r2, 800b528 <_dtoa_r+0xa40>
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	9802      	ldr	r0, [sp, #8]
 800b4ea:	f000 fc3f 	bl	800bd6c <__mcmp>
 800b4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4648      	mov	r0, r9
 800b4f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4fa:	f000 fa05 	bl	800b908 <_Bfree>
 800b4fe:	9b07      	ldr	r3, [sp, #28]
 800b500:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b502:	9e00      	ldr	r6, [sp, #0]
 800b504:	ea42 0103 	orr.w	r1, r2, r3
 800b508:	9b06      	ldr	r3, [sp, #24]
 800b50a:	4319      	orrs	r1, r3
 800b50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b50e:	d10d      	bne.n	800b52c <_dtoa_r+0xa44>
 800b510:	2b39      	cmp	r3, #57	@ 0x39
 800b512:	d027      	beq.n	800b564 <_dtoa_r+0xa7c>
 800b514:	9a04      	ldr	r2, [sp, #16]
 800b516:	2a00      	cmp	r2, #0
 800b518:	dd01      	ble.n	800b51e <_dtoa_r+0xa36>
 800b51a:	9b03      	ldr	r3, [sp, #12]
 800b51c:	3331      	adds	r3, #49	@ 0x31
 800b51e:	f88b 3000 	strb.w	r3, [fp]
 800b522:	e52e      	b.n	800af82 <_dtoa_r+0x49a>
 800b524:	4628      	mov	r0, r5
 800b526:	e7b9      	b.n	800b49c <_dtoa_r+0x9b4>
 800b528:	2201      	movs	r2, #1
 800b52a:	e7e2      	b.n	800b4f2 <_dtoa_r+0xa0a>
 800b52c:	9904      	ldr	r1, [sp, #16]
 800b52e:	2900      	cmp	r1, #0
 800b530:	db04      	blt.n	800b53c <_dtoa_r+0xa54>
 800b532:	9807      	ldr	r0, [sp, #28]
 800b534:	4301      	orrs	r1, r0
 800b536:	9806      	ldr	r0, [sp, #24]
 800b538:	4301      	orrs	r1, r0
 800b53a:	d120      	bne.n	800b57e <_dtoa_r+0xa96>
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	ddee      	ble.n	800b51e <_dtoa_r+0xa36>
 800b540:	9902      	ldr	r1, [sp, #8]
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	2201      	movs	r2, #1
 800b546:	4648      	mov	r0, r9
 800b548:	f000 fba4 	bl	800bc94 <__lshift>
 800b54c:	4621      	mov	r1, r4
 800b54e:	9002      	str	r0, [sp, #8]
 800b550:	f000 fc0c 	bl	800bd6c <__mcmp>
 800b554:	2800      	cmp	r0, #0
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	dc02      	bgt.n	800b560 <_dtoa_r+0xa78>
 800b55a:	d1e0      	bne.n	800b51e <_dtoa_r+0xa36>
 800b55c:	07da      	lsls	r2, r3, #31
 800b55e:	d5de      	bpl.n	800b51e <_dtoa_r+0xa36>
 800b560:	2b39      	cmp	r3, #57	@ 0x39
 800b562:	d1da      	bne.n	800b51a <_dtoa_r+0xa32>
 800b564:	2339      	movs	r3, #57	@ 0x39
 800b566:	f88b 3000 	strb.w	r3, [fp]
 800b56a:	4633      	mov	r3, r6
 800b56c:	461e      	mov	r6, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b574:	2a39      	cmp	r2, #57	@ 0x39
 800b576:	d04e      	beq.n	800b616 <_dtoa_r+0xb2e>
 800b578:	3201      	adds	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	e501      	b.n	800af82 <_dtoa_r+0x49a>
 800b57e:	2a00      	cmp	r2, #0
 800b580:	dd03      	ble.n	800b58a <_dtoa_r+0xaa2>
 800b582:	2b39      	cmp	r3, #57	@ 0x39
 800b584:	d0ee      	beq.n	800b564 <_dtoa_r+0xa7c>
 800b586:	3301      	adds	r3, #1
 800b588:	e7c9      	b.n	800b51e <_dtoa_r+0xa36>
 800b58a:	9a00      	ldr	r2, [sp, #0]
 800b58c:	9908      	ldr	r1, [sp, #32]
 800b58e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b592:	428a      	cmp	r2, r1
 800b594:	d028      	beq.n	800b5e8 <_dtoa_r+0xb00>
 800b596:	9902      	ldr	r1, [sp, #8]
 800b598:	2300      	movs	r3, #0
 800b59a:	220a      	movs	r2, #10
 800b59c:	4648      	mov	r0, r9
 800b59e:	f000 f9d5 	bl	800b94c <__multadd>
 800b5a2:	42af      	cmp	r7, r5
 800b5a4:	9002      	str	r0, [sp, #8]
 800b5a6:	f04f 0300 	mov.w	r3, #0
 800b5aa:	f04f 020a 	mov.w	r2, #10
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	4648      	mov	r0, r9
 800b5b2:	d107      	bne.n	800b5c4 <_dtoa_r+0xadc>
 800b5b4:	f000 f9ca 	bl	800b94c <__multadd>
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	e777      	b.n	800b4b4 <_dtoa_r+0x9cc>
 800b5c4:	f000 f9c2 	bl	800b94c <__multadd>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	220a      	movs	r2, #10
 800b5d0:	4648      	mov	r0, r9
 800b5d2:	f000 f9bb 	bl	800b94c <__multadd>
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	e7f0      	b.n	800b5bc <_dtoa_r+0xad4>
 800b5da:	f1bb 0f00 	cmp.w	fp, #0
 800b5de:	bfcc      	ite	gt
 800b5e0:	465e      	movgt	r6, fp
 800b5e2:	2601      	movle	r6, #1
 800b5e4:	4456      	add	r6, sl
 800b5e6:	2700      	movs	r7, #0
 800b5e8:	9902      	ldr	r1, [sp, #8]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	4648      	mov	r0, r9
 800b5f0:	f000 fb50 	bl	800bc94 <__lshift>
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	9002      	str	r0, [sp, #8]
 800b5f8:	f000 fbb8 	bl	800bd6c <__mcmp>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	dcb4      	bgt.n	800b56a <_dtoa_r+0xa82>
 800b600:	d102      	bne.n	800b608 <_dtoa_r+0xb20>
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	07db      	lsls	r3, r3, #31
 800b606:	d4b0      	bmi.n	800b56a <_dtoa_r+0xa82>
 800b608:	4633      	mov	r3, r6
 800b60a:	461e      	mov	r6, r3
 800b60c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b610:	2a30      	cmp	r2, #48	@ 0x30
 800b612:	d0fa      	beq.n	800b60a <_dtoa_r+0xb22>
 800b614:	e4b5      	b.n	800af82 <_dtoa_r+0x49a>
 800b616:	459a      	cmp	sl, r3
 800b618:	d1a8      	bne.n	800b56c <_dtoa_r+0xa84>
 800b61a:	2331      	movs	r3, #49	@ 0x31
 800b61c:	f108 0801 	add.w	r8, r8, #1
 800b620:	f88a 3000 	strb.w	r3, [sl]
 800b624:	e4ad      	b.n	800af82 <_dtoa_r+0x49a>
 800b626:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b628:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b684 <_dtoa_r+0xb9c>
 800b62c:	b11b      	cbz	r3, 800b636 <_dtoa_r+0xb4e>
 800b62e:	f10a 0308 	add.w	r3, sl, #8
 800b632:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	4650      	mov	r0, sl
 800b638:	b017      	add	sp, #92	@ 0x5c
 800b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63e:	9b07      	ldr	r3, [sp, #28]
 800b640:	2b01      	cmp	r3, #1
 800b642:	f77f ae2e 	ble.w	800b2a2 <_dtoa_r+0x7ba>
 800b646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b648:	9308      	str	r3, [sp, #32]
 800b64a:	2001      	movs	r0, #1
 800b64c:	e64d      	b.n	800b2ea <_dtoa_r+0x802>
 800b64e:	f1bb 0f00 	cmp.w	fp, #0
 800b652:	f77f aed9 	ble.w	800b408 <_dtoa_r+0x920>
 800b656:	4656      	mov	r6, sl
 800b658:	9802      	ldr	r0, [sp, #8]
 800b65a:	4621      	mov	r1, r4
 800b65c:	f7ff f9b9 	bl	800a9d2 <quorem>
 800b660:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b664:	f806 3b01 	strb.w	r3, [r6], #1
 800b668:	eba6 020a 	sub.w	r2, r6, sl
 800b66c:	4593      	cmp	fp, r2
 800b66e:	ddb4      	ble.n	800b5da <_dtoa_r+0xaf2>
 800b670:	9902      	ldr	r1, [sp, #8]
 800b672:	2300      	movs	r3, #0
 800b674:	220a      	movs	r2, #10
 800b676:	4648      	mov	r0, r9
 800b678:	f000 f968 	bl	800b94c <__multadd>
 800b67c:	9002      	str	r0, [sp, #8]
 800b67e:	e7eb      	b.n	800b658 <_dtoa_r+0xb70>
 800b680:	0800cf84 	.word	0x0800cf84
 800b684:	0800cf08 	.word	0x0800cf08

0800b688 <_free_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4605      	mov	r5, r0
 800b68c:	2900      	cmp	r1, #0
 800b68e:	d041      	beq.n	800b714 <_free_r+0x8c>
 800b690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b694:	1f0c      	subs	r4, r1, #4
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfb8      	it	lt
 800b69a:	18e4      	addlt	r4, r4, r3
 800b69c:	f000 f8e8 	bl	800b870 <__malloc_lock>
 800b6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b718 <_free_r+0x90>)
 800b6a2:	6813      	ldr	r3, [r2, #0]
 800b6a4:	b933      	cbnz	r3, 800b6b4 <_free_r+0x2c>
 800b6a6:	6063      	str	r3, [r4, #4]
 800b6a8:	6014      	str	r4, [r2, #0]
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6b0:	f000 b8e4 	b.w	800b87c <__malloc_unlock>
 800b6b4:	42a3      	cmp	r3, r4
 800b6b6:	d908      	bls.n	800b6ca <_free_r+0x42>
 800b6b8:	6820      	ldr	r0, [r4, #0]
 800b6ba:	1821      	adds	r1, r4, r0
 800b6bc:	428b      	cmp	r3, r1
 800b6be:	bf01      	itttt	eq
 800b6c0:	6819      	ldreq	r1, [r3, #0]
 800b6c2:	685b      	ldreq	r3, [r3, #4]
 800b6c4:	1809      	addeq	r1, r1, r0
 800b6c6:	6021      	streq	r1, [r4, #0]
 800b6c8:	e7ed      	b.n	800b6a6 <_free_r+0x1e>
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	b10b      	cbz	r3, 800b6d4 <_free_r+0x4c>
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	d9fa      	bls.n	800b6ca <_free_r+0x42>
 800b6d4:	6811      	ldr	r1, [r2, #0]
 800b6d6:	1850      	adds	r0, r2, r1
 800b6d8:	42a0      	cmp	r0, r4
 800b6da:	d10b      	bne.n	800b6f4 <_free_r+0x6c>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	4401      	add	r1, r0
 800b6e0:	1850      	adds	r0, r2, r1
 800b6e2:	4283      	cmp	r3, r0
 800b6e4:	6011      	str	r1, [r2, #0]
 800b6e6:	d1e0      	bne.n	800b6aa <_free_r+0x22>
 800b6e8:	6818      	ldr	r0, [r3, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	6053      	str	r3, [r2, #4]
 800b6ee:	4408      	add	r0, r1
 800b6f0:	6010      	str	r0, [r2, #0]
 800b6f2:	e7da      	b.n	800b6aa <_free_r+0x22>
 800b6f4:	d902      	bls.n	800b6fc <_free_r+0x74>
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	602b      	str	r3, [r5, #0]
 800b6fa:	e7d6      	b.n	800b6aa <_free_r+0x22>
 800b6fc:	6820      	ldr	r0, [r4, #0]
 800b6fe:	1821      	adds	r1, r4, r0
 800b700:	428b      	cmp	r3, r1
 800b702:	bf04      	itt	eq
 800b704:	6819      	ldreq	r1, [r3, #0]
 800b706:	685b      	ldreq	r3, [r3, #4]
 800b708:	6063      	str	r3, [r4, #4]
 800b70a:	bf04      	itt	eq
 800b70c:	1809      	addeq	r1, r1, r0
 800b70e:	6021      	streq	r1, [r4, #0]
 800b710:	6054      	str	r4, [r2, #4]
 800b712:	e7ca      	b.n	800b6aa <_free_r+0x22>
 800b714:	bd38      	pop	{r3, r4, r5, pc}
 800b716:	bf00      	nop
 800b718:	200006fc 	.word	0x200006fc

0800b71c <malloc>:
 800b71c:	4b02      	ldr	r3, [pc, #8]	@ (800b728 <malloc+0xc>)
 800b71e:	4601      	mov	r1, r0
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f000 b825 	b.w	800b770 <_malloc_r>
 800b726:	bf00      	nop
 800b728:	2000001c 	.word	0x2000001c

0800b72c <sbrk_aligned>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	4e0f      	ldr	r6, [pc, #60]	@ (800b76c <sbrk_aligned+0x40>)
 800b730:	460c      	mov	r4, r1
 800b732:	6831      	ldr	r1, [r6, #0]
 800b734:	4605      	mov	r5, r0
 800b736:	b911      	cbnz	r1, 800b73e <sbrk_aligned+0x12>
 800b738:	f001 f804 	bl	800c744 <_sbrk_r>
 800b73c:	6030      	str	r0, [r6, #0]
 800b73e:	4621      	mov	r1, r4
 800b740:	4628      	mov	r0, r5
 800b742:	f000 ffff 	bl	800c744 <_sbrk_r>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d103      	bne.n	800b752 <sbrk_aligned+0x26>
 800b74a:	f04f 34ff 	mov.w	r4, #4294967295
 800b74e:	4620      	mov	r0, r4
 800b750:	bd70      	pop	{r4, r5, r6, pc}
 800b752:	1cc4      	adds	r4, r0, #3
 800b754:	f024 0403 	bic.w	r4, r4, #3
 800b758:	42a0      	cmp	r0, r4
 800b75a:	d0f8      	beq.n	800b74e <sbrk_aligned+0x22>
 800b75c:	1a21      	subs	r1, r4, r0
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 fff0 	bl	800c744 <_sbrk_r>
 800b764:	3001      	adds	r0, #1
 800b766:	d1f2      	bne.n	800b74e <sbrk_aligned+0x22>
 800b768:	e7ef      	b.n	800b74a <sbrk_aligned+0x1e>
 800b76a:	bf00      	nop
 800b76c:	200006f8 	.word	0x200006f8

0800b770 <_malloc_r>:
 800b770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b774:	1ccd      	adds	r5, r1, #3
 800b776:	f025 0503 	bic.w	r5, r5, #3
 800b77a:	3508      	adds	r5, #8
 800b77c:	2d0c      	cmp	r5, #12
 800b77e:	bf38      	it	cc
 800b780:	250c      	movcc	r5, #12
 800b782:	2d00      	cmp	r5, #0
 800b784:	4606      	mov	r6, r0
 800b786:	db01      	blt.n	800b78c <_malloc_r+0x1c>
 800b788:	42a9      	cmp	r1, r5
 800b78a:	d904      	bls.n	800b796 <_malloc_r+0x26>
 800b78c:	230c      	movs	r3, #12
 800b78e:	6033      	str	r3, [r6, #0]
 800b790:	2000      	movs	r0, #0
 800b792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b86c <_malloc_r+0xfc>
 800b79a:	f000 f869 	bl	800b870 <__malloc_lock>
 800b79e:	f8d8 3000 	ldr.w	r3, [r8]
 800b7a2:	461c      	mov	r4, r3
 800b7a4:	bb44      	cbnz	r4, 800b7f8 <_malloc_r+0x88>
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f7ff ffbf 	bl	800b72c <sbrk_aligned>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	d158      	bne.n	800b866 <_malloc_r+0xf6>
 800b7b4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7b8:	4627      	mov	r7, r4
 800b7ba:	2f00      	cmp	r7, #0
 800b7bc:	d143      	bne.n	800b846 <_malloc_r+0xd6>
 800b7be:	2c00      	cmp	r4, #0
 800b7c0:	d04b      	beq.n	800b85a <_malloc_r+0xea>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	eb04 0903 	add.w	r9, r4, r3
 800b7cc:	f000 ffba 	bl	800c744 <_sbrk_r>
 800b7d0:	4581      	cmp	r9, r0
 800b7d2:	d142      	bne.n	800b85a <_malloc_r+0xea>
 800b7d4:	6821      	ldr	r1, [r4, #0]
 800b7d6:	1a6d      	subs	r5, r5, r1
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7ff ffa6 	bl	800b72c <sbrk_aligned>
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d03a      	beq.n	800b85a <_malloc_r+0xea>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	442b      	add	r3, r5
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	bb62      	cbnz	r2, 800b84c <_malloc_r+0xdc>
 800b7f2:	f8c8 7000 	str.w	r7, [r8]
 800b7f6:	e00f      	b.n	800b818 <_malloc_r+0xa8>
 800b7f8:	6822      	ldr	r2, [r4, #0]
 800b7fa:	1b52      	subs	r2, r2, r5
 800b7fc:	d420      	bmi.n	800b840 <_malloc_r+0xd0>
 800b7fe:	2a0b      	cmp	r2, #11
 800b800:	d917      	bls.n	800b832 <_malloc_r+0xc2>
 800b802:	1961      	adds	r1, r4, r5
 800b804:	42a3      	cmp	r3, r4
 800b806:	6025      	str	r5, [r4, #0]
 800b808:	bf18      	it	ne
 800b80a:	6059      	strne	r1, [r3, #4]
 800b80c:	6863      	ldr	r3, [r4, #4]
 800b80e:	bf08      	it	eq
 800b810:	f8c8 1000 	streq.w	r1, [r8]
 800b814:	5162      	str	r2, [r4, r5]
 800b816:	604b      	str	r3, [r1, #4]
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 f82f 	bl	800b87c <__malloc_unlock>
 800b81e:	f104 000b 	add.w	r0, r4, #11
 800b822:	1d23      	adds	r3, r4, #4
 800b824:	f020 0007 	bic.w	r0, r0, #7
 800b828:	1ac2      	subs	r2, r0, r3
 800b82a:	bf1c      	itt	ne
 800b82c:	1a1b      	subne	r3, r3, r0
 800b82e:	50a3      	strne	r3, [r4, r2]
 800b830:	e7af      	b.n	800b792 <_malloc_r+0x22>
 800b832:	6862      	ldr	r2, [r4, #4]
 800b834:	42a3      	cmp	r3, r4
 800b836:	bf0c      	ite	eq
 800b838:	f8c8 2000 	streq.w	r2, [r8]
 800b83c:	605a      	strne	r2, [r3, #4]
 800b83e:	e7eb      	b.n	800b818 <_malloc_r+0xa8>
 800b840:	4623      	mov	r3, r4
 800b842:	6864      	ldr	r4, [r4, #4]
 800b844:	e7ae      	b.n	800b7a4 <_malloc_r+0x34>
 800b846:	463c      	mov	r4, r7
 800b848:	687f      	ldr	r7, [r7, #4]
 800b84a:	e7b6      	b.n	800b7ba <_malloc_r+0x4a>
 800b84c:	461a      	mov	r2, r3
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	42a3      	cmp	r3, r4
 800b852:	d1fb      	bne.n	800b84c <_malloc_r+0xdc>
 800b854:	2300      	movs	r3, #0
 800b856:	6053      	str	r3, [r2, #4]
 800b858:	e7de      	b.n	800b818 <_malloc_r+0xa8>
 800b85a:	230c      	movs	r3, #12
 800b85c:	6033      	str	r3, [r6, #0]
 800b85e:	4630      	mov	r0, r6
 800b860:	f000 f80c 	bl	800b87c <__malloc_unlock>
 800b864:	e794      	b.n	800b790 <_malloc_r+0x20>
 800b866:	6005      	str	r5, [r0, #0]
 800b868:	e7d6      	b.n	800b818 <_malloc_r+0xa8>
 800b86a:	bf00      	nop
 800b86c:	200006fc 	.word	0x200006fc

0800b870 <__malloc_lock>:
 800b870:	4801      	ldr	r0, [pc, #4]	@ (800b878 <__malloc_lock+0x8>)
 800b872:	f7ff b8ac 	b.w	800a9ce <__retarget_lock_acquire_recursive>
 800b876:	bf00      	nop
 800b878:	200006f4 	.word	0x200006f4

0800b87c <__malloc_unlock>:
 800b87c:	4801      	ldr	r0, [pc, #4]	@ (800b884 <__malloc_unlock+0x8>)
 800b87e:	f7ff b8a7 	b.w	800a9d0 <__retarget_lock_release_recursive>
 800b882:	bf00      	nop
 800b884:	200006f4 	.word	0x200006f4

0800b888 <_Balloc>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	69c6      	ldr	r6, [r0, #28]
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	b976      	cbnz	r6, 800b8b0 <_Balloc+0x28>
 800b892:	2010      	movs	r0, #16
 800b894:	f7ff ff42 	bl	800b71c <malloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	61e0      	str	r0, [r4, #28]
 800b89c:	b920      	cbnz	r0, 800b8a8 <_Balloc+0x20>
 800b89e:	4b18      	ldr	r3, [pc, #96]	@ (800b900 <_Balloc+0x78>)
 800b8a0:	4818      	ldr	r0, [pc, #96]	@ (800b904 <_Balloc+0x7c>)
 800b8a2:	216b      	movs	r1, #107	@ 0x6b
 800b8a4:	f000 ff6c 	bl	800c780 <__assert_func>
 800b8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ac:	6006      	str	r6, [r0, #0]
 800b8ae:	60c6      	str	r6, [r0, #12]
 800b8b0:	69e6      	ldr	r6, [r4, #28]
 800b8b2:	68f3      	ldr	r3, [r6, #12]
 800b8b4:	b183      	cbz	r3, 800b8d8 <_Balloc+0x50>
 800b8b6:	69e3      	ldr	r3, [r4, #28]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8be:	b9b8      	cbnz	r0, 800b8f0 <_Balloc+0x68>
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8c6:	1d72      	adds	r2, r6, #5
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 ff76 	bl	800c7bc <_calloc_r>
 800b8d0:	b160      	cbz	r0, 800b8ec <_Balloc+0x64>
 800b8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8d6:	e00e      	b.n	800b8f6 <_Balloc+0x6e>
 800b8d8:	2221      	movs	r2, #33	@ 0x21
 800b8da:	2104      	movs	r1, #4
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 ff6d 	bl	800c7bc <_calloc_r>
 800b8e2:	69e3      	ldr	r3, [r4, #28]
 800b8e4:	60f0      	str	r0, [r6, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <_Balloc+0x2e>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	6802      	ldr	r2, [r0, #0]
 800b8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8fc:	e7f7      	b.n	800b8ee <_Balloc+0x66>
 800b8fe:	bf00      	nop
 800b900:	0800cf15 	.word	0x0800cf15
 800b904:	0800cf95 	.word	0x0800cf95

0800b908 <_Bfree>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	69c6      	ldr	r6, [r0, #28]
 800b90c:	4605      	mov	r5, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b976      	cbnz	r6, 800b930 <_Bfree+0x28>
 800b912:	2010      	movs	r0, #16
 800b914:	f7ff ff02 	bl	800b71c <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	61e8      	str	r0, [r5, #28]
 800b91c:	b920      	cbnz	r0, 800b928 <_Bfree+0x20>
 800b91e:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <_Bfree+0x3c>)
 800b920:	4809      	ldr	r0, [pc, #36]	@ (800b948 <_Bfree+0x40>)
 800b922:	218f      	movs	r1, #143	@ 0x8f
 800b924:	f000 ff2c 	bl	800c780 <__assert_func>
 800b928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b92c:	6006      	str	r6, [r0, #0]
 800b92e:	60c6      	str	r6, [r0, #12]
 800b930:	b13c      	cbz	r4, 800b942 <_Bfree+0x3a>
 800b932:	69eb      	ldr	r3, [r5, #28]
 800b934:	6862      	ldr	r2, [r4, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b93c:	6021      	str	r1, [r4, #0]
 800b93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	0800cf15 	.word	0x0800cf15
 800b948:	0800cf95 	.word	0x0800cf95

0800b94c <__multadd>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	690d      	ldr	r5, [r1, #16]
 800b952:	4607      	mov	r7, r0
 800b954:	460c      	mov	r4, r1
 800b956:	461e      	mov	r6, r3
 800b958:	f101 0c14 	add.w	ip, r1, #20
 800b95c:	2000      	movs	r0, #0
 800b95e:	f8dc 3000 	ldr.w	r3, [ip]
 800b962:	b299      	uxth	r1, r3
 800b964:	fb02 6101 	mla	r1, r2, r1, r6
 800b968:	0c1e      	lsrs	r6, r3, #16
 800b96a:	0c0b      	lsrs	r3, r1, #16
 800b96c:	fb02 3306 	mla	r3, r2, r6, r3
 800b970:	b289      	uxth	r1, r1
 800b972:	3001      	adds	r0, #1
 800b974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b978:	4285      	cmp	r5, r0
 800b97a:	f84c 1b04 	str.w	r1, [ip], #4
 800b97e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b982:	dcec      	bgt.n	800b95e <__multadd+0x12>
 800b984:	b30e      	cbz	r6, 800b9ca <__multadd+0x7e>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dc19      	bgt.n	800b9c0 <__multadd+0x74>
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4638      	mov	r0, r7
 800b990:	3101      	adds	r1, #1
 800b992:	f7ff ff79 	bl	800b888 <_Balloc>
 800b996:	4680      	mov	r8, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <__multadd+0x5a>
 800b99a:	4602      	mov	r2, r0
 800b99c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d0 <__multadd+0x84>)
 800b99e:	480d      	ldr	r0, [pc, #52]	@ (800b9d4 <__multadd+0x88>)
 800b9a0:	21ba      	movs	r1, #186	@ 0xba
 800b9a2:	f000 feed 	bl	800c780 <__assert_func>
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	3202      	adds	r2, #2
 800b9aa:	f104 010c 	add.w	r1, r4, #12
 800b9ae:	0092      	lsls	r2, r2, #2
 800b9b0:	300c      	adds	r0, #12
 800b9b2:	f000 fed7 	bl	800c764 <memcpy>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ffa5 	bl	800b908 <_Bfree>
 800b9be:	4644      	mov	r4, r8
 800b9c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	615e      	str	r6, [r3, #20]
 800b9c8:	6125      	str	r5, [r4, #16]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	0800cf84 	.word	0x0800cf84
 800b9d4:	0800cf95 	.word	0x0800cf95

0800b9d8 <__hi0bits>:
 800b9d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9dc:	4603      	mov	r3, r0
 800b9de:	bf36      	itet	cc
 800b9e0:	0403      	lslcc	r3, r0, #16
 800b9e2:	2000      	movcs	r0, #0
 800b9e4:	2010      	movcc	r0, #16
 800b9e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ea:	bf3c      	itt	cc
 800b9ec:	021b      	lslcc	r3, r3, #8
 800b9ee:	3008      	addcc	r0, #8
 800b9f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9f4:	bf3c      	itt	cc
 800b9f6:	011b      	lslcc	r3, r3, #4
 800b9f8:	3004      	addcc	r0, #4
 800b9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9fe:	bf3c      	itt	cc
 800ba00:	009b      	lslcc	r3, r3, #2
 800ba02:	3002      	addcc	r0, #2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	db05      	blt.n	800ba14 <__hi0bits+0x3c>
 800ba08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba0c:	f100 0001 	add.w	r0, r0, #1
 800ba10:	bf08      	it	eq
 800ba12:	2020      	moveq	r0, #32
 800ba14:	4770      	bx	lr

0800ba16 <__lo0bits>:
 800ba16:	6803      	ldr	r3, [r0, #0]
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f013 0007 	ands.w	r0, r3, #7
 800ba1e:	d00b      	beq.n	800ba38 <__lo0bits+0x22>
 800ba20:	07d9      	lsls	r1, r3, #31
 800ba22:	d421      	bmi.n	800ba68 <__lo0bits+0x52>
 800ba24:	0798      	lsls	r0, r3, #30
 800ba26:	bf49      	itett	mi
 800ba28:	085b      	lsrmi	r3, r3, #1
 800ba2a:	089b      	lsrpl	r3, r3, #2
 800ba2c:	2001      	movmi	r0, #1
 800ba2e:	6013      	strmi	r3, [r2, #0]
 800ba30:	bf5c      	itt	pl
 800ba32:	6013      	strpl	r3, [r2, #0]
 800ba34:	2002      	movpl	r0, #2
 800ba36:	4770      	bx	lr
 800ba38:	b299      	uxth	r1, r3
 800ba3a:	b909      	cbnz	r1, 800ba40 <__lo0bits+0x2a>
 800ba3c:	0c1b      	lsrs	r3, r3, #16
 800ba3e:	2010      	movs	r0, #16
 800ba40:	b2d9      	uxtb	r1, r3
 800ba42:	b909      	cbnz	r1, 800ba48 <__lo0bits+0x32>
 800ba44:	3008      	adds	r0, #8
 800ba46:	0a1b      	lsrs	r3, r3, #8
 800ba48:	0719      	lsls	r1, r3, #28
 800ba4a:	bf04      	itt	eq
 800ba4c:	091b      	lsreq	r3, r3, #4
 800ba4e:	3004      	addeq	r0, #4
 800ba50:	0799      	lsls	r1, r3, #30
 800ba52:	bf04      	itt	eq
 800ba54:	089b      	lsreq	r3, r3, #2
 800ba56:	3002      	addeq	r0, #2
 800ba58:	07d9      	lsls	r1, r3, #31
 800ba5a:	d403      	bmi.n	800ba64 <__lo0bits+0x4e>
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	f100 0001 	add.w	r0, r0, #1
 800ba62:	d003      	beq.n	800ba6c <__lo0bits+0x56>
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	4770      	bx	lr
 800ba68:	2000      	movs	r0, #0
 800ba6a:	4770      	bx	lr
 800ba6c:	2020      	movs	r0, #32
 800ba6e:	4770      	bx	lr

0800ba70 <__i2b>:
 800ba70:	b510      	push	{r4, lr}
 800ba72:	460c      	mov	r4, r1
 800ba74:	2101      	movs	r1, #1
 800ba76:	f7ff ff07 	bl	800b888 <_Balloc>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	b928      	cbnz	r0, 800ba8a <__i2b+0x1a>
 800ba7e:	4b05      	ldr	r3, [pc, #20]	@ (800ba94 <__i2b+0x24>)
 800ba80:	4805      	ldr	r0, [pc, #20]	@ (800ba98 <__i2b+0x28>)
 800ba82:	f240 1145 	movw	r1, #325	@ 0x145
 800ba86:	f000 fe7b 	bl	800c780 <__assert_func>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	6144      	str	r4, [r0, #20]
 800ba8e:	6103      	str	r3, [r0, #16]
 800ba90:	bd10      	pop	{r4, pc}
 800ba92:	bf00      	nop
 800ba94:	0800cf84 	.word	0x0800cf84
 800ba98:	0800cf95 	.word	0x0800cf95

0800ba9c <__multiply>:
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	4617      	mov	r7, r2
 800baa2:	690a      	ldr	r2, [r1, #16]
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	bfa8      	it	ge
 800baaa:	463b      	movge	r3, r7
 800baac:	4689      	mov	r9, r1
 800baae:	bfa4      	itt	ge
 800bab0:	460f      	movge	r7, r1
 800bab2:	4699      	movge	r9, r3
 800bab4:	693d      	ldr	r5, [r7, #16]
 800bab6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	eb05 060a 	add.w	r6, r5, sl
 800bac2:	42b3      	cmp	r3, r6
 800bac4:	b085      	sub	sp, #20
 800bac6:	bfb8      	it	lt
 800bac8:	3101      	addlt	r1, #1
 800baca:	f7ff fedd 	bl	800b888 <_Balloc>
 800bace:	b930      	cbnz	r0, 800bade <__multiply+0x42>
 800bad0:	4602      	mov	r2, r0
 800bad2:	4b41      	ldr	r3, [pc, #260]	@ (800bbd8 <__multiply+0x13c>)
 800bad4:	4841      	ldr	r0, [pc, #260]	@ (800bbdc <__multiply+0x140>)
 800bad6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bada:	f000 fe51 	bl	800c780 <__assert_func>
 800bade:	f100 0414 	add.w	r4, r0, #20
 800bae2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bae6:	4623      	mov	r3, r4
 800bae8:	2200      	movs	r2, #0
 800baea:	4573      	cmp	r3, lr
 800baec:	d320      	bcc.n	800bb30 <__multiply+0x94>
 800baee:	f107 0814 	add.w	r8, r7, #20
 800baf2:	f109 0114 	add.w	r1, r9, #20
 800baf6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bafa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bafe:	9302      	str	r3, [sp, #8]
 800bb00:	1beb      	subs	r3, r5, r7
 800bb02:	3b15      	subs	r3, #21
 800bb04:	f023 0303 	bic.w	r3, r3, #3
 800bb08:	3304      	adds	r3, #4
 800bb0a:	3715      	adds	r7, #21
 800bb0c:	42bd      	cmp	r5, r7
 800bb0e:	bf38      	it	cc
 800bb10:	2304      	movcc	r3, #4
 800bb12:	9301      	str	r3, [sp, #4]
 800bb14:	9b02      	ldr	r3, [sp, #8]
 800bb16:	9103      	str	r1, [sp, #12]
 800bb18:	428b      	cmp	r3, r1
 800bb1a:	d80c      	bhi.n	800bb36 <__multiply+0x9a>
 800bb1c:	2e00      	cmp	r6, #0
 800bb1e:	dd03      	ble.n	800bb28 <__multiply+0x8c>
 800bb20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d055      	beq.n	800bbd4 <__multiply+0x138>
 800bb28:	6106      	str	r6, [r0, #16]
 800bb2a:	b005      	add	sp, #20
 800bb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb30:	f843 2b04 	str.w	r2, [r3], #4
 800bb34:	e7d9      	b.n	800baea <__multiply+0x4e>
 800bb36:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb3a:	f1ba 0f00 	cmp.w	sl, #0
 800bb3e:	d01f      	beq.n	800bb80 <__multiply+0xe4>
 800bb40:	46c4      	mov	ip, r8
 800bb42:	46a1      	mov	r9, r4
 800bb44:	2700      	movs	r7, #0
 800bb46:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb4a:	f8d9 3000 	ldr.w	r3, [r9]
 800bb4e:	fa1f fb82 	uxth.w	fp, r2
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb58:	443b      	add	r3, r7
 800bb5a:	f8d9 7000 	ldr.w	r7, [r9]
 800bb5e:	0c12      	lsrs	r2, r2, #16
 800bb60:	0c3f      	lsrs	r7, r7, #16
 800bb62:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb70:	4565      	cmp	r5, ip
 800bb72:	f849 3b04 	str.w	r3, [r9], #4
 800bb76:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb7a:	d8e4      	bhi.n	800bb46 <__multiply+0xaa>
 800bb7c:	9b01      	ldr	r3, [sp, #4]
 800bb7e:	50e7      	str	r7, [r4, r3]
 800bb80:	9b03      	ldr	r3, [sp, #12]
 800bb82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb86:	3104      	adds	r1, #4
 800bb88:	f1b9 0f00 	cmp.w	r9, #0
 800bb8c:	d020      	beq.n	800bbd0 <__multiply+0x134>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	4647      	mov	r7, r8
 800bb92:	46a4      	mov	ip, r4
 800bb94:	f04f 0a00 	mov.w	sl, #0
 800bb98:	f8b7 b000 	ldrh.w	fp, [r7]
 800bb9c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bba0:	fb09 220b 	mla	r2, r9, fp, r2
 800bba4:	4452      	add	r2, sl
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbac:	f84c 3b04 	str.w	r3, [ip], #4
 800bbb0:	f857 3b04 	ldr.w	r3, [r7], #4
 800bbb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbb8:	f8bc 3000 	ldrh.w	r3, [ip]
 800bbbc:	fb09 330a 	mla	r3, r9, sl, r3
 800bbc0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bbc4:	42bd      	cmp	r5, r7
 800bbc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbca:	d8e5      	bhi.n	800bb98 <__multiply+0xfc>
 800bbcc:	9a01      	ldr	r2, [sp, #4]
 800bbce:	50a3      	str	r3, [r4, r2]
 800bbd0:	3404      	adds	r4, #4
 800bbd2:	e79f      	b.n	800bb14 <__multiply+0x78>
 800bbd4:	3e01      	subs	r6, #1
 800bbd6:	e7a1      	b.n	800bb1c <__multiply+0x80>
 800bbd8:	0800cf84 	.word	0x0800cf84
 800bbdc:	0800cf95 	.word	0x0800cf95

0800bbe0 <__pow5mult>:
 800bbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe4:	4615      	mov	r5, r2
 800bbe6:	f012 0203 	ands.w	r2, r2, #3
 800bbea:	4607      	mov	r7, r0
 800bbec:	460e      	mov	r6, r1
 800bbee:	d007      	beq.n	800bc00 <__pow5mult+0x20>
 800bbf0:	4c25      	ldr	r4, [pc, #148]	@ (800bc88 <__pow5mult+0xa8>)
 800bbf2:	3a01      	subs	r2, #1
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbfa:	f7ff fea7 	bl	800b94c <__multadd>
 800bbfe:	4606      	mov	r6, r0
 800bc00:	10ad      	asrs	r5, r5, #2
 800bc02:	d03d      	beq.n	800bc80 <__pow5mult+0xa0>
 800bc04:	69fc      	ldr	r4, [r7, #28]
 800bc06:	b97c      	cbnz	r4, 800bc28 <__pow5mult+0x48>
 800bc08:	2010      	movs	r0, #16
 800bc0a:	f7ff fd87 	bl	800b71c <malloc>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	61f8      	str	r0, [r7, #28]
 800bc12:	b928      	cbnz	r0, 800bc20 <__pow5mult+0x40>
 800bc14:	4b1d      	ldr	r3, [pc, #116]	@ (800bc8c <__pow5mult+0xac>)
 800bc16:	481e      	ldr	r0, [pc, #120]	@ (800bc90 <__pow5mult+0xb0>)
 800bc18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc1c:	f000 fdb0 	bl	800c780 <__assert_func>
 800bc20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc24:	6004      	str	r4, [r0, #0]
 800bc26:	60c4      	str	r4, [r0, #12]
 800bc28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc30:	b94c      	cbnz	r4, 800bc46 <__pow5mult+0x66>
 800bc32:	f240 2171 	movw	r1, #625	@ 0x271
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7ff ff1a 	bl	800ba70 <__i2b>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc42:	4604      	mov	r4, r0
 800bc44:	6003      	str	r3, [r0, #0]
 800bc46:	f04f 0900 	mov.w	r9, #0
 800bc4a:	07eb      	lsls	r3, r5, #31
 800bc4c:	d50a      	bpl.n	800bc64 <__pow5mult+0x84>
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4622      	mov	r2, r4
 800bc52:	4638      	mov	r0, r7
 800bc54:	f7ff ff22 	bl	800ba9c <__multiply>
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff fe53 	bl	800b908 <_Bfree>
 800bc62:	4646      	mov	r6, r8
 800bc64:	106d      	asrs	r5, r5, #1
 800bc66:	d00b      	beq.n	800bc80 <__pow5mult+0xa0>
 800bc68:	6820      	ldr	r0, [r4, #0]
 800bc6a:	b938      	cbnz	r0, 800bc7c <__pow5mult+0x9c>
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4638      	mov	r0, r7
 800bc72:	f7ff ff13 	bl	800ba9c <__multiply>
 800bc76:	6020      	str	r0, [r4, #0]
 800bc78:	f8c0 9000 	str.w	r9, [r0]
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	e7e4      	b.n	800bc4a <__pow5mult+0x6a>
 800bc80:	4630      	mov	r0, r6
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc86:	bf00      	nop
 800bc88:	0800d048 	.word	0x0800d048
 800bc8c:	0800cf15 	.word	0x0800cf15
 800bc90:	0800cf95 	.word	0x0800cf95

0800bc94 <__lshift>:
 800bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc98:	460c      	mov	r4, r1
 800bc9a:	6849      	ldr	r1, [r1, #4]
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bca2:	68a3      	ldr	r3, [r4, #8]
 800bca4:	4607      	mov	r7, r0
 800bca6:	4691      	mov	r9, r2
 800bca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcac:	f108 0601 	add.w	r6, r8, #1
 800bcb0:	42b3      	cmp	r3, r6
 800bcb2:	db0b      	blt.n	800bccc <__lshift+0x38>
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	f7ff fde7 	bl	800b888 <_Balloc>
 800bcba:	4605      	mov	r5, r0
 800bcbc:	b948      	cbnz	r0, 800bcd2 <__lshift+0x3e>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b28      	ldr	r3, [pc, #160]	@ (800bd64 <__lshift+0xd0>)
 800bcc2:	4829      	ldr	r0, [pc, #164]	@ (800bd68 <__lshift+0xd4>)
 800bcc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcc8:	f000 fd5a 	bl	800c780 <__assert_func>
 800bccc:	3101      	adds	r1, #1
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	e7ee      	b.n	800bcb0 <__lshift+0x1c>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f100 0114 	add.w	r1, r0, #20
 800bcd8:	f100 0210 	add.w	r2, r0, #16
 800bcdc:	4618      	mov	r0, r3
 800bcde:	4553      	cmp	r3, sl
 800bce0:	db33      	blt.n	800bd4a <__lshift+0xb6>
 800bce2:	6920      	ldr	r0, [r4, #16]
 800bce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bce8:	f104 0314 	add.w	r3, r4, #20
 800bcec:	f019 091f 	ands.w	r9, r9, #31
 800bcf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcf8:	d02b      	beq.n	800bd52 <__lshift+0xbe>
 800bcfa:	f1c9 0e20 	rsb	lr, r9, #32
 800bcfe:	468a      	mov	sl, r1
 800bd00:	2200      	movs	r2, #0
 800bd02:	6818      	ldr	r0, [r3, #0]
 800bd04:	fa00 f009 	lsl.w	r0, r0, r9
 800bd08:	4310      	orrs	r0, r2
 800bd0a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd12:	459c      	cmp	ip, r3
 800bd14:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd18:	d8f3      	bhi.n	800bd02 <__lshift+0x6e>
 800bd1a:	ebac 0304 	sub.w	r3, ip, r4
 800bd1e:	3b15      	subs	r3, #21
 800bd20:	f023 0303 	bic.w	r3, r3, #3
 800bd24:	3304      	adds	r3, #4
 800bd26:	f104 0015 	add.w	r0, r4, #21
 800bd2a:	4560      	cmp	r0, ip
 800bd2c:	bf88      	it	hi
 800bd2e:	2304      	movhi	r3, #4
 800bd30:	50ca      	str	r2, [r1, r3]
 800bd32:	b10a      	cbz	r2, 800bd38 <__lshift+0xa4>
 800bd34:	f108 0602 	add.w	r6, r8, #2
 800bd38:	3e01      	subs	r6, #1
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	612e      	str	r6, [r5, #16]
 800bd3e:	4621      	mov	r1, r4
 800bd40:	f7ff fde2 	bl	800b908 <_Bfree>
 800bd44:	4628      	mov	r0, r5
 800bd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd4e:	3301      	adds	r3, #1
 800bd50:	e7c5      	b.n	800bcde <__lshift+0x4a>
 800bd52:	3904      	subs	r1, #4
 800bd54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd58:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd5c:	459c      	cmp	ip, r3
 800bd5e:	d8f9      	bhi.n	800bd54 <__lshift+0xc0>
 800bd60:	e7ea      	b.n	800bd38 <__lshift+0xa4>
 800bd62:	bf00      	nop
 800bd64:	0800cf84 	.word	0x0800cf84
 800bd68:	0800cf95 	.word	0x0800cf95

0800bd6c <__mcmp>:
 800bd6c:	690a      	ldr	r2, [r1, #16]
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6900      	ldr	r0, [r0, #16]
 800bd72:	1a80      	subs	r0, r0, r2
 800bd74:	b530      	push	{r4, r5, lr}
 800bd76:	d10e      	bne.n	800bd96 <__mcmp+0x2a>
 800bd78:	3314      	adds	r3, #20
 800bd7a:	3114      	adds	r1, #20
 800bd7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd8c:	4295      	cmp	r5, r2
 800bd8e:	d003      	beq.n	800bd98 <__mcmp+0x2c>
 800bd90:	d205      	bcs.n	800bd9e <__mcmp+0x32>
 800bd92:	f04f 30ff 	mov.w	r0, #4294967295
 800bd96:	bd30      	pop	{r4, r5, pc}
 800bd98:	42a3      	cmp	r3, r4
 800bd9a:	d3f3      	bcc.n	800bd84 <__mcmp+0x18>
 800bd9c:	e7fb      	b.n	800bd96 <__mcmp+0x2a>
 800bd9e:	2001      	movs	r0, #1
 800bda0:	e7f9      	b.n	800bd96 <__mcmp+0x2a>
	...

0800bda4 <__mdiff>:
 800bda4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	4689      	mov	r9, r1
 800bdaa:	4606      	mov	r6, r0
 800bdac:	4611      	mov	r1, r2
 800bdae:	4648      	mov	r0, r9
 800bdb0:	4614      	mov	r4, r2
 800bdb2:	f7ff ffdb 	bl	800bd6c <__mcmp>
 800bdb6:	1e05      	subs	r5, r0, #0
 800bdb8:	d112      	bne.n	800bde0 <__mdiff+0x3c>
 800bdba:	4629      	mov	r1, r5
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7ff fd63 	bl	800b888 <_Balloc>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	b928      	cbnz	r0, 800bdd2 <__mdiff+0x2e>
 800bdc6:	4b3f      	ldr	r3, [pc, #252]	@ (800bec4 <__mdiff+0x120>)
 800bdc8:	f240 2137 	movw	r1, #567	@ 0x237
 800bdcc:	483e      	ldr	r0, [pc, #248]	@ (800bec8 <__mdiff+0x124>)
 800bdce:	f000 fcd7 	bl	800c780 <__assert_func>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdd8:	4610      	mov	r0, r2
 800bdda:	b003      	add	sp, #12
 800bddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde0:	bfbc      	itt	lt
 800bde2:	464b      	movlt	r3, r9
 800bde4:	46a1      	movlt	r9, r4
 800bde6:	4630      	mov	r0, r6
 800bde8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdec:	bfba      	itte	lt
 800bdee:	461c      	movlt	r4, r3
 800bdf0:	2501      	movlt	r5, #1
 800bdf2:	2500      	movge	r5, #0
 800bdf4:	f7ff fd48 	bl	800b888 <_Balloc>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	b918      	cbnz	r0, 800be04 <__mdiff+0x60>
 800bdfc:	4b31      	ldr	r3, [pc, #196]	@ (800bec4 <__mdiff+0x120>)
 800bdfe:	f240 2145 	movw	r1, #581	@ 0x245
 800be02:	e7e3      	b.n	800bdcc <__mdiff+0x28>
 800be04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be08:	6926      	ldr	r6, [r4, #16]
 800be0a:	60c5      	str	r5, [r0, #12]
 800be0c:	f109 0310 	add.w	r3, r9, #16
 800be10:	f109 0514 	add.w	r5, r9, #20
 800be14:	f104 0e14 	add.w	lr, r4, #20
 800be18:	f100 0b14 	add.w	fp, r0, #20
 800be1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	46d9      	mov	r9, fp
 800be28:	f04f 0c00 	mov.w	ip, #0
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	fa1f f38a 	uxth.w	r3, sl
 800be3c:	4619      	mov	r1, r3
 800be3e:	b283      	uxth	r3, r0
 800be40:	1acb      	subs	r3, r1, r3
 800be42:	0c00      	lsrs	r0, r0, #16
 800be44:	4463      	add	r3, ip
 800be46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be4e:	b29b      	uxth	r3, r3
 800be50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be54:	4576      	cmp	r6, lr
 800be56:	f849 3b04 	str.w	r3, [r9], #4
 800be5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be5e:	d8e5      	bhi.n	800be2c <__mdiff+0x88>
 800be60:	1b33      	subs	r3, r6, r4
 800be62:	3b15      	subs	r3, #21
 800be64:	f023 0303 	bic.w	r3, r3, #3
 800be68:	3415      	adds	r4, #21
 800be6a:	3304      	adds	r3, #4
 800be6c:	42a6      	cmp	r6, r4
 800be6e:	bf38      	it	cc
 800be70:	2304      	movcc	r3, #4
 800be72:	441d      	add	r5, r3
 800be74:	445b      	add	r3, fp
 800be76:	461e      	mov	r6, r3
 800be78:	462c      	mov	r4, r5
 800be7a:	4544      	cmp	r4, r8
 800be7c:	d30e      	bcc.n	800be9c <__mdiff+0xf8>
 800be7e:	f108 0103 	add.w	r1, r8, #3
 800be82:	1b49      	subs	r1, r1, r5
 800be84:	f021 0103 	bic.w	r1, r1, #3
 800be88:	3d03      	subs	r5, #3
 800be8a:	45a8      	cmp	r8, r5
 800be8c:	bf38      	it	cc
 800be8e:	2100      	movcc	r1, #0
 800be90:	440b      	add	r3, r1
 800be92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be96:	b191      	cbz	r1, 800bebe <__mdiff+0x11a>
 800be98:	6117      	str	r7, [r2, #16]
 800be9a:	e79d      	b.n	800bdd8 <__mdiff+0x34>
 800be9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bea0:	46e6      	mov	lr, ip
 800bea2:	0c08      	lsrs	r0, r1, #16
 800bea4:	fa1c fc81 	uxtah	ip, ip, r1
 800bea8:	4471      	add	r1, lr
 800beaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800beae:	b289      	uxth	r1, r1
 800beb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800beb4:	f846 1b04 	str.w	r1, [r6], #4
 800beb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bebc:	e7dd      	b.n	800be7a <__mdiff+0xd6>
 800bebe:	3f01      	subs	r7, #1
 800bec0:	e7e7      	b.n	800be92 <__mdiff+0xee>
 800bec2:	bf00      	nop
 800bec4:	0800cf84 	.word	0x0800cf84
 800bec8:	0800cf95 	.word	0x0800cf95

0800becc <__d2b>:
 800becc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bed0:	460f      	mov	r7, r1
 800bed2:	2101      	movs	r1, #1
 800bed4:	ec59 8b10 	vmov	r8, r9, d0
 800bed8:	4616      	mov	r6, r2
 800beda:	f7ff fcd5 	bl	800b888 <_Balloc>
 800bede:	4604      	mov	r4, r0
 800bee0:	b930      	cbnz	r0, 800bef0 <__d2b+0x24>
 800bee2:	4602      	mov	r2, r0
 800bee4:	4b23      	ldr	r3, [pc, #140]	@ (800bf74 <__d2b+0xa8>)
 800bee6:	4824      	ldr	r0, [pc, #144]	@ (800bf78 <__d2b+0xac>)
 800bee8:	f240 310f 	movw	r1, #783	@ 0x30f
 800beec:	f000 fc48 	bl	800c780 <__assert_func>
 800bef0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bef8:	b10d      	cbz	r5, 800befe <__d2b+0x32>
 800befa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800befe:	9301      	str	r3, [sp, #4]
 800bf00:	f1b8 0300 	subs.w	r3, r8, #0
 800bf04:	d023      	beq.n	800bf4e <__d2b+0x82>
 800bf06:	4668      	mov	r0, sp
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	f7ff fd84 	bl	800ba16 <__lo0bits>
 800bf0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf12:	b1d0      	cbz	r0, 800bf4a <__d2b+0x7e>
 800bf14:	f1c0 0320 	rsb	r3, r0, #32
 800bf18:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	40c2      	lsrs	r2, r0
 800bf20:	6163      	str	r3, [r4, #20]
 800bf22:	9201      	str	r2, [sp, #4]
 800bf24:	9b01      	ldr	r3, [sp, #4]
 800bf26:	61a3      	str	r3, [r4, #24]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	bf0c      	ite	eq
 800bf2c:	2201      	moveq	r2, #1
 800bf2e:	2202      	movne	r2, #2
 800bf30:	6122      	str	r2, [r4, #16]
 800bf32:	b1a5      	cbz	r5, 800bf5e <__d2b+0x92>
 800bf34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf38:	4405      	add	r5, r0
 800bf3a:	603d      	str	r5, [r7, #0]
 800bf3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf40:	6030      	str	r0, [r6, #0]
 800bf42:	4620      	mov	r0, r4
 800bf44:	b003      	add	sp, #12
 800bf46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf4a:	6161      	str	r1, [r4, #20]
 800bf4c:	e7ea      	b.n	800bf24 <__d2b+0x58>
 800bf4e:	a801      	add	r0, sp, #4
 800bf50:	f7ff fd61 	bl	800ba16 <__lo0bits>
 800bf54:	9b01      	ldr	r3, [sp, #4]
 800bf56:	6163      	str	r3, [r4, #20]
 800bf58:	3020      	adds	r0, #32
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	e7e8      	b.n	800bf30 <__d2b+0x64>
 800bf5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf66:	6038      	str	r0, [r7, #0]
 800bf68:	6918      	ldr	r0, [r3, #16]
 800bf6a:	f7ff fd35 	bl	800b9d8 <__hi0bits>
 800bf6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf72:	e7e5      	b.n	800bf40 <__d2b+0x74>
 800bf74:	0800cf84 	.word	0x0800cf84
 800bf78:	0800cf95 	.word	0x0800cf95

0800bf7c <__ssputs_r>:
 800bf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf80:	688e      	ldr	r6, [r1, #8]
 800bf82:	461f      	mov	r7, r3
 800bf84:	42be      	cmp	r6, r7
 800bf86:	680b      	ldr	r3, [r1, #0]
 800bf88:	4682      	mov	sl, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	4690      	mov	r8, r2
 800bf8e:	d82d      	bhi.n	800bfec <__ssputs_r+0x70>
 800bf90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf98:	d026      	beq.n	800bfe8 <__ssputs_r+0x6c>
 800bf9a:	6965      	ldr	r5, [r4, #20]
 800bf9c:	6909      	ldr	r1, [r1, #16]
 800bf9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfa2:	eba3 0901 	sub.w	r9, r3, r1
 800bfa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfaa:	1c7b      	adds	r3, r7, #1
 800bfac:	444b      	add	r3, r9
 800bfae:	106d      	asrs	r5, r5, #1
 800bfb0:	429d      	cmp	r5, r3
 800bfb2:	bf38      	it	cc
 800bfb4:	461d      	movcc	r5, r3
 800bfb6:	0553      	lsls	r3, r2, #21
 800bfb8:	d527      	bpl.n	800c00a <__ssputs_r+0x8e>
 800bfba:	4629      	mov	r1, r5
 800bfbc:	f7ff fbd8 	bl	800b770 <_malloc_r>
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	b360      	cbz	r0, 800c01e <__ssputs_r+0xa2>
 800bfc4:	6921      	ldr	r1, [r4, #16]
 800bfc6:	464a      	mov	r2, r9
 800bfc8:	f000 fbcc 	bl	800c764 <memcpy>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	6126      	str	r6, [r4, #16]
 800bfda:	6165      	str	r5, [r4, #20]
 800bfdc:	444e      	add	r6, r9
 800bfde:	eba5 0509 	sub.w	r5, r5, r9
 800bfe2:	6026      	str	r6, [r4, #0]
 800bfe4:	60a5      	str	r5, [r4, #8]
 800bfe6:	463e      	mov	r6, r7
 800bfe8:	42be      	cmp	r6, r7
 800bfea:	d900      	bls.n	800bfee <__ssputs_r+0x72>
 800bfec:	463e      	mov	r6, r7
 800bfee:	6820      	ldr	r0, [r4, #0]
 800bff0:	4632      	mov	r2, r6
 800bff2:	4641      	mov	r1, r8
 800bff4:	f000 fb6a 	bl	800c6cc <memmove>
 800bff8:	68a3      	ldr	r3, [r4, #8]
 800bffa:	1b9b      	subs	r3, r3, r6
 800bffc:	60a3      	str	r3, [r4, #8]
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	4433      	add	r3, r6
 800c002:	6023      	str	r3, [r4, #0]
 800c004:	2000      	movs	r0, #0
 800c006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00a:	462a      	mov	r2, r5
 800c00c:	f000 fbfc 	bl	800c808 <_realloc_r>
 800c010:	4606      	mov	r6, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d1e0      	bne.n	800bfd8 <__ssputs_r+0x5c>
 800c016:	6921      	ldr	r1, [r4, #16]
 800c018:	4650      	mov	r0, sl
 800c01a:	f7ff fb35 	bl	800b688 <_free_r>
 800c01e:	230c      	movs	r3, #12
 800c020:	f8ca 3000 	str.w	r3, [sl]
 800c024:	89a3      	ldrh	r3, [r4, #12]
 800c026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c02a:	81a3      	strh	r3, [r4, #12]
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	e7e9      	b.n	800c006 <__ssputs_r+0x8a>
	...

0800c034 <_svfiprintf_r>:
 800c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	4698      	mov	r8, r3
 800c03a:	898b      	ldrh	r3, [r1, #12]
 800c03c:	061b      	lsls	r3, r3, #24
 800c03e:	b09d      	sub	sp, #116	@ 0x74
 800c040:	4607      	mov	r7, r0
 800c042:	460d      	mov	r5, r1
 800c044:	4614      	mov	r4, r2
 800c046:	d510      	bpl.n	800c06a <_svfiprintf_r+0x36>
 800c048:	690b      	ldr	r3, [r1, #16]
 800c04a:	b973      	cbnz	r3, 800c06a <_svfiprintf_r+0x36>
 800c04c:	2140      	movs	r1, #64	@ 0x40
 800c04e:	f7ff fb8f 	bl	800b770 <_malloc_r>
 800c052:	6028      	str	r0, [r5, #0]
 800c054:	6128      	str	r0, [r5, #16]
 800c056:	b930      	cbnz	r0, 800c066 <_svfiprintf_r+0x32>
 800c058:	230c      	movs	r3, #12
 800c05a:	603b      	str	r3, [r7, #0]
 800c05c:	f04f 30ff 	mov.w	r0, #4294967295
 800c060:	b01d      	add	sp, #116	@ 0x74
 800c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	2340      	movs	r3, #64	@ 0x40
 800c068:	616b      	str	r3, [r5, #20]
 800c06a:	2300      	movs	r3, #0
 800c06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c06e:	2320      	movs	r3, #32
 800c070:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c074:	f8cd 800c 	str.w	r8, [sp, #12]
 800c078:	2330      	movs	r3, #48	@ 0x30
 800c07a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c218 <_svfiprintf_r+0x1e4>
 800c07e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c082:	f04f 0901 	mov.w	r9, #1
 800c086:	4623      	mov	r3, r4
 800c088:	469a      	mov	sl, r3
 800c08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c08e:	b10a      	cbz	r2, 800c094 <_svfiprintf_r+0x60>
 800c090:	2a25      	cmp	r2, #37	@ 0x25
 800c092:	d1f9      	bne.n	800c088 <_svfiprintf_r+0x54>
 800c094:	ebba 0b04 	subs.w	fp, sl, r4
 800c098:	d00b      	beq.n	800c0b2 <_svfiprintf_r+0x7e>
 800c09a:	465b      	mov	r3, fp
 800c09c:	4622      	mov	r2, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ff6b 	bl	800bf7c <__ssputs_r>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f000 80a7 	beq.w	800c1fa <_svfiprintf_r+0x1c6>
 800c0ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0ae:	445a      	add	r2, fp
 800c0b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 809f 	beq.w	800c1fa <_svfiprintf_r+0x1c6>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c6:	f10a 0a01 	add.w	sl, sl, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0d4:	4654      	mov	r4, sl
 800c0d6:	2205      	movs	r2, #5
 800c0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0dc:	484e      	ldr	r0, [pc, #312]	@ (800c218 <_svfiprintf_r+0x1e4>)
 800c0de:	f7f4 f877 	bl	80001d0 <memchr>
 800c0e2:	9a04      	ldr	r2, [sp, #16]
 800c0e4:	b9d8      	cbnz	r0, 800c11e <_svfiprintf_r+0xea>
 800c0e6:	06d0      	lsls	r0, r2, #27
 800c0e8:	bf44      	itt	mi
 800c0ea:	2320      	movmi	r3, #32
 800c0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0f0:	0711      	lsls	r1, r2, #28
 800c0f2:	bf44      	itt	mi
 800c0f4:	232b      	movmi	r3, #43	@ 0x2b
 800c0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800c100:	d015      	beq.n	800c12e <_svfiprintf_r+0xfa>
 800c102:	9a07      	ldr	r2, [sp, #28]
 800c104:	4654      	mov	r4, sl
 800c106:	2000      	movs	r0, #0
 800c108:	f04f 0c0a 	mov.w	ip, #10
 800c10c:	4621      	mov	r1, r4
 800c10e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c112:	3b30      	subs	r3, #48	@ 0x30
 800c114:	2b09      	cmp	r3, #9
 800c116:	d94b      	bls.n	800c1b0 <_svfiprintf_r+0x17c>
 800c118:	b1b0      	cbz	r0, 800c148 <_svfiprintf_r+0x114>
 800c11a:	9207      	str	r2, [sp, #28]
 800c11c:	e014      	b.n	800c148 <_svfiprintf_r+0x114>
 800c11e:	eba0 0308 	sub.w	r3, r0, r8
 800c122:	fa09 f303 	lsl.w	r3, r9, r3
 800c126:	4313      	orrs	r3, r2
 800c128:	9304      	str	r3, [sp, #16]
 800c12a:	46a2      	mov	sl, r4
 800c12c:	e7d2      	b.n	800c0d4 <_svfiprintf_r+0xa0>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	1d19      	adds	r1, r3, #4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	9103      	str	r1, [sp, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfbb      	ittet	lt
 800c13a:	425b      	neglt	r3, r3
 800c13c:	f042 0202 	orrlt.w	r2, r2, #2
 800c140:	9307      	strge	r3, [sp, #28]
 800c142:	9307      	strlt	r3, [sp, #28]
 800c144:	bfb8      	it	lt
 800c146:	9204      	strlt	r2, [sp, #16]
 800c148:	7823      	ldrb	r3, [r4, #0]
 800c14a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c14c:	d10a      	bne.n	800c164 <_svfiprintf_r+0x130>
 800c14e:	7863      	ldrb	r3, [r4, #1]
 800c150:	2b2a      	cmp	r3, #42	@ 0x2a
 800c152:	d132      	bne.n	800c1ba <_svfiprintf_r+0x186>
 800c154:	9b03      	ldr	r3, [sp, #12]
 800c156:	1d1a      	adds	r2, r3, #4
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	9203      	str	r2, [sp, #12]
 800c15c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c160:	3402      	adds	r4, #2
 800c162:	9305      	str	r3, [sp, #20]
 800c164:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c228 <_svfiprintf_r+0x1f4>
 800c168:	7821      	ldrb	r1, [r4, #0]
 800c16a:	2203      	movs	r2, #3
 800c16c:	4650      	mov	r0, sl
 800c16e:	f7f4 f82f 	bl	80001d0 <memchr>
 800c172:	b138      	cbz	r0, 800c184 <_svfiprintf_r+0x150>
 800c174:	9b04      	ldr	r3, [sp, #16]
 800c176:	eba0 000a 	sub.w	r0, r0, sl
 800c17a:	2240      	movs	r2, #64	@ 0x40
 800c17c:	4082      	lsls	r2, r0
 800c17e:	4313      	orrs	r3, r2
 800c180:	3401      	adds	r4, #1
 800c182:	9304      	str	r3, [sp, #16]
 800c184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c188:	4824      	ldr	r0, [pc, #144]	@ (800c21c <_svfiprintf_r+0x1e8>)
 800c18a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c18e:	2206      	movs	r2, #6
 800c190:	f7f4 f81e 	bl	80001d0 <memchr>
 800c194:	2800      	cmp	r0, #0
 800c196:	d036      	beq.n	800c206 <_svfiprintf_r+0x1d2>
 800c198:	4b21      	ldr	r3, [pc, #132]	@ (800c220 <_svfiprintf_r+0x1ec>)
 800c19a:	bb1b      	cbnz	r3, 800c1e4 <_svfiprintf_r+0x1b0>
 800c19c:	9b03      	ldr	r3, [sp, #12]
 800c19e:	3307      	adds	r3, #7
 800c1a0:	f023 0307 	bic.w	r3, r3, #7
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	9303      	str	r3, [sp, #12]
 800c1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1aa:	4433      	add	r3, r6
 800c1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ae:	e76a      	b.n	800c086 <_svfiprintf_r+0x52>
 800c1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e7a8      	b.n	800c10c <_svfiprintf_r+0xd8>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	3401      	adds	r4, #1
 800c1be:	9305      	str	r3, [sp, #20]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f04f 0c0a 	mov.w	ip, #10
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1cc:	3a30      	subs	r2, #48	@ 0x30
 800c1ce:	2a09      	cmp	r2, #9
 800c1d0:	d903      	bls.n	800c1da <_svfiprintf_r+0x1a6>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0c6      	beq.n	800c164 <_svfiprintf_r+0x130>
 800c1d6:	9105      	str	r1, [sp, #20]
 800c1d8:	e7c4      	b.n	800c164 <_svfiprintf_r+0x130>
 800c1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1de:	4604      	mov	r4, r0
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e7f0      	b.n	800c1c6 <_svfiprintf_r+0x192>
 800c1e4:	ab03      	add	r3, sp, #12
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	4b0e      	ldr	r3, [pc, #56]	@ (800c224 <_svfiprintf_r+0x1f0>)
 800c1ec:	a904      	add	r1, sp, #16
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	f7fd fdea 	bl	8009dc8 <_printf_float>
 800c1f4:	1c42      	adds	r2, r0, #1
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	d1d6      	bne.n	800c1a8 <_svfiprintf_r+0x174>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	065b      	lsls	r3, r3, #25
 800c1fe:	f53f af2d 	bmi.w	800c05c <_svfiprintf_r+0x28>
 800c202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c204:	e72c      	b.n	800c060 <_svfiprintf_r+0x2c>
 800c206:	ab03      	add	r3, sp, #12
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	462a      	mov	r2, r5
 800c20c:	4b05      	ldr	r3, [pc, #20]	@ (800c224 <_svfiprintf_r+0x1f0>)
 800c20e:	a904      	add	r1, sp, #16
 800c210:	4638      	mov	r0, r7
 800c212:	f7fe f871 	bl	800a2f8 <_printf_i>
 800c216:	e7ed      	b.n	800c1f4 <_svfiprintf_r+0x1c0>
 800c218:	0800cfee 	.word	0x0800cfee
 800c21c:	0800cff8 	.word	0x0800cff8
 800c220:	08009dc9 	.word	0x08009dc9
 800c224:	0800bf7d 	.word	0x0800bf7d
 800c228:	0800cff4 	.word	0x0800cff4

0800c22c <__sfputc_r>:
 800c22c:	6893      	ldr	r3, [r2, #8]
 800c22e:	3b01      	subs	r3, #1
 800c230:	2b00      	cmp	r3, #0
 800c232:	b410      	push	{r4}
 800c234:	6093      	str	r3, [r2, #8]
 800c236:	da08      	bge.n	800c24a <__sfputc_r+0x1e>
 800c238:	6994      	ldr	r4, [r2, #24]
 800c23a:	42a3      	cmp	r3, r4
 800c23c:	db01      	blt.n	800c242 <__sfputc_r+0x16>
 800c23e:	290a      	cmp	r1, #10
 800c240:	d103      	bne.n	800c24a <__sfputc_r+0x1e>
 800c242:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c246:	f7fe bab0 	b.w	800a7aa <__swbuf_r>
 800c24a:	6813      	ldr	r3, [r2, #0]
 800c24c:	1c58      	adds	r0, r3, #1
 800c24e:	6010      	str	r0, [r2, #0]
 800c250:	7019      	strb	r1, [r3, #0]
 800c252:	4608      	mov	r0, r1
 800c254:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <__sfputs_r>:
 800c25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25c:	4606      	mov	r6, r0
 800c25e:	460f      	mov	r7, r1
 800c260:	4614      	mov	r4, r2
 800c262:	18d5      	adds	r5, r2, r3
 800c264:	42ac      	cmp	r4, r5
 800c266:	d101      	bne.n	800c26c <__sfputs_r+0x12>
 800c268:	2000      	movs	r0, #0
 800c26a:	e007      	b.n	800c27c <__sfputs_r+0x22>
 800c26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c270:	463a      	mov	r2, r7
 800c272:	4630      	mov	r0, r6
 800c274:	f7ff ffda 	bl	800c22c <__sfputc_r>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d1f3      	bne.n	800c264 <__sfputs_r+0xa>
 800c27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c280 <_vfiprintf_r>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	460d      	mov	r5, r1
 800c286:	b09d      	sub	sp, #116	@ 0x74
 800c288:	4614      	mov	r4, r2
 800c28a:	4698      	mov	r8, r3
 800c28c:	4606      	mov	r6, r0
 800c28e:	b118      	cbz	r0, 800c298 <_vfiprintf_r+0x18>
 800c290:	6a03      	ldr	r3, [r0, #32]
 800c292:	b90b      	cbnz	r3, 800c298 <_vfiprintf_r+0x18>
 800c294:	f7fe f9da 	bl	800a64c <__sinit>
 800c298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c29a:	07d9      	lsls	r1, r3, #31
 800c29c:	d405      	bmi.n	800c2aa <_vfiprintf_r+0x2a>
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	059a      	lsls	r2, r3, #22
 800c2a2:	d402      	bmi.n	800c2aa <_vfiprintf_r+0x2a>
 800c2a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2a6:	f7fe fb92 	bl	800a9ce <__retarget_lock_acquire_recursive>
 800c2aa:	89ab      	ldrh	r3, [r5, #12]
 800c2ac:	071b      	lsls	r3, r3, #28
 800c2ae:	d501      	bpl.n	800c2b4 <_vfiprintf_r+0x34>
 800c2b0:	692b      	ldr	r3, [r5, #16]
 800c2b2:	b99b      	cbnz	r3, 800c2dc <_vfiprintf_r+0x5c>
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7fe fab6 	bl	800a828 <__swsetup_r>
 800c2bc:	b170      	cbz	r0, 800c2dc <_vfiprintf_r+0x5c>
 800c2be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2c0:	07dc      	lsls	r4, r3, #31
 800c2c2:	d504      	bpl.n	800c2ce <_vfiprintf_r+0x4e>
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	b01d      	add	sp, #116	@ 0x74
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	89ab      	ldrh	r3, [r5, #12]
 800c2d0:	0598      	lsls	r0, r3, #22
 800c2d2:	d4f7      	bmi.n	800c2c4 <_vfiprintf_r+0x44>
 800c2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2d6:	f7fe fb7b 	bl	800a9d0 <__retarget_lock_release_recursive>
 800c2da:	e7f3      	b.n	800c2c4 <_vfiprintf_r+0x44>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2e0:	2320      	movs	r3, #32
 800c2e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ea:	2330      	movs	r3, #48	@ 0x30
 800c2ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c49c <_vfiprintf_r+0x21c>
 800c2f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2f4:	f04f 0901 	mov.w	r9, #1
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	469a      	mov	sl, r3
 800c2fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c300:	b10a      	cbz	r2, 800c306 <_vfiprintf_r+0x86>
 800c302:	2a25      	cmp	r2, #37	@ 0x25
 800c304:	d1f9      	bne.n	800c2fa <_vfiprintf_r+0x7a>
 800c306:	ebba 0b04 	subs.w	fp, sl, r4
 800c30a:	d00b      	beq.n	800c324 <_vfiprintf_r+0xa4>
 800c30c:	465b      	mov	r3, fp
 800c30e:	4622      	mov	r2, r4
 800c310:	4629      	mov	r1, r5
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff ffa1 	bl	800c25a <__sfputs_r>
 800c318:	3001      	adds	r0, #1
 800c31a:	f000 80a7 	beq.w	800c46c <_vfiprintf_r+0x1ec>
 800c31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c320:	445a      	add	r2, fp
 800c322:	9209      	str	r2, [sp, #36]	@ 0x24
 800c324:	f89a 3000 	ldrb.w	r3, [sl]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 809f 	beq.w	800c46c <_vfiprintf_r+0x1ec>
 800c32e:	2300      	movs	r3, #0
 800c330:	f04f 32ff 	mov.w	r2, #4294967295
 800c334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c338:	f10a 0a01 	add.w	sl, sl, #1
 800c33c:	9304      	str	r3, [sp, #16]
 800c33e:	9307      	str	r3, [sp, #28]
 800c340:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c344:	931a      	str	r3, [sp, #104]	@ 0x68
 800c346:	4654      	mov	r4, sl
 800c348:	2205      	movs	r2, #5
 800c34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34e:	4853      	ldr	r0, [pc, #332]	@ (800c49c <_vfiprintf_r+0x21c>)
 800c350:	f7f3 ff3e 	bl	80001d0 <memchr>
 800c354:	9a04      	ldr	r2, [sp, #16]
 800c356:	b9d8      	cbnz	r0, 800c390 <_vfiprintf_r+0x110>
 800c358:	06d1      	lsls	r1, r2, #27
 800c35a:	bf44      	itt	mi
 800c35c:	2320      	movmi	r3, #32
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c362:	0713      	lsls	r3, r2, #28
 800c364:	bf44      	itt	mi
 800c366:	232b      	movmi	r3, #43	@ 0x2b
 800c368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c36c:	f89a 3000 	ldrb.w	r3, [sl]
 800c370:	2b2a      	cmp	r3, #42	@ 0x2a
 800c372:	d015      	beq.n	800c3a0 <_vfiprintf_r+0x120>
 800c374:	9a07      	ldr	r2, [sp, #28]
 800c376:	4654      	mov	r4, sl
 800c378:	2000      	movs	r0, #0
 800c37a:	f04f 0c0a 	mov.w	ip, #10
 800c37e:	4621      	mov	r1, r4
 800c380:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c384:	3b30      	subs	r3, #48	@ 0x30
 800c386:	2b09      	cmp	r3, #9
 800c388:	d94b      	bls.n	800c422 <_vfiprintf_r+0x1a2>
 800c38a:	b1b0      	cbz	r0, 800c3ba <_vfiprintf_r+0x13a>
 800c38c:	9207      	str	r2, [sp, #28]
 800c38e:	e014      	b.n	800c3ba <_vfiprintf_r+0x13a>
 800c390:	eba0 0308 	sub.w	r3, r0, r8
 800c394:	fa09 f303 	lsl.w	r3, r9, r3
 800c398:	4313      	orrs	r3, r2
 800c39a:	9304      	str	r3, [sp, #16]
 800c39c:	46a2      	mov	sl, r4
 800c39e:	e7d2      	b.n	800c346 <_vfiprintf_r+0xc6>
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	1d19      	adds	r1, r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	9103      	str	r1, [sp, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	bfbb      	ittet	lt
 800c3ac:	425b      	neglt	r3, r3
 800c3ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b2:	9307      	strge	r3, [sp, #28]
 800c3b4:	9307      	strlt	r3, [sp, #28]
 800c3b6:	bfb8      	it	lt
 800c3b8:	9204      	strlt	r2, [sp, #16]
 800c3ba:	7823      	ldrb	r3, [r4, #0]
 800c3bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3be:	d10a      	bne.n	800c3d6 <_vfiprintf_r+0x156>
 800c3c0:	7863      	ldrb	r3, [r4, #1]
 800c3c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3c4:	d132      	bne.n	800c42c <_vfiprintf_r+0x1ac>
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	1d1a      	adds	r2, r3, #4
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	9203      	str	r2, [sp, #12]
 800c3ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3d2:	3402      	adds	r4, #2
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4ac <_vfiprintf_r+0x22c>
 800c3da:	7821      	ldrb	r1, [r4, #0]
 800c3dc:	2203      	movs	r2, #3
 800c3de:	4650      	mov	r0, sl
 800c3e0:	f7f3 fef6 	bl	80001d0 <memchr>
 800c3e4:	b138      	cbz	r0, 800c3f6 <_vfiprintf_r+0x176>
 800c3e6:	9b04      	ldr	r3, [sp, #16]
 800c3e8:	eba0 000a 	sub.w	r0, r0, sl
 800c3ec:	2240      	movs	r2, #64	@ 0x40
 800c3ee:	4082      	lsls	r2, r0
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	3401      	adds	r4, #1
 800c3f4:	9304      	str	r3, [sp, #16]
 800c3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fa:	4829      	ldr	r0, [pc, #164]	@ (800c4a0 <_vfiprintf_r+0x220>)
 800c3fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c400:	2206      	movs	r2, #6
 800c402:	f7f3 fee5 	bl	80001d0 <memchr>
 800c406:	2800      	cmp	r0, #0
 800c408:	d03f      	beq.n	800c48a <_vfiprintf_r+0x20a>
 800c40a:	4b26      	ldr	r3, [pc, #152]	@ (800c4a4 <_vfiprintf_r+0x224>)
 800c40c:	bb1b      	cbnz	r3, 800c456 <_vfiprintf_r+0x1d6>
 800c40e:	9b03      	ldr	r3, [sp, #12]
 800c410:	3307      	adds	r3, #7
 800c412:	f023 0307 	bic.w	r3, r3, #7
 800c416:	3308      	adds	r3, #8
 800c418:	9303      	str	r3, [sp, #12]
 800c41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c41c:	443b      	add	r3, r7
 800c41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c420:	e76a      	b.n	800c2f8 <_vfiprintf_r+0x78>
 800c422:	fb0c 3202 	mla	r2, ip, r2, r3
 800c426:	460c      	mov	r4, r1
 800c428:	2001      	movs	r0, #1
 800c42a:	e7a8      	b.n	800c37e <_vfiprintf_r+0xfe>
 800c42c:	2300      	movs	r3, #0
 800c42e:	3401      	adds	r4, #1
 800c430:	9305      	str	r3, [sp, #20]
 800c432:	4619      	mov	r1, r3
 800c434:	f04f 0c0a 	mov.w	ip, #10
 800c438:	4620      	mov	r0, r4
 800c43a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c43e:	3a30      	subs	r2, #48	@ 0x30
 800c440:	2a09      	cmp	r2, #9
 800c442:	d903      	bls.n	800c44c <_vfiprintf_r+0x1cc>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d0c6      	beq.n	800c3d6 <_vfiprintf_r+0x156>
 800c448:	9105      	str	r1, [sp, #20]
 800c44a:	e7c4      	b.n	800c3d6 <_vfiprintf_r+0x156>
 800c44c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c450:	4604      	mov	r4, r0
 800c452:	2301      	movs	r3, #1
 800c454:	e7f0      	b.n	800c438 <_vfiprintf_r+0x1b8>
 800c456:	ab03      	add	r3, sp, #12
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	462a      	mov	r2, r5
 800c45c:	4b12      	ldr	r3, [pc, #72]	@ (800c4a8 <_vfiprintf_r+0x228>)
 800c45e:	a904      	add	r1, sp, #16
 800c460:	4630      	mov	r0, r6
 800c462:	f7fd fcb1 	bl	8009dc8 <_printf_float>
 800c466:	4607      	mov	r7, r0
 800c468:	1c78      	adds	r0, r7, #1
 800c46a:	d1d6      	bne.n	800c41a <_vfiprintf_r+0x19a>
 800c46c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c46e:	07d9      	lsls	r1, r3, #31
 800c470:	d405      	bmi.n	800c47e <_vfiprintf_r+0x1fe>
 800c472:	89ab      	ldrh	r3, [r5, #12]
 800c474:	059a      	lsls	r2, r3, #22
 800c476:	d402      	bmi.n	800c47e <_vfiprintf_r+0x1fe>
 800c478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c47a:	f7fe faa9 	bl	800a9d0 <__retarget_lock_release_recursive>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	065b      	lsls	r3, r3, #25
 800c482:	f53f af1f 	bmi.w	800c2c4 <_vfiprintf_r+0x44>
 800c486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c488:	e71e      	b.n	800c2c8 <_vfiprintf_r+0x48>
 800c48a:	ab03      	add	r3, sp, #12
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	462a      	mov	r2, r5
 800c490:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <_vfiprintf_r+0x228>)
 800c492:	a904      	add	r1, sp, #16
 800c494:	4630      	mov	r0, r6
 800c496:	f7fd ff2f 	bl	800a2f8 <_printf_i>
 800c49a:	e7e4      	b.n	800c466 <_vfiprintf_r+0x1e6>
 800c49c:	0800cfee 	.word	0x0800cfee
 800c4a0:	0800cff8 	.word	0x0800cff8
 800c4a4:	08009dc9 	.word	0x08009dc9
 800c4a8:	0800c25b 	.word	0x0800c25b
 800c4ac:	0800cff4 	.word	0x0800cff4

0800c4b0 <__sflush_r>:
 800c4b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b8:	0716      	lsls	r6, r2, #28
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	460c      	mov	r4, r1
 800c4be:	d454      	bmi.n	800c56a <__sflush_r+0xba>
 800c4c0:	684b      	ldr	r3, [r1, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dc02      	bgt.n	800c4cc <__sflush_r+0x1c>
 800c4c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	dd48      	ble.n	800c55e <__sflush_r+0xae>
 800c4cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4ce:	2e00      	cmp	r6, #0
 800c4d0:	d045      	beq.n	800c55e <__sflush_r+0xae>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4d8:	682f      	ldr	r7, [r5, #0]
 800c4da:	6a21      	ldr	r1, [r4, #32]
 800c4dc:	602b      	str	r3, [r5, #0]
 800c4de:	d030      	beq.n	800c542 <__sflush_r+0x92>
 800c4e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4e2:	89a3      	ldrh	r3, [r4, #12]
 800c4e4:	0759      	lsls	r1, r3, #29
 800c4e6:	d505      	bpl.n	800c4f4 <__sflush_r+0x44>
 800c4e8:	6863      	ldr	r3, [r4, #4]
 800c4ea:	1ad2      	subs	r2, r2, r3
 800c4ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4ee:	b10b      	cbz	r3, 800c4f4 <__sflush_r+0x44>
 800c4f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4f2:	1ad2      	subs	r2, r2, r3
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4f8:	6a21      	ldr	r1, [r4, #32]
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	47b0      	blx	r6
 800c4fe:	1c43      	adds	r3, r0, #1
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	d106      	bne.n	800c512 <__sflush_r+0x62>
 800c504:	6829      	ldr	r1, [r5, #0]
 800c506:	291d      	cmp	r1, #29
 800c508:	d82b      	bhi.n	800c562 <__sflush_r+0xb2>
 800c50a:	4a2a      	ldr	r2, [pc, #168]	@ (800c5b4 <__sflush_r+0x104>)
 800c50c:	40ca      	lsrs	r2, r1
 800c50e:	07d6      	lsls	r6, r2, #31
 800c510:	d527      	bpl.n	800c562 <__sflush_r+0xb2>
 800c512:	2200      	movs	r2, #0
 800c514:	6062      	str	r2, [r4, #4]
 800c516:	04d9      	lsls	r1, r3, #19
 800c518:	6922      	ldr	r2, [r4, #16]
 800c51a:	6022      	str	r2, [r4, #0]
 800c51c:	d504      	bpl.n	800c528 <__sflush_r+0x78>
 800c51e:	1c42      	adds	r2, r0, #1
 800c520:	d101      	bne.n	800c526 <__sflush_r+0x76>
 800c522:	682b      	ldr	r3, [r5, #0]
 800c524:	b903      	cbnz	r3, 800c528 <__sflush_r+0x78>
 800c526:	6560      	str	r0, [r4, #84]	@ 0x54
 800c528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c52a:	602f      	str	r7, [r5, #0]
 800c52c:	b1b9      	cbz	r1, 800c55e <__sflush_r+0xae>
 800c52e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c532:	4299      	cmp	r1, r3
 800c534:	d002      	beq.n	800c53c <__sflush_r+0x8c>
 800c536:	4628      	mov	r0, r5
 800c538:	f7ff f8a6 	bl	800b688 <_free_r>
 800c53c:	2300      	movs	r3, #0
 800c53e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c540:	e00d      	b.n	800c55e <__sflush_r+0xae>
 800c542:	2301      	movs	r3, #1
 800c544:	4628      	mov	r0, r5
 800c546:	47b0      	blx	r6
 800c548:	4602      	mov	r2, r0
 800c54a:	1c50      	adds	r0, r2, #1
 800c54c:	d1c9      	bne.n	800c4e2 <__sflush_r+0x32>
 800c54e:	682b      	ldr	r3, [r5, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d0c6      	beq.n	800c4e2 <__sflush_r+0x32>
 800c554:	2b1d      	cmp	r3, #29
 800c556:	d001      	beq.n	800c55c <__sflush_r+0xac>
 800c558:	2b16      	cmp	r3, #22
 800c55a:	d11e      	bne.n	800c59a <__sflush_r+0xea>
 800c55c:	602f      	str	r7, [r5, #0]
 800c55e:	2000      	movs	r0, #0
 800c560:	e022      	b.n	800c5a8 <__sflush_r+0xf8>
 800c562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c566:	b21b      	sxth	r3, r3
 800c568:	e01b      	b.n	800c5a2 <__sflush_r+0xf2>
 800c56a:	690f      	ldr	r7, [r1, #16]
 800c56c:	2f00      	cmp	r7, #0
 800c56e:	d0f6      	beq.n	800c55e <__sflush_r+0xae>
 800c570:	0793      	lsls	r3, r2, #30
 800c572:	680e      	ldr	r6, [r1, #0]
 800c574:	bf08      	it	eq
 800c576:	694b      	ldreq	r3, [r1, #20]
 800c578:	600f      	str	r7, [r1, #0]
 800c57a:	bf18      	it	ne
 800c57c:	2300      	movne	r3, #0
 800c57e:	eba6 0807 	sub.w	r8, r6, r7
 800c582:	608b      	str	r3, [r1, #8]
 800c584:	f1b8 0f00 	cmp.w	r8, #0
 800c588:	dde9      	ble.n	800c55e <__sflush_r+0xae>
 800c58a:	6a21      	ldr	r1, [r4, #32]
 800c58c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c58e:	4643      	mov	r3, r8
 800c590:	463a      	mov	r2, r7
 800c592:	4628      	mov	r0, r5
 800c594:	47b0      	blx	r6
 800c596:	2800      	cmp	r0, #0
 800c598:	dc08      	bgt.n	800c5ac <__sflush_r+0xfc>
 800c59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ac:	4407      	add	r7, r0
 800c5ae:	eba8 0800 	sub.w	r8, r8, r0
 800c5b2:	e7e7      	b.n	800c584 <__sflush_r+0xd4>
 800c5b4:	20400001 	.word	0x20400001

0800c5b8 <_fflush_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	690b      	ldr	r3, [r1, #16]
 800c5bc:	4605      	mov	r5, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	b913      	cbnz	r3, 800c5c8 <_fflush_r+0x10>
 800c5c2:	2500      	movs	r5, #0
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	b118      	cbz	r0, 800c5d2 <_fflush_r+0x1a>
 800c5ca:	6a03      	ldr	r3, [r0, #32]
 800c5cc:	b90b      	cbnz	r3, 800c5d2 <_fflush_r+0x1a>
 800c5ce:	f7fe f83d 	bl	800a64c <__sinit>
 800c5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0f3      	beq.n	800c5c2 <_fflush_r+0xa>
 800c5da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5dc:	07d0      	lsls	r0, r2, #31
 800c5de:	d404      	bmi.n	800c5ea <_fflush_r+0x32>
 800c5e0:	0599      	lsls	r1, r3, #22
 800c5e2:	d402      	bmi.n	800c5ea <_fflush_r+0x32>
 800c5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5e6:	f7fe f9f2 	bl	800a9ce <__retarget_lock_acquire_recursive>
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f7ff ff5f 	bl	800c4b0 <__sflush_r>
 800c5f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5f4:	07da      	lsls	r2, r3, #31
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	d4e4      	bmi.n	800c5c4 <_fflush_r+0xc>
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	059b      	lsls	r3, r3, #22
 800c5fe:	d4e1      	bmi.n	800c5c4 <_fflush_r+0xc>
 800c600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c602:	f7fe f9e5 	bl	800a9d0 <__retarget_lock_release_recursive>
 800c606:	e7dd      	b.n	800c5c4 <_fflush_r+0xc>

0800c608 <__swhatbuf_r>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	460c      	mov	r4, r1
 800c60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c610:	2900      	cmp	r1, #0
 800c612:	b096      	sub	sp, #88	@ 0x58
 800c614:	4615      	mov	r5, r2
 800c616:	461e      	mov	r6, r3
 800c618:	da0d      	bge.n	800c636 <__swhatbuf_r+0x2e>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c620:	f04f 0100 	mov.w	r1, #0
 800c624:	bf14      	ite	ne
 800c626:	2340      	movne	r3, #64	@ 0x40
 800c628:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c62c:	2000      	movs	r0, #0
 800c62e:	6031      	str	r1, [r6, #0]
 800c630:	602b      	str	r3, [r5, #0]
 800c632:	b016      	add	sp, #88	@ 0x58
 800c634:	bd70      	pop	{r4, r5, r6, pc}
 800c636:	466a      	mov	r2, sp
 800c638:	f000 f862 	bl	800c700 <_fstat_r>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	dbec      	blt.n	800c61a <__swhatbuf_r+0x12>
 800c640:	9901      	ldr	r1, [sp, #4]
 800c642:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c646:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c64a:	4259      	negs	r1, r3
 800c64c:	4159      	adcs	r1, r3
 800c64e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c652:	e7eb      	b.n	800c62c <__swhatbuf_r+0x24>

0800c654 <__smakebuf_r>:
 800c654:	898b      	ldrh	r3, [r1, #12]
 800c656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c658:	079d      	lsls	r5, r3, #30
 800c65a:	4606      	mov	r6, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	d507      	bpl.n	800c670 <__smakebuf_r+0x1c>
 800c660:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	6123      	str	r3, [r4, #16]
 800c668:	2301      	movs	r3, #1
 800c66a:	6163      	str	r3, [r4, #20]
 800c66c:	b003      	add	sp, #12
 800c66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c670:	ab01      	add	r3, sp, #4
 800c672:	466a      	mov	r2, sp
 800c674:	f7ff ffc8 	bl	800c608 <__swhatbuf_r>
 800c678:	9f00      	ldr	r7, [sp, #0]
 800c67a:	4605      	mov	r5, r0
 800c67c:	4639      	mov	r1, r7
 800c67e:	4630      	mov	r0, r6
 800c680:	f7ff f876 	bl	800b770 <_malloc_r>
 800c684:	b948      	cbnz	r0, 800c69a <__smakebuf_r+0x46>
 800c686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68a:	059a      	lsls	r2, r3, #22
 800c68c:	d4ee      	bmi.n	800c66c <__smakebuf_r+0x18>
 800c68e:	f023 0303 	bic.w	r3, r3, #3
 800c692:	f043 0302 	orr.w	r3, r3, #2
 800c696:	81a3      	strh	r3, [r4, #12]
 800c698:	e7e2      	b.n	800c660 <__smakebuf_r+0xc>
 800c69a:	89a3      	ldrh	r3, [r4, #12]
 800c69c:	6020      	str	r0, [r4, #0]
 800c69e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6aa:	b15b      	cbz	r3, 800c6c4 <__smakebuf_r+0x70>
 800c6ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f000 f837 	bl	800c724 <_isatty_r>
 800c6b6:	b128      	cbz	r0, 800c6c4 <__smakebuf_r+0x70>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	f023 0303 	bic.w	r3, r3, #3
 800c6be:	f043 0301 	orr.w	r3, r3, #1
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	431d      	orrs	r5, r3
 800c6c8:	81a5      	strh	r5, [r4, #12]
 800c6ca:	e7cf      	b.n	800c66c <__smakebuf_r+0x18>

0800c6cc <memmove>:
 800c6cc:	4288      	cmp	r0, r1
 800c6ce:	b510      	push	{r4, lr}
 800c6d0:	eb01 0402 	add.w	r4, r1, r2
 800c6d4:	d902      	bls.n	800c6dc <memmove+0x10>
 800c6d6:	4284      	cmp	r4, r0
 800c6d8:	4623      	mov	r3, r4
 800c6da:	d807      	bhi.n	800c6ec <memmove+0x20>
 800c6dc:	1e43      	subs	r3, r0, #1
 800c6de:	42a1      	cmp	r1, r4
 800c6e0:	d008      	beq.n	800c6f4 <memmove+0x28>
 800c6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ea:	e7f8      	b.n	800c6de <memmove+0x12>
 800c6ec:	4402      	add	r2, r0
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	428a      	cmp	r2, r1
 800c6f2:	d100      	bne.n	800c6f6 <memmove+0x2a>
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6fe:	e7f7      	b.n	800c6f0 <memmove+0x24>

0800c700 <_fstat_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d07      	ldr	r5, [pc, #28]	@ (800c720 <_fstat_r+0x20>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	602b      	str	r3, [r5, #0]
 800c70e:	f7f6 feb7 	bl	8003480 <_fstat>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	d102      	bne.n	800c71c <_fstat_r+0x1c>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b103      	cbz	r3, 800c71c <_fstat_r+0x1c>
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	bd38      	pop	{r3, r4, r5, pc}
 800c71e:	bf00      	nop
 800c720:	200006f0 	.word	0x200006f0

0800c724 <_isatty_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4d06      	ldr	r5, [pc, #24]	@ (800c740 <_isatty_r+0x1c>)
 800c728:	2300      	movs	r3, #0
 800c72a:	4604      	mov	r4, r0
 800c72c:	4608      	mov	r0, r1
 800c72e:	602b      	str	r3, [r5, #0]
 800c730:	f7f6 feb6 	bl	80034a0 <_isatty>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_isatty_r+0x1a>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_isatty_r+0x1a>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	200006f0 	.word	0x200006f0

0800c744 <_sbrk_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d06      	ldr	r5, [pc, #24]	@ (800c760 <_sbrk_r+0x1c>)
 800c748:	2300      	movs	r3, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f6 febe 	bl	80034d0 <_sbrk>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_sbrk_r+0x1a>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_sbrk_r+0x1a>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	200006f0 	.word	0x200006f0

0800c764 <memcpy>:
 800c764:	440a      	add	r2, r1
 800c766:	4291      	cmp	r1, r2
 800c768:	f100 33ff 	add.w	r3, r0, #4294967295
 800c76c:	d100      	bne.n	800c770 <memcpy+0xc>
 800c76e:	4770      	bx	lr
 800c770:	b510      	push	{r4, lr}
 800c772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c77a:	4291      	cmp	r1, r2
 800c77c:	d1f9      	bne.n	800c772 <memcpy+0xe>
 800c77e:	bd10      	pop	{r4, pc}

0800c780 <__assert_func>:
 800c780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c782:	4614      	mov	r4, r2
 800c784:	461a      	mov	r2, r3
 800c786:	4b09      	ldr	r3, [pc, #36]	@ (800c7ac <__assert_func+0x2c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4605      	mov	r5, r0
 800c78c:	68d8      	ldr	r0, [r3, #12]
 800c78e:	b14c      	cbz	r4, 800c7a4 <__assert_func+0x24>
 800c790:	4b07      	ldr	r3, [pc, #28]	@ (800c7b0 <__assert_func+0x30>)
 800c792:	9100      	str	r1, [sp, #0]
 800c794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c798:	4906      	ldr	r1, [pc, #24]	@ (800c7b4 <__assert_func+0x34>)
 800c79a:	462b      	mov	r3, r5
 800c79c:	f000 f870 	bl	800c880 <fiprintf>
 800c7a0:	f000 f880 	bl	800c8a4 <abort>
 800c7a4:	4b04      	ldr	r3, [pc, #16]	@ (800c7b8 <__assert_func+0x38>)
 800c7a6:	461c      	mov	r4, r3
 800c7a8:	e7f3      	b.n	800c792 <__assert_func+0x12>
 800c7aa:	bf00      	nop
 800c7ac:	2000001c 	.word	0x2000001c
 800c7b0:	0800d009 	.word	0x0800d009
 800c7b4:	0800d016 	.word	0x0800d016
 800c7b8:	0800d044 	.word	0x0800d044

0800c7bc <_calloc_r>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	fba1 5402 	umull	r5, r4, r1, r2
 800c7c2:	b934      	cbnz	r4, 800c7d2 <_calloc_r+0x16>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7fe ffd3 	bl	800b770 <_malloc_r>
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	b928      	cbnz	r0, 800c7da <_calloc_r+0x1e>
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	bd70      	pop	{r4, r5, r6, pc}
 800c7d2:	220c      	movs	r2, #12
 800c7d4:	6002      	str	r2, [r0, #0]
 800c7d6:	2600      	movs	r6, #0
 800c7d8:	e7f9      	b.n	800c7ce <_calloc_r+0x12>
 800c7da:	462a      	mov	r2, r5
 800c7dc:	4621      	mov	r1, r4
 800c7de:	f7fe f879 	bl	800a8d4 <memset>
 800c7e2:	e7f4      	b.n	800c7ce <_calloc_r+0x12>

0800c7e4 <__ascii_mbtowc>:
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	b901      	cbnz	r1, 800c7ea <__ascii_mbtowc+0x6>
 800c7e8:	a901      	add	r1, sp, #4
 800c7ea:	b142      	cbz	r2, 800c7fe <__ascii_mbtowc+0x1a>
 800c7ec:	b14b      	cbz	r3, 800c802 <__ascii_mbtowc+0x1e>
 800c7ee:	7813      	ldrb	r3, [r2, #0]
 800c7f0:	600b      	str	r3, [r1, #0]
 800c7f2:	7812      	ldrb	r2, [r2, #0]
 800c7f4:	1e10      	subs	r0, r2, #0
 800c7f6:	bf18      	it	ne
 800c7f8:	2001      	movne	r0, #1
 800c7fa:	b002      	add	sp, #8
 800c7fc:	4770      	bx	lr
 800c7fe:	4610      	mov	r0, r2
 800c800:	e7fb      	b.n	800c7fa <__ascii_mbtowc+0x16>
 800c802:	f06f 0001 	mvn.w	r0, #1
 800c806:	e7f8      	b.n	800c7fa <__ascii_mbtowc+0x16>

0800c808 <_realloc_r>:
 800c808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	4607      	mov	r7, r0
 800c80e:	4614      	mov	r4, r2
 800c810:	460d      	mov	r5, r1
 800c812:	b921      	cbnz	r1, 800c81e <_realloc_r+0x16>
 800c814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c818:	4611      	mov	r1, r2
 800c81a:	f7fe bfa9 	b.w	800b770 <_malloc_r>
 800c81e:	b92a      	cbnz	r2, 800c82c <_realloc_r+0x24>
 800c820:	f7fe ff32 	bl	800b688 <_free_r>
 800c824:	4625      	mov	r5, r4
 800c826:	4628      	mov	r0, r5
 800c828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82c:	f000 f841 	bl	800c8b2 <_malloc_usable_size_r>
 800c830:	4284      	cmp	r4, r0
 800c832:	4606      	mov	r6, r0
 800c834:	d802      	bhi.n	800c83c <_realloc_r+0x34>
 800c836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c83a:	d8f4      	bhi.n	800c826 <_realloc_r+0x1e>
 800c83c:	4621      	mov	r1, r4
 800c83e:	4638      	mov	r0, r7
 800c840:	f7fe ff96 	bl	800b770 <_malloc_r>
 800c844:	4680      	mov	r8, r0
 800c846:	b908      	cbnz	r0, 800c84c <_realloc_r+0x44>
 800c848:	4645      	mov	r5, r8
 800c84a:	e7ec      	b.n	800c826 <_realloc_r+0x1e>
 800c84c:	42b4      	cmp	r4, r6
 800c84e:	4622      	mov	r2, r4
 800c850:	4629      	mov	r1, r5
 800c852:	bf28      	it	cs
 800c854:	4632      	movcs	r2, r6
 800c856:	f7ff ff85 	bl	800c764 <memcpy>
 800c85a:	4629      	mov	r1, r5
 800c85c:	4638      	mov	r0, r7
 800c85e:	f7fe ff13 	bl	800b688 <_free_r>
 800c862:	e7f1      	b.n	800c848 <_realloc_r+0x40>

0800c864 <__ascii_wctomb>:
 800c864:	4603      	mov	r3, r0
 800c866:	4608      	mov	r0, r1
 800c868:	b141      	cbz	r1, 800c87c <__ascii_wctomb+0x18>
 800c86a:	2aff      	cmp	r2, #255	@ 0xff
 800c86c:	d904      	bls.n	800c878 <__ascii_wctomb+0x14>
 800c86e:	228a      	movs	r2, #138	@ 0x8a
 800c870:	601a      	str	r2, [r3, #0]
 800c872:	f04f 30ff 	mov.w	r0, #4294967295
 800c876:	4770      	bx	lr
 800c878:	700a      	strb	r2, [r1, #0]
 800c87a:	2001      	movs	r0, #1
 800c87c:	4770      	bx	lr
	...

0800c880 <fiprintf>:
 800c880:	b40e      	push	{r1, r2, r3}
 800c882:	b503      	push	{r0, r1, lr}
 800c884:	4601      	mov	r1, r0
 800c886:	ab03      	add	r3, sp, #12
 800c888:	4805      	ldr	r0, [pc, #20]	@ (800c8a0 <fiprintf+0x20>)
 800c88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c88e:	6800      	ldr	r0, [r0, #0]
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	f7ff fcf5 	bl	800c280 <_vfiprintf_r>
 800c896:	b002      	add	sp, #8
 800c898:	f85d eb04 	ldr.w	lr, [sp], #4
 800c89c:	b003      	add	sp, #12
 800c89e:	4770      	bx	lr
 800c8a0:	2000001c 	.word	0x2000001c

0800c8a4 <abort>:
 800c8a4:	b508      	push	{r3, lr}
 800c8a6:	2006      	movs	r0, #6
 800c8a8:	f000 f834 	bl	800c914 <raise>
 800c8ac:	2001      	movs	r0, #1
 800c8ae:	f7f6 fd97 	bl	80033e0 <_exit>

0800c8b2 <_malloc_usable_size_r>:
 800c8b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8b6:	1f18      	subs	r0, r3, #4
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	bfbc      	itt	lt
 800c8bc:	580b      	ldrlt	r3, [r1, r0]
 800c8be:	18c0      	addlt	r0, r0, r3
 800c8c0:	4770      	bx	lr

0800c8c2 <_raise_r>:
 800c8c2:	291f      	cmp	r1, #31
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	d904      	bls.n	800c8d6 <_raise_r+0x14>
 800c8cc:	2316      	movs	r3, #22
 800c8ce:	6003      	str	r3, [r0, #0]
 800c8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d4:	bd38      	pop	{r3, r4, r5, pc}
 800c8d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8d8:	b112      	cbz	r2, 800c8e0 <_raise_r+0x1e>
 800c8da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8de:	b94b      	cbnz	r3, 800c8f4 <_raise_r+0x32>
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f000 f831 	bl	800c948 <_getpid_r>
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8f0:	f000 b818 	b.w	800c924 <_kill_r>
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d00a      	beq.n	800c90e <_raise_r+0x4c>
 800c8f8:	1c59      	adds	r1, r3, #1
 800c8fa:	d103      	bne.n	800c904 <_raise_r+0x42>
 800c8fc:	2316      	movs	r3, #22
 800c8fe:	6003      	str	r3, [r0, #0]
 800c900:	2001      	movs	r0, #1
 800c902:	e7e7      	b.n	800c8d4 <_raise_r+0x12>
 800c904:	2100      	movs	r1, #0
 800c906:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c90a:	4620      	mov	r0, r4
 800c90c:	4798      	blx	r3
 800c90e:	2000      	movs	r0, #0
 800c910:	e7e0      	b.n	800c8d4 <_raise_r+0x12>
	...

0800c914 <raise>:
 800c914:	4b02      	ldr	r3, [pc, #8]	@ (800c920 <raise+0xc>)
 800c916:	4601      	mov	r1, r0
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	f7ff bfd2 	b.w	800c8c2 <_raise_r>
 800c91e:	bf00      	nop
 800c920:	2000001c 	.word	0x2000001c

0800c924 <_kill_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4d07      	ldr	r5, [pc, #28]	@ (800c944 <_kill_r+0x20>)
 800c928:	2300      	movs	r3, #0
 800c92a:	4604      	mov	r4, r0
 800c92c:	4608      	mov	r0, r1
 800c92e:	4611      	mov	r1, r2
 800c930:	602b      	str	r3, [r5, #0]
 800c932:	f7f6 fd45 	bl	80033c0 <_kill>
 800c936:	1c43      	adds	r3, r0, #1
 800c938:	d102      	bne.n	800c940 <_kill_r+0x1c>
 800c93a:	682b      	ldr	r3, [r5, #0]
 800c93c:	b103      	cbz	r3, 800c940 <_kill_r+0x1c>
 800c93e:	6023      	str	r3, [r4, #0]
 800c940:	bd38      	pop	{r3, r4, r5, pc}
 800c942:	bf00      	nop
 800c944:	200006f0 	.word	0x200006f0

0800c948 <_getpid_r>:
 800c948:	f7f6 bd32 	b.w	80033b0 <_getpid>

0800c94c <_init>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	bf00      	nop
 800c950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c952:	bc08      	pop	{r3}
 800c954:	469e      	mov	lr, r3
 800c956:	4770      	bx	lr

0800c958 <_fini>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	bf00      	nop
 800c95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95e:	bc08      	pop	{r3}
 800c960:	469e      	mov	lr, r3
 800c962:	4770      	bx	lr
