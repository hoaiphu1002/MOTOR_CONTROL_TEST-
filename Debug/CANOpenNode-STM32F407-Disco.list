
CANOpenNode-STM32F407-Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a068  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a14  0800a1f8  0800a1f8  0000b1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac0c  0800ac0c  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac0c  0800ac0c  0000bc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac14  0800ac14  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac14  0800ac14  0000bc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac18  0800ac18  0000bc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ac1c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          00000470  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000648  20000648  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150b0  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027cd  00000000  00000000  000212b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00023a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001013  00000000  00000000  00024ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227eb  00000000  00000000  00025ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018371  00000000  00000000  000486de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55b4  00000000  00000000  00060a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136003  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a34  00000000  00000000  00136048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1e0 	.word	0x0800a1e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a1e0 	.word	0x0800a1e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed8:	f3bf 8f4f 	dsb	sy
}
 8000edc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <__NVIC_SystemReset+0x24>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ee6:	4904      	ldr	r1, [pc, #16]	@ (8000ef8 <__NVIC_SystemReset+0x24>)
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <__NVIC_SystemReset+0x28>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eee:	f3bf 8f4f 	dsb	sy
}
 8000ef2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <__NVIC_SystemReset+0x20>
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0004 	.word	0x05fa0004

08000f00 <CAN_SendNonBlocking>:
/* USER CODE BEGIN PFP */
HAL_StatusTypeDef CAN_SendNonBlocking(CAN_HandleTypeDef *hcan,
                                      CAN_TxHeaderTypeDef *header,
                                      uint8_t *data,
                                      uint32_t *mailbox)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
    uint32_t startTick = HAL_GetTick();
 8000f0e:	f002 fbe5 	bl	80036dc <HAL_GetTick>
 8000f12:	61b8      	str	r0, [r7, #24]

    // ⏳ Chờ tối đa 2ms cho tới khi có mailbox trống
    while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {
 8000f14:	e008      	b.n	8000f28 <CAN_SendNonBlocking+0x28>
        if (HAL_GetTick() - startTick > 2) {
 8000f16:	f002 fbe1 	bl	80036dc <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <CAN_SendNonBlocking+0x28>
            // Quá hạn, bỏ qua frame để tránh nghẽn
            return HAL_BUSY;
 8000f24:	2302      	movs	r3, #2
 8000f26:	e027      	b.n	8000f78 <CAN_SendNonBlocking+0x78>
    while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f002 ff60 	bl	8003dee <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <CAN_SendNonBlocking+0x16>
        }
    }

    // ✅ Có slot trống → gửi ngay
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(hcan, header, data, mailbox);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f002 fe87 	bl	8003c4e <HAL_CAN_AddTxMessage>
 8000f40:	4603      	mov	r3, r0
 8000f42:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) {
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d015      	beq.n	8000f76 <CAN_SendNonBlocking+0x76>
        // Nếu lỗi, thử tối đa 2 lần nữa
        for (int retry = 0; retry < 2; retry++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e00d      	b.n	8000f6c <CAN_SendNonBlocking+0x6c>
            if (HAL_CAN_AddTxMessage(hcan, header, data, mailbox) == HAL_OK) {
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f002 fe79 	bl	8003c4e <HAL_CAN_AddTxMessage>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <CAN_SendNonBlocking+0x66>
                return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e008      	b.n	8000f78 <CAN_SendNonBlocking+0x78>
        for (int retry = 0; retry < 2; retry++) {
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	ddee      	ble.n	8000f50 <CAN_SendNonBlocking+0x50>
            }
        }
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <CAN_SendNonBlocking+0x78>
    }

    return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <print_uart>:
uint32_t TxMailbox;

volatile uint32_t can2_tx_success = 0;   // số gói gửi thành công
volatile uint32_t can2_rx_success = 0;   // số gói nhận thành công

void print_uart(const char *msg) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff f971 	bl	8000270 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <print_uart+0x28>)
 8000f9a:	f005 fe29 	bl	8006bf0 <HAL_UART_Transmit>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200003fc 	.word	0x200003fc

08000fac <handle_uart_command>:
#define UART_RX_BUF_SIZE 64
char uart_rx_buf[UART_RX_BUF_SIZE];
volatile uint8_t uart_rx_index = 0;
volatile uint8_t uart_rx_ready = 0;
void handle_uart_command(const char* cmd) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    if (strncmp(cmd, "1", 1) == 0) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <handle_uart_command+0x48>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <handle_uart_command+0x24>
        current_mode = MODE_PS2;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <handle_uart_command+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
        print_uart("✅PS2 Mode\r\n");
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <handle_uart_command+0x50>)
 8000fca:	f7ff ffd9 	bl	8000f80 <print_uart>
    } else if (strncmp(cmd, "2",1) == 0) {
        current_mode = MODE_AUTO;
        print_uart("✅AUTO Mode\r\n");
    }
}
 8000fce:	e00c      	b.n	8000fea <handle_uart_command+0x3e>
    } else if (strncmp(cmd, "2",1) == 0) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <handle_uart_command+0x54>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d105      	bne.n	8000fea <handle_uart_command+0x3e>
        current_mode = MODE_AUTO;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <handle_uart_command+0x4c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
        print_uart("✅AUTO Mode\r\n");
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <handle_uart_command+0x58>)
 8000fe6:	f7ff ffcb 	bl	8000f80 <print_uart>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	0800a1f8 	.word	0x0800a1f8
 8000ff8:	20000444 	.word	0x20000444
 8000ffc:	0800a1fc 	.word	0x0800a1fc
 8001000:	0800a20c 	.word	0x0800a20c
 8001004:	0800a210 	.word	0x0800a210

08001008 <set_drive_mode>:
    }
}



void set_drive_mode(uint8_t mode, uint8_t nodeId) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b0a4      	sub	sp, #144	@ 0x90
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]
    uint32_t txMailbox;
    uint8_t data[8];
    char msg[64];

    // === Gửi NMT Start Node ===
    TxHeader.StdId = 0x000;
 8001018:	2300      	movs	r3, #0
 800101a:	67bb      	str	r3, [r7, #120]	@ 0x78
    TxHeader.IDE = CAN_ID_STD;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    TxHeader.RTR = CAN_RTR_DATA;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    TxHeader.DLC = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    data[0] = 0x01;       // Command: Start remote node
 800102e:	2301      	movs	r3, #1
 8001030:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    data[1] = nodeId;     // Node ID
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 800103a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800103e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001042:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001046:	4844      	ldr	r0, [pc, #272]	@ (8001158 <set_drive_mode+0x150>)
 8001048:	f7ff ff5a 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	@ 0x64
 800104e:	f002 fb51 	bl	80036f4 <HAL_Delay>
    snprintf(msg, sizeof(msg), "🔌 NMT Start sent to Node %d\r\n", nodeId);
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001058:	4a40      	ldr	r2, [pc, #256]	@ (800115c <set_drive_mode+0x154>)
 800105a:	2140      	movs	r1, #64	@ 0x40
 800105c:	f006 ff58 	bl	8007f10 <sniprintf>
    print_uart(msg);
 8001060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff8b 	bl	8000f80 <print_uart>

    // === Set Mode to Velocity (0x6060 = 3) ===
    TxHeader.StdId = 0x600 + nodeId;  // COB-ID for SDO Tx
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001070:	67bb      	str	r3, [r7, #120]	@ 0x78
    TxHeader.DLC = 8;
 8001072:	2308      	movs	r3, #8
 8001074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint8_t mode_vel[] = {0x2F, 0x60, 0x60, 0x00, mode, 0x00, 0x00, 0x00};
 8001078:	232f      	movs	r3, #47	@ 0x2f
 800107a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800107e:	2360      	movs	r3, #96	@ 0x60
 8001080:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001084:	2360      	movs	r3, #96	@ 0x60
 8001086:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001096:	2300      	movs	r3, #0
 8001098:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800109c:	2300      	movs	r3, #0
 800109e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    CAN_SendNonBlocking(&hcan2, &TxHeader, mode_vel, &txMailbox);
 80010a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010ac:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80010b0:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80010b4:	4828      	ldr	r0, [pc, #160]	@ (8001158 <set_drive_mode+0x150>)
 80010b6:	f7ff ff23 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(50);
 80010ba:	2032      	movs	r0, #50	@ 0x32
 80010bc:	f002 fb1a 	bl	80036f4 <HAL_Delay>
    print_uart("⚙️ Set mode to Velocity (0x6060 = 3)\r\n");
 80010c0:	4827      	ldr	r0, [pc, #156]	@ (8001160 <set_drive_mode+0x158>)
 80010c2:	f7ff ff5d 	bl	8000f80 <print_uart>

    // === Gửi chuỗi enable: 0x06 → 0x07 → 0x0F ===

    // 1. Shutdown (0x06)
    uint8_t cw_shutdown[] = {0x2F, 0x40, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00};
 80010c6:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <set_drive_mode+0x15c>)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d0:	e883 0003 	stmia.w	r3, {r0, r1}
    CAN_SendNonBlocking(&hcan2, &TxHeader, cw_shutdown, &txMailbox);
 80010d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010d8:	f107 021c 	add.w	r2, r7, #28
 80010dc:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80010e0:	481d      	ldr	r0, [pc, #116]	@ (8001158 <set_drive_mode+0x150>)
 80010e2:	f7ff ff0d 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(50);
 80010e6:	2032      	movs	r0, #50	@ 0x32
 80010e8:	f002 fb04 	bl	80036f4 <HAL_Delay>
    print_uart("🔄 CW = 0x06 (Shutdown)\r\n");
 80010ec:	481e      	ldr	r0, [pc, #120]	@ (8001168 <set_drive_mode+0x160>)
 80010ee:	f7ff ff47 	bl	8000f80 <print_uart>

    // 2. Switch ON (0x07)
    uint8_t cw_switchon[] = {0x2F, 0x40, 0x60, 0x00, 0x07, 0x00, 0x00, 0x00};
 80010f2:	4a1e      	ldr	r2, [pc, #120]	@ (800116c <set_drive_mode+0x164>)
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fc:	e883 0003 	stmia.w	r3, {r0, r1}
    CAN_SendNonBlocking(&hcan2, &TxHeader, cw_switchon, &txMailbox);
 8001100:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001104:	f107 0214 	add.w	r2, r7, #20
 8001108:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800110c:	4812      	ldr	r0, [pc, #72]	@ (8001158 <set_drive_mode+0x150>)
 800110e:	f7ff fef7 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(50);
 8001112:	2032      	movs	r0, #50	@ 0x32
 8001114:	f002 faee 	bl	80036f4 <HAL_Delay>
    print_uart("🔄 CW = 0x07 (Switch ON)\r\n");
 8001118:	4815      	ldr	r0, [pc, #84]	@ (8001170 <set_drive_mode+0x168>)
 800111a:	f7ff ff31 	bl	8000f80 <print_uart>

    // 3. Enable operation (0x0F)
    uint8_t cw_enable[] = {0x2F, 0x40, 0x60, 0x00, 0x0F, 0x00, 0x00, 0x00};
 800111e:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <set_drive_mode+0x16c>)
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001128:	e883 0003 	stmia.w	r3, {r0, r1}
    CAN_SendNonBlocking(&hcan2, &TxHeader, cw_enable, &txMailbox);
 800112c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001130:	f107 020c 	add.w	r2, r7, #12
 8001134:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001138:	4807      	ldr	r0, [pc, #28]	@ (8001158 <set_drive_mode+0x150>)
 800113a:	f7ff fee1 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f002 fad8 	bl	80036f4 <HAL_Delay>
    print_uart("✅ CW = 0x0F (Enable Operation)\r\n");
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <set_drive_mode+0x170>)
 8001146:	f7ff ff1b 	bl	8000f80 <print_uart>

    print_uart("✅ Servo is now enabled in Velocity Mode!\r\n");
 800114a:	480c      	ldr	r0, [pc, #48]	@ (800117c <set_drive_mode+0x174>)
 800114c:	f7ff ff18 	bl	8000f80 <print_uart>
}
 8001150:	bf00      	nop
 8001152:	3790      	adds	r7, #144	@ 0x90
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001fc 	.word	0x200001fc
 800115c:	0800a220 	.word	0x0800a220
 8001160:	0800a244 	.word	0x0800a244
 8001164:	0800a300 	.word	0x0800a300
 8001168:	0800a270 	.word	0x0800a270
 800116c:	0800a308 	.word	0x0800a308
 8001170:	0800a28c 	.word	0x0800a28c
 8001174:	0800a310 	.word	0x0800a310
 8001178:	0800a2ac 	.word	0x0800a2ac
 800117c:	0800a2d0 	.word	0x0800a2d0

08001180 <delay_us>:



void delay_us(uint16_t us) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
   htim1.Instance->CNT=0;
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <delay_us+0x34>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);            // Start timer
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <delay_us+0x34>)
 8001194:	f005 f844 	bl	8006220 <HAL_TIM_Base_Start>
    while (htim1.Instance->CNT < us);
 8001198:	bf00      	nop
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <delay_us+0x34>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3f9      	bcc.n	800119a <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim1);             // Optional: Stop to save power
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <delay_us+0x34>)
 80011a8:	f005 f8a2 	bl	80062f0 <HAL_TIM_Base_Stop>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000324 	.word	0x20000324

080011b8 <PS2_ATT_LOW>:

//LAP TRINH DIEU KHIEN TAY CAM
void PS2_ATT_LOW() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2108      	movs	r1, #8
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <PS2_ATT_LOW+0x14>)
 80011c2:	f003 fd97 	bl	8004cf4 <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <PS2_ATT_HIGH>:

void PS2_ATT_HIGH() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2108      	movs	r1, #8
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <PS2_ATT_HIGH+0x14>)
 80011da:	f003 fd8b 	bl	8004cf4 <HAL_GPIO_WritePin>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <PS2_SendCommand>:
// === PS2 Controller Interface for STM32 ===
// === PS2 Initialization (3 command sequences) ===
void PS2_SendCommand(const uint8_t *tx, uint8_t *rx, uint8_t len) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	71fb      	strb	r3, [r7, #7]
    PS2_ATT_LOW(); delay_us(15);
 80011f6:	f7ff ffdf 	bl	80011b8 <PS2_ATT_LOW>
 80011fa:	200f      	movs	r0, #15
 80011fc:	f7ff ffc0 	bl	8001180 <delay_us>
    for (uint8_t i = 0; i < len; i++) {
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e011      	b.n	800122a <PS2_SendCommand+0x42>
        HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&tx[i], (uint8_t*)&rx[i], 1, 100);
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	18d1      	adds	r1, r2, r3
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	441a      	add	r2, r3
 8001212:	2364      	movs	r3, #100	@ 0x64
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	480a      	ldr	r0, [pc, #40]	@ (8001244 <PS2_SendCommand+0x5c>)
 800121a:	f004 fc0e 	bl	8005a3a <HAL_SPI_TransmitReceive>
        delay_us(10);
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff ffae 	bl	8001180 <delay_us>
    for (uint8_t i = 0; i < len; i++) {
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	3301      	adds	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
 800122a:	7dfa      	ldrb	r2, [r7, #23]
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3e9      	bcc.n	8001206 <PS2_SendCommand+0x1e>
    }
    PS2_ATT_HIGH(); delay_us(30);
 8001232:	f7ff ffcd 	bl	80011d0 <PS2_ATT_HIGH>
 8001236:	201e      	movs	r0, #30
 8001238:	f7ff ffa2 	bl	8001180 <delay_us>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200002cc 	.word	0x200002cc

08001248 <PS2_Init>:
void PS2_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0
    const uint8_t enter_cfg[]   = {0x01, 0x43, 0x00, 0x01, 0x00};
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <PS2_Init+0x90>)
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001252:	2300      	movs	r3, #0
 8001254:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    const uint8_t set_analog[]  = {0x01, 0x44, 0x00, 0x01, 0x03};
 8001258:	4a20      	ldr	r2, [pc, #128]	@ (80012dc <PS2_Init+0x94>)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001262:	6018      	str	r0, [r3, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	7019      	strb	r1, [r3, #0]
    const uint8_t enable_rumble[]= {0x01, 0x4D, 0x00, 0x00, 0x01};
 8001268:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <PS2_Init+0x98>)
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001272:	6018      	str	r0, [r3, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	7019      	strb	r1, [r3, #0]
    const uint8_t exit_cfg[]    = {0x01, 0x43, 0x00, 0x00, 0x5A};
 8001278:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <PS2_Init+0x9c>)
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001282:	6018      	str	r0, [r3, #0]
 8001284:	3304      	adds	r3, #4
 8001286:	7019      	strb	r1, [r3, #0]
    uint8_t rx[9];

    PS2_SendCommand(enter_cfg, rx, sizeof(enter_cfg));
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800128e:	2205      	movs	r2, #5
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffa9 	bl	80011e8 <PS2_SendCommand>
    PS2_SendCommand(set_analog, rx, sizeof(set_analog));
 8001296:	1d39      	adds	r1, r7, #4
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	2205      	movs	r2, #5
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffa2 	bl	80011e8 <PS2_SendCommand>
    PS2_SendCommand(enable_rumble, rx, sizeof(enable_rumble));
 80012a4:	1d39      	adds	r1, r7, #4
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	2205      	movs	r2, #5
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff9b 	bl	80011e8 <PS2_SendCommand>
    PS2_SendCommand(exit_cfg, rx, sizeof(exit_cfg));
 80012b2:	1d39      	adds	r1, r7, #4
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2205      	movs	r2, #5
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff94 	bl	80011e8 <PS2_SendCommand>

    HAL_Delay(500);
 80012c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012c4:	f002 fa16 	bl	80036f4 <HAL_Delay>
    print_uart("✅ PS2 Init Done\r\n");
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <PS2_Init+0xa0>)
 80012ca:	f7ff fe59 	bl	8000f80 <print_uart>
}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	01004301 	.word	0x01004301
 80012dc:	0800a32c 	.word	0x0800a32c
 80012e0:	0800a334 	.word	0x0800a334
 80012e4:	0800a33c 	.word	0x0800a33c
 80012e8:	0800a318 	.word	0x0800a318

080012ec <PS2_ReadButtons>:
    uint8_t rx, ry, lx, ly;
} PS2_Data;

bool isAnalog = false;

PS2_Data PS2_ReadButtons(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    PS2_Data result = {0xFFFF, 128, 128, 128, 128};
 80012f4:	4a23      	ldr	r2, [pc, #140]	@ (8001384 <PS2_ReadButtons+0x98>)
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fe:	6018      	str	r0, [r3, #0]
 8001300:	3304      	adds	r3, #4
 8001302:	8019      	strh	r1, [r3, #0]
    uint8_t tx[9] = {0x01, 0x42, 0x00, 0, 0, 0, 0, 0, 0};
 8001304:	f244 2301 	movw	r3, #16897	@ 0x4201
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	711a      	strb	r2, [r3, #4]
    uint8_t rx[9] = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	721a      	strb	r2, [r3, #8]
    PS2_SendCommand(tx, rx, 9);
 8001320:	f107 0108 	add.w	r1, r7, #8
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2209      	movs	r2, #9
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff5c 	bl	80011e8 <PS2_SendCommand>
    isAnalog = (rx[1] == 0x73);
 8001330:	7a7b      	ldrb	r3, [r7, #9]
 8001332:	2b73      	cmp	r3, #115	@ 0x73
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <PS2_ReadButtons+0x9c>)
 800133e:	701a      	strb	r2, [r3, #0]

    result.buttons = (rx[4] << 8) | rx[3];
 8001340:	7b3b      	ldrb	r3, [r7, #12]
 8001342:	b21b      	sxth	r3, r3
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	7afb      	ldrb	r3, [r7, #11]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	b29b      	uxth	r3, r3
 8001352:	843b      	strh	r3, [r7, #32]
    result.rx = rx[5];
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    result.ry = rx[6];
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    result.lx = rx[7];
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    result.ly = rx[8];
 8001366:	7c3b      	ldrb	r3, [r7, #16]
 8001368:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    return result;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	6010      	str	r0, [r2, #0]
 8001378:	889b      	ldrh	r3, [r3, #4]
 800137a:	8093      	strh	r3, [r2, #4]
}
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	3728      	adds	r7, #40	@ 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800a344 	.word	0x0800a344
 8001388:	200004ba 	.word	0x200004ba

0800138c <Test_SPI_1Byte>:

void Test_SPI_1Byte(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af02      	add	r7, sp, #8
    uint8_t tx = 0x01;       // Gửi byte 0x01 (giống trong PS2 poll)
 8001392:	2301      	movs	r3, #1
 8001394:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t rx = 0x00;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    PS2_ATT_LOW();           // Kéo ATT xuống (CS = LOW)
 800139e:	f7ff ff0b 	bl	80011b8 <PS2_ATT_LOW>
    delay_us(15);
 80013a2:	200f      	movs	r0, #15
 80013a4:	f7ff feec 	bl	8001180 <delay_us>

    HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 100);
 80013a8:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 80013ac:	f107 0147 	add.w	r1, r7, #71	@ 0x47
 80013b0:	2364      	movs	r3, #100	@ 0x64
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <Test_SPI_1Byte+0x54>)
 80013b8:	f004 fb3f 	bl	8005a3a <HAL_SPI_TransmitReceive>

    PS2_ATT_HIGH();          // Thả ATT lên (CS = HIGH)
 80013bc:	f7ff ff08 	bl	80011d0 <PS2_ATT_HIGH>

    char msg[64];
    snprintf(msg, sizeof(msg), "SPI test RX: 0x%02X\r\n", rx);
 80013c0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80013c4:	1d38      	adds	r0, r7, #4
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <Test_SPI_1Byte+0x58>)
 80013c8:	2140      	movs	r1, #64	@ 0x40
 80013ca:	f006 fda1 	bl	8007f10 <sniprintf>
    print_uart(msg);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fdd5 	bl	8000f80 <print_uart>
}
 80013d6:	bf00      	nop
 80013d8:	3748      	adds	r7, #72	@ 0x48
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002cc 	.word	0x200002cc
 80013e4:	0800a34c 	.word	0x0800a34c

080013e8 <send_sdo_write_u8>:
    print_uart(msg);
}

                            //CAN THUẦN LẬP TRÌNH THEO TIÊU CHUẨN CIA402,301 -> ĐIỀU KHIỂN ĐỘNG CƠ//

void send_sdo_write_u8(uint8_t nodeId, uint16_t index, uint8_t subidx, uint8_t value) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b08d      	sub	sp, #52	@ 0x34
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4623      	mov	r3, r4
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	4603      	mov	r3, r0
 80013fc:	80bb      	strh	r3, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	71bb      	strb	r3, [r7, #6]
 8001402:	4613      	mov	r3, r2
 8001404:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 8001406:	232f      	movs	r3, #47	@ 0x2f
 8001408:	733b      	strb	r3, [r7, #12]
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	737b      	strb	r3, [r7, #13]
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	73bb      	strb	r3, [r7, #14]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	743b      	strb	r3, [r7, #16]
 8001422:	2300      	movs	r3, #0
 8001424:	747b      	strb	r3, [r7, #17]
 8001426:	2300      	movs	r3, #0
 8001428:	74bb      	strb	r3, [r7, #18]
 800142a:	2300      	movs	r3, #0
 800142c:	74fb      	strb	r3, [r7, #19]
        0x00,
        0x00,
        0x00
    };

    TxHeader.StdId = 0x600 + nodeId;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001434:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 8001436:	2308      	movs	r3, #8
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	f107 020c 	add.w	r2, r7, #12
 800144a:	f107 0118 	add.w	r1, r7, #24
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <send_sdo_write_u8+0x7c>)
 8001450:	f7ff fd56 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(10);
 8001454:	200a      	movs	r0, #10
 8001456:	f002 f94d 	bl	80036f4 <HAL_Delay>
}
 800145a:	bf00      	nop
 800145c:	3734      	adds	r7, #52	@ 0x34
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	200001fc 	.word	0x200001fc

08001468 <send_sdo_write_u16>:
void send_sdo_write_u16(uint8_t nodeId, uint16_t index, uint8_t subidx, uint16_t value) {
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b08d      	sub	sp, #52	@ 0x34
 800146c:	af00      	add	r7, sp, #0
 800146e:	4604      	mov	r4, r0
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	4623      	mov	r3, r4
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	4603      	mov	r3, r0
 800147c:	80bb      	strh	r3, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	71bb      	strb	r3, [r7, #6]
 8001482:	4613      	mov	r3, r2
 8001484:	807b      	strh	r3, [r7, #2]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 8001486:	232b      	movs	r3, #43	@ 0x2b
 8001488:	733b      	strb	r3, [r7, #12]
 800148a:	88bb      	ldrh	r3, [r7, #4]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	737b      	strb	r3, [r7, #13]
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b29b      	uxth	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	73bb      	strb	r3, [r7, #14]
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	743b      	strb	r3, [r7, #16]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	747b      	strb	r3, [r7, #17]
 80014ae:	2300      	movs	r3, #0
 80014b0:	74bb      	strb	r3, [r7, #18]
 80014b2:	2300      	movs	r3, #0
 80014b4:	74fb      	strb	r3, [r7, #19]
        (value >> 8) & 0xFF,
        0x00,
        0x00
    };

    TxHeader.StdId = 0x600 + nodeId;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80014bc:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 80014be:	2308      	movs	r3, #8
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	f107 0118 	add.w	r1, r7, #24
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <send_sdo_write_u16+0x84>)
 80014d8:	f7ff fd12 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(10);
 80014dc:	200a      	movs	r0, #10
 80014de:	f002 f909 	bl	80036f4 <HAL_Delay>
}
 80014e2:	bf00      	nop
 80014e4:	3734      	adds	r7, #52	@ 0x34
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200001fc 	.word	0x200001fc

080014f0 <send_sdo_write_u32>:
void send_sdo_write_u32(uint8_t nodeId, uint16_t index, uint8_t subidx, uint32_t value) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	@ 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	460b      	mov	r3, r1
 80014fe:	80bb      	strh	r3, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {
 8001504:	2323      	movs	r3, #35	@ 0x23
 8001506:	733b      	strb	r3, [r7, #12]
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	737b      	strb	r3, [r7, #13]
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	b29b      	uxth	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	73bb      	strb	r3, [r7, #14]
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	743b      	strb	r3, [r7, #16]
        0x23,
        index & 0xFF,
        (index >> 8) & 0xFF,
        subidx,
        value & 0xFF,
        (value >> 8) & 0xFF,
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	0a1b      	lsrs	r3, r3, #8
    uint8_t data[8] = {
 8001526:	b2db      	uxtb	r3, r3
 8001528:	747b      	strb	r3, [r7, #17]
        (value >> 16) & 0xFF,
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	0c1b      	lsrs	r3, r3, #16
    uint8_t data[8] = {
 800152e:	b2db      	uxtb	r3, r3
 8001530:	74bb      	strb	r3, [r7, #18]
        (value >> 24) & 0xFF
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	0e1b      	lsrs	r3, r3, #24
    uint8_t data[8] = {
 8001536:	b2db      	uxtb	r3, r3
 8001538:	74fb      	strb	r3, [r7, #19]
    };

    TxHeader.StdId = 0x600 + nodeId;
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001540:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 8001542:	2308      	movs	r3, #8
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	f107 020c 	add.w	r2, r7, #12
 8001556:	f107 0118 	add.w	r1, r7, #24
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <send_sdo_write_u32+0x80>)
 800155c:	f7ff fcd0 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f002 f8c7 	bl	80036f4 <HAL_Delay>
}
 8001566:	bf00      	nop
 8001568:	3730      	adds	r7, #48	@ 0x30
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200001fc 	.word	0x200001fc

08001574 <remap_rpdo1_for_velocity>:
void remap_rpdo1_for_velocity(uint8_t nodeId) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
    // 1. Disable RPDO1
    send_sdo_write_u32(nodeId, 0x1400, 0x01, 0x80000200);
 800157e:	79f8      	ldrb	r0, [r7, #7]
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <remap_rpdo1_for_velocity+0x70>)
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001588:	f7ff ffb2 	bl	80014f0 <send_sdo_write_u32>

    // 2. Clear existing mapping
    send_sdo_write_u8(nodeId, 0x1600, 0x00, 0);
 800158c:	79f8      	ldrb	r0, [r7, #7]
 800158e:	2300      	movs	r3, #0
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 8001596:	f7ff ff27 	bl	80013e8 <send_sdo_write_u8>

    // 3. Map Controlword (0x6040, 16-bit)
    send_sdo_write_u32(nodeId, 0x1600, 0x01, 0x60400010);
 800159a:	79f8      	ldrb	r0, [r7, #7]
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <remap_rpdo1_for_velocity+0x74>)
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015a4:	f7ff ffa4 	bl	80014f0 <send_sdo_write_u32>

    // 4. Map Target Velocity (0x60FF, 32-bit)
    send_sdo_write_u32(nodeId, 0x1600, 0x02, 0x60FF0020);
 80015a8:	79f8      	ldrb	r0, [r7, #7]
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <remap_rpdo1_for_velocity+0x78>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015b2:	f7ff ff9d 	bl	80014f0 <send_sdo_write_u32>

    // 5. Set number of mapped entries = 2
    send_sdo_write_u8(nodeId, 0x1600, 0x00, 2);
 80015b6:	79f8      	ldrb	r0, [r7, #7]
 80015b8:	2302      	movs	r3, #2
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 80015c0:	f7ff ff12 	bl	80013e8 <send_sdo_write_u8>

    // 6. Enable RPDO1 (SYNC: 0x00000200)
    send_sdo_write_u32(nodeId, 0x1400, 0x01, 0x00000200);
 80015c4:	79f8      	ldrb	r0, [r7, #7]
 80015c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80015d0:	f7ff ff8e 	bl	80014f0 <send_sdo_write_u32>

    print_uart("✅ RPDO1 re-mapped for CW + Target Velocity!\r\n");
 80015d4:	4806      	ldr	r0, [pc, #24]	@ (80015f0 <remap_rpdo1_for_velocity+0x7c>)
 80015d6:	f7ff fcd3 	bl	8000f80 <print_uart>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	80000200 	.word	0x80000200
 80015e8:	60400010 	.word	0x60400010
 80015ec:	60ff0020 	.word	0x60ff0020
 80015f0:	0800a428 	.word	0x0800a428

080015f4 <remap_tpdo1_velocity>:
void remap_tpdo1_velocity(uint8_t nodeId) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
    send_sdo_write_u32(nodeId, 0x1800, 0x01, 0x80000200); // disable TPDO1
 80015fe:	79f8      	ldrb	r0, [r7, #7]
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <remap_tpdo1_velocity+0x5c>)
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001608:	f7ff ff72 	bl	80014f0 <send_sdo_write_u32>
    send_sdo_write_u8(nodeId,  0x1A00, 0x00, 0);           // clear mapping
 800160c:	79f8      	ldrb	r0, [r7, #7]
 800160e:	2300      	movs	r3, #0
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001616:	f7ff fee7 	bl	80013e8 <send_sdo_write_u8>
    send_sdo_write_u32(nodeId, 0x1A00, 0x01, 0x606C0020);  // map 606C: 32-bit
 800161a:	79f8      	ldrb	r0, [r7, #7]
 800161c:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <remap_tpdo1_velocity+0x60>)
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001624:	f7ff ff64 	bl	80014f0 <send_sdo_write_u32>
    send_sdo_write_u8(nodeId,  0x1A00, 0x00, 1);           // 1 entry
 8001628:	79f8      	ldrb	r0, [r7, #7]
 800162a:	2301      	movs	r3, #1
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001632:	f7ff fed9 	bl	80013e8 <send_sdo_write_u8>
    send_sdo_write_u32(nodeId, 0x1800, 0x01, 0x00000200);  // enable TPDO1
 8001636:	79f8      	ldrb	r0, [r7, #7]
 8001638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001642:	f7ff ff55 	bl	80014f0 <send_sdo_write_u32>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	80000200 	.word	0x80000200
 8001654:	606c0020 	.word	0x606c0020

08001658 <send_enable_sequence>:

void send_enable_sequence(uint8_t nodeId) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
	// 1. Fault Reset trước
	    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x0080);
 8001662:	79f8      	ldrb	r0, [r7, #7]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	2200      	movs	r2, #0
 8001668:	f246 0140 	movw	r1, #24640	@ 0x6040
 800166c:	f7ff fefc 	bl	8001468 <send_sdo_write_u16>
	    HAL_Delay(10);
 8001670:	200a      	movs	r0, #10
 8001672:	f002 f83f 	bl	80036f4 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x06); HAL_Delay(10); // Shutdown
 8001676:	79f8      	ldrb	r0, [r7, #7]
 8001678:	2306      	movs	r3, #6
 800167a:	2200      	movs	r2, #0
 800167c:	f246 0140 	movw	r1, #24640	@ 0x6040
 8001680:	f7ff fef2 	bl	8001468 <send_sdo_write_u16>
 8001684:	200a      	movs	r0, #10
 8001686:	f002 f835 	bl	80036f4 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x07); HAL_Delay(10); // Switch on
 800168a:	79f8      	ldrb	r0, [r7, #7]
 800168c:	2307      	movs	r3, #7
 800168e:	2200      	movs	r2, #0
 8001690:	f246 0140 	movw	r1, #24640	@ 0x6040
 8001694:	f7ff fee8 	bl	8001468 <send_sdo_write_u16>
 8001698:	200a      	movs	r0, #10
 800169a:	f002 f82b 	bl	80036f4 <HAL_Delay>
    send_sdo_write_u16(nodeId, 0x6040, 0x00, 0x0F); HAL_Delay(10); // Enable operation
 800169e:	79f8      	ldrb	r0, [r7, #7]
 80016a0:	230f      	movs	r3, #15
 80016a2:	2200      	movs	r2, #0
 80016a4:	f246 0140 	movw	r1, #24640	@ 0x6040
 80016a8:	f7ff fede 	bl	8001468 <send_sdo_write_u16>
 80016ac:	200a      	movs	r0, #10
 80016ae:	f002 f821 	bl	80036f4 <HAL_Delay>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <send_sync_frame>:

void send_sync_frame() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef tx;
    uint8_t dummy = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]
    uint32_t mbox;
    tx.StdId = 0x080;
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	60bb      	str	r3, [r7, #8]
    tx.IDE = CAN_ID_STD;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
    tx.RTR = CAN_RTR_DATA;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
    tx.DLC = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
    CAN_SendNonBlocking(&hcan2, &tx, &dummy, &mbox);
 80016d6:	463b      	mov	r3, r7
 80016d8:	1dfa      	adds	r2, r7, #7
 80016da:	f107 0108 	add.w	r1, r7, #8
 80016de:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <send_sync_frame+0x3c>)
 80016e0:	f7ff fc0e 	bl	8000f00 <CAN_SendNonBlocking>
    count_sync++;
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <send_sync_frame+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <send_sync_frame+0x40>)
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001fc 	.word	0x200001fc
 80016fc:	20000448 	.word	0x20000448

08001700 <send_velocity_rpdo>:

uint32_t txMailbox;

void send_velocity_rpdo(uint8_t node, int32_t velocity, bool toggle_cw, uint32_t accel, uint32_t decel) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	4613      	mov	r3, r2
 8001710:	73bb      	strb	r3, [r7, #14]
    static bool toggle = false;
    uint8_t data[8];

    // 1. Set acceleration & deceleration trước khi gửi velocity
    send_sdo_write_u32(node, 0x6083, 0x00, accel);  // acceleration
 8001712:	7bf8      	ldrb	r0, [r7, #15]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f246 0183 	movw	r1, #24707	@ 0x6083
 800171c:	f7ff fee8 	bl	80014f0 <send_sdo_write_u32>
    HAL_Delay(2);
 8001720:	2002      	movs	r0, #2
 8001722:	f001 ffe7 	bl	80036f4 <HAL_Delay>
    send_sdo_write_u32(node, 0x6084, 0x00, decel);  // deceleration
 8001726:	7bf8      	ldrb	r0, [r7, #15]
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	2200      	movs	r2, #0
 800172c:	f246 0184 	movw	r1, #24708	@ 0x6084
 8001730:	f7ff fede 	bl	80014f0 <send_sdo_write_u32>
    HAL_Delay(2);
 8001734:	2002      	movs	r0, #2
 8001736:	f001 ffdd 	bl	80036f4 <HAL_Delay>

    // 2. Toggle CW
    uint16_t cw = toggle_cw ? (toggle ? 0x1F : 0x0F) : 0x0F;
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <send_velocity_rpdo+0x50>
 8001740:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <send_velocity_rpdo+0xe4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <send_velocity_rpdo+0x4c>
 8001748:	231f      	movs	r3, #31
 800174a:	e002      	b.n	8001752 <send_velocity_rpdo+0x52>
 800174c:	230f      	movs	r3, #15
 800174e:	e000      	b.n	8001752 <send_velocity_rpdo+0x52>
 8001750:	230f      	movs	r3, #15
 8001752:	83fb      	strh	r3, [r7, #30]
    toggle = !toggle;
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <send_velocity_rpdo+0xe4>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f083 0301 	eor.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <send_velocity_rpdo+0xe4>)
 8001770:	701a      	strb	r2, [r3, #0]

    // 3. Build RPDO data (CW + velocity)
    data[0] = cw & 0xFF;
 8001772:	8bfb      	ldrh	r3, [r7, #30]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	753b      	strb	r3, [r7, #20]
    data[1] = (cw >> 8) & 0xFF;
 8001778:	8bfb      	ldrh	r3, [r7, #30]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	b29b      	uxth	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	757b      	strb	r3, [r7, #21]

    data[2] = (velocity >> 0) & 0xFF;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	75bb      	strb	r3, [r7, #22]
    data[3] = (velocity >> 8) & 0xFF;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	121b      	asrs	r3, r3, #8
 800178c:	b2db      	uxtb	r3, r3
 800178e:	75fb      	strb	r3, [r7, #23]
    data[4] = (velocity >> 16) & 0xFF;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	141b      	asrs	r3, r3, #16
 8001794:	b2db      	uxtb	r3, r3
 8001796:	763b      	strb	r3, [r7, #24]
    data[5] = (velocity >> 24) & 0xFF;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	0e1b      	lsrs	r3, r3, #24
 800179c:	b2db      	uxtb	r3, r3
 800179e:	767b      	strb	r3, [r7, #25]

    data[6] = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	76bb      	strb	r3, [r7, #26]
    data[7] = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	76fb      	strb	r3, [r7, #27]

    // 4. Gửi RPDO
    TxHeader.StdId = 0x200 + node;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <send_velocity_rpdo+0xe8>)
 80017b2:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <send_velocity_rpdo+0xe8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <send_velocity_rpdo+0xe8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <send_velocity_rpdo+0xe8>)
 80017c2:	2208      	movs	r2, #8
 80017c4:	611a      	str	r2, [r3, #16]

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 80017c6:	f107 0214 	add.w	r2, r7, #20
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <send_velocity_rpdo+0xec>)
 80017cc:	4906      	ldr	r1, [pc, #24]	@ (80017e8 <send_velocity_rpdo+0xe8>)
 80017ce:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <send_velocity_rpdo+0xf0>)
 80017d0:	f7ff fb96 	bl	8000f00 <CAN_SendNonBlocking>
    HAL_Delay(5);
 80017d4:	2005      	movs	r0, #5
 80017d6:	f001 ff8d 	bl	80036f4 <HAL_Delay>
}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200004de 	.word	0x200004de
 80017e8:	2000045c 	.word	0x2000045c
 80017ec:	200004bc 	.word	0x200004bc
 80017f0:	200001fc 	.word	0x200001fc

080017f4 <send_temp_to_usbcan>:
//static uint8_t lostCounter1 = 0, lostCounter2 = 0;
//extern volatile bool need_reenable_node1, need_reenable_node2;
//extern int32_t prevVel1=0, prevVel2=0;  // vận tốc yêu cầu gần nhất
volatile uint8_t ready1=0;
volatile uint8_t ready2=0;
void send_temp_to_usbcan(int32_t temperature) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	@ 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x018;
 8001806:	2318      	movs	r3, #24
 8001808:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 4;
 800180a:	2304      	movs	r3, #4
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24

    data[0] = (uint8_t)(temperature & 0xFF);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)((temperature >> 8) & 0xFF);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	121b      	asrs	r3, r3, #8
 8001820:	b2db      	uxtb	r3, r3
 8001822:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)((temperature >> 16) & 0xFF);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	141b      	asrs	r3, r3, #16
 8001828:	b2db      	uxtb	r3, r3
 800182a:	73bb      	strb	r3, [r7, #14]
    data[3] = (uint8_t)((temperature >> 24) & 0xFF);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	161b      	asrs	r3, r3, #24
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]

    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	f107 020c 	add.w	r2, r7, #12
 800183c:	f107 0118 	add.w	r1, r7, #24
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <send_temp_to_usbcan+0x5c>)
 8001842:	f7ff fb5d 	bl	8000f00 <CAN_SendNonBlocking>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	@ 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200001fc 	.word	0x200001fc

08001854 <HAL_CAN_RxFifo0MsgPendingCallback>:
//Xử lý LED command (0x021).
//
//Xử lý PS2 block command (0x022).
//
//Xử lý Auto velocity update (0x013).
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b0b9      	sub	sp, #228	@ 0xe4
 8001858:	af04      	add	r7, sp, #16
 800185a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
  static bool toggle = false;
  uint8_t rxData[8];
  uint32_t now = HAL_GetTick();
 800185c:	f001 ff3e 	bl	80036dc <HAL_GetTick>
 8001860:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  (void)toggle; (void)now; /* Silence unused-variable warnings when not used */
    can_rx_count++;
 8001864:	4b95      	ldr	r3, [pc, #596]	@ (8001abc <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	4a94      	ldr	r2, [pc, #592]	@ (8001abc <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800186c:	6013      	str	r3, [r2, #0]
    can_rx_flag ++;
 800186e:	4b94      	ldr	r3, [pc, #592]	@ (8001ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	4a92      	ldr	r2, [pc, #584]	@ (8001ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001876:	6013      	str	r3, [r2, #0]
   // static uint32_t lastCheck = 0;  // ✅ dùng static, không reset mỗi lần
    char buf[64];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001878:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800187c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001880:	2100      	movs	r1, #0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f002 fae8 	bl	8003e58 <HAL_CAN_GetRxMessage>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
        print_uart("❌ Failed to get RX message in callback\r\n");
 800188e:	488d      	ldr	r0, [pc, #564]	@ (8001ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001890:	f7ff fb76 	bl	8000f80 <print_uart>
        return;
 8001894:	e1c5      	b.n	8001c22 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ce>
    }

    if ((rxHeader.StdId == 0x701 || rxHeader.StdId == 0x702) &&
 8001896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800189a:	f240 7201 	movw	r2, #1793	@ 0x701
 800189e:	4293      	cmp	r3, r2
 80018a0:	d005      	beq.n	80018ae <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80018a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018a6:	f240 7202 	movw	r2, #1794	@ 0x702
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d117      	bne.n	80018de <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
        rxHeader.DLC == 1 && rxData[0] == 0x00) {
 80018ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    if ((rxHeader.StdId == 0x701 || rxHeader.StdId == 0x702) &&
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d113      	bne.n	80018de <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
        rxHeader.DLC == 1 && rxData[0] == 0x00) {
 80018b6:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>

        uint8_t nodeId = rxHeader.StdId - 0x700;
 80018be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018c2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb

        if (!already_initialized[nodeId]) {
 80018c6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80018ca:	4a7f      	ldr	r2, [pc, #508]	@ (8001ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
            node_booted[nodeId] = 1;
 80018d4:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80018d8:	4a7c      	ldr	r2, [pc, #496]	@ (8001acc <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80018da:	2101      	movs	r1, #1
 80018dc:	54d1      	strb	r1, [r2, r3]




    // Kiểm tra nếu đây là phản hồi từ node1 hoặc node2 cho SDO Actual Velocity
    if (rxHeader.StdId == 0x581 || rxHeader.StdId == 0x582) {
 80018de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018e2:	f240 5281 	movw	r2, #1409	@ 0x581
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d005      	beq.n	80018f6 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
 80018ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018ee:	f240 5282 	movw	r2, #1410	@ 0x582
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d142      	bne.n	800197c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        if (rxData[0] == 0x43 && rxData[1] == 0x6C && rxData[2] == 0x60) {
 80018f6:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80018fa:	2b43      	cmp	r3, #67	@ 0x43
 80018fc:	d13e      	bne.n	800197c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 80018fe:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001902:	2b6c      	cmp	r3, #108	@ 0x6c
 8001904:	d13a      	bne.n	800197c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 8001906:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 800190a:	2b60      	cmp	r3, #96	@ 0x60
 800190c:	d136      	bne.n	800197c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
            int nodeId = rxHeader.StdId - 0x580;
 800190e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001912:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 8001916:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
//            Byte 2: Index high (0x60)   → Object 0x606C: Actual Velocity
//            Byte 3: Subindex (usually 0)
//            Byte 4–7: Dữ liệu 32-bit (int32_t velocity)

            int32_t velocity = (int32_t)(
                ((uint32_t)rxData[4]) |
 800191a:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800191e:	461a      	mov	r2, r3
                ((uint32_t)rxData[5] << 8) |
 8001920:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001924:	021b      	lsls	r3, r3, #8
                ((uint32_t)rxData[4]) |
 8001926:	431a      	orrs	r2, r3
                ((uint32_t)rxData[6] << 16) |
 8001928:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800192c:	041b      	lsls	r3, r3, #16
                ((uint32_t)rxData[5] << 8) |
 800192e:	431a      	orrs	r2, r3
                ((uint32_t)rxData[7] << 24)
 8001930:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001934:	061b      	lsls	r3, r3, #24
                ((uint32_t)rxData[6] << 16) |
 8001936:	4313      	orrs	r3, r2
            int32_t velocity = (int32_t)(
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            );
            if(nodeId==1) currentVel1=velocity;
 800193c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001940:	2b01      	cmp	r3, #1
 8001942:	d103      	bne.n	800194c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
 8001944:	4a62      	ldr	r2, [pc, #392]	@ (8001ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800194a:	6013      	str	r3, [r2, #0]
            if(nodeId==2) currentVel2=velocity;
 800194c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001950:	2b02      	cmp	r3, #2
 8001952:	d103      	bne.n	800195c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
 8001954:	4a5f      	ldr	r2, [pc, #380]	@ (8001ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800195a:	6013      	str	r3, [r2, #0]
            snprintf(buf, sizeof(buf),
 800195c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800196a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 800196c:	2140      	movs	r1, #64	@ 0x40
 800196e:	f006 facf 	bl	8007f10 <sniprintf>
                     "🔄 Node %d Actual Velocity: %ld\r\n", nodeId, velocity);

            print_uart(buf);
 8001972:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fb02 	bl	8000f80 <print_uart>

                  }
    }
    if ((rxHeader.StdId == 0x013) && (rxHeader.DLC == 8)) { // frame chứa 2 vận tốc
 800197c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001980:	2b13      	cmp	r3, #19
 8001982:	d176      	bne.n	8001a72 <HAL_CAN_RxFifo0MsgPendingCallback+0x21e>
 8001984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001988:	2b08      	cmp	r3, #8
 800198a:	d172      	bne.n	8001a72 <HAL_CAN_RxFifo0MsgPendingCallback+0x21e>
    	   if (current_mode != MODE_AUTO) {
 800198c:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	f040 8144 	bne.w	8001c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x3cc>
    	        // Không xử lý gói 0x013 nếu không ở AUTO mode
    	        return;
    	    }
        print_uart("oke\r\n");
 8001998:	4851      	ldr	r0, [pc, #324]	@ (8001ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800199a:	f7ff faf1 	bl	8000f80 <print_uart>
        memcpy(&up_vel1, &rxData[0], 4);
 800199e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019a2:	4a50      	ldr	r2, [pc, #320]	@ (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80019a4:	6013      	str	r3, [r2, #0]
        memcpy(&up_vel2, &rxData[4], 4);
 80019a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019aa:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80019ac:	6013      	str	r3, [r2, #0]
        ready1 = 1; ready2 = 1;
 80019ae:	4b4f      	ldr	r3, [pc, #316]	@ (8001aec <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	4b4e      	ldr	r3, [pc, #312]	@ (8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
//        if( up_vel1 >= 80000 ) up_vel1=80000;
//        else if( up_vel1 <= -80000) up_vel1=-80000;
//        if( up_vel2 >= 80000 ) up_vel2=80000;
//        else if( up_vel2 <= -80000) up_vel2=-80000;
        snprintf(buf, sizeof(buf), "✅ Velocity 1 (Motor1) updated: %ld\r\n", up_vel1);
 80019ba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80019c2:	4a4c      	ldr	r2, [pc, #304]	@ (8001af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80019c4:	2140      	movs	r1, #64	@ 0x40
 80019c6:	f006 faa3 	bl	8007f10 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80019ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fc4e 	bl	8000270 <strlen>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	4845      	ldr	r0, [pc, #276]	@ (8001af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80019e2:	f005 f905 	bl	8006bf0 <HAL_UART_Transmit>

        snprintf(buf, sizeof(buf),
            "📦 Data 1: %02X %02X %02X %02X\r\n",
            rxData[0], rxData[1], rxData[2], rxData[3]);
 80019e6:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
        snprintf(buf, sizeof(buf),
 80019ea:	461c      	mov	r4, r3
            rxData[0], rxData[1], rxData[2], rxData[3]);
 80019ec:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80019f0:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 80019f4:	f897 109b 	ldrb.w	r1, [r7, #155]	@ 0x9b
        snprintf(buf, sizeof(buf),
 80019f8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80019fc:	9102      	str	r1, [sp, #8]
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4623      	mov	r3, r4
 8001a04:	4a3d      	ldr	r2, [pc, #244]	@ (8001afc <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001a06:	2140      	movs	r1, #64	@ 0x40
 8001a08:	f006 fa82 	bl	8007f10 <sniprintf>
        print_uart(buf);
 8001a0c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fab5 	bl	8000f80 <print_uart>

        snprintf(buf, sizeof(buf), "✅ Velocity 2 (Motor2) updated: %ld\r\n", up_vel2);
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001a1e:	4a38      	ldr	r2, [pc, #224]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001a20:	2140      	movs	r1, #64	@ 0x40
 8001a22:	f006 fa75 	bl	8007f10 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001a26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fc20 	bl	8000270 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	482e      	ldr	r0, [pc, #184]	@ (8001af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001a3e:	f005 f8d7 	bl	8006bf0 <HAL_UART_Transmit>

        snprintf(buf, sizeof(buf),
            "📦 Data 2: %02X %02X %02X %02X\r\n",
            rxData[4], rxData[5], rxData[6], rxData[7]);
 8001a42:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
        snprintf(buf, sizeof(buf),
 8001a46:	461c      	mov	r4, r3
            rxData[4], rxData[5], rxData[6], rxData[7]);
 8001a48:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001a4c:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8001a50:	f897 109f 	ldrb.w	r1, [r7, #159]	@ 0x9f
        snprintf(buf, sizeof(buf),
 8001a54:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001a58:	9102      	str	r1, [sp, #8]
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4623      	mov	r3, r4
 8001a60:	4a28      	ldr	r2, [pc, #160]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001a62:	2140      	movs	r1, #64	@ 0x40
 8001a64:	f006 fa54 	bl	8007f10 <sniprintf>
        print_uart(buf);
 8001a68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fa87 	bl	8000f80 <print_uart>

    }

    if ((rxHeader.StdId == 0x020) && (rxHeader.DLC == 8)) {
 8001a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d158      	bne.n	8001b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>
 8001a7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d154      	bne.n	8001b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>
        uint32_t mode;
        memcpy(&mode, &rxData[0], 4);
 8001a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a86:	657b      	str	r3, [r7, #84]	@ 0x54

        if (mode == 1) {  // MODE_PS2
 8001a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d109      	bne.n	8001aa2 <HAL_CAN_RxFifo0MsgPendingCallback+0x24e>
            current_mode = MODE_PS2;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
            mode_changed_flag = 1;   // Để vòng while reset tốc độ
 8001a94:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
            print_uart("✅ PS2 Mode\r\n");
 8001a9a:	481c      	ldr	r0, [pc, #112]	@ (8001b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001a9c:	f7ff fa70 	bl	8000f80 <print_uart>
 8001aa0:	e044      	b.n	8001b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>
        }
        else if (mode == 2) { // MODE_AUTO
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d135      	bne.n	8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>
            current_mode = MODE_AUTO;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
            mode_changed_flag = 1;   // Để vòng while reset tốc độ
 8001aae:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
            print_uart("✅ Auto Mode\r\n");
 8001ab4:	4816      	ldr	r0, [pc, #88]	@ (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8001ab6:	f7ff fa63 	bl	8000f80 <print_uart>
 8001aba:	e037      	b.n	8001b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>
 8001abc:	200001f4 	.word	0x200001f4
 8001ac0:	200001f8 	.word	0x200001f8
 8001ac4:	0800a518 	.word	0x0800a518
 8001ac8:	200004d8 	.word	0x200004d8
 8001acc:	200004d4 	.word	0x200004d4
 8001ad0:	200004c8 	.word	0x200004c8
 8001ad4:	200004cc 	.word	0x200004cc
 8001ad8:	0800a544 	.word	0x0800a544
 8001adc:	20000444 	.word	0x20000444
 8001ae0:	0800a568 	.word	0x0800a568
 8001ae4:	200004c0 	.word	0x200004c0
 8001ae8:	200004c4 	.word	0x200004c4
 8001aec:	200004d0 	.word	0x200004d0
 8001af0:	200004d1 	.word	0x200004d1
 8001af4:	0800a570 	.word	0x0800a570
 8001af8:	200003fc 	.word	0x200003fc
 8001afc:	0800a598 	.word	0x0800a598
 8001b00:	0800a5bc 	.word	0x0800a5bc
 8001b04:	0800a5e4 	.word	0x0800a5e4
 8001b08:	200004dc 	.word	0x200004dc
 8001b0c:	0800a608 	.word	0x0800a608
 8001b10:	0800a618 	.word	0x0800a618
        }
        else {
            char buf[64];
            snprintf(buf, sizeof(buf), "⚠️ Unknown Mode: %lu\r\n", mode);
 8001b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b16:	f107 000c 	add.w	r0, r7, #12
 8001b1a:	4a43      	ldr	r2, [pc, #268]	@ (8001c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d4>)
 8001b1c:	2140      	movs	r1, #64	@ 0x40
 8001b1e:	f006 f9f7 	bl	8007f10 <sniprintf>
            print_uart(buf);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa2a 	bl	8000f80 <print_uart>
        }
    }

    if ((rxHeader.StdId == 0x581) &&
 8001b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b30:	f240 5281 	movw	r2, #1409	@ 0x581
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d131      	bne.n	8001b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
        rxData[0] == 0x43 &&
 8001b38:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
    if ((rxHeader.StdId == 0x581) &&
 8001b3c:	2b43      	cmp	r3, #67	@ 0x43
 8001b3e:	d12d      	bne.n	8001b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
        rxData[1]==0x12 && rxData[2]==0x50 && rxData[3]==0x00) {
 8001b40:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
        rxData[0] == 0x43 &&
 8001b44:	2b12      	cmp	r3, #18
 8001b46:	d129      	bne.n	8001b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
        rxData[1]==0x12 && rxData[2]==0x50 && rxData[3]==0x00) {
 8001b48:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001b4c:	2b50      	cmp	r3, #80	@ 0x50
 8001b4e:	d125      	bne.n	8001b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x348>
 8001b50:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d121      	bne.n	8001b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x348>

        int32_t driver_temp = (int32_t)(
            ((uint32_t)rxData[4]) |
 8001b58:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001b5c:	461a      	mov	r2, r3
            ((uint32_t)rxData[5] << 8) |
 8001b5e:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001b62:	021b      	lsls	r3, r3, #8
            ((uint32_t)rxData[4]) |
 8001b64:	431a      	orrs	r2, r3
            ((uint32_t)rxData[6] << 16) |
 8001b66:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001b6a:	041b      	lsls	r3, r3, #16
            ((uint32_t)rxData[5] << 8) |
 8001b6c:	431a      	orrs	r2, r3
            ((uint32_t)rxData[7] << 24)
 8001b6e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001b72:	061b      	lsls	r3, r3, #24
            ((uint32_t)rxData[6] << 16) |
 8001b74:	4313      	orrs	r3, r2
        int32_t driver_temp = (int32_t)(
 8001b76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        );

        char buf[64];
        snprintf(buf, sizeof(buf), "🌡️ Driver Temp = %ld°C\r\n", driver_temp);
 8001b7a:	f107 000c 	add.w	r0, r7, #12
 8001b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b82:	4a2a      	ldr	r2, [pc, #168]	@ (8001c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x3d8>)
 8001b84:	2140      	movs	r1, #64	@ 0x40
 8001b86:	f006 f9c3 	bl	8007f10 <sniprintf>
        print_uart(buf);
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f9f6 	bl	8000f80 <print_uart>

        // Gửi lên CAN ID 0x018 để debug trên USB-CAN
        send_temp_to_usbcan(driver_temp);
 8001b94:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001b98:	f7ff fe2c 	bl	80017f4 <send_temp_to_usbcan>
    }
    //nhan lenh bat den sang 0x021
    if ((rxHeader.StdId == 0x021) && (rxHeader.DLC == 8)){
 8001b9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ba0:	2b21      	cmp	r3, #33	@ 0x21
 8001ba2:	d121      	bne.n	8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>
 8001ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d11d      	bne.n	8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>
       	  uint32_t led;
       	memcpy(&led, &rxData[0], 4);
 8001bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bb0:	653b      	str	r3, [r7, #80]	@ 0x50
   //    	                           (rxData[2] << 16) |
   //    	                           (rxData[3] << 24));
        static uint32_t last_led_cmd = 0xFFFFFFFF;  // Lưu lệnh trước để tránh xử lý lại

           // Nếu lệnh mới khác lệnh cũ thì xử lý (tránh lặp lại nhiều lần)
           if (led != last_led_cmd) {
 8001bb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x3dc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d015      	beq.n	8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>
               last_led_cmd = led;
 8001bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x3dc>)
 8001bc0:	6013      	str	r3, [r2, #0]
       	 if (led==1){  //01 00 00 00
 8001bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
       		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bce:	4819      	ldr	r0, [pc, #100]	@ (8001c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e0>)
 8001bd0:	f003 f890 	bl	8004cf4 <HAL_GPIO_WritePin>
 8001bd4:	e008      	b.n	8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>

       	 }
       	 else if (led==2){// 02 00 00 00
 8001bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d105      	bne.n	8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>
       		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001be2:	4814      	ldr	r0, [pc, #80]	@ (8001c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e0>)
 8001be4:	f003 f886 	bl	8004cf4 <HAL_GPIO_WritePin>
    }
    //dem goi tin nhan duoc trong 1 s
//    can_rx_count++;
    //vo hiẹu hoa ps2 khi co vat can

    if ((rxHeader.StdId == 0x024) && (rxHeader.DLC == 8)){
 8001be8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bec:	2b24      	cmp	r3, #36	@ 0x24
 8001bee:	d118      	bne.n	8001c22 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ce>
 8001bf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d114      	bne.n	8001c22 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ce>
          	  uint32_t stop;
          	memcpy(&stop, &rxData[0], 4);
 8001bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      //    	 mode = (int32_t)((rxData[0]) |
      //    	                           (rxData[1] << 8) |
      //    	                           (rxData[2] << 16) |
      //    	                           (rxData[3] << 24));
      if (stop==1||stop==2||stop==3){
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d005      	beq.n	8001c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>
 8001c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d002      	beq.n	8001c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>
 8001c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d103      	bne.n	8001c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>

    	  ps2_blocked=1;
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e4>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e004      	b.n	8001c22 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ce>
    	  //last_stop_update = HAL_GetTick();
      }
     // else if(stop==0) ps2_blocked=0;
      else ps2_blocked=0;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e000      	b.n	8001c22 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ce>
    	        return;
 8001c20:	bf00      	nop
    }
//    else ps2_blocked=0;

}
 8001c22:	37d4      	adds	r7, #212	@ 0xd4
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	0800a628 	.word	0x0800a628
 8001c2c:	0800a644 	.word	0x0800a644
 8001c30:	20000000 	.word	0x20000000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	200004db 	.word	0x200004db

08001c3c <send_vel_can>:
void send_vel_can(int32_t vel1, int32_t vel2) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	@ 0x30
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t txMailbox;
    uint8_t data[8];

    // ===== Giới hạn tần suất gửi: mỗi 20ms một lần (50Hz) =====
    if (HAL_GetTick() - last_tick < 10) return;
 8001c46:	f001 fd49 	bl	80036dc <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <send_vel_can+0x9c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	d93c      	bls.n	8001cd0 <send_vel_can+0x94>
    last_tick = HAL_GetTick();
 8001c56:	f001 fd41 	bl	80036dc <HAL_GetTick>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <send_vel_can+0x9c>)
 8001c5e:	6013      	str	r3, [r2, #0]

    // ===== Header CAN =====
    TxHeader.StdId = 0x030;   // ID cố định
 8001c60:	2330      	movs	r3, #48	@ 0x30
 8001c62:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC   = 8;       // 8 byte (vel1 + vel2)
 8001c64:	2308      	movs	r3, #8
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE   = CAN_ID_STD;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
    TxHeader.RTR   = CAN_RTR_DATA;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24

    // ===== Đóng gói vel1 =====
    data[0] = (uint8_t)(vel1 & 0xFF);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)((vel1 >> 8) & 0xFF);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	121b      	asrs	r3, r3, #8
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	737b      	strb	r3, [r7, #13]
    data[2] = (uint8_t)((vel1 >> 16) & 0xFF);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	141b      	asrs	r3, r3, #16
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	73bb      	strb	r3, [r7, #14]
    data[3] = (uint8_t)((vel1 >> 24) & 0xFF);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	161b      	asrs	r3, r3, #24
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	73fb      	strb	r3, [r7, #15]

    // ===== Đóng gói vel2 =====
    data[4] = (uint8_t)(vel2 & 0xFF);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	743b      	strb	r3, [r7, #16]
    data[5] = (uint8_t)((vel2 >> 8) & 0xFF);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	121b      	asrs	r3, r3, #8
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	747b      	strb	r3, [r7, #17]
    data[6] = (uint8_t)((vel2 >> 16) & 0xFF);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	141b      	asrs	r3, r3, #16
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	74bb      	strb	r3, [r7, #18]
    data[7] = (uint8_t)((vel2 >> 24) & 0xFF);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	161b      	asrs	r3, r3, #24
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	74fb      	strb	r3, [r7, #19]

    // ===== Gửi nếu Mailbox rảnh =====
    if (CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox) == HAL_OK) {
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	f107 020c 	add.w	r2, r7, #12
 8001cb4:	f107 0118 	add.w	r1, r7, #24
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <send_vel_can+0xa0>)
 8001cba:	f7ff f921 	bl	8000f00 <CAN_SendNonBlocking>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d106      	bne.n	8001cd2 <send_vel_can+0x96>
        count_send_vel_can++;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <send_vel_can+0xa4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <send_vel_can+0xa4>)
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e000      	b.n	8001cd2 <send_vel_can+0x96>
    if (HAL_GetTick() - last_tick < 10) return;
 8001cd0:	bf00      	nop
    } else {
        // Nếu mailbox đầy, bỏ qua frame này để tránh nghẽn
        // (có thể thêm debug ở đây nếu muốn)
    }
}
 8001cd2:	3730      	adds	r7, #48	@ 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200004e0 	.word	0x200004e0
 8001cdc:	200001fc 	.word	0x200001fc
 8001ce0:	20000458 	.word	0x20000458

08001ce4 <request_actual_velocity>:
	    CAN_SendNonBlocking(&hcan2, &TxHeader, data, &txMailbox);
	    HAL_Delay(5);
}
// => sau đó gọi update_vel(1,vel1,true,50000, 150000) -> để cập nhật vận tốc đến driver và motor 1
// => sau đó gọi update_vel(2,vel2,true,50000, 150000) -> để cập nhật vận tốc đến driver và motor 2
void request_actual_velocity(uint8_t nodeId) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef tx;
    uint8_t txData[8] = {0x40, 0x6C, 0x60, 0x00, 0, 0, 0, 0};
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <request_actual_velocity+0x40>)
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
    uint32_t txMailbox;

    tx.StdId = 0x600 + nodeId;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001cfc:	61bb      	str	r3, [r7, #24]
    tx.IDE = CAN_ID_STD;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
    tx.RTR = CAN_RTR_DATA;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    tx.DLC = 8;
 8001d06:	2308      	movs	r3, #8
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28

    CAN_SendNonBlocking(&hcan2, &tx, txData, &txMailbox);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	f107 0210 	add.w	r2, r7, #16
 8001d12:	f107 0118 	add.w	r1, r7, #24
 8001d16:	4804      	ldr	r0, [pc, #16]	@ (8001d28 <request_actual_velocity+0x44>)
 8001d18:	f7ff f8f2 	bl	8000f00 <CAN_SendNonBlocking>
}
 8001d1c:	bf00      	nop
 8001d1e:	3730      	adds	r7, #48	@ 0x30
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	00606c40 	.word	0x00606c40
 8001d28:	200001fc 	.word	0x200001fc

08001d2c <HAL_CAN_TxMailbox0CompleteCallback>:

    uint32_t txMailbox;
    CAN_SendNonBlocking(&hcan2, &txHeader, txData, &txMailbox);
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN2) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a06      	ldr	r2, [pc, #24]	@ (8001d54 <HAL_CAN_TxMailbox0CompleteCallback+0x28>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d104      	bne.n	8001d48 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>
        can2_tx_success++;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8001d46:	6013      	str	r3, [r2, #0]
    }
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40006800 	.word	0x40006800
 8001d58:	20000474 	.word	0x20000474

08001d5c <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN2) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a06      	ldr	r2, [pc, #24]	@ (8001d84 <HAL_CAN_TxMailbox1CompleteCallback+0x28>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d104      	bne.n	8001d78 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>
        can2_tx_success++;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8001d76:	6013      	str	r3, [r2, #0]
    }
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40006800 	.word	0x40006800
 8001d88:	20000474 	.word	0x20000474

08001d8c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN2) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a06      	ldr	r2, [pc, #24]	@ (8001db4 <HAL_CAN_TxMailbox2CompleteCallback+0x28>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d104      	bne.n	8001da8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>
        can2_tx_success++;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 8001da6:	6013      	str	r3, [r2, #0]
    }
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40006800 	.word	0x40006800
 8001db8:	20000474 	.word	0x20000474

08001dbc <HAL_CAN_ErrorCallback>:

static uint8_t can_recover_attempts = 0;

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0a4      	sub	sp, #144	@ 0x90
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    uint32_t err = hcan->ErrorCode;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    if (err == HAL_CAN_ERROR_NONE) return;
 8001dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8098 	beq.w	8001f06 <HAL_CAN_ErrorCallback+0x14a>

    char msg[128];
    sprintf(msg, "⚠️ CAN Error: 0x%08lX\r\n", err);
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001dde:	494c      	ldr	r1, [pc, #304]	@ (8001f10 <HAL_CAN_ErrorCallback+0x154>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f006 f8cb 	bl	8007f7c <siprintf>

    // --- Nhóm lỗi nghiêm trọng cần reset CAN ---
    if (err & (HAL_CAN_ERROR_BOF |
 8001de6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001dea:	4b4a      	ldr	r3, [pc, #296]	@ (8001f14 <HAL_CAN_ErrorCallback+0x158>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01c      	beq.n	8001e2c <HAL_CAN_ErrorCallback+0x70>
               HAL_CAN_ERROR_ACK |
               HAL_CAN_ERROR_TX_TERR0 | HAL_CAN_ERROR_TX_TERR1 | HAL_CAN_ERROR_TX_TERR2 |
               HAL_CAN_ERROR_RX_FOV0 | HAL_CAN_ERROR_RX_FOV1))
    {
        can_recover_attempts++;
 8001df2:	4b49      	ldr	r3, [pc, #292]	@ (8001f18 <HAL_CAN_ErrorCallback+0x15c>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_CAN_ErrorCallback+0x15c>)
 8001dfc:	701a      	strb	r2, [r3, #0]

        HAL_CAN_Stop(hcan);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f001 fedc 	bl	8003bbc <HAL_CAN_Stop>
        HAL_CAN_DeInit(hcan);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f001 fd94 	bl	8003932 <HAL_CAN_DeInit>
        HAL_CAN_Init(hcan);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f001 fc96 	bl	800373c <HAL_CAN_Init>
        HAL_CAN_Start(hcan);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f001 fe8f 	bl	8003b34 <HAL_CAN_Start>

        HAL_CAN_ActivateNotification(hcan,
 8001e16:	f44f 410f 	mov.w	r1, #36608	@ 0x8f00
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f002 f93e 	bl	800409c <HAL_CAN_ActivateNotification>
            CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE |
            CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR);

        if (can_recover_attempts >= 3) {
 8001e20:	4b3d      	ldr	r3, [pc, #244]	@ (8001f18 <HAL_CAN_ErrorCallback+0x15c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_CAN_ErrorCallback+0x70>
            NVIC_SystemReset();
 8001e28:	f7ff f854 	bl	8000ed4 <__NVIC_SystemReset>
        }
    }

    // --- Các lỗi nhẹ: chỉ log ---
    if (err & HAL_CAN_ERROR_EWG)  printf("CAN Warning Error\r\n");
 8001e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_CAN_ErrorCallback+0x82>
 8001e38:	4838      	ldr	r0, [pc, #224]	@ (8001f1c <HAL_CAN_ErrorCallback+0x160>)
 8001e3a:	f006 f861 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_EPV)  printf("CAN Passive Error\r\n");
 8001e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_CAN_ErrorCallback+0x94>
 8001e4a:	4835      	ldr	r0, [pc, #212]	@ (8001f20 <HAL_CAN_ErrorCallback+0x164>)
 8001e4c:	f006 f858 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_STF)  printf("CAN Stuff Error\r\n");
 8001e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_CAN_ErrorCallback+0xa6>
 8001e5c:	4831      	ldr	r0, [pc, #196]	@ (8001f24 <HAL_CAN_ErrorCallback+0x168>)
 8001e5e:	f006 f84f 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_FOR)  printf("CAN Form Error\r\n");
 8001e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_CAN_ErrorCallback+0xb8>
 8001e6e:	482e      	ldr	r0, [pc, #184]	@ (8001f28 <HAL_CAN_ErrorCallback+0x16c>)
 8001e70:	f006 f846 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_BR)   printf("CAN Bit Recessive Error\r\n");
 8001e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_CAN_ErrorCallback+0xca>
 8001e80:	482a      	ldr	r0, [pc, #168]	@ (8001f2c <HAL_CAN_ErrorCallback+0x170>)
 8001e82:	f006 f83d 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_BD)   printf("CAN Bit Dominant Error\r\n");
 8001e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_CAN_ErrorCallback+0xdc>
 8001e92:	4827      	ldr	r0, [pc, #156]	@ (8001f30 <HAL_CAN_ErrorCallback+0x174>)
 8001e94:	f006 f834 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_CRC)  printf("CAN CRC Error\r\n");
 8001e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_CAN_ErrorCallback+0xee>
 8001ea4:	4823      	ldr	r0, [pc, #140]	@ (8001f34 <HAL_CAN_ErrorCallback+0x178>)
 8001ea6:	f006 f82b 	bl	8007f00 <puts>

    // --- Timeout & init errors ---
    if (err & HAL_CAN_ERROR_TIMEOUT)        printf("CAN Timeout Error\r\n");
 8001eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_CAN_ErrorCallback+0x100>
 8001eb6:	4820      	ldr	r0, [pc, #128]	@ (8001f38 <HAL_CAN_ErrorCallback+0x17c>)
 8001eb8:	f006 f822 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_NOT_INITIALIZED)printf("CAN Not Init Error\r\n");
 8001ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_CAN_ErrorCallback+0x112>
 8001ec8:	481c      	ldr	r0, [pc, #112]	@ (8001f3c <HAL_CAN_ErrorCallback+0x180>)
 8001eca:	f006 f819 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_NOT_READY)      printf("CAN Not Ready Error\r\n");
 8001ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_CAN_ErrorCallback+0x124>
 8001eda:	4819      	ldr	r0, [pc, #100]	@ (8001f40 <HAL_CAN_ErrorCallback+0x184>)
 8001edc:	f006 f810 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_NOT_STARTED)    printf("CAN Not Started Error\r\n");
 8001ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_CAN_ErrorCallback+0x136>
 8001eec:	4815      	ldr	r0, [pc, #84]	@ (8001f44 <HAL_CAN_ErrorCallback+0x188>)
 8001eee:	f006 f807 	bl	8007f00 <puts>
    if (err & HAL_CAN_ERROR_PARAM)          printf("CAN Parameter Error\r\n");
 8001ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_CAN_ErrorCallback+0x14c>
 8001efe:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <HAL_CAN_ErrorCallback+0x18c>)
 8001f00:	f005 fffe 	bl	8007f00 <puts>
 8001f04:	e000      	b.n	8001f08 <HAL_CAN_ErrorCallback+0x14c>
    if (err == HAL_CAN_ERROR_NONE) return;
 8001f06:	bf00      	nop
}
 8001f08:	3790      	adds	r7, #144	@ 0x90
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	0800a664 	.word	0x0800a664
 8001f14:	00015624 	.word	0x00015624
 8001f18:	200004dd 	.word	0x200004dd
 8001f1c:	0800a680 	.word	0x0800a680
 8001f20:	0800a694 	.word	0x0800a694
 8001f24:	0800a6a8 	.word	0x0800a6a8
 8001f28:	0800a6bc 	.word	0x0800a6bc
 8001f2c:	0800a6cc 	.word	0x0800a6cc
 8001f30:	0800a6e8 	.word	0x0800a6e8
 8001f34:	0800a700 	.word	0x0800a700
 8001f38:	0800a710 	.word	0x0800a710
 8001f3c:	0800a724 	.word	0x0800a724
 8001f40:	0800a738 	.word	0x0800a738
 8001f44:	0800a750 	.word	0x0800a750
 8001f48:	0800a768 	.word	0x0800a768

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	b0b1      	sub	sp, #196	@ 0xc4
 8001f50:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f52:	f001 fb5d 	bl	8003610 <HAL_Init>

  /* USER CODE BEGIN Init */
	    HAL_TIM_Base_Start(&htim1);
 8001f56:	48af      	ldr	r0, [pc, #700]	@ (8002214 <main+0x2c8>)
 8001f58:	f004 f962 	bl	8006220 <HAL_TIM_Base_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5c:	f000 fb5c 	bl	8002618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f60:	f000 fd74 	bl	8002a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f64:	f000 fbf8 	bl	8002758 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f68:	f000 fc52 	bl	8002810 <MX_SPI1_Init>
  MX_TIM14_Init();
 8001f6c:	f000 fd12 	bl	8002994 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8001f70:	f000 fd34 	bl	80029dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001f74:	f000 fc82 	bl	800287c <MX_TIM1_Init>
  MX_I2C3_Init();
 8001f78:	f000 fc1c 	bl	80027b4 <MX_I2C3_Init>
  MX_CAN2_Init();
 8001f7c:	f000 fbb6 	bl	80026ec <MX_CAN2_Init>
  MX_TIM8_Init();
 8001f80:	f000 fccc 	bl	800291c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
    // === Cấu hình CAN filter ===
    HAL_CAN_Start(&hcan2);
 8001f84:	48a4      	ldr	r0, [pc, #656]	@ (8002218 <main+0x2cc>)
 8001f86:	f001 fdd5 	bl	8003b34 <HAL_CAN_Start>
    set_drive_mode(3,1);  set_drive_mode(3,2);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f7ff f83b 	bl	8001008 <set_drive_mode>
 8001f92:	2102      	movs	r1, #2
 8001f94:	2003      	movs	r0, #3
 8001f96:	f7ff f837 	bl	8001008 <set_drive_mode>
    remap_rpdo1_for_velocity(1); remap_rpdo1_for_velocity(2);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff faea 	bl	8001574 <remap_rpdo1_for_velocity>
 8001fa0:	2002      	movs	r0, #2
 8001fa2:	f7ff fae7 	bl	8001574 <remap_rpdo1_for_velocity>
    CAN_FilterTypeDef filter;
    filter.FilterActivation = CAN_FILTER_ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    filter.FilterBank = 14;
 8001faa:	230e      	movs	r3, #14
 8001fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
    filter.FilterIdHigh = 0x0000;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
    filter.FilterIdLow = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    filter.FilterMaskIdHigh = 0x0000;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	653b      	str	r3, [r7, #80]	@ 0x50
    filter.FilterMaskIdLow = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	657b      	str	r3, [r7, #84]	@ 0x54
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	663b      	str	r3, [r7, #96]	@ 0x60
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	667b      	str	r3, [r7, #100]	@ 0x64
    filter.SlaveStartFilterBank = 14;
 8001fca:	230e      	movs	r3, #14
 8001fcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_CAN_ConfigFilter(&hcan2, &filter);
 8001fce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4890      	ldr	r0, [pc, #576]	@ (8002218 <main+0x2cc>)
 8001fd6:	f001 fccf 	bl	8003978 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001fda:	488f      	ldr	r0, [pc, #572]	@ (8002218 <main+0x2cc>)
 8001fdc:	f001 fdaa 	bl	8003b34 <HAL_CAN_Start>
//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);

HAL_CAN_ActivateNotification(&hcan2,
 8001fe0:	f648 7102 	movw	r1, #36610	@ 0x8f02
 8001fe4:	488c      	ldr	r0, [pc, #560]	@ (8002218 <main+0x2cc>)
 8001fe6:	f002 f859 	bl	800409c <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   // print_uart("🔧 Bắt đầu khởi tạo Velocity Mode...\r\n");
// CANopenNodeSTM32 axis;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);//on led
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ff0:	488a      	ldr	r0, [pc, #552]	@ (800221c <main+0x2d0>)
 8001ff2:	f002 fe7f 	bl	8004cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	4889      	ldr	r0, [pc, #548]	@ (8002220 <main+0x2d4>)
 8001ffc:	f002 fe7a 	bl	8004cf4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002000:	2064      	movs	r0, #100	@ 0x64
 8002002:	f001 fb77 	bl	80036f4 <HAL_Delay>
    //print_uart("Nhấn MODE nếu cần cho Analog\r\n");
   // HAL_Delay(1000);
    PS2_Init();
 8002006:	f7ff f91f 	bl	8001248 <PS2_Init>
   // print_uart("Đang test SPI đơn giản...\r\n");
    Test_SPI_1Byte();
 800200a:	f7ff f9bf 	bl	800138c <Test_SPI_1Byte>

       set_drive_mode(3,1);  set_drive_mode(3,2);
 800200e:	2101      	movs	r1, #1
 8002010:	2003      	movs	r0, #3
 8002012:	f7fe fff9 	bl	8001008 <set_drive_mode>
 8002016:	2102      	movs	r1, #2
 8002018:	2003      	movs	r0, #3
 800201a:	f7fe fff5 	bl	8001008 <set_drive_mode>
       remap_rpdo1_for_velocity(1); remap_rpdo1_for_velocity(2);
 800201e:	2001      	movs	r0, #1
 8002020:	f7ff faa8 	bl	8001574 <remap_rpdo1_for_velocity>
 8002024:	2002      	movs	r0, #2
 8002026:	f7ff faa5 	bl	8001574 <remap_rpdo1_for_velocity>
       remap_tpdo1_velocity(1);  // Remap TPDO1 để chứa Actual Velocity
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff fae2 	bl	80015f4 <remap_tpdo1_velocity>
       remap_tpdo1_velocity(2);
 8002030:	2002      	movs	r0, #2
 8002032:	f7ff fadf 	bl	80015f4 <remap_tpdo1_velocity>
    // === Gửi lệnh quay bằng RPDO ===
  //  int32_t target_velocity1 = 50000;  // hoặc -100000 để quay ngược
    uint32_t lastSend = HAL_GetTick();
 8002036:	f001 fb51 	bl	80036dc <HAL_GetTick>
 800203a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
//    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // === Biến toàn cục trong main ===
  int32_t prevVel1 = 0, prevVel2 = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t lastPrint = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  static uint8_t last_block_state = 0;
  uint32_t last_upvel1_time = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t last_upvel2_time = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

    	  /* USER CODE END WHILE */

    	   /* USER CODE BEGIN 3 */
    	// Nếu cả 2 node booted cùng lúc
    	if (node_booted[1] && node_booted[2]) {
 800205c:	4b71      	ldr	r3, [pc, #452]	@ (8002224 <main+0x2d8>)
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d045      	beq.n	80020f2 <main+0x1a6>
 8002066:	4b6f      	ldr	r3, [pc, #444]	@ (8002224 <main+0x2d8>)
 8002068:	789b      	ldrb	r3, [r3, #2]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d040      	beq.n	80020f2 <main+0x1a6>
    	    node_booted[1] = 0;
 8002070:	4b6c      	ldr	r3, [pc, #432]	@ (8002224 <main+0x2d8>)
 8002072:	2200      	movs	r2, #0
 8002074:	705a      	strb	r2, [r3, #1]
    	    node_booted[2] = 0;
 8002076:	4b6b      	ldr	r3, [pc, #428]	@ (8002224 <main+0x2d8>)
 8002078:	2200      	movs	r2, #0
 800207a:	709a      	strb	r2, [r3, #2]
    	    HAL_Delay(100);
 800207c:	2064      	movs	r0, #100	@ 0x64
 800207e:	f001 fb39 	bl	80036f4 <HAL_Delay>

    	    // --- Đánh dấu đã init ---
    	    already_initialized[1] = 1;
 8002082:	4b69      	ldr	r3, [pc, #420]	@ (8002228 <main+0x2dc>)
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
    	    already_initialized[2] = 1;
 8002088:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <main+0x2dc>)
 800208a:	2201      	movs	r2, #1
 800208c:	709a      	strb	r2, [r3, #2]
    	//    send_nmt_start(1);
    	//    send_nmt_start(2);
    	//    HAL_Delay(10);

    	    // --- Cấu hình Mode + PDO ---
    	    set_drive_mode(3,1);
 800208e:	2101      	movs	r1, #1
 8002090:	2003      	movs	r0, #3
 8002092:	f7fe ffb9 	bl	8001008 <set_drive_mode>
    	    set_drive_mode(3,2);
 8002096:	2102      	movs	r1, #2
 8002098:	2003      	movs	r0, #3
 800209a:	f7fe ffb5 	bl	8001008 <set_drive_mode>

    	    remap_rpdo1_for_velocity(1);
 800209e:	2001      	movs	r0, #1
 80020a0:	f7ff fa68 	bl	8001574 <remap_rpdo1_for_velocity>
    	    remap_rpdo1_for_velocity(2);
 80020a4:	2002      	movs	r0, #2
 80020a6:	f7ff fa65 	bl	8001574 <remap_rpdo1_for_velocity>

    	    remap_tpdo1_velocity(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff faa2 	bl	80015f4 <remap_tpdo1_velocity>
    	    remap_tpdo1_velocity(2);
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7ff fa9f 	bl	80015f4 <remap_tpdo1_velocity>

    	    // --- Reset vận tốc về 0 ---
    	    send_velocity_rpdo(1, 0, true, 50000, 200000);
 80020b6:	4b5d      	ldr	r3, [pc, #372]	@ (800222c <main+0x2e0>)
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	f24c 3350 	movw	r3, #50000	@ 0xc350
 80020be:	2201      	movs	r2, #1
 80020c0:	2100      	movs	r1, #0
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7ff fb1c 	bl	8001700 <send_velocity_rpdo>
    	    send_velocity_rpdo(2, 0, true, 50000, 200000);
 80020c8:	4b58      	ldr	r3, [pc, #352]	@ (800222c <main+0x2e0>)
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24c 3350 	movw	r3, #50000	@ 0xc350
 80020d0:	2201      	movs	r2, #1
 80020d2:	2100      	movs	r1, #0
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff fb13 	bl	8001700 <send_velocity_rpdo>
    	    HAL_Delay(20);
 80020da:	2014      	movs	r0, #20
 80020dc:	f001 fb0a 	bl	80036f4 <HAL_Delay>

    	    // --- Enable đồng thời ---
    	    send_enable_sequence(1);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff fab9 	bl	8001658 <send_enable_sequence>
    	    send_enable_sequence(2);
 80020e6:	2002      	movs	r0, #2
 80020e8:	f7ff fab6 	bl	8001658 <send_enable_sequence>

    	    print_uart("✅ Cả 2 node đã re-enable đồng bộ và reset vận tốc về 0\r\n");
 80020ec:	4850      	ldr	r0, [pc, #320]	@ (8002230 <main+0x2e4>)
 80020ee:	f7fe ff47 	bl	8000f80 <print_uart>
    	}



    	 int32_t vel1 = 0, vel2 = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    	if (can_rx_flag){
 80020fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002234 <main+0x2e8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01a      	beq.n	800213c <main+0x1f0>
    	    	char buf [64];
    	        if (HAL_GetTick() - lastPrint >= 1000) { //1s
 8002106:	f001 fae9 	bl	80036dc <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002116:	d311      	bcc.n	800213c <main+0x1f0>
    	            snprintf(buf, sizeof(buf), "📥 Gói CAN nhận/giây: %lu\r\n", can_rx_count);
 8002118:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <main+0x2ec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4638      	mov	r0, r7
 800211e:	4a47      	ldr	r2, [pc, #284]	@ (800223c <main+0x2f0>)
 8002120:	2140      	movs	r1, #64	@ 0x40
 8002122:	f005 fef5 	bl	8007f10 <sniprintf>
    	         print_uart(buf);
 8002126:	463b      	mov	r3, r7
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ff29 	bl	8000f80 <print_uart>
    	   can_rx_count=0;
 800212e:	4b42      	ldr	r3, [pc, #264]	@ (8002238 <main+0x2ec>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    	         lastPrint=HAL_GetTick();
 8002134:	f001 fad2 	bl	80036dc <HAL_GetTick>
 8002138:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    	        }
    	}
    	//gửi gói CAN
        uint32_t now = HAL_GetTick();
 800213c:	f001 face 	bl	80036dc <HAL_GetTick>
 8002140:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        // Nếu vừa đổi mode → reset vận tốc ngay
          if (mode_changed_flag) {
 8002144:	4b3e      	ldr	r3, [pc, #248]	@ (8002240 <main+0x2f4>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d022      	beq.n	8002194 <main+0x248>
              vel1 = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
              vel2 = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
              prevVel1 = -1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
              prevVel2 = -1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
              send_velocity_rpdo(1, 0, true, 50000, 250000);
 800216a:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <main+0x2f8>)
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002172:	2201      	movs	r2, #1
 8002174:	2100      	movs	r1, #0
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff fac2 	bl	8001700 <send_velocity_rpdo>
              send_velocity_rpdo(2, 0, true, 50000, 250000);
 800217c:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <main+0x2f8>)
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002184:	2201      	movs	r2, #1
 8002186:	2100      	movs	r1, #0
 8002188:	2002      	movs	r0, #2
 800218a:	f7ff fab9 	bl	8001700 <send_velocity_rpdo>
              mode_changed_flag = 0;
 800218e:	4b2c      	ldr	r3, [pc, #176]	@ (8002240 <main+0x2f4>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
          }
        static uint32_t lastPS2 = 0;
        static uint32_t last_ps2_update = 0;
        uint32_t last_stop_time = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        (void)last_stop_time; /* Silence unused-variable warning */
        const int32_t jogVel = 100000; //max =180000;
 800219a:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <main+0x2fc>)
 800219c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if(uart_rx_ready ){
 800219e:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <main+0x300>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <main+0x268>
        	uart_rx_ready=0;
 80021a8:	4b28      	ldr	r3, [pc, #160]	@ (800224c <main+0x300>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
        	handle_uart_command(uart_rx_buf);
 80021ae:	4828      	ldr	r0, [pc, #160]	@ (8002250 <main+0x304>)
 80021b0:	f7fe fefc 	bl	8000fac <handle_uart_command>
        }
        // === Gửi SYNC + cập nhật vận tốc định kỳ ===
        if (now - lastSend >= 50) { //ban dau la 50, tần so hoat dong spi tam 20
 80021b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80021b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b31      	cmp	r3, #49	@ 0x31
 80021c0:	d905      	bls.n	80021ce <main+0x282>

        //	set_drive_mode(3,1);  set_drive_mode(3,2);
            lastSend = now;
 80021c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            send_sync_frame();  // Nếu RPDO cần SYNC
 80021ca:	f7ff fa77 	bl	80016bc <send_sync_frame>

        }
        // --- Kiểm tra block/unblock ---
        if (ps2_blocked != last_block_state) {
 80021ce:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <main+0x308>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <main+0x30c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d04b      	beq.n	8002274 <main+0x328>
            if (ps2_blocked == 0) {
 80021dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <main+0x308>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d13e      	bne.n	8002264 <main+0x318>
                // Vừa bỏ block → reset hết cờ
                vel1 = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                vel2 = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                prevVel1 = -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                prevVel2 = -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                last_ps2_update = HAL_GetTick();
 8002202:	f001 fa6b 	bl	80036dc <HAL_GetTick>
 8002206:	4603      	mov	r3, r0
 8002208:	4a14      	ldr	r2, [pc, #80]	@ (800225c <main+0x310>)
 800220a:	6013      	str	r3, [r2, #0]
                print_uart("✅ Unblocked → PS2 ready\n");
 800220c:	4814      	ldr	r0, [pc, #80]	@ (8002260 <main+0x314>)
 800220e:	f7fe feb7 	bl	8000f80 <print_uart>
 8002212:	e02a      	b.n	800226a <main+0x31e>
 8002214:	20000324 	.word	0x20000324
 8002218:	200001fc 	.word	0x200001fc
 800221c:	40020400 	.word	0x40020400
 8002220:	40021000 	.word	0x40021000
 8002224:	200004d4 	.word	0x200004d4
 8002228:	200004d8 	.word	0x200004d8
 800222c:	00030d40 	.word	0x00030d40
 8002230:	0800a780 	.word	0x0800a780
 8002234:	200001f8 	.word	0x200001f8
 8002238:	200001f4 	.word	0x200001f4
 800223c:	0800a7cc 	.word	0x0800a7cc
 8002240:	200004dc 	.word	0x200004dc
 8002244:	0003d090 	.word	0x0003d090
 8002248:	000186a0 	.word	0x000186a0
 800224c:	200004b9 	.word	0x200004b9
 8002250:	20000478 	.word	0x20000478
 8002254:	200004db 	.word	0x200004db
 8002258:	200004e4 	.word	0x200004e4
 800225c:	200004e8 	.word	0x200004e8
 8002260:	0800a7f0 	.word	0x0800a7f0
            } else {
                print_uart("⛔ Blocked by sensor\n");
 8002264:	4895      	ldr	r0, [pc, #596]	@ (80024bc <main+0x570>)
 8002266:	f7fe fe8b 	bl	8000f80 <print_uart>
            }
            last_block_state = ps2_blocked;
 800226a:	4b95      	ldr	r3, [pc, #596]	@ (80024c0 <main+0x574>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b94      	ldr	r3, [pc, #592]	@ (80024c4 <main+0x578>)
 8002272:	701a      	strb	r2, [r3, #0]
        }

  static uint8_t ps2_init_ok = 0; // 0 = chưa sẵn sàng, 1 = đã thấy trạng thái không nhấn
  (void)ps2_init_ok; /* Silence unused-variable warning until used */
        if ((current_mode==MODE_PS2) && (now - lastPS2 >= 20)) {
 8002274:	4b94      	ldr	r3, [pc, #592]	@ (80024c8 <main+0x57c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 80e4 	bne.w	8002448 <main+0x4fc>
 8002280:	4b92      	ldr	r3, [pc, #584]	@ (80024cc <main+0x580>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b13      	cmp	r3, #19
 800228c:	f240 80dc 	bls.w	8002448 <main+0x4fc>
            lastPS2 = now;
 8002290:	4a8e      	ldr	r2, [pc, #568]	@ (80024cc <main+0x580>)
 8002292:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002296:	6013      	str	r3, [r2, #0]
        // === Đọc tay cầm PS2 ===
        PS2_Data ps2 = PS2_ReadButtons();
 8002298:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f825 	bl	80012ec <PS2_ReadButtons>

        //loc nhieu

        bool up_now     = !(ps2.buttons & BTN_UP);
 80022a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        bool down_now   = !(ps2.buttons & BTN_DOWN);
 80022b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80022ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
        bool tri_now    = !(ps2.buttons & BTN_TRIANGLE);
 80022ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80022ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf0c      	ite	eq
 80022d6:	2301      	moveq	r3, #1
 80022d8:	2300      	movne	r3, #0
 80022da:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
        bool cross_now  = !(ps2.buttons & BTN_CROSS);
 80022de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80022e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
        bool right_now  = !(ps2.buttons & BTN_RIGHT);
 80022f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        bool square_now = !(ps2.buttons & BTN_SQUARE);
 8002306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800230a:	b21b      	sxth	r3, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	b29b      	uxth	r3, r3
 8002310:	0bdb      	lsrs	r3, r3, #15
 8002312:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        // Debug nút nhấn
        char msg[64];
       // char buf[64];
        snprintf(msg, sizeof(msg),
 8002316:	f897 607b 	ldrb.w	r6, [r7, #123]	@ 0x7b
 800231a:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800231e:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 8002322:	f897 1078 	ldrb.w	r1, [r7, #120]	@ 0x78
 8002326:	f897 0077 	ldrb.w	r0, [r7, #119]	@ 0x77
 800232a:	f897 4076 	ldrb.w	r4, [r7, #118]	@ 0x76
 800232e:	463d      	mov	r5, r7
 8002330:	9404      	str	r4, [sp, #16]
 8002332:	9003      	str	r0, [sp, #12]
 8002334:	9102      	str	r1, [sp, #8]
 8002336:	9201      	str	r2, [sp, #4]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4633      	mov	r3, r6
 800233c:	4a64      	ldr	r2, [pc, #400]	@ (80024d0 <main+0x584>)
 800233e:	2140      	movs	r1, #64	@ 0x40
 8002340:	4628      	mov	r0, r5
 8002342:	f005 fde5 	bl	8007f10 <sniprintf>
            "BTN: UP=%d DW=%d TR=%d CR=%d RI=%d SQ=%d\r\n",
            up_now, down_now, tri_now, cross_now, right_now, square_now);
        print_uart(msg);
 8002346:	463b      	mov	r3, r7
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fe19 	bl	8000f80 <print_uart>

        // === Gán vận tốc theo nút nhấn ===

        if (!ps2_blocked) {
 800234e:	4b5c      	ldr	r3, [pc, #368]	@ (80024c0 <main+0x574>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10e      	bne.n	8002376 <main+0x42a>
        	if (up_now )         vel1 = -jogVel;
 8002358:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <main+0x41c>
 8002360:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002362:	425b      	negs	r3, r3
 8002364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        	 if (tri_now)        vel2 = +jogVel;
 8002368:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <main+0x42a>
 8002370:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        if (down_now)  vel1 = +jogVel;
 8002376:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <main+0x438>
 800237e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002380:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        if (cross_now) vel2 = -jogVel;
 8002384:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <main+0x448>
 800238c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800238e:	425b      	negs	r3, r3
 8002390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        if (right_now) {
 8002394:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <main+0x478>
            vel1 = -0.5 * jogVel;
 800239c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800239e:	f7fe f8c1 	bl	8000524 <__aeabi_i2d>
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	4b4b      	ldr	r3, [pc, #300]	@ (80024d4 <main+0x588>)
 80023a8:	f7fe f926 	bl	80005f8 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fbd0 	bl	8000b58 <__aeabi_d2iz>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            vel2 = +jogVel;
 80023be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }

        if (square_now) {
 80023c4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d014      	beq.n	80023f6 <main+0x4aa>
            vel1 = -jogVel;
 80023cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023ce:	425b      	negs	r3, r3
 80023d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            vel2 = +0.5 * jogVel;
 80023d4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80023d6:	f7fe f8a5 	bl	8000524 <__aeabi_i2d>
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	4b3e      	ldr	r3, [pc, #248]	@ (80024d8 <main+0x58c>)
 80023e0:	f7fe f90a 	bl	80005f8 <__aeabi_dmul>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fe fbb4 	bl	8000b58 <__aeabi_d2iz>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }


        // Nếu dữ liệu thay đổi → cập nhật thời gian cuối nhận PS2
        if (ps2.buttons != 0xFF) {
 80023f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80023fa:	2bff      	cmp	r3, #255	@ 0xff
 80023fc:	d003      	beq.n	8002406 <main+0x4ba>
            last_ps2_update = now;
 80023fe:	4a37      	ldr	r2, [pc, #220]	@ (80024dc <main+0x590>)
 8002400:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002404:	6013      	str	r3, [r2, #0]
        }
       // }
        if (now - last_ps2_update > 500) {
 8002406:	4b35      	ldr	r3, [pc, #212]	@ (80024dc <main+0x590>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002414:	d918      	bls.n	8002448 <main+0x4fc>
            if (vel1 != 0 || vel2 != 0) {
 8002416:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <main+0x4da>
 800241e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <main+0x4fc>
                print_uart("❌ PS2 timeout, reset động cơ\r\n");
 8002426:	482e      	ldr	r0, [pc, #184]	@ (80024e0 <main+0x594>)
 8002428:	f7fe fdaa 	bl	8000f80 <print_uart>
                vel1 = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                vel2 = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                // ✅ Gán giá trị khác để buộc gửi RPDO lại
                        prevVel1 = -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                        prevVel2 = -1;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

             	 }
        	}
        }
        if (current_mode == MODE_AUTO) {
 8002448:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <main+0x57c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d17e      	bne.n	8002550 <main+0x604>
            static uint32_t lastSendAuto = 0;
            uint32_t now = HAL_GetTick();
 8002452:	f001 f943 	bl	80036dc <HAL_GetTick>
 8002456:	6738      	str	r0, [r7, #112]	@ 0x70

            // Cập nhật giá trị mới cho từng bánh nếu có gói mới
            if (ready1) {
 8002458:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <main+0x598>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <main+0x54a>
                vel1 = up_vel1;
 8002462:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <main+0x59c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                if (vel1 > jogVel) vel1 = jogVel;
 800246a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800246e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002470:	429a      	cmp	r2, r3
 8002472:	dd03      	ble.n	800247c <main+0x530>
 8002474:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002476:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800247a:	e009      	b.n	8002490 <main+0x544>
                else if (vel1 < -jogVel) vel1 = -jogVel;
 800247c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800247e:	425b      	negs	r3, r3
 8002480:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002484:	429a      	cmp	r2, r3
 8002486:	da03      	bge.n	8002490 <main+0x544>
 8002488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800248a:	425b      	negs	r3, r3
 800248c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
               // last_upvel1_time = now;
                ready1 = 0;
 8002490:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <main+0x598>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
            }
            if (ready2) {
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <main+0x5a0>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d036      	beq.n	800250e <main+0x5c2>
                vel2 = up_vel2;
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <main+0x5a4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                if (vel2 > jogVel) vel2 = jogVel;
 80024a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ae:	429a      	cmp	r2, r3
 80024b0:	dd20      	ble.n	80024f4 <main+0x5a8>
 80024b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024b8:	e026      	b.n	8002508 <main+0x5bc>
 80024ba:	bf00      	nop
 80024bc:	0800a810 	.word	0x0800a810
 80024c0:	200004db 	.word	0x200004db
 80024c4:	200004e4 	.word	0x200004e4
 80024c8:	20000444 	.word	0x20000444
 80024cc:	200004ec 	.word	0x200004ec
 80024d0:	0800a828 	.word	0x0800a828
 80024d4:	bfe00000 	.word	0xbfe00000
 80024d8:	3fe00000 	.word	0x3fe00000
 80024dc:	200004e8 	.word	0x200004e8
 80024e0:	0800a854 	.word	0x0800a854
 80024e4:	200004d0 	.word	0x200004d0
 80024e8:	200004c0 	.word	0x200004c0
 80024ec:	200004d1 	.word	0x200004d1
 80024f0:	200004c4 	.word	0x200004c4
                else if (vel2 < -jogVel) vel2 = -jogVel;
 80024f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024f6:	425b      	negs	r3, r3
 80024f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024fc:	429a      	cmp	r2, r3
 80024fe:	da03      	bge.n	8002508 <main+0x5bc>
 8002500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002502:	425b      	negs	r3, r3
 8002504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
              //  last_upvel2_time = now;
                ready2 = 0;
 8002508:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <main+0x6ac>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
            }

            // Gửi RPDO định kỳ (50 ms)
            if (now - lastSendAuto >= 10) {
 800250e:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <main+0x6b0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b09      	cmp	r3, #9
 8002518:	d91a      	bls.n	8002550 <main+0x604>
             //   lastSendAuto = now;
            	lastSendAuto += 50;  // giữ nhịp đều
 800251a:	4b38      	ldr	r3, [pc, #224]	@ (80025fc <main+0x6b0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3332      	adds	r3, #50	@ 0x32
 8002520:	4a36      	ldr	r2, [pc, #216]	@ (80025fc <main+0x6b0>)
 8002522:	6013      	str	r3, [r2, #0]
                send_velocity_rpdo(1, vel1, false, 50000, 250000);
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <main+0x6b4>)
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800252c:	2200      	movs	r2, #0
 800252e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff f8e4 	bl	8001700 <send_velocity_rpdo>
                send_velocity_rpdo(2, vel2, false, 50000, 250000);
 8002538:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <main+0x6b4>)
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002540:	2200      	movs	r2, #0
 8002542:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002546:	2002      	movs	r0, #2
 8002548:	f7ff f8da 	bl	8001700 <send_velocity_rpdo>
                send_sync_frame();
 800254c:	f7ff f8b6 	bl	80016bc <send_sync_frame>
            }
        }
        // === Gửi RPDO nếu vận tốc thay đổi ===
        if (vel1 != prevVel1) {
 8002550:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002554:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002558:	429a      	cmp	r2, r3
 800255a:	d012      	beq.n	8002582 <main+0x636>
            send_velocity_rpdo(1, vel1, true, 50000, 250000); // node 1
 800255c:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <main+0x6b4>)
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002564:	2201      	movs	r2, #1
 8002566:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff f8c8 	bl	8001700 <send_velocity_rpdo>
            count_rpdo1++;
 8002570:	4b24      	ldr	r3, [pc, #144]	@ (8002604 <main+0x6b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	4a23      	ldr	r2, [pc, #140]	@ (8002604 <main+0x6b8>)
 8002578:	6013      	str	r3, [r2, #0]
            prevVel1 = vel1;
 800257a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800257e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        }

        if (vel2 != prevVel2) {
 8002582:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002586:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800258a:	429a      	cmp	r2, r3
 800258c:	d012      	beq.n	80025b4 <main+0x668>
            send_velocity_rpdo(2, vel2, true, 50000, 250000); // node 2
 800258e:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <main+0x6b4>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8002596:	2201      	movs	r2, #1
 8002598:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800259c:	2002      	movs	r0, #2
 800259e:	f7ff f8af 	bl	8001700 <send_velocity_rpdo>
            count_rpdo2++;
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <main+0x6bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <main+0x6bc>)
 80025aa:	6013      	str	r3, [r2, #0]
            prevVel2 = vel2;
 80025ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        }
        // === Đọc tốc độ thực tế mỗi 200ms ===
        if (now - lastPrint >= 100) { // cứ 100ms gửi vận tốc lên 1 làn
 80025b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80025b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b63      	cmp	r3, #99	@ 0x63
 80025c0:	d916      	bls.n	80025f0 <main+0x6a4>
            lastPrint = now;
 80025c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
          request_actual_velocity(1);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff fb8a 	bl	8001ce4 <request_actual_velocity>
          request_actual_velocity(2);
 80025d0:	2002      	movs	r0, #2
 80025d2:	f7ff fb87 	bl	8001ce4 <request_actual_velocity>
          count_request_vel++;
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <main+0x6c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	4a0b      	ldr	r2, [pc, #44]	@ (800260c <main+0x6c0>)
 80025de:	6013      	str	r3, [r2, #0]
          send_vel_can(currentVel1, currentVel2);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <main+0x6c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002614 <main+0x6c8>)
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fb26 	bl	8001c3c <send_vel_can>
         // send_vel_can(1, currentVel2);

        }

    HAL_Delay(50);
 80025f0:	2032      	movs	r0, #50	@ 0x32
 80025f2:	f001 f87f 	bl	80036f4 <HAL_Delay>
    while (1) {
 80025f6:	e531      	b.n	800205c <main+0x110>
 80025f8:	200004d1 	.word	0x200004d1
 80025fc:	200004f0 	.word	0x200004f0
 8002600:	0003d090 	.word	0x0003d090
 8002604:	2000044c 	.word	0x2000044c
 8002608:	20000450 	.word	0x20000450
 800260c:	20000454 	.word	0x20000454
 8002610:	200004c8 	.word	0x200004c8
 8002614:	200004cc 	.word	0x200004cc

08002618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b094      	sub	sp, #80	@ 0x50
 800261c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	2230      	movs	r2, #48	@ 0x30
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f005 fda2 	bl	8008170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <SystemClock_Config+0xcc>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	4a27      	ldr	r2, [pc, #156]	@ (80026e4 <SystemClock_Config+0xcc>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	@ 0x40
 800264c:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <SystemClock_Config+0xcc>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <SystemClock_Config+0xd0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a21      	ldr	r2, [pc, #132]	@ (80026e8 <SystemClock_Config+0xd0>)
 8002662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b1f      	ldr	r3, [pc, #124]	@ (80026e8 <SystemClock_Config+0xd0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002674:	2301      	movs	r3, #1
 8002676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800267e:	2302      	movs	r3, #2
 8002680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002682:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002688:	2304      	movs	r3, #4
 800268a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800268c:	23a8      	movs	r3, #168	@ 0xa8
 800268e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002690:	2302      	movs	r3, #2
 8002692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002694:	2307      	movs	r3, #7
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002698:	f107 0320 	add.w	r3, r7, #32
 800269c:	4618      	mov	r0, r3
 800269e:	f002 fcab 	bl	8004ff8 <HAL_RCC_OscConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026a8:	f000 fb54 	bl	8002d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ac:	230f      	movs	r3, #15
 80026ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b0:	2302      	movs	r3, #2
 80026b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80026be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	2105      	movs	r1, #5
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 ff0c 	bl	80054e8 <HAL_RCC_ClockConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026d6:	f000 fb3d 	bl	8002d54 <Error_Handler>
  }
}
 80026da:	bf00      	nop
 80026dc:	3750      	adds	r7, #80	@ 0x50
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000

080026ec <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80026f0:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <MX_CAN2_Init+0x64>)
 80026f2:	4a18      	ldr	r2, [pc, #96]	@ (8002754 <MX_CAN2_Init+0x68>)
 80026f4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80026f6:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <MX_CAN2_Init+0x64>)
 80026f8:	2203      	movs	r2, #3
 80026fa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80026fc:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <MX_CAN2_Init+0x64>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <MX_CAN2_Init+0x64>)
 8002704:	2200      	movs	r2, #0
 8002706:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <MX_CAN2_Init+0x64>)
 800270a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800270e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <MX_CAN2_Init+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002716:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <MX_CAN2_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <MX_CAN2_Init+0x64>)
 800271e:	2201      	movs	r2, #1
 8002720:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <MX_CAN2_Init+0x64>)
 8002724:	2201      	movs	r2, #1
 8002726:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <MX_CAN2_Init+0x64>)
 800272a:	2201      	movs	r2, #1
 800272c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800272e:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <MX_CAN2_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <MX_CAN2_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <MX_CAN2_Init+0x64>)
 800273c:	f000 fffe 	bl	800373c <HAL_CAN_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8002746:	f000 fb05 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200001fc 	.word	0x200001fc
 8002754:	40006800 	.word	0x40006800

08002758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <MX_I2C1_Init+0x50>)
 800275e:	4a13      	ldr	r2, [pc, #76]	@ (80027ac <MX_I2C1_Init+0x54>)
 8002760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <MX_I2C1_Init+0x50>)
 8002764:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <MX_I2C1_Init+0x58>)
 8002766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <MX_I2C1_Init+0x50>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <MX_I2C1_Init+0x50>)
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <MX_I2C1_Init+0x50>)
 8002776:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800277a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <MX_I2C1_Init+0x50>)
 800277e:	2200      	movs	r2, #0
 8002780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <MX_I2C1_Init+0x50>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002788:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <MX_I2C1_Init+0x50>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <MX_I2C1_Init+0x50>)
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <MX_I2C1_Init+0x50>)
 8002796:	f002 faeb 	bl	8004d70 <HAL_I2C_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027a0:	f000 fad8 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000224 	.word	0x20000224
 80027ac:	40005400 	.word	0x40005400
 80027b0:	000186a0 	.word	0x000186a0

080027b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027ba:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <MX_I2C3_Init+0x54>)
 80027bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027c0:	4a12      	ldr	r2, [pc, #72]	@ (800280c <MX_I2C3_Init+0x58>)
 80027c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027e6:	2240      	movs	r2, #64	@ 0x40
 80027e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027f0:	4804      	ldr	r0, [pc, #16]	@ (8002804 <MX_I2C3_Init+0x50>)
 80027f2:	f002 fabd 	bl	8004d70 <HAL_I2C_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80027fc:	f000 faaa 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000278 	.word	0x20000278
 8002808:	40005c00 	.word	0x40005c00
 800280c:	000186a0 	.word	0x000186a0

08002810 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002814:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002816:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <MX_SPI1_Init+0x68>)
 8002818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <MX_SPI1_Init+0x64>)
 800281c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002822:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <MX_SPI1_Init+0x64>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002830:	2202      	movs	r2, #2
 8002832:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <MX_SPI1_Init+0x64>)
 800283c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002840:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002842:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002844:	2238      	movs	r2, #56	@ 0x38
 8002846:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002848:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <MX_SPI1_Init+0x64>)
 800284a:	2280      	movs	r2, #128	@ 0x80
 800284c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002854:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <MX_SPI1_Init+0x64>)
 800285c:	220a      	movs	r2, #10
 800285e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002860:	4804      	ldr	r0, [pc, #16]	@ (8002874 <MX_SPI1_Init+0x64>)
 8002862:	f003 f861 	bl	8005928 <HAL_SPI_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800286c:	f000 fa72 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	200002cc 	.word	0x200002cc
 8002878:	40013000 	.word	0x40013000

0800287c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002890:	463b      	mov	r3, r7
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002898:	4b1e      	ldr	r3, [pc, #120]	@ (8002914 <MX_TIM1_Init+0x98>)
 800289a:	4a1f      	ldr	r2, [pc, #124]	@ (8002918 <MX_TIM1_Init+0x9c>)
 800289c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800289e:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028a0:	22a7      	movs	r2, #167	@ 0xa7
 80028a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028b8:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028c4:	4813      	ldr	r0, [pc, #76]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028c6:	f003 fc5b 	bl	8006180 <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028d0:	f000 fa40 	bl	8002d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	4619      	mov	r1, r3
 80028e0:	480c      	ldr	r0, [pc, #48]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028e2:	f003 fe6c 	bl	80065be <HAL_TIM_ConfigClockSource>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028ec:	f000 fa32 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028f8:	463b      	mov	r3, r7
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	@ (8002914 <MX_TIM1_Init+0x98>)
 80028fe:	f004 f897 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002908:	f000 fa24 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000324 	.word	0x20000324
 8002918:	40010000 	.word	0x40010000

0800291c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002922:	463b      	mov	r3, r7
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800292a:	4b18      	ldr	r3, [pc, #96]	@ (800298c <MX_TIM8_Init+0x70>)
 800292c:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <MX_TIM8_Init+0x74>)
 800292e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002930:	4b16      	ldr	r3, [pc, #88]	@ (800298c <MX_TIM8_Init+0x70>)
 8002932:	2253      	movs	r2, #83	@ 0x53
 8002934:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <MX_TIM8_Init+0x70>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <MX_TIM8_Init+0x70>)
 800293e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002942:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <MX_TIM8_Init+0x70>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800294a:	4b10      	ldr	r3, [pc, #64]	@ (800298c <MX_TIM8_Init+0x70>)
 800294c:	2200      	movs	r2, #0
 800294e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <MX_TIM8_Init+0x70>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8002956:	2108      	movs	r1, #8
 8002958:	480c      	ldr	r0, [pc, #48]	@ (800298c <MX_TIM8_Init+0x70>)
 800295a:	f003 fcf0 	bl	800633e <HAL_TIM_OnePulse_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 8002964:	f000 f9f6 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002970:	463b      	mov	r3, r7
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	@ (800298c <MX_TIM8_Init+0x70>)
 8002976:	f004 f85b 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002980:	f000 f9e8 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000036c 	.word	0x2000036c
 8002990:	40010400 	.word	0x40010400

08002994 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002998:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <MX_TIM14_Init+0x40>)
 800299a:	4a0f      	ldr	r2, [pc, #60]	@ (80029d8 <MX_TIM14_Init+0x44>)
 800299c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 800299e:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <MX_TIM14_Init+0x40>)
 80029a0:	2253      	movs	r2, #83	@ 0x53
 80029a2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <MX_TIM14_Init+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <MX_TIM14_Init+0x40>)
 80029ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029b0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <MX_TIM14_Init+0x40>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <MX_TIM14_Init+0x40>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80029be:	4805      	ldr	r0, [pc, #20]	@ (80029d4 <MX_TIM14_Init+0x40>)
 80029c0:	f003 fbde 	bl	8006180 <HAL_TIM_Base_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80029ca:	f000 f9c3 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200003b4 	.word	0x200003b4
 80029d8:	40002000 	.word	0x40002000

080029dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029e0:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 80029e2:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <MX_USART2_UART_Init+0x64>)
 80029e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 80029e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80029ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a00:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 8002a02:	220c      	movs	r2, #12
 8002a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a12:	480a      	ldr	r0, [pc, #40]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 8002a14:	f004 f89c 	bl	8006b50 <HAL_UART_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a1e:	f000 f999 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&uart_rx_buf[uart_rx_index], 1);
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <MX_USART2_UART_Init+0x68>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <MX_USART2_UART_Init+0x6c>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4619      	mov	r1, r3
 8002a32:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <MX_USART2_UART_Init+0x60>)
 8002a34:	f004 f967 	bl	8006d06 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200003fc 	.word	0x200003fc
 8002a40:	40004400 	.word	0x40004400
 8002a44:	200004b8 	.word	0x200004b8
 8002a48:	20000478 	.word	0x20000478

08002a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	@ 0x30
 8002a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	4bb5      	ldr	r3, [pc, #724]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4ab4      	ldr	r2, [pc, #720]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4bb2      	ldr	r3, [pc, #712]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	4bae      	ldr	r3, [pc, #696]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	4aad      	ldr	r2, [pc, #692]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8e:	4bab      	ldr	r3, [pc, #684]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	4ba7      	ldr	r3, [pc, #668]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	4aa6      	ldr	r2, [pc, #664]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aaa:	4ba4      	ldr	r3, [pc, #656]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4ba0      	ldr	r3, [pc, #640]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4a9f      	ldr	r2, [pc, #636]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4b9d      	ldr	r3, [pc, #628]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b99      	ldr	r3, [pc, #612]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a98      	ldr	r2, [pc, #608]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b96      	ldr	r3, [pc, #600]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	4b92      	ldr	r3, [pc, #584]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a91      	ldr	r2, [pc, #580]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002af8:	f043 0308 	orr.w	r3, r3, #8
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b8f      	ldr	r3, [pc, #572]	@ (8002d3c <MX_GPIO_Init+0x2f0>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2188      	movs	r1, #136	@ 0x88
 8002b0e:	488c      	ldr	r0, [pc, #560]	@ (8002d40 <MX_GPIO_Init+0x2f4>)
 8002b10:	f002 f8f0 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b14:	2201      	movs	r2, #1
 8002b16:	2101      	movs	r1, #1
 8002b18:	488a      	ldr	r0, [pc, #552]	@ (8002d44 <MX_GPIO_Init+0x2f8>)
 8002b1a:	f002 f8eb 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b24:	4888      	ldr	r0, [pc, #544]	@ (8002d48 <MX_GPIO_Init+0x2fc>)
 8002b26:	f002 f8e5 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002b30:	4886      	ldr	r0, [pc, #536]	@ (8002d4c <MX_GPIO_Init+0x300>)
 8002b32:	f002 f8df 	bl	8004cf4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002b36:	2308      	movs	r3, #8
 8002b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002b46:	f107 031c 	add.w	r3, r7, #28
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	487c      	ldr	r0, [pc, #496]	@ (8002d40 <MX_GPIO_Init+0x2f4>)
 8002b4e:	f001 fe39 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b56:	2301      	movs	r3, #1
 8002b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	4876      	ldr	r0, [pc, #472]	@ (8002d44 <MX_GPIO_Init+0x2f8>)
 8002b6a:	f001 fe2b 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002b6e:	2308      	movs	r3, #8
 8002b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b7e:	2305      	movs	r3, #5
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	486e      	ldr	r0, [pc, #440]	@ (8002d44 <MX_GPIO_Init+0x2f8>)
 8002b8a:	f001 fe1b 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	486b      	ldr	r0, [pc, #428]	@ (8002d50 <MX_GPIO_Init+0x304>)
 8002ba4:	f001 fe0e 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002ba8:	2310      	movs	r3, #16
 8002baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bb8:	2306      	movs	r3, #6
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4863      	ldr	r0, [pc, #396]	@ (8002d50 <MX_GPIO_Init+0x304>)
 8002bc4:	f001 fdfe 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 031c 	add.w	r3, r7, #28
 8002bd8:	4619      	mov	r1, r3
 8002bda:	485b      	ldr	r0, [pc, #364]	@ (8002d48 <MX_GPIO_Init+0x2fc>)
 8002bdc:	f001 fdf2 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be4:	2301      	movs	r3, #1
 8002be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002be8:	2302      	movs	r3, #2
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf0:	f107 031c 	add.w	r3, r7, #28
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4852      	ldr	r0, [pc, #328]	@ (8002d40 <MX_GPIO_Init+0x2f4>)
 8002bf8:	f001 fde4 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002bfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c0e:	2305      	movs	r3, #5
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	484b      	ldr	r0, [pc, #300]	@ (8002d48 <MX_GPIO_Init+0x2fc>)
 8002c1a:	f001 fdd3 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	4844      	ldr	r0, [pc, #272]	@ (8002d48 <MX_GPIO_Init+0x2fc>)
 8002c38:	f001 fdc4 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002c3c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002c40:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	483d      	ldr	r0, [pc, #244]	@ (8002d4c <MX_GPIO_Init+0x300>)
 8002c56:	f001 fdb5 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002c5a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c6c:	2306      	movs	r3, #6
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	4619      	mov	r1, r3
 8002c76:	4833      	ldr	r0, [pc, #204]	@ (8002d44 <MX_GPIO_Init+0x2f8>)
 8002c78:	f001 fda4 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002c7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	482f      	ldr	r0, [pc, #188]	@ (8002d50 <MX_GPIO_Init+0x304>)
 8002c92:	f001 fd97 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002c96:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ca8:	230a      	movs	r3, #10
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 031c 	add.w	r3, r7, #28
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4827      	ldr	r0, [pc, #156]	@ (8002d50 <MX_GPIO_Init+0x304>)
 8002cb4:	f001 fd86 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002cc8:	2309      	movs	r3, #9
 8002cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	481e      	ldr	r0, [pc, #120]	@ (8002d4c <MX_GPIO_Init+0x300>)
 8002cd4:	f001 fd76 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4818      	ldr	r0, [pc, #96]	@ (8002d4c <MX_GPIO_Init+0x300>)
 8002cec:	f001 fd6a 	bl	80047c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002cf4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	480e      	ldr	r0, [pc, #56]	@ (8002d40 <MX_GPIO_Init+0x2f4>)
 8002d06:	f001 fd5d 	bl	80047c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Bật ngắt EXTI cho PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // hoặc RISING, tùy vào mạch
 8002d0e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480c      	ldr	r0, [pc, #48]	@ (8002d50 <MX_GPIO_Init+0x304>)
 8002d20:	f001 fd50 	bl	80047c4 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2006      	movs	r0, #6
 8002d2a:	f001 fce4 	bl	80046f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d2e:	2006      	movs	r0, #6
 8002d30:	f001 fcfd 	bl	800472e <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d34:	bf00      	nop
 8002d36:	3730      	adds	r7, #48	@ 0x30
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40020000 	.word	0x40020000

08002d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d58:	b672      	cpsid	i
}
 8002d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <Error_Handler+0x8>

08002d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a08      	ldr	r2, [pc, #32]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_MspInit+0x4c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002d9e:	2004      	movs	r0, #4
 8002da0:	f001 fc9e 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	@ 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a38      	ldr	r2, [pc, #224]	@ (8002eb0 <HAL_CAN_MspInit+0x100>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d16a      	bne.n	8002ea8 <HAL_CAN_MspInit+0xf8>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a36      	ldr	r2, [pc, #216]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002ddc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a28      	ldr	r2, [pc, #160]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <HAL_CAN_MspInit+0x104>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB13     ------> CAN2_TX
    PB5     ------> CAN2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002e38:	2309      	movs	r3, #9
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	481d      	ldr	r0, [pc, #116]	@ (8002eb8 <HAL_CAN_MspInit+0x108>)
 8002e44:	f001 fcbe 	bl	80047c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e48:	2320      	movs	r3, #32
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e50:	2301      	movs	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002e58:	2309      	movs	r3, #9
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	4815      	ldr	r0, [pc, #84]	@ (8002eb8 <HAL_CAN_MspInit+0x108>)
 8002e64:	f001 fcae 	bl	80047c4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 1);
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	203f      	movs	r0, #63	@ 0x3f
 8002e6e:	f001 fc42 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002e72:	203f      	movs	r0, #63	@ 0x3f
 8002e74:	f001 fc5b 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2040      	movs	r0, #64	@ 0x40
 8002e7e:	f001 fc3a 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002e82:	2040      	movs	r0, #64	@ 0x40
 8002e84:	f001 fc53 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	2041      	movs	r0, #65	@ 0x41
 8002e8e:	f001 fc32 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002e92:	2041      	movs	r0, #65	@ 0x41
 8002e94:	f001 fc4b 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2042      	movs	r0, #66	@ 0x42
 8002e9e:	f001 fc2a 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8002ea2:	2042      	movs	r0, #66	@ 0x42
 8002ea4:	f001 fc43 	bl	800472e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	@ 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40006800 	.word	0x40006800
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020400 	.word	0x40020400

08002ebc <HAL_CAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	@ (8002f10 <HAL_CAN_MspDeInit+0x54>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d11c      	bne.n	8002f08 <HAL_CAN_MspDeInit+0x4c>
  {
    /* USER CODE BEGIN CAN2_MspDeInit 0 */

    /* USER CODE END CAN2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN2_CLK_DISABLE();
 8002ece:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <HAL_CAN_MspDeInit+0x58>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	4a10      	ldr	r2, [pc, #64]	@ (8002f14 <HAL_CAN_MspDeInit+0x58>)
 8002ed4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ed8:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_RCC_CAN1_CLK_DISABLE();
 8002eda:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_CAN_MspDeInit+0x58>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_CAN_MspDeInit+0x58>)
 8002ee0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002ee4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN2 GPIO Configuration
    PB13     ------> CAN2_TX
    PB5     ------> CAN2_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_5);
 8002ee6:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002eea:	480b      	ldr	r0, [pc, #44]	@ (8002f18 <HAL_CAN_MspDeInit+0x5c>)
 8002eec:	f001 fe06 	bl	8004afc <HAL_GPIO_DeInit>

    /* CAN2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN2_TX_IRQn);
 8002ef0:	203f      	movs	r0, #63	@ 0x3f
 8002ef2:	f001 fc2a 	bl	800474a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 8002ef6:	2040      	movs	r0, #64	@ 0x40
 8002ef8:	f001 fc27 	bl	800474a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 8002efc:	2041      	movs	r0, #65	@ 0x41
 8002efe:	f001 fc24 	bl	800474a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_SCE_IRQn);
 8002f02:	2042      	movs	r0, #66	@ 0x42
 8002f04:	f001 fc21 	bl	800474a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN CAN2_MspDeInit 1 */

    /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40006800 	.word	0x40006800
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020400 	.word	0x40020400

08002f1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	@ 0x30
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a42      	ldr	r2, [pc, #264]	@ (8003044 <HAL_I2C_MspInit+0x128>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12d      	bne.n	8002f9a <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	4b41      	ldr	r3, [pc, #260]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	4a40      	ldr	r2, [pc, #256]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002f5a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f60:	2312      	movs	r3, #18
 8002f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	4619      	mov	r1, r3
 8002f76:	4835      	ldr	r0, [pc, #212]	@ (800304c <HAL_I2C_MspInit+0x130>)
 8002f78:	f001 fc24 	bl	80047c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	4a30      	ldr	r2, [pc, #192]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002f86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f98:	e050      	b.n	800303c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003050 <HAL_I2C_MspInit+0x134>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d14b      	bne.n	800303c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	4a26      	ldr	r2, [pc, #152]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb4:	4b24      	ldr	r3, [pc, #144]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	4b20      	ldr	r3, [pc, #128]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe2:	2312      	movs	r3, #18
 8002fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4816      	ldr	r0, [pc, #88]	@ (8003054 <HAL_I2C_MspInit+0x138>)
 8002ffa:	f001 fbe3 	bl	80047c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003004:	2312      	movs	r3, #18
 8003006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003010:	2304      	movs	r3, #4
 8003012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	4619      	mov	r1, r3
 800301a:	480f      	ldr	r0, [pc, #60]	@ (8003058 <HAL_I2C_MspInit+0x13c>)
 800301c:	f001 fbd2 	bl	80047c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	4a07      	ldr	r2, [pc, #28]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 800302a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800302e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <HAL_I2C_MspInit+0x12c>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
}
 800303c:	bf00      	nop
 800303e:	3730      	adds	r7, #48	@ 0x30
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40005400 	.word	0x40005400
 8003048:	40023800 	.word	0x40023800
 800304c:	40020400 	.word	0x40020400
 8003050:	40005c00 	.word	0x40005c00
 8003054:	40020800 	.word	0x40020800
 8003058:	40020000 	.word	0x40020000

0800305c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_SPI_MspInit+0x94>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d133      	bne.n	80030e6 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <HAL_SPI_MspInit+0x98>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	4a1b      	ldr	r2, [pc, #108]	@ (80030f4 <HAL_SPI_MspInit+0x98>)
 8003088:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800308c:	6453      	str	r3, [r2, #68]	@ 0x44
 800308e:	4b19      	ldr	r3, [pc, #100]	@ (80030f4 <HAL_SPI_MspInit+0x98>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_SPI_MspInit+0x98>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <HAL_SPI_MspInit+0x98>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030aa:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_SPI_MspInit+0x98>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030b6:	23e0      	movs	r3, #224	@ 0xe0
 80030b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c2:	2303      	movs	r3, #3
 80030c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030c6:	2305      	movs	r3, #5
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	4619      	mov	r1, r3
 80030d0:	4809      	ldr	r0, [pc, #36]	@ (80030f8 <HAL_SPI_MspInit+0x9c>)
 80030d2:	f001 fb77 	bl	80047c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2101      	movs	r1, #1
 80030da:	2023      	movs	r0, #35	@ 0x23
 80030dc:	f001 fb0b 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030e0:	2023      	movs	r0, #35	@ 0x23
 80030e2:	f001 fb24 	bl	800472e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	@ 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40013000 	.word	0x40013000
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020000 	.word	0x40020000

080030fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a24      	ldr	r2, [pc, #144]	@ (800319c <HAL_TIM_Base_MspInit+0xa0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d12e      	bne.n	800316c <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b23      	ldr	r3, [pc, #140]	@ (80031a0 <HAL_TIM_Base_MspInit+0xa4>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	4a22      	ldr	r2, [pc, #136]	@ (80031a0 <HAL_TIM_Base_MspInit+0xa4>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6453      	str	r3, [r2, #68]	@ 0x44
 800311e:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <HAL_TIM_Base_MspInit+0xa4>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2018      	movs	r0, #24
 8003130:	f001 fae1 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003134:	2018      	movs	r0, #24
 8003136:	f001 fafa 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2100      	movs	r1, #0
 800313e:	2019      	movs	r0, #25
 8003140:	f001 fad9 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003144:	2019      	movs	r0, #25
 8003146:	f001 faf2 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2100      	movs	r1, #0
 800314e:	201a      	movs	r0, #26
 8003150:	f001 fad1 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003154:	201a      	movs	r0, #26
 8003156:	f001 faea 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	201b      	movs	r0, #27
 8003160:	f001 fac9 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003164:	201b      	movs	r0, #27
 8003166:	f001 fae2 	bl	800472e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800316a:	e012      	b.n	8003192 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0c      	ldr	r2, [pc, #48]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10d      	bne.n	8003192 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_TIM_Base_MspInit+0xa4>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	4a08      	ldr	r2, [pc, #32]	@ (80031a0 <HAL_TIM_Base_MspInit+0xa4>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6413      	str	r3, [r2, #64]	@ 0x40
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_TIM_Base_MspInit+0xa4>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40002000 	.word	0x40002000

080031a8 <HAL_TIM_OnePulse_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_onepulse: TIM_OnePulse handle pointer
  * @retval None
  */
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	@ 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(htim_onepulse->Instance==TIM8)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <HAL_TIM_OnePulse_MspInit+0x94>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d133      	bne.n	8003232 <HAL_TIM_OnePulse_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <HAL_TIM_OnePulse_MspInit+0x98>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003240 <HAL_TIM_OnePulse_MspInit+0x98>)
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_TIM_OnePulse_MspInit+0x98>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <HAL_TIM_OnePulse_MspInit+0x98>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a14      	ldr	r2, [pc, #80]	@ (8003240 <HAL_TIM_OnePulse_MspInit+0x98>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_TIM_OnePulse_MspInit+0x98>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003202:	2340      	movs	r3, #64	@ 0x40
 8003204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003212:	2303      	movs	r3, #3
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	4809      	ldr	r0, [pc, #36]	@ (8003244 <HAL_TIM_OnePulse_MspInit+0x9c>)
 800321e:	f001 fad1 	bl	80047c4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2100      	movs	r1, #0
 8003226:	202e      	movs	r0, #46	@ 0x2e
 8003228:	f001 fa65 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800322c:	202e      	movs	r0, #46	@ 0x2e
 800322e:	f001 fa7e 	bl	800472e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8003232:	bf00      	nop
 8003234:	3728      	adds	r7, #40	@ 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40010400 	.word	0x40010400
 8003240:	40023800 	.word	0x40023800
 8003244:	40020800 	.word	0x40020800

08003248 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	@ 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_UART_MspInit+0x84>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d12b      	bne.n	80032c2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b18      	ldr	r3, [pc, #96]	@ (80032d0 <HAL_UART_MspInit+0x88>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a17      	ldr	r2, [pc, #92]	@ (80032d0 <HAL_UART_MspInit+0x88>)
 8003274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_UART_MspInit+0x88>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <HAL_UART_MspInit+0x88>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a10      	ldr	r2, [pc, #64]	@ (80032d0 <HAL_UART_MspInit+0x88>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <HAL_UART_MspInit+0x88>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032a2:	230c      	movs	r3, #12
 80032a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032b2:	2307      	movs	r3, #7
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	4805      	ldr	r0, [pc, #20]	@ (80032d4 <HAL_UART_MspInit+0x8c>)
 80032be:	f001 fa81 	bl	80047c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80032c2:	bf00      	nop
 80032c4:	3728      	adds	r7, #40	@ 0x28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40004400 	.word	0x40004400
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020000 	.word	0x40020000

080032d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <NMI_Handler+0x4>

080032e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <HardFault_Handler+0x4>

080032e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <MemManage_Handler+0x4>

080032f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <BusFault_Handler+0x4>

080032f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <UsageFault_Handler+0x4>

08003300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800332e:	f000 f9c1 	bl	80036b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}

08003336 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800333a:	2001      	movs	r0, #1
 800333c:	f001 fcf4 	bl	8004d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	bd80      	pop	{r7, pc}

08003344 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800334a:	f003 f848 	bl	80063de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000324 	.word	0x20000324

08003358 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800335e:	f003 f83e 	bl	80063de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000324 	.word	0x20000324

0800336c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003372:	f003 f834 	bl	80063de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000324 	.word	0x20000324

08003380 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <TIM1_CC_IRQHandler+0x10>)
 8003386:	f003 f82a 	bl	80063de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000324 	.word	0x20000324

08003394 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <SPI1_IRQHandler+0x10>)
 800339a:	f002 fcf7 	bl	8005d8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200002cc 	.word	0x200002cc

080033a8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <TIM8_CC_IRQHandler+0x10>)
 80033ae:	f003 f816 	bl	80063de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000036c 	.word	0x2000036c

080033bc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <CAN2_TX_IRQHandler+0x10>)
 80033c2:	f000 fe91 	bl	80040e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200001fc 	.word	0x200001fc

080033d0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <CAN2_RX0_IRQHandler+0x10>)
 80033d6:	f000 fe87 	bl	80040e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200001fc 	.word	0x200001fc

080033e4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <CAN2_RX1_IRQHandler+0x10>)
 80033ea:	f000 fe7d 	bl	80040e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200001fc 	.word	0x200001fc

080033f8 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <CAN2_SCE_IRQHandler+0x10>)
 80033fe:	f000 fe73 	bl	80040e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200001fc 	.word	0x200001fc

0800340c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
	return 1;
 8003410:	2301      	movs	r3, #1
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_kill>:

int _kill(int pid, int sig)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003426:	f004 fef5 	bl	8008214 <__errno>
 800342a:	4603      	mov	r3, r0
 800342c:	2216      	movs	r2, #22
 800342e:	601a      	str	r2, [r3, #0]
	return -1;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_exit>:

void _exit (int status)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ffe7 	bl	800341c <_kill>
	while (1) {}		/* Make sure we hang here */
 800344e:	bf00      	nop
 8003450:	e7fd      	b.n	800344e <_exit+0x12>

08003452 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e00a      	b.n	800347a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003464:	f3af 8000 	nop.w
 8003468:	4601      	mov	r1, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	60ba      	str	r2, [r7, #8]
 8003470:	b2ca      	uxtb	r2, r1
 8003472:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	dbf0      	blt.n	8003464 <_read+0x12>
	}

return len;
 8003482:	687b      	ldr	r3, [r7, #4]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e009      	b.n	80034b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	60ba      	str	r2, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3301      	adds	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	dbf1      	blt.n	800349e <_write+0x12>
	}
	return len;
 80034ba:	687b      	ldr	r3, [r7, #4]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_close>:

int _close(int file)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	return -1;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034ec:	605a      	str	r2, [r3, #4]
	return 0;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_isatty>:

int _isatty(int file)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	return 1;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
	return 0;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003534:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <_sbrk+0x5c>)
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <_sbrk+0x60>)
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <_sbrk+0x64>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <_sbrk+0x64>)
 800354a:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <_sbrk+0x68>)
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800354e:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <_sbrk+0x64>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	429a      	cmp	r2, r3
 800355a:	d207      	bcs.n	800356c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800355c:	f004 fe5a 	bl	8008214 <__errno>
 8003560:	4603      	mov	r3, r0
 8003562:	220c      	movs	r2, #12
 8003564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	e009      	b.n	8003580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003572:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <_sbrk+0x64>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	4a05      	ldr	r2, [pc, #20]	@ (8003590 <_sbrk+0x64>)
 800357c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20020000 	.word	0x20020000
 800358c:	00000400 	.word	0x00000400
 8003590:	200004f4 	.word	0x200004f4
 8003594:	20000648 	.word	0x20000648

08003598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <SystemInit+0x20>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a2:	4a05      	ldr	r2, [pc, #20]	@ (80035b8 <SystemInit+0x20>)
 80035a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035c0:	480d      	ldr	r0, [pc, #52]	@ (80035f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035c2:	490e      	ldr	r1, [pc, #56]	@ (80035fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c8:	e002      	b.n	80035d0 <LoopCopyDataInit>

080035ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ce:	3304      	adds	r3, #4

080035d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d4:	d3f9      	bcc.n	80035ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035d8:	4c0b      	ldr	r4, [pc, #44]	@ (8003608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035dc:	e001      	b.n	80035e2 <LoopFillZerobss>

080035de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e0:	3204      	adds	r2, #4

080035e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e4:	d3fb      	bcc.n	80035de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035e6:	f7ff ffd7 	bl	8003598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ea:	f004 fe19 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ee:	f7fe fcad 	bl	8001f4c <main>
  bx  lr    
 80035f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035fc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003600:	0800ac1c 	.word	0x0800ac1c
  ldr r2, =_sbss
 8003604:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003608:	20000648 	.word	0x20000648

0800360c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800360c:	e7fe      	b.n	800360c <ADC_IRQHandler>
	...

08003610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003614:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <HAL_Init+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <HAL_Init+0x40>)
 800361a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800361e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <HAL_Init+0x40>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <HAL_Init+0x40>)
 8003626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800362a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800362c:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <HAL_Init+0x40>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a07      	ldr	r2, [pc, #28]	@ (8003650 <HAL_Init+0x40>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003638:	2003      	movs	r0, #3
 800363a:	f001 f851 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800363e:	2007      	movs	r0, #7
 8003640:	f000 f808 	bl	8003654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003644:	f7ff fb8c 	bl	8002d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40023c00 	.word	0x40023c00

08003654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800365c:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <HAL_InitTick+0x54>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <HAL_InitTick+0x58>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800366a:	fbb3 f3f1 	udiv	r3, r3, r1
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f877 	bl	8004766 <HAL_SYSTICK_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e00e      	b.n	80036a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d80a      	bhi.n	800369e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003688:	2200      	movs	r2, #0
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	f001 f831 	bl	80046f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003694:	4a06      	ldr	r2, [pc, #24]	@ (80036b0 <HAL_InitTick+0x5c>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000004 	.word	0x20000004
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	20000008 	.word	0x20000008

080036b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b8:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_IncTick+0x20>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_IncTick+0x24>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <HAL_IncTick+0x24>)
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	200004f8 	.word	0x200004f8

080036dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return uwTick;
 80036e0:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <HAL_GetTick+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	200004f8 	.word	0x200004f8

080036f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036fc:	f7ff ffee 	bl	80036dc <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d005      	beq.n	800371a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800370e:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <HAL_Delay+0x44>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800371a:	bf00      	nop
 800371c:	f7ff ffde 	bl	80036dc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	429a      	cmp	r2, r3
 800372a:	d8f7      	bhi.n	800371c <HAL_Delay+0x28>
  {
  }
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000000c 	.word	0x2000000c

0800373c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0ed      	b.n	800392a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fb28 	bl	8002db0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7ff ffb4 	bl	80036dc <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003776:	e012      	b.n	800379e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003778:	f7ff ffb0 	bl	80036dc <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b0a      	cmp	r3, #10
 8003784:	d90b      	bls.n	800379e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2205      	movs	r2, #5
 8003796:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0c5      	b.n	800392a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0e5      	beq.n	8003778 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0202 	bic.w	r2, r2, #2
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037bc:	f7ff ff8e 	bl	80036dc <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037c2:	e012      	b.n	80037ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037c4:	f7ff ff8a 	bl	80036dc <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b0a      	cmp	r3, #10
 80037d0:	d90b      	bls.n	80037ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2205      	movs	r2, #5
 80037e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e09f      	b.n	800392a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	7e1b      	ldrb	r3, [r3, #24]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d108      	bne.n	8003812 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e007      	b.n	8003822 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003820:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7e5b      	ldrb	r3, [r3, #25]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d108      	bne.n	800383c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e007      	b.n	800384c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800384a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7e9b      	ldrb	r3, [r3, #26]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d108      	bne.n	8003866 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0220 	orr.w	r2, r2, #32
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e007      	b.n	8003876 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0220 	bic.w	r2, r2, #32
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7edb      	ldrb	r3, [r3, #27]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d108      	bne.n	8003890 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0210 	bic.w	r2, r2, #16
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e007      	b.n	80038a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0210 	orr.w	r2, r2, #16
 800389e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7f1b      	ldrb	r3, [r3, #28]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d108      	bne.n	80038ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0208 	orr.w	r2, r2, #8
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e007      	b.n	80038ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0208 	bic.w	r2, r2, #8
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7f5b      	ldrb	r3, [r3, #29]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d108      	bne.n	80038e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0204 	orr.w	r2, r2, #4
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e007      	b.n	80038f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	ea42 0103 	orr.w	r1, r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e015      	b.n	8003970 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f939 	bl	8003bbc <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fab6 	bl	8002ebc <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800395e:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003988:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d003      	beq.n	8003998 <HAL_CAN_ConfigFilter+0x20>
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b02      	cmp	r3, #2
 8003994:	f040 80be 	bne.w	8003b14 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003998:	4b65      	ldr	r3, [pc, #404]	@ (8003b30 <HAL_CAN_ConfigFilter+0x1b8>)
 800399a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039b2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	431a      	orrs	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2201      	movs	r2, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	401a      	ands	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d123      	bne.n	8003a42 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	401a      	ands	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3248      	adds	r2, #72	@ 0x48
 8003a22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a38:	6939      	ldr	r1, [r7, #16]
 8003a3a:	3348      	adds	r3, #72	@ 0x48
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d122      	bne.n	8003a90 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	3248      	adds	r2, #72	@ 0x48
 8003a70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a86:	6939      	ldr	r1, [r7, #16]
 8003a88:	3348      	adds	r3, #72	@ 0x48
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003aaa:	e007      	b.n	8003abc <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	401a      	ands	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003ad6:	e007      	b.n	8003ae8 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e006      	b.n	8003b22 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40006400 	.word	0x40006400

08003b34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d12e      	bne.n	8003ba6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b60:	f7ff fdbc 	bl	80036dc <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b66:	e012      	b.n	8003b8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b68:	f7ff fdb8 	bl	80036dc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b0a      	cmp	r3, #10
 8003b74:	d90b      	bls.n	8003b8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2205      	movs	r2, #5
 8003b86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e012      	b.n	8003bb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e006      	b.n	8003bb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
  }
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d133      	bne.n	8003c38 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003be0:	f7ff fd7c 	bl	80036dc <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003be6:	e012      	b.n	8003c0e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003be8:	f7ff fd78 	bl	80036dc <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d90b      	bls.n	8003c0e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2205      	movs	r2, #5
 8003c06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e01b      	b.n	8003c46 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0e5      	beq.n	8003be8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0202 	bic.w	r2, r2, #2
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e006      	b.n	8003c46 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b089      	sub	sp, #36	@ 0x24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c6c:	7ffb      	ldrb	r3, [r7, #31]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d003      	beq.n	8003c7a <HAL_CAN_AddTxMessage+0x2c>
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f040 80ad 	bne.w	8003dd4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8095 	beq.w	8003dc4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	0e1b      	lsrs	r3, r3, #24
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cc0:	68f9      	ldr	r1, [r7, #12]
 8003cc2:	6809      	ldr	r1, [r1, #0]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3318      	adds	r3, #24
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	440b      	add	r3, r1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e00f      	b.n	8003cf2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cdc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003ce6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3318      	adds	r3, #24
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	440b      	add	r3, r1
 8003cf0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	440b      	add	r3, r1
 8003d02:	3304      	adds	r3, #4
 8003d04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	7d1b      	ldrb	r3, [r3, #20]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d111      	bne.n	8003d32 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3318      	adds	r3, #24
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	3318      	adds	r3, #24
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3304      	adds	r3, #4
 8003d30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3307      	adds	r3, #7
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	061a      	lsls	r2, r3, #24
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3306      	adds	r3, #6
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3305      	adds	r3, #5
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	3204      	adds	r2, #4
 8003d52:	7812      	ldrb	r2, [r2, #0]
 8003d54:	4610      	mov	r0, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	6811      	ldr	r1, [r2, #0]
 8003d5a:	ea43 0200 	orr.w	r2, r3, r0
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	440b      	add	r3, r1
 8003d64:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003d68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	061a      	lsls	r2, r3, #24
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3302      	adds	r3, #2
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	4313      	orrs	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6811      	ldr	r1, [r2, #0]
 8003d90:	ea43 0200 	orr.w	r2, r3, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	440b      	add	r3, r1
 8003d9a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003d9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3318      	adds	r3, #24
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	4413      	add	r3, r2
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	6811      	ldr	r1, [r2, #0]
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3318      	adds	r3, #24
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	440b      	add	r3, r1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e00e      	b.n	8003de2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e006      	b.n	8003de2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	@ 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e00:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e02:	7afb      	ldrb	r3, [r7, #11]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d002      	beq.n	8003e0e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003e08:	7afb      	ldrb	r3, [r7, #11]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d11d      	bne.n	8003e4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d003      	beq.n	8003e7c <HAL_CAN_GetRxMessage+0x24>
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	f040 8103 	bne.w	8004082 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10e      	bne.n	8003ea0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d116      	bne.n	8003ebe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0f7      	b.n	8004090 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d107      	bne.n	8003ebe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e0e8      	b.n	8004090 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	331b      	adds	r3, #27
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	4413      	add	r3, r2
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0204 	and.w	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10c      	bne.n	8003ef6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	331b      	adds	r3, #27
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	4413      	add	r3, r2
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0d5b      	lsrs	r3, r3, #21
 8003eec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e00b      	b.n	8003f0e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	331b      	adds	r3, #27
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	4413      	add	r3, r2
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	08db      	lsrs	r3, r3, #3
 8003f06:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	331b      	adds	r3, #27
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	4413      	add	r3, r2
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0202 	and.w	r2, r3, #2
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	331b      	adds	r3, #27
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	4413      	add	r3, r2
 8003f30:	3304      	adds	r3, #4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2208      	movs	r2, #8
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	e00b      	b.n	8003f5c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	331b      	adds	r3, #27
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	4413      	add	r3, r2
 8003f50:	3304      	adds	r3, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 020f 	and.w	r2, r3, #15
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	331b      	adds	r3, #27
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	4413      	add	r3, r2
 8003f68:	3304      	adds	r3, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	331b      	adds	r3, #27
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0a1a      	lsrs	r2, r3, #8
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0c1a      	lsrs	r2, r3, #16
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	0e1a      	lsrs	r2, r3, #24
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	3303      	adds	r3, #3
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4413      	add	r3, r2
 8004012:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0a1a      	lsrs	r2, r3, #8
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	3305      	adds	r3, #5
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0c1a      	lsrs	r2, r3, #16
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	3306      	adds	r3, #6
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4413      	add	r3, r2
 8004046:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0e1a      	lsrs	r2, r3, #24
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	3307      	adds	r3, #7
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d108      	bne.n	800406e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0220 	orr.w	r2, r2, #32
 800406a:	60da      	str	r2, [r3, #12]
 800406c:	e007      	b.n	800407e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0220 	orr.w	r2, r2, #32
 800407c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e006      	b.n	8004090 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d002      	beq.n	80040ba <HAL_CAN_ActivateNotification+0x1e>
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d109      	bne.n	80040ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6959      	ldr	r1, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e006      	b.n	80040dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d07c      	beq.n	8004228 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d023      	beq.n	8004180 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd fdee 	bl	8001d2c <HAL_CAN_TxMailbox0CompleteCallback>
 8004150:	e016      	b.n	8004180 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
 8004164:	e00c      	b.n	8004180 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
 8004178:	e002      	b.n	8004180 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f96b 	bl	8004456 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d024      	beq.n	80041d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004192:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd fddc 	bl	8001d5c <HAL_CAN_TxMailbox1CompleteCallback>
 80041a4:	e016      	b.n	80041d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b8:	e00c      	b.n	80041d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80041cc:	e002      	b.n	80041d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f94b 	bl	800446a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d024      	beq.n	8004228 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fd fdca 	bl	8001d8c <HAL_CAN_TxMailbox2CompleteCallback>
 80041f8:	e016      	b.n	8004228 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	e00c      	b.n	8004228 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	e002      	b.n	8004228 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f92b 	bl	800447e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00c      	beq.n	800424c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2210      	movs	r2, #16
 800424a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d006      	beq.n	800426e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f912 	bl	8004492 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fd fae4 	bl	8001854 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2210      	movs	r2, #16
 80042ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d006      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2208      	movs	r2, #8
 80042ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f8f4 	bl	80044ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8db 	bl	80044a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2210      	movs	r2, #16
 800430a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8de 	bl	80044ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2208      	movs	r2, #8
 800432c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8d7 	bl	80044e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d07b      	beq.n	8004436 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d072      	beq.n	800442e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	f043 0302 	orr.w	r3, r3, #2
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d043      	beq.n	800442e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03e      	beq.n	800442e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b6:	2b60      	cmp	r3, #96	@ 0x60
 80043b8:	d02b      	beq.n	8004412 <HAL_CAN_IRQHandler+0x32a>
 80043ba:	2b60      	cmp	r3, #96	@ 0x60
 80043bc:	d82e      	bhi.n	800441c <HAL_CAN_IRQHandler+0x334>
 80043be:	2b50      	cmp	r3, #80	@ 0x50
 80043c0:	d022      	beq.n	8004408 <HAL_CAN_IRQHandler+0x320>
 80043c2:	2b50      	cmp	r3, #80	@ 0x50
 80043c4:	d82a      	bhi.n	800441c <HAL_CAN_IRQHandler+0x334>
 80043c6:	2b40      	cmp	r3, #64	@ 0x40
 80043c8:	d019      	beq.n	80043fe <HAL_CAN_IRQHandler+0x316>
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d826      	bhi.n	800441c <HAL_CAN_IRQHandler+0x334>
 80043ce:	2b30      	cmp	r3, #48	@ 0x30
 80043d0:	d010      	beq.n	80043f4 <HAL_CAN_IRQHandler+0x30c>
 80043d2:	2b30      	cmp	r3, #48	@ 0x30
 80043d4:	d822      	bhi.n	800441c <HAL_CAN_IRQHandler+0x334>
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d002      	beq.n	80043e0 <HAL_CAN_IRQHandler+0x2f8>
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d005      	beq.n	80043ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80043de:	e01d      	b.n	800441c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	f043 0308 	orr.w	r3, r3, #8
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80043e8:	e019      	b.n	800441e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	f043 0310 	orr.w	r3, r3, #16
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80043f2:	e014      	b.n	800441e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	f043 0320 	orr.w	r3, r3, #32
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80043fc:	e00f      	b.n	800441e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004406:	e00a      	b.n	800441e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004410:	e005      	b.n	800441e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800441a:	e000      	b.n	800441e <HAL_CAN_IRQHandler+0x336>
            break;
 800441c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800442c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2204      	movs	r2, #4
 8004434:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd fcb7 	bl	8001dbc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800444e:	bf00      	nop
 8004450:	3728      	adds	r7, #40	@ 0x28
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <__NVIC_SetPriorityGrouping>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004508:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <__NVIC_SetPriorityGrouping+0x44>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004514:	4013      	ands	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800452a:	4a04      	ldr	r2, [pc, #16]	@ (800453c <__NVIC_SetPriorityGrouping+0x44>)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	60d3      	str	r3, [r2, #12]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <__NVIC_GetPriorityGrouping>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004544:	4b04      	ldr	r3, [pc, #16]	@ (8004558 <__NVIC_GetPriorityGrouping+0x18>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 0307 	and.w	r3, r3, #7
}
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_EnableIRQ>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	2b00      	cmp	r3, #0
 800456c:	db0b      	blt.n	8004586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	f003 021f 	and.w	r2, r3, #31
 8004574:	4907      	ldr	r1, [pc, #28]	@ (8004594 <__NVIC_EnableIRQ+0x38>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2001      	movs	r0, #1
 800457e:	fa00 f202 	lsl.w	r2, r0, r2
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000e100 	.word	0xe000e100

08004598 <__NVIC_DisableIRQ>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	db12      	blt.n	80045d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	490a      	ldr	r1, [pc, #40]	@ (80045dc <__NVIC_DisableIRQ+0x44>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2001      	movs	r0, #1
 80045ba:	fa00 f202 	lsl.w	r2, r0, r2
 80045be:	3320      	adds	r3, #32
 80045c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80045c4:	f3bf 8f4f 	dsb	sy
}
 80045c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045ca:	f3bf 8f6f 	isb	sy
}
 80045ce:	bf00      	nop
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100

080045e0 <__NVIC_SetPriority>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db0a      	blt.n	800460a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	490c      	ldr	r1, [pc, #48]	@ (800462c <__NVIC_SetPriority+0x4c>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	440b      	add	r3, r1
 8004604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004608:	e00a      	b.n	8004620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4908      	ldr	r1, [pc, #32]	@ (8004630 <__NVIC_SetPriority+0x50>)
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3b04      	subs	r3, #4
 8004618:	0112      	lsls	r2, r2, #4
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	440b      	add	r3, r1
 800461e:	761a      	strb	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <NVIC_EncodePriority>:
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	@ 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f1c3 0307 	rsb	r3, r3, #7
 800464e:	2b04      	cmp	r3, #4
 8004650:	bf28      	it	cs
 8004652:	2304      	movcs	r3, #4
 8004654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3304      	adds	r3, #4
 800465a:	2b06      	cmp	r3, #6
 800465c:	d902      	bls.n	8004664 <NVIC_EncodePriority+0x30>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3b03      	subs	r3, #3
 8004662:	e000      	b.n	8004666 <NVIC_EncodePriority+0x32>
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	f04f 32ff 	mov.w	r2, #4294967295
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	401a      	ands	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800467c:	f04f 31ff 	mov.w	r1, #4294967295
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	43d9      	mvns	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	4313      	orrs	r3, r2
}
 800468e:	4618      	mov	r0, r3
 8004690:	3724      	adds	r7, #36	@ 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046ac:	d301      	bcc.n	80046b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b2:	4a0a      	ldr	r2, [pc, #40]	@ (80046dc <SysTick_Config+0x40>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ba:	210f      	movs	r1, #15
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	f7ff ff8e 	bl	80045e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <SysTick_Config+0x40>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ca:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <SysTick_Config+0x40>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	e000e010 	.word	0xe000e010

080046e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff05 	bl	80044f8 <__NVIC_SetPriorityGrouping>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004708:	f7ff ff1a 	bl	8004540 <__NVIC_GetPriorityGrouping>
 800470c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7ff ff8e 	bl	8004634 <NVIC_EncodePriority>
 8004718:	4602      	mov	r2, r0
 800471a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff5d 	bl	80045e0 <__NVIC_SetPriority>
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff0d 	bl	800455c <__NVIC_EnableIRQ>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff1d 	bl	8004598 <__NVIC_DisableIRQ>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff94 	bl	800469c <SysTick_Config>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d004      	beq.n	800479c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2280      	movs	r2, #128	@ 0x80
 8004796:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e00c      	b.n	80047b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2205      	movs	r2, #5
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	@ 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	e16b      	b.n	8004ab8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047e0:	2201      	movs	r2, #1
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	f040 815a 	bne.w	8004ab2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d005      	beq.n	8004816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004812:	2b02      	cmp	r3, #2
 8004814:	d130      	bne.n	8004878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	2203      	movs	r2, #3
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800484c:	2201      	movs	r2, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 0201 	and.w	r2, r3, #1
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b03      	cmp	r3, #3
 8004882:	d017      	beq.n	80048b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d123      	bne.n	8004908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	08da      	lsrs	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3208      	adds	r2, #8
 80048c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	220f      	movs	r2, #15
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	08da      	lsrs	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3208      	adds	r2, #8
 8004902:	69b9      	ldr	r1, [r7, #24]
 8004904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	2203      	movs	r2, #3
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 0203 	and.w	r2, r3, #3
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80b4 	beq.w	8004ab2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	4b60      	ldr	r3, [pc, #384]	@ (8004ad0 <HAL_GPIO_Init+0x30c>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	4a5f      	ldr	r2, [pc, #380]	@ (8004ad0 <HAL_GPIO_Init+0x30c>)
 8004954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004958:	6453      	str	r3, [r2, #68]	@ 0x44
 800495a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad0 <HAL_GPIO_Init+0x30c>)
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004966:	4a5b      	ldr	r2, [pc, #364]	@ (8004ad4 <HAL_GPIO_Init+0x310>)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	089b      	lsrs	r3, r3, #2
 800496c:	3302      	adds	r3, #2
 800496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	220f      	movs	r2, #15
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a52      	ldr	r2, [pc, #328]	@ (8004ad8 <HAL_GPIO_Init+0x314>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02b      	beq.n	80049ea <HAL_GPIO_Init+0x226>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a51      	ldr	r2, [pc, #324]	@ (8004adc <HAL_GPIO_Init+0x318>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d025      	beq.n	80049e6 <HAL_GPIO_Init+0x222>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a50      	ldr	r2, [pc, #320]	@ (8004ae0 <HAL_GPIO_Init+0x31c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <HAL_GPIO_Init+0x21e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a4f      	ldr	r2, [pc, #316]	@ (8004ae4 <HAL_GPIO_Init+0x320>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d019      	beq.n	80049de <HAL_GPIO_Init+0x21a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a4e      	ldr	r2, [pc, #312]	@ (8004ae8 <HAL_GPIO_Init+0x324>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_GPIO_Init+0x216>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a4d      	ldr	r2, [pc, #308]	@ (8004aec <HAL_GPIO_Init+0x328>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00d      	beq.n	80049d6 <HAL_GPIO_Init+0x212>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4c      	ldr	r2, [pc, #304]	@ (8004af0 <HAL_GPIO_Init+0x32c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <HAL_GPIO_Init+0x20e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4b      	ldr	r2, [pc, #300]	@ (8004af4 <HAL_GPIO_Init+0x330>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_GPIO_Init+0x20a>
 80049ca:	2307      	movs	r3, #7
 80049cc:	e00e      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049ce:	2308      	movs	r3, #8
 80049d0:	e00c      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049d2:	2306      	movs	r3, #6
 80049d4:	e00a      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049d6:	2305      	movs	r3, #5
 80049d8:	e008      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049da:	2304      	movs	r3, #4
 80049dc:	e006      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049de:	2303      	movs	r3, #3
 80049e0:	e004      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e002      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_Init+0x228>
 80049ea:	2300      	movs	r3, #0
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	f002 0203 	and.w	r2, r2, #3
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	4093      	lsls	r3, r2
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049fc:	4935      	ldr	r1, [pc, #212]	@ (8004ad4 <HAL_GPIO_Init+0x310>)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	3302      	adds	r3, #2
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a2e:	4a32      	ldr	r2, [pc, #200]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a34:	4b30      	ldr	r3, [pc, #192]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a58:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a5e:	4b26      	ldr	r3, [pc, #152]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a82:	4a1d      	ldr	r2, [pc, #116]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a88:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aac:	4a12      	ldr	r2, [pc, #72]	@ (8004af8 <HAL_GPIO_Init+0x334>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	f67f ae90 	bls.w	80047e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3724      	adds	r7, #36	@ 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40020000 	.word	0x40020000
 8004adc:	40020400 	.word	0x40020400
 8004ae0:	40020800 	.word	0x40020800
 8004ae4:	40020c00 	.word	0x40020c00
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40021400 	.word	0x40021400
 8004af0:	40021800 	.word	0x40021800
 8004af4:	40021c00 	.word	0x40021c00
 8004af8:	40013c00 	.word	0x40013c00

08004afc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e0cd      	b.n	8004cb4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b18:	2201      	movs	r2, #1
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	f040 80bd 	bne.w	8004cae <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b34:	4a65      	ldr	r2, [pc, #404]	@ (8004ccc <HAL_GPIO_DeInit+0x1d0>)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	089b      	lsrs	r3, r3, #2
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	220f      	movs	r2, #15
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	4013      	ands	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a5d      	ldr	r2, [pc, #372]	@ (8004cd0 <HAL_GPIO_DeInit+0x1d4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_GPIO_DeInit+0xba>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <HAL_GPIO_DeInit+0x1d8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d025      	beq.n	8004bb2 <HAL_GPIO_DeInit+0xb6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a5b      	ldr	r2, [pc, #364]	@ (8004cd8 <HAL_GPIO_DeInit+0x1dc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01f      	beq.n	8004bae <HAL_GPIO_DeInit+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a5a      	ldr	r2, [pc, #360]	@ (8004cdc <HAL_GPIO_DeInit+0x1e0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d019      	beq.n	8004baa <HAL_GPIO_DeInit+0xae>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a59      	ldr	r2, [pc, #356]	@ (8004ce0 <HAL_GPIO_DeInit+0x1e4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_GPIO_DeInit+0xaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a58      	ldr	r2, [pc, #352]	@ (8004ce4 <HAL_GPIO_DeInit+0x1e8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00d      	beq.n	8004ba2 <HAL_GPIO_DeInit+0xa6>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a57      	ldr	r2, [pc, #348]	@ (8004ce8 <HAL_GPIO_DeInit+0x1ec>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <HAL_GPIO_DeInit+0xa2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a56      	ldr	r2, [pc, #344]	@ (8004cec <HAL_GPIO_DeInit+0x1f0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_GPIO_DeInit+0x9e>
 8004b96:	2307      	movs	r3, #7
 8004b98:	e00e      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	e00c      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	e00a      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e008      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	e006      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004baa:	2303      	movs	r3, #3
 8004bac:	e004      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e002      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_GPIO_DeInit+0xbc>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	f002 0203 	and.w	r2, r2, #3
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	4093      	lsls	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d132      	bne.n	8004c2e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bc8:	4b49      	ldr	r3, [pc, #292]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	4947      	ldr	r1, [pc, #284]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bd6:	4b46      	ldr	r3, [pc, #280]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	4944      	ldr	r1, [pc, #272]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004be4:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	4940      	ldr	r1, [pc, #256]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	493d      	ldr	r1, [pc, #244]	@ (8004cf0 <HAL_GPIO_DeInit+0x1f4>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	220f      	movs	r2, #15
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c10:	4a2e      	ldr	r2, [pc, #184]	@ (8004ccc <HAL_GPIO_DeInit+0x1d0>)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	089b      	lsrs	r3, r3, #2
 8004c16:	3302      	adds	r3, #2
 8004c18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	482a      	ldr	r0, [pc, #168]	@ (8004ccc <HAL_GPIO_DeInit+0x1d0>)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	089b      	lsrs	r3, r3, #2
 8004c26:	400a      	ands	r2, r1
 8004c28:	3302      	adds	r3, #2
 8004c2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	2103      	movs	r1, #3
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	08da      	lsrs	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3208      	adds	r2, #8
 8004c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	220f      	movs	r2, #15
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	08d2      	lsrs	r2, r2, #3
 8004c64:	4019      	ands	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3208      	adds	r2, #8
 8004c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	2103      	movs	r1, #3
 8004c78:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	401a      	ands	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	2101      	movs	r1, #1
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	401a      	ands	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	2103      	movs	r1, #3
 8004ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	401a      	ands	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	f67f af2e 	bls.w	8004b18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	40020000 	.word	0x40020000
 8004cd4:	40020400 	.word	0x40020400
 8004cd8:	40020800 	.word	0x40020800
 8004cdc:	40020c00 	.word	0x40020c00
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40021400 	.word	0x40021400
 8004ce8:	40021800 	.word	0x40021800
 8004cec:	40021c00 	.word	0x40021c00
 8004cf0:	40013c00 	.word	0x40013c00

08004cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
 8004d00:	4613      	mov	r3, r2
 8004d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d04:	787b      	ldrb	r3, [r7, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d0a:	887a      	ldrh	r2, [r7, #2]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d10:	e003      	b.n	8004d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	041a      	lsls	r2, r3, #16
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	619a      	str	r2, [r3, #24]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d32:	4b08      	ldr	r3, [pc, #32]	@ (8004d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d006      	beq.n	8004d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d3e:	4a05      	ldr	r2, [pc, #20]	@ (8004d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d40:	88fb      	ldrh	r3, [r7, #6]
 8004d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f806 	bl	8004d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40013c00 	.word	0x40013c00

08004d58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e12b      	b.n	8004fda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fe f8c0 	bl	8002f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2224      	movs	r2, #36	@ 0x24
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f000 fd80 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4a81      	ldr	r2, [pc, #516]	@ (8004fe4 <HAL_I2C_Init+0x274>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d807      	bhi.n	8004df4 <HAL_I2C_Init+0x84>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a80      	ldr	r2, [pc, #512]	@ (8004fe8 <HAL_I2C_Init+0x278>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bf94      	ite	ls
 8004dec:	2301      	movls	r3, #1
 8004dee:	2300      	movhi	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e006      	b.n	8004e02 <HAL_I2C_Init+0x92>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a7d      	ldr	r2, [pc, #500]	@ (8004fec <HAL_I2C_Init+0x27c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	bf94      	ite	ls
 8004dfc:	2301      	movls	r3, #1
 8004dfe:	2300      	movhi	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0e7      	b.n	8004fda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a78      	ldr	r2, [pc, #480]	@ (8004ff0 <HAL_I2C_Init+0x280>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	0c9b      	lsrs	r3, r3, #18
 8004e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe4 <HAL_I2C_Init+0x274>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d802      	bhi.n	8004e44 <HAL_I2C_Init+0xd4>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	3301      	adds	r3, #1
 8004e42:	e009      	b.n	8004e58 <HAL_I2C_Init+0xe8>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	4a69      	ldr	r2, [pc, #420]	@ (8004ff4 <HAL_I2C_Init+0x284>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	3301      	adds	r3, #1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	495c      	ldr	r1, [pc, #368]	@ (8004fe4 <HAL_I2C_Init+0x274>)
 8004e74:	428b      	cmp	r3, r1
 8004e76:	d819      	bhi.n	8004eac <HAL_I2C_Init+0x13c>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1e59      	subs	r1, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e86:	1c59      	adds	r1, r3, #1
 8004e88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_I2C_Init+0x138>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1e59      	subs	r1, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea6:	e051      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	e04f      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d111      	bne.n	8004ed8 <HAL_I2C_Init+0x168>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1e58      	subs	r0, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	440b      	add	r3, r1
 8004ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e012      	b.n	8004efe <HAL_I2C_Init+0x18e>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	1e58      	subs	r0, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6859      	ldr	r1, [r3, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	0099      	lsls	r1, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Init+0x196>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e022      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10e      	bne.n	8004f2c <HAL_I2C_Init+0x1bc>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1e58      	subs	r0, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	440b      	add	r3, r1
 8004f1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2a:	e00f      	b.n	8004f4c <HAL_I2C_Init+0x1dc>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1e58      	subs	r0, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	0099      	lsls	r1, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f42:	3301      	adds	r3, #1
 8004f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	6809      	ldr	r1, [r1, #0]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69da      	ldr	r2, [r3, #28]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6911      	ldr	r1, [r2, #16]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68d2      	ldr	r2, [r2, #12]
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	000186a0 	.word	0x000186a0
 8004fe8:	001e847f 	.word	0x001e847f
 8004fec:	003d08ff 	.word	0x003d08ff
 8004ff0:	431bde83 	.word	0x431bde83
 8004ff4:	10624dd3 	.word	0x10624dd3

08004ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e267      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d075      	beq.n	8005102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005016:	4b88      	ldr	r3, [pc, #544]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b04      	cmp	r3, #4
 8005020:	d00c      	beq.n	800503c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005022:	4b85      	ldr	r3, [pc, #532]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800502a:	2b08      	cmp	r3, #8
 800502c:	d112      	bne.n	8005054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502e:	4b82      	ldr	r3, [pc, #520]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800503a:	d10b      	bne.n	8005054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	4b7e      	ldr	r3, [pc, #504]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05b      	beq.n	8005100 <HAL_RCC_OscConfig+0x108>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d157      	bne.n	8005100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e242      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800505c:	d106      	bne.n	800506c <HAL_RCC_OscConfig+0x74>
 800505e:	4b76      	ldr	r3, [pc, #472]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a75      	ldr	r2, [pc, #468]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e01d      	b.n	80050a8 <HAL_RCC_OscConfig+0xb0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0x98>
 8005076:	4b70      	ldr	r3, [pc, #448]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a6f      	ldr	r2, [pc, #444]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800507c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b6d      	ldr	r3, [pc, #436]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6c      	ldr	r2, [pc, #432]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_OscConfig+0xb0>
 8005090:	4b69      	ldr	r3, [pc, #420]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a68      	ldr	r2, [pc, #416]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b66      	ldr	r3, [pc, #408]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a65      	ldr	r2, [pc, #404]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 80050a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fe fb14 	bl	80036dc <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fe fb10 	bl	80036dc <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	@ 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e207      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0xc0>
 80050d6:	e014      	b.n	8005102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fe fb00 	bl	80036dc <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e0:	f7fe fafc 	bl	80036dc <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	@ 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1f3      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	4b51      	ldr	r3, [pc, #324]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0xe8>
 80050fe:	e000      	b.n	8005102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d063      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800510e:	4b4a      	ldr	r3, [pc, #296]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511a:	4b47      	ldr	r3, [pc, #284]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005122:	2b08      	cmp	r3, #8
 8005124:	d11c      	bne.n	8005160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005126:	4b44      	ldr	r3, [pc, #272]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d116      	bne.n	8005160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	4b41      	ldr	r3, [pc, #260]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_RCC_OscConfig+0x152>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d001      	beq.n	800514a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e1c7      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514a:	4b3b      	ldr	r3, [pc, #236]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4937      	ldr	r1, [pc, #220]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515e:	e03a      	b.n	80051d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005168:	4b34      	ldr	r3, [pc, #208]	@ (800523c <HAL_RCC_OscConfig+0x244>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fe fab5 	bl	80036dc <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005176:	f7fe fab1 	bl	80036dc <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e1a8      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005188:	4b2b      	ldr	r3, [pc, #172]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b28      	ldr	r3, [pc, #160]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4925      	ldr	r1, [pc, #148]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]
 80051a8:	e015      	b.n	80051d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051aa:	4b24      	ldr	r3, [pc, #144]	@ (800523c <HAL_RCC_OscConfig+0x244>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fe fa94 	bl	80036dc <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b8:	f7fe fa90 	bl	80036dc <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e187      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d036      	beq.n	8005250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d016      	beq.n	8005218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ea:	4b15      	ldr	r3, [pc, #84]	@ (8005240 <HAL_RCC_OscConfig+0x248>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fe fa74 	bl	80036dc <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f8:	f7fe fa70 	bl	80036dc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e167      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520a:	4b0b      	ldr	r3, [pc, #44]	@ (8005238 <HAL_RCC_OscConfig+0x240>)
 800520c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x200>
 8005216:	e01b      	b.n	8005250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005218:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_RCC_OscConfig+0x248>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521e:	f7fe fa5d 	bl	80036dc <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005224:	e00e      	b.n	8005244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005226:	f7fe fa59 	bl	80036dc <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d907      	bls.n	8005244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e150      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
 8005238:	40023800 	.word	0x40023800
 800523c:	42470000 	.word	0x42470000
 8005240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	4b88      	ldr	r3, [pc, #544]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1ea      	bne.n	8005226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8097 	beq.w	800538c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005262:	4b81      	ldr	r3, [pc, #516]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10f      	bne.n	800528e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	4b7d      	ldr	r3, [pc, #500]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	4a7c      	ldr	r2, [pc, #496]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	@ 0x40
 800527e:	4b7a      	ldr	r3, [pc, #488]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528e:	4b77      	ldr	r3, [pc, #476]	@ (800546c <HAL_RCC_OscConfig+0x474>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d118      	bne.n	80052cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529a:	4b74      	ldr	r3, [pc, #464]	@ (800546c <HAL_RCC_OscConfig+0x474>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a73      	ldr	r2, [pc, #460]	@ (800546c <HAL_RCC_OscConfig+0x474>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a6:	f7fe fa19 	bl	80036dc <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fe fa15 	bl	80036dc <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e10c      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	4b6a      	ldr	r3, [pc, #424]	@ (800546c <HAL_RCC_OscConfig+0x474>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x2ea>
 80052d4:	4b64      	ldr	r3, [pc, #400]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d8:	4a63      	ldr	r2, [pc, #396]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e0:	e01c      	b.n	800531c <HAL_RCC_OscConfig+0x324>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x30c>
 80052ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	6713      	str	r3, [r2, #112]	@ 0x70
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0x324>
 8005304:	4b58      	ldr	r3, [pc, #352]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005308:	4a57      	ldr	r2, [pc, #348]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005310:	4b55      	ldr	r3, [pc, #340]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005314:	4a54      	ldr	r2, [pc, #336]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005316:	f023 0304 	bic.w	r3, r3, #4
 800531a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d015      	beq.n	8005350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fe f9da 	bl	80036dc <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fe f9d6 	bl	80036dc <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0cb      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005342:	4b49      	ldr	r3, [pc, #292]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ee      	beq.n	800532c <HAL_RCC_OscConfig+0x334>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005350:	f7fe f9c4 	bl	80036dc <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005356:	e00a      	b.n	800536e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fe f9c0 	bl	80036dc <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e0b5      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536e:	4b3e      	ldr	r3, [pc, #248]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1ee      	bne.n	8005358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005380:	4b39      	ldr	r3, [pc, #228]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	4a38      	ldr	r2, [pc, #224]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800538a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a1 	beq.w	80054d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005396:	4b34      	ldr	r3, [pc, #208]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 030c 	and.w	r3, r3, #12
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d05c      	beq.n	800545c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d141      	bne.n	800542e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053aa:	4b31      	ldr	r3, [pc, #196]	@ (8005470 <HAL_RCC_OscConfig+0x478>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b0:	f7fe f994 	bl	80036dc <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b8:	f7fe f990 	bl	80036dc <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e087      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	019b      	lsls	r3, r3, #6
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	3b01      	subs	r3, #1
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	061b      	lsls	r3, r3, #24
 80053fa:	491b      	ldr	r1, [pc, #108]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_RCC_OscConfig+0x478>)
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005406:	f7fe f969 	bl	80036dc <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540e:	f7fe f965 	bl	80036dc <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e05c      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005420:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x416>
 800542c:	e054      	b.n	80054d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542e:	4b10      	ldr	r3, [pc, #64]	@ (8005470 <HAL_RCC_OscConfig+0x478>)
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fe f952 	bl	80036dc <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543c:	f7fe f94e 	bl	80036dc <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e045      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544e:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <HAL_RCC_OscConfig+0x470>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x444>
 800545a:	e03d      	b.n	80054d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d107      	bne.n	8005474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e038      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
 8005468:	40023800 	.word	0x40023800
 800546c:	40007000 	.word	0x40007000
 8005470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005474:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <HAL_RCC_OscConfig+0x4ec>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d028      	beq.n	80054d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d121      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d11a      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054a4:	4013      	ands	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d111      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	3b01      	subs	r3, #1
 80054be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d107      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800

080054e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0cc      	b.n	8005696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054fc:	4b68      	ldr	r3, [pc, #416]	@ (80056a0 <HAL_RCC_ClockConfig+0x1b8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d90c      	bls.n	8005524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550a:	4b65      	ldr	r3, [pc, #404]	@ (80056a0 <HAL_RCC_ClockConfig+0x1b8>)
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005512:	4b63      	ldr	r3, [pc, #396]	@ (80056a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d001      	beq.n	8005524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0b8      	b.n	8005696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d020      	beq.n	8005572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800553c:	4b59      	ldr	r3, [pc, #356]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4a58      	ldr	r2, [pc, #352]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005554:	4b53      	ldr	r3, [pc, #332]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4a52      	ldr	r2, [pc, #328]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800555e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005560:	4b50      	ldr	r3, [pc, #320]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	494d      	ldr	r1, [pc, #308]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d044      	beq.n	8005608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d107      	bne.n	8005596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	4b47      	ldr	r3, [pc, #284]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d119      	bne.n	80055c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e07f      	b.n	8005696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d003      	beq.n	80055a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a6:	4b3f      	ldr	r3, [pc, #252]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e06f      	b.n	8005696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b6:	4b3b      	ldr	r3, [pc, #236]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e067      	b.n	8005696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055c6:	4b37      	ldr	r3, [pc, #220]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f023 0203 	bic.w	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4934      	ldr	r1, [pc, #208]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055d8:	f7fe f880 	bl	80036dc <HAL_GetTick>
 80055dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e0:	f7fe f87c 	bl	80036dc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e04f      	b.n	8005696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f6:	4b2b      	ldr	r3, [pc, #172]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 020c 	and.w	r2, r3, #12
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	429a      	cmp	r2, r3
 8005606:	d1eb      	bne.n	80055e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005608:	4b25      	ldr	r3, [pc, #148]	@ (80056a0 <HAL_RCC_ClockConfig+0x1b8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d20c      	bcs.n	8005630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005616:	4b22      	ldr	r3, [pc, #136]	@ (80056a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561e:	4b20      	ldr	r3, [pc, #128]	@ (80056a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e032      	b.n	8005696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800563c:	4b19      	ldr	r3, [pc, #100]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4916      	ldr	r1, [pc, #88]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800565a:	4b12      	ldr	r3, [pc, #72]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	490e      	ldr	r1, [pc, #56]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800566e:	f000 f821 	bl	80056b4 <HAL_RCC_GetSysClockFreq>
 8005672:	4602      	mov	r2, r0
 8005674:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	490a      	ldr	r1, [pc, #40]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005680:	5ccb      	ldrb	r3, [r1, r3]
 8005682:	fa22 f303 	lsr.w	r3, r2, r3
 8005686:	4a09      	ldr	r2, [pc, #36]	@ (80056ac <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800568a:	4b09      	ldr	r3, [pc, #36]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd ffe0 	bl	8003654 <HAL_InitTick>

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40023c00 	.word	0x40023c00
 80056a4:	40023800 	.word	0x40023800
 80056a8:	0800a87c 	.word	0x0800a87c
 80056ac:	20000004 	.word	0x20000004
 80056b0:	20000008 	.word	0x20000008

080056b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b8:	b094      	sub	sp, #80	@ 0x50
 80056ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056cc:	4b79      	ldr	r3, [pc, #484]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d00d      	beq.n	80056f4 <HAL_RCC_GetSysClockFreq+0x40>
 80056d8:	2b08      	cmp	r3, #8
 80056da:	f200 80e1 	bhi.w	80058a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x34>
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d003      	beq.n	80056ee <HAL_RCC_GetSysClockFreq+0x3a>
 80056e6:	e0db      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056e8:	4b73      	ldr	r3, [pc, #460]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ec:	e0db      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ee:	4b73      	ldr	r3, [pc, #460]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x208>)
 80056f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f2:	e0d8      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056f4:	4b6f      	ldr	r3, [pc, #444]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056fe:	4b6d      	ldr	r3, [pc, #436]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d063      	beq.n	80057d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570a:	4b6a      	ldr	r3, [pc, #424]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	099b      	lsrs	r3, r3, #6
 8005710:	2200      	movs	r2, #0
 8005712:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005714:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571c:	633b      	str	r3, [r7, #48]	@ 0x30
 800571e:	2300      	movs	r3, #0
 8005720:	637b      	str	r3, [r7, #52]	@ 0x34
 8005722:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	f04f 0000 	mov.w	r0, #0
 800572e:	f04f 0100 	mov.w	r1, #0
 8005732:	0159      	lsls	r1, r3, #5
 8005734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005738:	0150      	lsls	r0, r2, #5
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4621      	mov	r1, r4
 8005740:	1a51      	subs	r1, r2, r1
 8005742:	6139      	str	r1, [r7, #16]
 8005744:	4629      	mov	r1, r5
 8005746:	eb63 0301 	sbc.w	r3, r3, r1
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005758:	4659      	mov	r1, fp
 800575a:	018b      	lsls	r3, r1, #6
 800575c:	4651      	mov	r1, sl
 800575e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005762:	4651      	mov	r1, sl
 8005764:	018a      	lsls	r2, r1, #6
 8005766:	4651      	mov	r1, sl
 8005768:	ebb2 0801 	subs.w	r8, r2, r1
 800576c:	4659      	mov	r1, fp
 800576e:	eb63 0901 	sbc.w	r9, r3, r1
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800577e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005786:	4690      	mov	r8, r2
 8005788:	4699      	mov	r9, r3
 800578a:	4623      	mov	r3, r4
 800578c:	eb18 0303 	adds.w	r3, r8, r3
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	462b      	mov	r3, r5
 8005794:	eb49 0303 	adc.w	r3, r9, r3
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057a6:	4629      	mov	r1, r5
 80057a8:	024b      	lsls	r3, r1, #9
 80057aa:	4621      	mov	r1, r4
 80057ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057b0:	4621      	mov	r1, r4
 80057b2:	024a      	lsls	r2, r1, #9
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ba:	2200      	movs	r2, #0
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057c4:	f7fb f9f0 	bl	8000ba8 <__aeabi_uldivmod>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4613      	mov	r3, r2
 80057ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d0:	e058      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d2:	4b38      	ldr	r3, [pc, #224]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	099b      	lsrs	r3, r3, #6
 80057d8:	2200      	movs	r2, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	4611      	mov	r1, r2
 80057de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057e2:	623b      	str	r3, [r7, #32]
 80057e4:	2300      	movs	r3, #0
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	f04f 0000 	mov.w	r0, #0
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	0159      	lsls	r1, r3, #5
 80057fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057fe:	0150      	lsls	r0, r2, #5
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4641      	mov	r1, r8
 8005806:	ebb2 0a01 	subs.w	sl, r2, r1
 800580a:	4649      	mov	r1, r9
 800580c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800581c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005824:	ebb2 040a 	subs.w	r4, r2, sl
 8005828:	eb63 050b 	sbc.w	r5, r3, fp
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	00eb      	lsls	r3, r5, #3
 8005836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800583a:	00e2      	lsls	r2, r4, #3
 800583c:	4614      	mov	r4, r2
 800583e:	461d      	mov	r5, r3
 8005840:	4643      	mov	r3, r8
 8005842:	18e3      	adds	r3, r4, r3
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	464b      	mov	r3, r9
 8005848:	eb45 0303 	adc.w	r3, r5, r3
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800585a:	4629      	mov	r1, r5
 800585c:	028b      	lsls	r3, r1, #10
 800585e:	4621      	mov	r1, r4
 8005860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005864:	4621      	mov	r1, r4
 8005866:	028a      	lsls	r2, r1, #10
 8005868:	4610      	mov	r0, r2
 800586a:	4619      	mov	r1, r3
 800586c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586e:	2200      	movs	r2, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	61fa      	str	r2, [r7, #28]
 8005874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005878:	f7fb f996 	bl	8000ba8 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4613      	mov	r3, r2
 8005882:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005884:	4b0b      	ldr	r3, [pc, #44]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	3301      	adds	r3, #1
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800589e:	e002      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a0:	4b05      	ldr	r3, [pc, #20]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80058a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3750      	adds	r7, #80	@ 0x50
 80058ac:	46bd      	mov	sp, r7
 80058ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800
 80058b8:	00f42400 	.word	0x00f42400
 80058bc:	007a1200 	.word	0x007a1200

080058c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c4:	4b03      	ldr	r3, [pc, #12]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058c6:	681b      	ldr	r3, [r3, #0]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000004 	.word	0x20000004

080058d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058dc:	f7ff fff0 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0a9b      	lsrs	r3, r3, #10
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4903      	ldr	r1, [pc, #12]	@ (80058fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	0800a88c 	.word	0x0800a88c

08005900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005904:	f7ff ffdc 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b05      	ldr	r3, [pc, #20]	@ (8005920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	0b5b      	lsrs	r3, r3, #13
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	4903      	ldr	r1, [pc, #12]	@ (8005924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800591c:	4618      	mov	r0, r3
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40023800 	.word	0x40023800
 8005924:	0800a88c 	.word	0x0800a88c

08005928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e07b      	b.n	8005a32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	d108      	bne.n	8005954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800594a:	d009      	beq.n	8005960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	61da      	str	r2, [r3, #28]
 8005952:	e005      	b.n	8005960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fd fb6e 	bl	800305c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e4:	ea42 0103 	orr.w	r1, r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	f003 0104 	and.w	r1, r3, #4
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	f003 0210 	and.w	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08a      	sub	sp, #40	@ 0x28
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a4c:	f7fd fe46 	bl	80036dc <HAL_GetTick>
 8005a50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a60:	887b      	ldrh	r3, [r7, #2]
 8005a62:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d00c      	beq.n	8005a84 <HAL_SPI_TransmitReceive+0x4a>
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a70:	d106      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x46>
 8005a7a:	7ffb      	ldrb	r3, [r7, #31]
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d001      	beq.n	8005a84 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
 8005a82:	e17f      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_SPI_TransmitReceive+0x5c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_SPI_TransmitReceive+0x5c>
 8005a90:	887b      	ldrh	r3, [r7, #2]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e174      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_SPI_TransmitReceive+0x6e>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e16d      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x34a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d003      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2205      	movs	r2, #5
 8005ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	887a      	ldrh	r2, [r7, #2]
 8005ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	887a      	ldrh	r2, [r7, #2]
 8005ada:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	887a      	ldrh	r2, [r7, #2]
 8005ae6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	d007      	beq.n	8005b18 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b20:	d17e      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0xf6>
 8005b2a:	8afb      	ldrh	r3, [r7, #22]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d16c      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	1c9a      	adds	r2, r3, #2
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b54:	e059      	b.n	8005c0a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d11b      	bne.n	8005b9c <HAL_SPI_TransmitReceive+0x162>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <HAL_SPI_TransmitReceive+0x162>
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d113      	bne.n	8005b9c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b78:	881a      	ldrh	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d119      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x1a4>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d014      	beq.n	8005bde <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	1c9a      	adds	r2, r3, #2
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bde:	f7fd fd7d 	bl	80036dc <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d80d      	bhi.n	8005c0a <HAL_SPI_TransmitReceive+0x1d0>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d009      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0bc      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1a0      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x11c>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d19b      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x11c>
 8005c1e:	e082      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x1f4>
 8005c28:	8afb      	ldrh	r3, [r7, #22]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d171      	bne.n	8005d12 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c54:	e05d      	b.n	8005d12 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d11c      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x264>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d017      	beq.n	8005c9e <HAL_SPI_TransmitReceive+0x264>
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d114      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d119      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x2a6>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d014      	beq.n	8005ce0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ce0:	f7fd fcfc 	bl	80036dc <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d803      	bhi.n	8005cf8 <HAL_SPI_TransmitReceive+0x2be>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d102      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x2c4>
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e038      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d19c      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x21c>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d197      	bne.n	8005c56 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f9d4 	bl	80060d8 <SPI_EndRxTxTransaction>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e01d      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3728      	adds	r7, #40	@ 0x28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	099b      	lsrs	r3, r3, #6
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10f      	bne.n	8005dd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	099b      	lsrs	r3, r3, #6
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
    return;
 8005dce:	e0d7      	b.n	8005f80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_SPI_IRQHandler+0x66>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	09db      	lsrs	r3, r3, #7
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
    return;
 8005df0:	e0c6      	b.n	8005f80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10c      	bne.n	8005e18 <HAL_SPI_IRQHandler+0x8c>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	099b      	lsrs	r3, r3, #6
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	0a1b      	lsrs	r3, r3, #8
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80b4 	beq.w	8005f80 <HAL_SPI_IRQHandler+0x1f4>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80ad 	beq.w	8005f80 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d023      	beq.n	8005e7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d011      	beq.n	8005e62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e42:	f043 0204 	orr.w	r2, r3, #4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	e00b      	b.n	8005e7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	693b      	ldr	r3, [r7, #16]
        return;
 8005e78:	e082      	b.n	8005f80 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d014      	beq.n	8005eb0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f043 0201 	orr.w	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec0:	f043 0208 	orr.w	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d04f      	beq.n	8005f7e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005eec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <HAL_SPI_IRQHandler+0x17e>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d034      	beq.n	8005f74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0203 	bic.w	r2, r2, #3
 8005f18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d011      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f26:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <HAL_SPI_IRQHandler+0x1fc>)
 8005f28:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fc25 	bl	800477e <HAL_DMA_Abort_IT>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f52:	4a0d      	ldr	r2, [pc, #52]	@ (8005f88 <HAL_SPI_IRQHandler+0x1fc>)
 8005f54:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fc0f 	bl	800477e <HAL_DMA_Abort_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005f72:	e003      	b.n	8005f7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f809 	bl	8005f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f7a:	e000      	b.n	8005f7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f7c:	bf00      	nop
    return;
 8005f7e:	bf00      	nop
  }
}
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	08005fa1 	.word	0x08005fa1

08005f8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff ffe6 	bl	8005f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fd8:	f7fd fb80 	bl	80036dc <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fe8:	f7fd fb78 	bl	80036dc <HAL_GetTick>
 8005fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fee:	4b39      	ldr	r3, [pc, #228]	@ (80060d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	015b      	lsls	r3, r3, #5
 8005ff4:	0d1b      	lsrs	r3, r3, #20
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
 8005ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ffe:	e055      	b.n	80060ac <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d051      	beq.n	80060ac <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006008:	f7fd fb68 	bl	80036dc <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	429a      	cmp	r2, r3
 8006016:	d902      	bls.n	800601e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d13d      	bne.n	800609a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800602c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006036:	d111      	bne.n	800605c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006040:	d004      	beq.n	800604c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604a:	d107      	bne.n	800605c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800605a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006064:	d10f      	bne.n	8006086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e018      	b.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	e002      	b.n	80060ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4013      	ands	r3, r2
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d19a      	bne.n	8006000 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000004 	.word	0x20000004

080060d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2201      	movs	r2, #1
 80060ec:	2102      	movs	r1, #2
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff ff6a 	bl	8005fc8 <SPI_WaitFlagStateUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e032      	b.n	8006170 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800610a:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <SPI_EndRxTxTransaction+0xa0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1b      	ldr	r2, [pc, #108]	@ (800617c <SPI_EndRxTxTransaction+0xa4>)
 8006110:	fba2 2303 	umull	r2, r3, r2, r3
 8006114:	0d5b      	lsrs	r3, r3, #21
 8006116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006128:	d112      	bne.n	8006150 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2200      	movs	r2, #0
 8006132:	2180      	movs	r1, #128	@ 0x80
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff ff47 	bl	8005fc8 <SPI_WaitFlagStateUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d016      	beq.n	800616e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e00f      	b.n	8006170 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	3b01      	subs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006166:	2b80      	cmp	r3, #128	@ 0x80
 8006168:	d0f2      	beq.n	8006150 <SPI_EndRxTxTransaction+0x78>
 800616a:	e000      	b.n	800616e <SPI_EndRxTxTransaction+0x96>
        break;
 800616c:	bf00      	nop
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20000004 	.word	0x20000004
 800617c:	165e9f81 	.word	0x165e9f81

08006180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e041      	b.n	8006216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fc ffa8 	bl	80030fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f000 faf6 	bl	80067b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d001      	beq.n	8006238 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e046      	b.n	80062c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a23      	ldr	r2, [pc, #140]	@ (80062d4 <HAL_TIM_Base_Start+0xb4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d022      	beq.n	8006290 <HAL_TIM_Base_Start+0x70>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006252:	d01d      	beq.n	8006290 <HAL_TIM_Base_Start+0x70>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1f      	ldr	r2, [pc, #124]	@ (80062d8 <HAL_TIM_Base_Start+0xb8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d018      	beq.n	8006290 <HAL_TIM_Base_Start+0x70>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1e      	ldr	r2, [pc, #120]	@ (80062dc <HAL_TIM_Base_Start+0xbc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <HAL_TIM_Base_Start+0x70>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1c      	ldr	r2, [pc, #112]	@ (80062e0 <HAL_TIM_Base_Start+0xc0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00e      	beq.n	8006290 <HAL_TIM_Base_Start+0x70>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1b      	ldr	r2, [pc, #108]	@ (80062e4 <HAL_TIM_Base_Start+0xc4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_TIM_Base_Start+0x70>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a19      	ldr	r2, [pc, #100]	@ (80062e8 <HAL_TIM_Base_Start+0xc8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_TIM_Base_Start+0x70>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <HAL_TIM_Base_Start+0xcc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d111      	bne.n	80062b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b06      	cmp	r3, #6
 80062a0:	d010      	beq.n	80062c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b2:	e007      	b.n	80062c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40001800 	.word	0x40001800

080062f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6a1a      	ldr	r2, [r3, #32]
 80062fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10f      	bne.n	8006328 <HAL_TIM_Base_Stop+0x38>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6a1a      	ldr	r2, [r3, #32]
 800630e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d107      	bne.n	8006328 <HAL_TIM_Base_Stop+0x38>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e041      	b.n	80063d6 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fc ff1e 	bl	80031a8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f000 fa16 	bl	80067b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0208 	bic.w	r2, r2, #8
 8006392:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d020      	beq.n	8006442 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01b      	beq.n	8006442 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f06f 0202 	mvn.w	r2, #2
 8006412:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f9a3 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 800642e:	e005      	b.n	800643c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f995 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9a6 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01b      	beq.n	800648e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f06f 0204 	mvn.w	r2, #4
 800645e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f97d 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 800647a:	e005      	b.n	8006488 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f96f 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f980 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d020      	beq.n	80064da <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d01b      	beq.n	80064da <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0208 	mvn.w	r2, #8
 80064aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2204      	movs	r2, #4
 80064b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f957 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 80064c6:	e005      	b.n	80064d4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f949 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f95a 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01b      	beq.n	8006526 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f06f 0210 	mvn.w	r2, #16
 80064f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2208      	movs	r2, #8
 80064fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f931 	bl	8006774 <HAL_TIM_IC_CaptureCallback>
 8006512:	e005      	b.n	8006520 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f923 	bl	8006760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f934 	bl	8006788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00c      	beq.n	800654a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f06f 0201 	mvn.w	r2, #1
 8006542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f901 	bl	800674c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00c      	beq.n	800656e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fae7 	bl	8006b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00c      	beq.n	8006592 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f905 	bl	800679c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f06f 0220 	mvn.w	r2, #32
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fab9 	bl	8006b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065b6:	bf00      	nop
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b084      	sub	sp, #16
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_TIM_ConfigClockSource+0x1c>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e0b4      	b.n	8006744 <HAL_TIM_ConfigClockSource+0x186>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006600:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006612:	d03e      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0xd4>
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006618:	f200 8087 	bhi.w	800672a <HAL_TIM_ConfigClockSource+0x16c>
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006620:	f000 8086 	beq.w	8006730 <HAL_TIM_ConfigClockSource+0x172>
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006628:	d87f      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
 800662a:	2b70      	cmp	r3, #112	@ 0x70
 800662c:	d01a      	beq.n	8006664 <HAL_TIM_ConfigClockSource+0xa6>
 800662e:	2b70      	cmp	r3, #112	@ 0x70
 8006630:	d87b      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
 8006632:	2b60      	cmp	r3, #96	@ 0x60
 8006634:	d050      	beq.n	80066d8 <HAL_TIM_ConfigClockSource+0x11a>
 8006636:	2b60      	cmp	r3, #96	@ 0x60
 8006638:	d877      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
 800663a:	2b50      	cmp	r3, #80	@ 0x50
 800663c:	d03c      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0xfa>
 800663e:	2b50      	cmp	r3, #80	@ 0x50
 8006640:	d873      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
 8006642:	2b40      	cmp	r3, #64	@ 0x40
 8006644:	d058      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0x13a>
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	d86f      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
 800664a:	2b30      	cmp	r3, #48	@ 0x30
 800664c:	d064      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0x15a>
 800664e:	2b30      	cmp	r3, #48	@ 0x30
 8006650:	d86b      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
 8006652:	2b20      	cmp	r3, #32
 8006654:	d060      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0x15a>
 8006656:	2b20      	cmp	r3, #32
 8006658:	d867      	bhi.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d05c      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0x15a>
 800665e:	2b10      	cmp	r3, #16
 8006660:	d05a      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0x15a>
 8006662:	e062      	b.n	800672a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006674:	f000 f9bc 	bl	80069f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006686:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	609a      	str	r2, [r3, #8]
      break;
 8006690:	e04f      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a2:	f000 f9a5 	bl	80069f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066b4:	609a      	str	r2, [r3, #8]
      break;
 80066b6:	e03c      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c4:	461a      	mov	r2, r3
 80066c6:	f000 f919 	bl	80068fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2150      	movs	r1, #80	@ 0x50
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f972 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 80066d6:	e02c      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e4:	461a      	mov	r2, r3
 80066e6:	f000 f938 	bl	800695a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2160      	movs	r1, #96	@ 0x60
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f962 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 80066f6:	e01c      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006704:	461a      	mov	r2, r3
 8006706:	f000 f8f9 	bl	80068fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2140      	movs	r1, #64	@ 0x40
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f952 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 8006716:	e00c      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f000 f949 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 8006728:	e003      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
      break;
 800672e:	e000      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006730:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a43      	ldr	r2, [pc, #268]	@ (80068d0 <TIM_Base_SetConfig+0x120>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a40      	ldr	r2, [pc, #256]	@ (80068d4 <TIM_Base_SetConfig+0x124>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3f      	ldr	r2, [pc, #252]	@ (80068d8 <TIM_Base_SetConfig+0x128>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3e      	ldr	r2, [pc, #248]	@ (80068dc <TIM_Base_SetConfig+0x12c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3d      	ldr	r2, [pc, #244]	@ (80068e0 <TIM_Base_SetConfig+0x130>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d108      	bne.n	8006802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a32      	ldr	r2, [pc, #200]	@ (80068d0 <TIM_Base_SetConfig+0x120>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006810:	d027      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2f      	ldr	r2, [pc, #188]	@ (80068d4 <TIM_Base_SetConfig+0x124>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d023      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2e      	ldr	r2, [pc, #184]	@ (80068d8 <TIM_Base_SetConfig+0x128>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01f      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2d      	ldr	r2, [pc, #180]	@ (80068dc <TIM_Base_SetConfig+0x12c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2c      	ldr	r2, [pc, #176]	@ (80068e0 <TIM_Base_SetConfig+0x130>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d017      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2b      	ldr	r2, [pc, #172]	@ (80068e4 <TIM_Base_SetConfig+0x134>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a2a      	ldr	r2, [pc, #168]	@ (80068e8 <TIM_Base_SetConfig+0x138>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00f      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a29      	ldr	r2, [pc, #164]	@ (80068ec <TIM_Base_SetConfig+0x13c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00b      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a28      	ldr	r2, [pc, #160]	@ (80068f0 <TIM_Base_SetConfig+0x140>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a27      	ldr	r2, [pc, #156]	@ (80068f4 <TIM_Base_SetConfig+0x144>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a26      	ldr	r2, [pc, #152]	@ (80068f8 <TIM_Base_SetConfig+0x148>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d108      	bne.n	8006874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a0e      	ldr	r2, [pc, #56]	@ (80068d0 <TIM_Base_SetConfig+0x120>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_Base_SetConfig+0xf2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a10      	ldr	r2, [pc, #64]	@ (80068e0 <TIM_Base_SetConfig+0x130>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d103      	bne.n	80068aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f043 0204 	orr.w	r2, r3, #4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40010400 	.word	0x40010400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800
 80068f0:	40001800 	.word	0x40001800
 80068f4:	40001c00 	.word	0x40001c00
 80068f8:	40002000 	.word	0x40002000

080068fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 030a 	bic.w	r3, r3, #10
 8006938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800695a:	b480      	push	{r7}
 800695c:	b087      	sub	sp, #28
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f023 0210 	bic.w	r2, r3, #16
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	031b      	lsls	r3, r3, #12
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006996:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f043 0307 	orr.w	r3, r3, #7
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	609a      	str	r2, [r3, #8]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	021a      	lsls	r2, r3, #8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	371c      	adds	r7, #28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e05a      	b.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a21      	ldr	r2, [pc, #132]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d022      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a94:	d01d      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d018      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	@ (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a17      	ldr	r2, [pc, #92]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a15      	ldr	r2, [pc, #84]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10c      	bne.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40010400 	.word	0x40010400
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40001800 	.word	0x40001800

08006b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e042      	b.n	8006be8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fc fb66 	bl	8003248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2224      	movs	r2, #36	@ 0x24
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f9d1 	bl	8006f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	@ 0x28
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d175      	bne.n	8006cfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <HAL_UART_Transmit+0x2c>
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e06e      	b.n	8006cfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2221      	movs	r2, #33	@ 0x21
 8006c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c2e:	f7fc fd55 	bl	80036dc <HAL_GetTick>
 8006c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	88fa      	ldrh	r2, [r7, #6]
 8006c3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c48:	d108      	bne.n	8006c5c <HAL_UART_Transmit+0x6c>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e003      	b.n	8006c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c64:	e02e      	b.n	8006cc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2180      	movs	r1, #128	@ 0x80
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f86d 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e03a      	b.n	8006cfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10b      	bne.n	8006ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	e007      	b.n	8006cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	781a      	ldrb	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1cb      	bne.n	8006c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2140      	movs	r1, #64	@ 0x40
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 f839 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e006      	b.n	8006cfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e000      	b.n	8006cfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006cfc:	2302      	movs	r3, #2
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	4613      	mov	r3, r2
 8006d12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d112      	bne.n	8006d46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <HAL_UART_Receive_IT+0x26>
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e00b      	b.n	8006d48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f860 	bl	8006e02 <UART_Start_Receive_IT>
 8006d42:	4603      	mov	r3, r0
 8006d44:	e000      	b.n	8006d48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d60:	e03b      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d037      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6a:	f7fc fcb7 	bl	80036dc <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	6a3a      	ldr	r2, [r7, #32]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d302      	bcc.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e03a      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d023      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b80      	cmp	r3, #128	@ 0x80
 8006d96:	d020      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b40      	cmp	r3, #64	@ 0x40
 8006d9c:	d01d      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d116      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f857 	bl	8006e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e00f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d0b4      	beq.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2222      	movs	r2, #34	@ 0x22
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0220 	orr.w	r2, r2, #32
 8006e66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b095      	sub	sp, #84	@ 0x54
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e5      	bne.n	8006e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d119      	bne.n	8006f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f023 0310 	bic.w	r3, r3, #16
 8006f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f0e:	61ba      	str	r2, [r7, #24]
 8006f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6979      	ldr	r1, [r7, #20]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e5      	bne.n	8006eee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f30:	bf00      	nop
 8006f32:	3754      	adds	r7, #84	@ 0x54
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f40:	b0c0      	sub	sp, #256	@ 0x100
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f58:	68d9      	ldr	r1, [r3, #12]
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	ea40 0301 	orr.w	r3, r0, r1
 8006f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f94:	f021 010c 	bic.w	r1, r1, #12
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb6:	6999      	ldr	r1, [r3, #24]
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	ea40 0301 	orr.w	r3, r0, r1
 8006fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b8f      	ldr	r3, [pc, #572]	@ (8007208 <UART_SetConfig+0x2cc>)
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d005      	beq.n	8006fdc <UART_SetConfig+0xa0>
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800720c <UART_SetConfig+0x2d0>)
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d104      	bne.n	8006fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fdc:	f7fe fc90 	bl	8005900 <HAL_RCC_GetPCLK2Freq>
 8006fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fe4:	e003      	b.n	8006fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fe6:	f7fe fc77 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8006fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff8:	f040 810c 	bne.w	8007214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007000:	2200      	movs	r2, #0
 8007002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800700a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800700e:	4622      	mov	r2, r4
 8007010:	462b      	mov	r3, r5
 8007012:	1891      	adds	r1, r2, r2
 8007014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007016:	415b      	adcs	r3, r3
 8007018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800701a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800701e:	4621      	mov	r1, r4
 8007020:	eb12 0801 	adds.w	r8, r2, r1
 8007024:	4629      	mov	r1, r5
 8007026:	eb43 0901 	adc.w	r9, r3, r1
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800703a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800703e:	4690      	mov	r8, r2
 8007040:	4699      	mov	r9, r3
 8007042:	4623      	mov	r3, r4
 8007044:	eb18 0303 	adds.w	r3, r8, r3
 8007048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800704c:	462b      	mov	r3, r5
 800704e:	eb49 0303 	adc.w	r3, r9, r3
 8007052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800706a:	460b      	mov	r3, r1
 800706c:	18db      	adds	r3, r3, r3
 800706e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007070:	4613      	mov	r3, r2
 8007072:	eb42 0303 	adc.w	r3, r2, r3
 8007076:	657b      	str	r3, [r7, #84]	@ 0x54
 8007078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800707c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007080:	f7f9 fd92 	bl	8000ba8 <__aeabi_uldivmod>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4b61      	ldr	r3, [pc, #388]	@ (8007210 <UART_SetConfig+0x2d4>)
 800708a:	fba3 2302 	umull	r2, r3, r3, r2
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	011c      	lsls	r4, r3, #4
 8007092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007096:	2200      	movs	r2, #0
 8007098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800709c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	1891      	adds	r1, r2, r2
 80070aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80070ac:	415b      	adcs	r3, r3
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070b4:	4641      	mov	r1, r8
 80070b6:	eb12 0a01 	adds.w	sl, r2, r1
 80070ba:	4649      	mov	r1, r9
 80070bc:	eb43 0b01 	adc.w	fp, r3, r1
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070d4:	4692      	mov	sl, r2
 80070d6:	469b      	mov	fp, r3
 80070d8:	4643      	mov	r3, r8
 80070da:	eb1a 0303 	adds.w	r3, sl, r3
 80070de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070e2:	464b      	mov	r3, r9
 80070e4:	eb4b 0303 	adc.w	r3, fp, r3
 80070e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007100:	460b      	mov	r3, r1
 8007102:	18db      	adds	r3, r3, r3
 8007104:	643b      	str	r3, [r7, #64]	@ 0x40
 8007106:	4613      	mov	r3, r2
 8007108:	eb42 0303 	adc.w	r3, r2, r3
 800710c:	647b      	str	r3, [r7, #68]	@ 0x44
 800710e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007116:	f7f9 fd47 	bl	8000ba8 <__aeabi_uldivmod>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4611      	mov	r1, r2
 8007120:	4b3b      	ldr	r3, [pc, #236]	@ (8007210 <UART_SetConfig+0x2d4>)
 8007122:	fba3 2301 	umull	r2, r3, r3, r1
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	2264      	movs	r2, #100	@ 0x64
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	1acb      	subs	r3, r1, r3
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007136:	4b36      	ldr	r3, [pc, #216]	@ (8007210 <UART_SetConfig+0x2d4>)
 8007138:	fba3 2302 	umull	r2, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007144:	441c      	add	r4, r3
 8007146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800714a:	2200      	movs	r2, #0
 800714c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	1891      	adds	r1, r2, r2
 800715e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007160:	415b      	adcs	r3, r3
 8007162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007168:	4641      	mov	r1, r8
 800716a:	1851      	adds	r1, r2, r1
 800716c:	6339      	str	r1, [r7, #48]	@ 0x30
 800716e:	4649      	mov	r1, r9
 8007170:	414b      	adcs	r3, r1
 8007172:	637b      	str	r3, [r7, #52]	@ 0x34
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007180:	4659      	mov	r1, fp
 8007182:	00cb      	lsls	r3, r1, #3
 8007184:	4651      	mov	r1, sl
 8007186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800718a:	4651      	mov	r1, sl
 800718c:	00ca      	lsls	r2, r1, #3
 800718e:	4610      	mov	r0, r2
 8007190:	4619      	mov	r1, r3
 8007192:	4603      	mov	r3, r0
 8007194:	4642      	mov	r2, r8
 8007196:	189b      	adds	r3, r3, r2
 8007198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800719c:	464b      	mov	r3, r9
 800719e:	460a      	mov	r2, r1
 80071a0:	eb42 0303 	adc.w	r3, r2, r3
 80071a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80071b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071bc:	460b      	mov	r3, r1
 80071be:	18db      	adds	r3, r3, r3
 80071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071c2:	4613      	mov	r3, r2
 80071c4:	eb42 0303 	adc.w	r3, r2, r3
 80071c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071d2:	f7f9 fce9 	bl	8000ba8 <__aeabi_uldivmod>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <UART_SetConfig+0x2d4>)
 80071dc:	fba3 1302 	umull	r1, r3, r3, r2
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	2164      	movs	r1, #100	@ 0x64
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	3332      	adds	r3, #50	@ 0x32
 80071ee:	4a08      	ldr	r2, [pc, #32]	@ (8007210 <UART_SetConfig+0x2d4>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f003 0207 	and.w	r2, r3, #7
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4422      	add	r2, r4
 8007202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007204:	e106      	b.n	8007414 <UART_SetConfig+0x4d8>
 8007206:	bf00      	nop
 8007208:	40011000 	.word	0x40011000
 800720c:	40011400 	.word	0x40011400
 8007210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007218:	2200      	movs	r2, #0
 800721a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800721e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	1891      	adds	r1, r2, r2
 800722c:	6239      	str	r1, [r7, #32]
 800722e:	415b      	adcs	r3, r3
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
 8007232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007236:	4641      	mov	r1, r8
 8007238:	1854      	adds	r4, r2, r1
 800723a:	4649      	mov	r1, r9
 800723c:	eb43 0501 	adc.w	r5, r3, r1
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	00eb      	lsls	r3, r5, #3
 800724a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800724e:	00e2      	lsls	r2, r4, #3
 8007250:	4614      	mov	r4, r2
 8007252:	461d      	mov	r5, r3
 8007254:	4643      	mov	r3, r8
 8007256:	18e3      	adds	r3, r4, r3
 8007258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800725c:	464b      	mov	r3, r9
 800725e:	eb45 0303 	adc.w	r3, r5, r3
 8007262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007282:	4629      	mov	r1, r5
 8007284:	008b      	lsls	r3, r1, #2
 8007286:	4621      	mov	r1, r4
 8007288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800728c:	4621      	mov	r1, r4
 800728e:	008a      	lsls	r2, r1, #2
 8007290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007294:	f7f9 fc88 	bl	8000ba8 <__aeabi_uldivmod>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4b60      	ldr	r3, [pc, #384]	@ (8007420 <UART_SetConfig+0x4e4>)
 800729e:	fba3 2302 	umull	r2, r3, r3, r2
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	011c      	lsls	r4, r3, #4
 80072a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80072b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	1891      	adds	r1, r2, r2
 80072be:	61b9      	str	r1, [r7, #24]
 80072c0:	415b      	adcs	r3, r3
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c8:	4641      	mov	r1, r8
 80072ca:	1851      	adds	r1, r2, r1
 80072cc:	6139      	str	r1, [r7, #16]
 80072ce:	4649      	mov	r1, r9
 80072d0:	414b      	adcs	r3, r1
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072e0:	4659      	mov	r1, fp
 80072e2:	00cb      	lsls	r3, r1, #3
 80072e4:	4651      	mov	r1, sl
 80072e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ea:	4651      	mov	r1, sl
 80072ec:	00ca      	lsls	r2, r1, #3
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	4642      	mov	r2, r8
 80072f6:	189b      	adds	r3, r3, r2
 80072f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072fc:	464b      	mov	r3, r9
 80072fe:	460a      	mov	r2, r1
 8007300:	eb42 0303 	adc.w	r3, r2, r3
 8007304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007320:	4649      	mov	r1, r9
 8007322:	008b      	lsls	r3, r1, #2
 8007324:	4641      	mov	r1, r8
 8007326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732a:	4641      	mov	r1, r8
 800732c:	008a      	lsls	r2, r1, #2
 800732e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007332:	f7f9 fc39 	bl	8000ba8 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4611      	mov	r1, r2
 800733c:	4b38      	ldr	r3, [pc, #224]	@ (8007420 <UART_SetConfig+0x4e4>)
 800733e:	fba3 2301 	umull	r2, r3, r3, r1
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	2264      	movs	r2, #100	@ 0x64
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	1acb      	subs	r3, r1, r3
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	3332      	adds	r3, #50	@ 0x32
 8007350:	4a33      	ldr	r2, [pc, #204]	@ (8007420 <UART_SetConfig+0x4e4>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800735c:	441c      	add	r4, r3
 800735e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007362:	2200      	movs	r2, #0
 8007364:	673b      	str	r3, [r7, #112]	@ 0x70
 8007366:	677a      	str	r2, [r7, #116]	@ 0x74
 8007368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	415b      	adcs	r3, r3
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800737c:	4641      	mov	r1, r8
 800737e:	1851      	adds	r1, r2, r1
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	4649      	mov	r1, r9
 8007384:	414b      	adcs	r3, r1
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007394:	4659      	mov	r1, fp
 8007396:	00cb      	lsls	r3, r1, #3
 8007398:	4651      	mov	r1, sl
 800739a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739e:	4651      	mov	r1, sl
 80073a0:	00ca      	lsls	r2, r1, #3
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	4642      	mov	r2, r8
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073ae:	464b      	mov	r3, r9
 80073b0:	460a      	mov	r2, r1
 80073b2:	eb42 0303 	adc.w	r3, r2, r3
 80073b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073d0:	4649      	mov	r1, r9
 80073d2:	008b      	lsls	r3, r1, #2
 80073d4:	4641      	mov	r1, r8
 80073d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073da:	4641      	mov	r1, r8
 80073dc:	008a      	lsls	r2, r1, #2
 80073de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073e2:	f7f9 fbe1 	bl	8000ba8 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <UART_SetConfig+0x4e4>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	@ 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	3332      	adds	r3, #50	@ 0x32
 80073fe:	4a08      	ldr	r2, [pc, #32]	@ (8007420 <UART_SetConfig+0x4e4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 020f 	and.w	r2, r3, #15
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4422      	add	r2, r4
 8007412:	609a      	str	r2, [r3, #8]
}
 8007414:	bf00      	nop
 8007416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800741a:	46bd      	mov	sp, r7
 800741c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007420:	51eb851f 	.word	0x51eb851f

08007424 <__cvt>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	ec57 6b10 	vmov	r6, r7, d0
 800742c:	2f00      	cmp	r7, #0
 800742e:	460c      	mov	r4, r1
 8007430:	4619      	mov	r1, r3
 8007432:	463b      	mov	r3, r7
 8007434:	bfbb      	ittet	lt
 8007436:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800743a:	461f      	movlt	r7, r3
 800743c:	2300      	movge	r3, #0
 800743e:	232d      	movlt	r3, #45	@ 0x2d
 8007440:	700b      	strb	r3, [r1, #0]
 8007442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007444:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007448:	4691      	mov	r9, r2
 800744a:	f023 0820 	bic.w	r8, r3, #32
 800744e:	bfbc      	itt	lt
 8007450:	4632      	movlt	r2, r6
 8007452:	4616      	movlt	r6, r2
 8007454:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007458:	d005      	beq.n	8007466 <__cvt+0x42>
 800745a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800745e:	d100      	bne.n	8007462 <__cvt+0x3e>
 8007460:	3401      	adds	r4, #1
 8007462:	2102      	movs	r1, #2
 8007464:	e000      	b.n	8007468 <__cvt+0x44>
 8007466:	2103      	movs	r1, #3
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	ab02      	add	r3, sp, #8
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	ec47 6b10 	vmov	d0, r6, r7
 8007474:	4653      	mov	r3, sl
 8007476:	4622      	mov	r2, r4
 8007478:	f000 ff82 	bl	8008380 <_dtoa_r>
 800747c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007480:	4605      	mov	r5, r0
 8007482:	d119      	bne.n	80074b8 <__cvt+0x94>
 8007484:	f019 0f01 	tst.w	r9, #1
 8007488:	d00e      	beq.n	80074a8 <__cvt+0x84>
 800748a:	eb00 0904 	add.w	r9, r0, r4
 800748e:	2200      	movs	r2, #0
 8007490:	2300      	movs	r3, #0
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800749a:	b108      	cbz	r0, 80074a0 <__cvt+0x7c>
 800749c:	f8cd 900c 	str.w	r9, [sp, #12]
 80074a0:	2230      	movs	r2, #48	@ 0x30
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	454b      	cmp	r3, r9
 80074a6:	d31e      	bcc.n	80074e6 <__cvt+0xc2>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074ac:	1b5b      	subs	r3, r3, r5
 80074ae:	4628      	mov	r0, r5
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	b004      	add	sp, #16
 80074b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074bc:	eb00 0904 	add.w	r9, r0, r4
 80074c0:	d1e5      	bne.n	800748e <__cvt+0x6a>
 80074c2:	7803      	ldrb	r3, [r0, #0]
 80074c4:	2b30      	cmp	r3, #48	@ 0x30
 80074c6:	d10a      	bne.n	80074de <__cvt+0xba>
 80074c8:	2200      	movs	r2, #0
 80074ca:	2300      	movs	r3, #0
 80074cc:	4630      	mov	r0, r6
 80074ce:	4639      	mov	r1, r7
 80074d0:	f7f9 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80074d4:	b918      	cbnz	r0, 80074de <__cvt+0xba>
 80074d6:	f1c4 0401 	rsb	r4, r4, #1
 80074da:	f8ca 4000 	str.w	r4, [sl]
 80074de:	f8da 3000 	ldr.w	r3, [sl]
 80074e2:	4499      	add	r9, r3
 80074e4:	e7d3      	b.n	800748e <__cvt+0x6a>
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	9103      	str	r1, [sp, #12]
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e7d9      	b.n	80074a2 <__cvt+0x7e>

080074ee <__exponent>:
 80074ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074f0:	2900      	cmp	r1, #0
 80074f2:	bfba      	itte	lt
 80074f4:	4249      	neglt	r1, r1
 80074f6:	232d      	movlt	r3, #45	@ 0x2d
 80074f8:	232b      	movge	r3, #43	@ 0x2b
 80074fa:	2909      	cmp	r1, #9
 80074fc:	7002      	strb	r2, [r0, #0]
 80074fe:	7043      	strb	r3, [r0, #1]
 8007500:	dd29      	ble.n	8007556 <__exponent+0x68>
 8007502:	f10d 0307 	add.w	r3, sp, #7
 8007506:	461d      	mov	r5, r3
 8007508:	270a      	movs	r7, #10
 800750a:	461a      	mov	r2, r3
 800750c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007510:	fb07 1416 	mls	r4, r7, r6, r1
 8007514:	3430      	adds	r4, #48	@ 0x30
 8007516:	f802 4c01 	strb.w	r4, [r2, #-1]
 800751a:	460c      	mov	r4, r1
 800751c:	2c63      	cmp	r4, #99	@ 0x63
 800751e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007522:	4631      	mov	r1, r6
 8007524:	dcf1      	bgt.n	800750a <__exponent+0x1c>
 8007526:	3130      	adds	r1, #48	@ 0x30
 8007528:	1e94      	subs	r4, r2, #2
 800752a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800752e:	1c41      	adds	r1, r0, #1
 8007530:	4623      	mov	r3, r4
 8007532:	42ab      	cmp	r3, r5
 8007534:	d30a      	bcc.n	800754c <__exponent+0x5e>
 8007536:	f10d 0309 	add.w	r3, sp, #9
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ac      	cmp	r4, r5
 800753e:	bf88      	it	hi
 8007540:	2300      	movhi	r3, #0
 8007542:	3302      	adds	r3, #2
 8007544:	4403      	add	r3, r0
 8007546:	1a18      	subs	r0, r3, r0
 8007548:	b003      	add	sp, #12
 800754a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007550:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007554:	e7ed      	b.n	8007532 <__exponent+0x44>
 8007556:	2330      	movs	r3, #48	@ 0x30
 8007558:	3130      	adds	r1, #48	@ 0x30
 800755a:	7083      	strb	r3, [r0, #2]
 800755c:	70c1      	strb	r1, [r0, #3]
 800755e:	1d03      	adds	r3, r0, #4
 8007560:	e7f1      	b.n	8007546 <__exponent+0x58>
	...

08007564 <_printf_float>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	b08d      	sub	sp, #52	@ 0x34
 800756a:	460c      	mov	r4, r1
 800756c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007570:	4616      	mov	r6, r2
 8007572:	461f      	mov	r7, r3
 8007574:	4605      	mov	r5, r0
 8007576:	f000 fe03 	bl	8008180 <_localeconv_r>
 800757a:	6803      	ldr	r3, [r0, #0]
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	4618      	mov	r0, r3
 8007580:	f7f8 fe76 	bl	8000270 <strlen>
 8007584:	2300      	movs	r3, #0
 8007586:	930a      	str	r3, [sp, #40]	@ 0x28
 8007588:	f8d8 3000 	ldr.w	r3, [r8]
 800758c:	9005      	str	r0, [sp, #20]
 800758e:	3307      	adds	r3, #7
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	f103 0208 	add.w	r2, r3, #8
 8007598:	f894 a018 	ldrb.w	sl, [r4, #24]
 800759c:	f8d4 b000 	ldr.w	fp, [r4]
 80075a0:	f8c8 2000 	str.w	r2, [r8]
 80075a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075ac:	9307      	str	r3, [sp, #28]
 80075ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80075b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80075b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ba:	4b9c      	ldr	r3, [pc, #624]	@ (800782c <_printf_float+0x2c8>)
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295
 80075c0:	f7f9 fab4 	bl	8000b2c <__aeabi_dcmpun>
 80075c4:	bb70      	cbnz	r0, 8007624 <_printf_float+0xc0>
 80075c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ca:	4b98      	ldr	r3, [pc, #608]	@ (800782c <_printf_float+0x2c8>)
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295
 80075d0:	f7f9 fa8e 	bl	8000af0 <__aeabi_dcmple>
 80075d4:	bb30      	cbnz	r0, 8007624 <_printf_float+0xc0>
 80075d6:	2200      	movs	r2, #0
 80075d8:	2300      	movs	r3, #0
 80075da:	4640      	mov	r0, r8
 80075dc:	4649      	mov	r1, r9
 80075de:	f7f9 fa7d 	bl	8000adc <__aeabi_dcmplt>
 80075e2:	b110      	cbz	r0, 80075ea <_printf_float+0x86>
 80075e4:	232d      	movs	r3, #45	@ 0x2d
 80075e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075ea:	4a91      	ldr	r2, [pc, #580]	@ (8007830 <_printf_float+0x2cc>)
 80075ec:	4b91      	ldr	r3, [pc, #580]	@ (8007834 <_printf_float+0x2d0>)
 80075ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075f2:	bf8c      	ite	hi
 80075f4:	4690      	movhi	r8, r2
 80075f6:	4698      	movls	r8, r3
 80075f8:	2303      	movs	r3, #3
 80075fa:	6123      	str	r3, [r4, #16]
 80075fc:	f02b 0304 	bic.w	r3, fp, #4
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	f04f 0900 	mov.w	r9, #0
 8007606:	9700      	str	r7, [sp, #0]
 8007608:	4633      	mov	r3, r6
 800760a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800760c:	4621      	mov	r1, r4
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f9d2 	bl	80079b8 <_printf_common>
 8007614:	3001      	adds	r0, #1
 8007616:	f040 808d 	bne.w	8007734 <_printf_float+0x1d0>
 800761a:	f04f 30ff 	mov.w	r0, #4294967295
 800761e:	b00d      	add	sp, #52	@ 0x34
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	4642      	mov	r2, r8
 8007626:	464b      	mov	r3, r9
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f9 fa7e 	bl	8000b2c <__aeabi_dcmpun>
 8007630:	b140      	cbz	r0, 8007644 <_printf_float+0xe0>
 8007632:	464b      	mov	r3, r9
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfbc      	itt	lt
 8007638:	232d      	movlt	r3, #45	@ 0x2d
 800763a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800763e:	4a7e      	ldr	r2, [pc, #504]	@ (8007838 <_printf_float+0x2d4>)
 8007640:	4b7e      	ldr	r3, [pc, #504]	@ (800783c <_printf_float+0x2d8>)
 8007642:	e7d4      	b.n	80075ee <_printf_float+0x8a>
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800764a:	9206      	str	r2, [sp, #24]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	d13b      	bne.n	80076c8 <_printf_float+0x164>
 8007650:	2306      	movs	r3, #6
 8007652:	6063      	str	r3, [r4, #4]
 8007654:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007658:	2300      	movs	r3, #0
 800765a:	6022      	str	r2, [r4, #0]
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007660:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007664:	ab09      	add	r3, sp, #36	@ 0x24
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	6861      	ldr	r1, [r4, #4]
 800766a:	ec49 8b10 	vmov	d0, r8, r9
 800766e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007672:	4628      	mov	r0, r5
 8007674:	f7ff fed6 	bl	8007424 <__cvt>
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800767c:	2b47      	cmp	r3, #71	@ 0x47
 800767e:	4680      	mov	r8, r0
 8007680:	d129      	bne.n	80076d6 <_printf_float+0x172>
 8007682:	1cc8      	adds	r0, r1, #3
 8007684:	db02      	blt.n	800768c <_printf_float+0x128>
 8007686:	6863      	ldr	r3, [r4, #4]
 8007688:	4299      	cmp	r1, r3
 800768a:	dd41      	ble.n	8007710 <_printf_float+0x1ac>
 800768c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007690:	fa5f fa8a 	uxtb.w	sl, sl
 8007694:	3901      	subs	r1, #1
 8007696:	4652      	mov	r2, sl
 8007698:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800769c:	9109      	str	r1, [sp, #36]	@ 0x24
 800769e:	f7ff ff26 	bl	80074ee <__exponent>
 80076a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076a4:	1813      	adds	r3, r2, r0
 80076a6:	2a01      	cmp	r2, #1
 80076a8:	4681      	mov	r9, r0
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	dc02      	bgt.n	80076b4 <_printf_float+0x150>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	07d2      	lsls	r2, r2, #31
 80076b2:	d501      	bpl.n	80076b8 <_printf_float+0x154>
 80076b4:	3301      	adds	r3, #1
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0a2      	beq.n	8007606 <_printf_float+0xa2>
 80076c0:	232d      	movs	r3, #45	@ 0x2d
 80076c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076c6:	e79e      	b.n	8007606 <_printf_float+0xa2>
 80076c8:	9a06      	ldr	r2, [sp, #24]
 80076ca:	2a47      	cmp	r2, #71	@ 0x47
 80076cc:	d1c2      	bne.n	8007654 <_printf_float+0xf0>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1c0      	bne.n	8007654 <_printf_float+0xf0>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7bd      	b.n	8007652 <_printf_float+0xee>
 80076d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076da:	d9db      	bls.n	8007694 <_printf_float+0x130>
 80076dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076e0:	d118      	bne.n	8007714 <_printf_float+0x1b0>
 80076e2:	2900      	cmp	r1, #0
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	dd0b      	ble.n	8007700 <_printf_float+0x19c>
 80076e8:	6121      	str	r1, [r4, #16]
 80076ea:	b913      	cbnz	r3, 80076f2 <_printf_float+0x18e>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	07d0      	lsls	r0, r2, #31
 80076f0:	d502      	bpl.n	80076f8 <_printf_float+0x194>
 80076f2:	3301      	adds	r3, #1
 80076f4:	440b      	add	r3, r1
 80076f6:	6123      	str	r3, [r4, #16]
 80076f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076fa:	f04f 0900 	mov.w	r9, #0
 80076fe:	e7db      	b.n	80076b8 <_printf_float+0x154>
 8007700:	b913      	cbnz	r3, 8007708 <_printf_float+0x1a4>
 8007702:	6822      	ldr	r2, [r4, #0]
 8007704:	07d2      	lsls	r2, r2, #31
 8007706:	d501      	bpl.n	800770c <_printf_float+0x1a8>
 8007708:	3302      	adds	r3, #2
 800770a:	e7f4      	b.n	80076f6 <_printf_float+0x192>
 800770c:	2301      	movs	r3, #1
 800770e:	e7f2      	b.n	80076f6 <_printf_float+0x192>
 8007710:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007716:	4299      	cmp	r1, r3
 8007718:	db05      	blt.n	8007726 <_printf_float+0x1c2>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	6121      	str	r1, [r4, #16]
 800771e:	07d8      	lsls	r0, r3, #31
 8007720:	d5ea      	bpl.n	80076f8 <_printf_float+0x194>
 8007722:	1c4b      	adds	r3, r1, #1
 8007724:	e7e7      	b.n	80076f6 <_printf_float+0x192>
 8007726:	2900      	cmp	r1, #0
 8007728:	bfd4      	ite	le
 800772a:	f1c1 0202 	rsble	r2, r1, #2
 800772e:	2201      	movgt	r2, #1
 8007730:	4413      	add	r3, r2
 8007732:	e7e0      	b.n	80076f6 <_printf_float+0x192>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	055a      	lsls	r2, r3, #21
 8007738:	d407      	bmi.n	800774a <_printf_float+0x1e6>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	4642      	mov	r2, r8
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	d12b      	bne.n	80077a0 <_printf_float+0x23c>
 8007748:	e767      	b.n	800761a <_printf_float+0xb6>
 800774a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800774e:	f240 80dd 	bls.w	800790c <_printf_float+0x3a8>
 8007752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	f7f9 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800775e:	2800      	cmp	r0, #0
 8007760:	d033      	beq.n	80077ca <_printf_float+0x266>
 8007762:	4a37      	ldr	r2, [pc, #220]	@ (8007840 <_printf_float+0x2dc>)
 8007764:	2301      	movs	r3, #1
 8007766:	4631      	mov	r1, r6
 8007768:	4628      	mov	r0, r5
 800776a:	47b8      	blx	r7
 800776c:	3001      	adds	r0, #1
 800776e:	f43f af54 	beq.w	800761a <_printf_float+0xb6>
 8007772:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007776:	4543      	cmp	r3, r8
 8007778:	db02      	blt.n	8007780 <_printf_float+0x21c>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	07d8      	lsls	r0, r3, #31
 800777e:	d50f      	bpl.n	80077a0 <_printf_float+0x23c>
 8007780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f43f af45 	beq.w	800761a <_printf_float+0xb6>
 8007790:	f04f 0900 	mov.w	r9, #0
 8007794:	f108 38ff 	add.w	r8, r8, #4294967295
 8007798:	f104 0a1a 	add.w	sl, r4, #26
 800779c:	45c8      	cmp	r8, r9
 800779e:	dc09      	bgt.n	80077b4 <_printf_float+0x250>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	079b      	lsls	r3, r3, #30
 80077a4:	f100 8103 	bmi.w	80079ae <_printf_float+0x44a>
 80077a8:	68e0      	ldr	r0, [r4, #12]
 80077aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ac:	4298      	cmp	r0, r3
 80077ae:	bfb8      	it	lt
 80077b0:	4618      	movlt	r0, r3
 80077b2:	e734      	b.n	800761e <_printf_float+0xba>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4652      	mov	r2, sl
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f af2b 	beq.w	800761a <_printf_float+0xb6>
 80077c4:	f109 0901 	add.w	r9, r9, #1
 80077c8:	e7e8      	b.n	800779c <_printf_float+0x238>
 80077ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dc39      	bgt.n	8007844 <_printf_float+0x2e0>
 80077d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007840 <_printf_float+0x2dc>)
 80077d2:	2301      	movs	r3, #1
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f af1d 	beq.w	800761a <_printf_float+0xb6>
 80077e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077e4:	ea59 0303 	orrs.w	r3, r9, r3
 80077e8:	d102      	bne.n	80077f0 <_printf_float+0x28c>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	07d9      	lsls	r1, r3, #31
 80077ee:	d5d7      	bpl.n	80077a0 <_printf_float+0x23c>
 80077f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f af0d 	beq.w	800761a <_printf_float+0xb6>
 8007800:	f04f 0a00 	mov.w	sl, #0
 8007804:	f104 0b1a 	add.w	fp, r4, #26
 8007808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780a:	425b      	negs	r3, r3
 800780c:	4553      	cmp	r3, sl
 800780e:	dc01      	bgt.n	8007814 <_printf_float+0x2b0>
 8007810:	464b      	mov	r3, r9
 8007812:	e793      	b.n	800773c <_printf_float+0x1d8>
 8007814:	2301      	movs	r3, #1
 8007816:	465a      	mov	r2, fp
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	f43f aefb 	beq.w	800761a <_printf_float+0xb6>
 8007824:	f10a 0a01 	add.w	sl, sl, #1
 8007828:	e7ee      	b.n	8007808 <_printf_float+0x2a4>
 800782a:	bf00      	nop
 800782c:	7fefffff 	.word	0x7fefffff
 8007830:	0800a898 	.word	0x0800a898
 8007834:	0800a894 	.word	0x0800a894
 8007838:	0800a8a0 	.word	0x0800a8a0
 800783c:	0800a89c 	.word	0x0800a89c
 8007840:	0800a8a4 	.word	0x0800a8a4
 8007844:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007846:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800784a:	4553      	cmp	r3, sl
 800784c:	bfa8      	it	ge
 800784e:	4653      	movge	r3, sl
 8007850:	2b00      	cmp	r3, #0
 8007852:	4699      	mov	r9, r3
 8007854:	dc36      	bgt.n	80078c4 <_printf_float+0x360>
 8007856:	f04f 0b00 	mov.w	fp, #0
 800785a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800785e:	f104 021a 	add.w	r2, r4, #26
 8007862:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007864:	9306      	str	r3, [sp, #24]
 8007866:	eba3 0309 	sub.w	r3, r3, r9
 800786a:	455b      	cmp	r3, fp
 800786c:	dc31      	bgt.n	80078d2 <_printf_float+0x36e>
 800786e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007870:	459a      	cmp	sl, r3
 8007872:	dc3a      	bgt.n	80078ea <_printf_float+0x386>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	07da      	lsls	r2, r3, #31
 8007878:	d437      	bmi.n	80078ea <_printf_float+0x386>
 800787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787c:	ebaa 0903 	sub.w	r9, sl, r3
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	ebaa 0303 	sub.w	r3, sl, r3
 8007886:	4599      	cmp	r9, r3
 8007888:	bfa8      	it	ge
 800788a:	4699      	movge	r9, r3
 800788c:	f1b9 0f00 	cmp.w	r9, #0
 8007890:	dc33      	bgt.n	80078fa <_printf_float+0x396>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800789a:	f104 0b1a 	add.w	fp, r4, #26
 800789e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a0:	ebaa 0303 	sub.w	r3, sl, r3
 80078a4:	eba3 0309 	sub.w	r3, r3, r9
 80078a8:	4543      	cmp	r3, r8
 80078aa:	f77f af79 	ble.w	80077a0 <_printf_float+0x23c>
 80078ae:	2301      	movs	r3, #1
 80078b0:	465a      	mov	r2, fp
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f aeae 	beq.w	800761a <_printf_float+0xb6>
 80078be:	f108 0801 	add.w	r8, r8, #1
 80078c2:	e7ec      	b.n	800789e <_printf_float+0x33a>
 80078c4:	4642      	mov	r2, r8
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1c2      	bne.n	8007856 <_printf_float+0x2f2>
 80078d0:	e6a3      	b.n	800761a <_printf_float+0xb6>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	9206      	str	r2, [sp, #24]
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f ae9c 	beq.w	800761a <_printf_float+0xb6>
 80078e2:	9a06      	ldr	r2, [sp, #24]
 80078e4:	f10b 0b01 	add.w	fp, fp, #1
 80078e8:	e7bb      	b.n	8007862 <_printf_float+0x2fe>
 80078ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1c0      	bne.n	800787a <_printf_float+0x316>
 80078f8:	e68f      	b.n	800761a <_printf_float+0xb6>
 80078fa:	9a06      	ldr	r2, [sp, #24]
 80078fc:	464b      	mov	r3, r9
 80078fe:	4442      	add	r2, r8
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	d1c3      	bne.n	8007892 <_printf_float+0x32e>
 800790a:	e686      	b.n	800761a <_printf_float+0xb6>
 800790c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007910:	f1ba 0f01 	cmp.w	sl, #1
 8007914:	dc01      	bgt.n	800791a <_printf_float+0x3b6>
 8007916:	07db      	lsls	r3, r3, #31
 8007918:	d536      	bpl.n	8007988 <_printf_float+0x424>
 800791a:	2301      	movs	r3, #1
 800791c:	4642      	mov	r2, r8
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	f43f ae78 	beq.w	800761a <_printf_float+0xb6>
 800792a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f ae70 	beq.w	800761a <_printf_float+0xb6>
 800793a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007946:	f7f9 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800794a:	b9c0      	cbnz	r0, 800797e <_printf_float+0x41a>
 800794c:	4653      	mov	r3, sl
 800794e:	f108 0201 	add.w	r2, r8, #1
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	d10c      	bne.n	8007976 <_printf_float+0x412>
 800795c:	e65d      	b.n	800761a <_printf_float+0xb6>
 800795e:	2301      	movs	r3, #1
 8007960:	465a      	mov	r2, fp
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f ae56 	beq.w	800761a <_printf_float+0xb6>
 800796e:	f108 0801 	add.w	r8, r8, #1
 8007972:	45d0      	cmp	r8, sl
 8007974:	dbf3      	blt.n	800795e <_printf_float+0x3fa>
 8007976:	464b      	mov	r3, r9
 8007978:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800797c:	e6df      	b.n	800773e <_printf_float+0x1da>
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	f104 0b1a 	add.w	fp, r4, #26
 8007986:	e7f4      	b.n	8007972 <_printf_float+0x40e>
 8007988:	2301      	movs	r3, #1
 800798a:	4642      	mov	r2, r8
 800798c:	e7e1      	b.n	8007952 <_printf_float+0x3ee>
 800798e:	2301      	movs	r3, #1
 8007990:	464a      	mov	r2, r9
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	f43f ae3e 	beq.w	800761a <_printf_float+0xb6>
 800799e:	f108 0801 	add.w	r8, r8, #1
 80079a2:	68e3      	ldr	r3, [r4, #12]
 80079a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079a6:	1a5b      	subs	r3, r3, r1
 80079a8:	4543      	cmp	r3, r8
 80079aa:	dcf0      	bgt.n	800798e <_printf_float+0x42a>
 80079ac:	e6fc      	b.n	80077a8 <_printf_float+0x244>
 80079ae:	f04f 0800 	mov.w	r8, #0
 80079b2:	f104 0919 	add.w	r9, r4, #25
 80079b6:	e7f4      	b.n	80079a2 <_printf_float+0x43e>

080079b8 <_printf_common>:
 80079b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	4616      	mov	r6, r2
 80079be:	4698      	mov	r8, r3
 80079c0:	688a      	ldr	r2, [r1, #8]
 80079c2:	690b      	ldr	r3, [r1, #16]
 80079c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bfb8      	it	lt
 80079cc:	4613      	movlt	r3, r2
 80079ce:	6033      	str	r3, [r6, #0]
 80079d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079d4:	4607      	mov	r7, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b10a      	cbz	r2, 80079de <_printf_common+0x26>
 80079da:	3301      	adds	r3, #1
 80079dc:	6033      	str	r3, [r6, #0]
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	0699      	lsls	r1, r3, #26
 80079e2:	bf42      	ittt	mi
 80079e4:	6833      	ldrmi	r3, [r6, #0]
 80079e6:	3302      	addmi	r3, #2
 80079e8:	6033      	strmi	r3, [r6, #0]
 80079ea:	6825      	ldr	r5, [r4, #0]
 80079ec:	f015 0506 	ands.w	r5, r5, #6
 80079f0:	d106      	bne.n	8007a00 <_printf_common+0x48>
 80079f2:	f104 0a19 	add.w	sl, r4, #25
 80079f6:	68e3      	ldr	r3, [r4, #12]
 80079f8:	6832      	ldr	r2, [r6, #0]
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	42ab      	cmp	r3, r5
 80079fe:	dc26      	bgt.n	8007a4e <_printf_common+0x96>
 8007a00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	3b00      	subs	r3, #0
 8007a08:	bf18      	it	ne
 8007a0a:	2301      	movne	r3, #1
 8007a0c:	0692      	lsls	r2, r2, #26
 8007a0e:	d42b      	bmi.n	8007a68 <_printf_common+0xb0>
 8007a10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a14:	4641      	mov	r1, r8
 8007a16:	4638      	mov	r0, r7
 8007a18:	47c8      	blx	r9
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d01e      	beq.n	8007a5c <_printf_common+0xa4>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	f003 0306 	and.w	r3, r3, #6
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	bf02      	ittt	eq
 8007a2a:	68e5      	ldreq	r5, [r4, #12]
 8007a2c:	6833      	ldreq	r3, [r6, #0]
 8007a2e:	1aed      	subeq	r5, r5, r3
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	bf0c      	ite	eq
 8007a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a38:	2500      	movne	r5, #0
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	bfc4      	itt	gt
 8007a3e:	1a9b      	subgt	r3, r3, r2
 8007a40:	18ed      	addgt	r5, r5, r3
 8007a42:	2600      	movs	r6, #0
 8007a44:	341a      	adds	r4, #26
 8007a46:	42b5      	cmp	r5, r6
 8007a48:	d11a      	bne.n	8007a80 <_printf_common+0xc8>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e008      	b.n	8007a60 <_printf_common+0xa8>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4652      	mov	r2, sl
 8007a52:	4641      	mov	r1, r8
 8007a54:	4638      	mov	r0, r7
 8007a56:	47c8      	blx	r9
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d103      	bne.n	8007a64 <_printf_common+0xac>
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a64:	3501      	adds	r5, #1
 8007a66:	e7c6      	b.n	80079f6 <_printf_common+0x3e>
 8007a68:	18e1      	adds	r1, r4, r3
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	2030      	movs	r0, #48	@ 0x30
 8007a6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a72:	4422      	add	r2, r4
 8007a74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	e7c7      	b.n	8007a10 <_printf_common+0x58>
 8007a80:	2301      	movs	r3, #1
 8007a82:	4622      	mov	r2, r4
 8007a84:	4641      	mov	r1, r8
 8007a86:	4638      	mov	r0, r7
 8007a88:	47c8      	blx	r9
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d0e6      	beq.n	8007a5c <_printf_common+0xa4>
 8007a8e:	3601      	adds	r6, #1
 8007a90:	e7d9      	b.n	8007a46 <_printf_common+0x8e>
	...

08007a94 <_printf_i>:
 8007a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	7e0f      	ldrb	r7, [r1, #24]
 8007a9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a9c:	2f78      	cmp	r7, #120	@ 0x78
 8007a9e:	4691      	mov	r9, r2
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	469a      	mov	sl, r3
 8007aa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007aaa:	d807      	bhi.n	8007abc <_printf_i+0x28>
 8007aac:	2f62      	cmp	r7, #98	@ 0x62
 8007aae:	d80a      	bhi.n	8007ac6 <_printf_i+0x32>
 8007ab0:	2f00      	cmp	r7, #0
 8007ab2:	f000 80d1 	beq.w	8007c58 <_printf_i+0x1c4>
 8007ab6:	2f58      	cmp	r7, #88	@ 0x58
 8007ab8:	f000 80b8 	beq.w	8007c2c <_printf_i+0x198>
 8007abc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ac4:	e03a      	b.n	8007b3c <_printf_i+0xa8>
 8007ac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007aca:	2b15      	cmp	r3, #21
 8007acc:	d8f6      	bhi.n	8007abc <_printf_i+0x28>
 8007ace:	a101      	add	r1, pc, #4	@ (adr r1, 8007ad4 <_printf_i+0x40>)
 8007ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007abd 	.word	0x08007abd
 8007ae0:	08007abd 	.word	0x08007abd
 8007ae4:	08007abd 	.word	0x08007abd
 8007ae8:	08007abd 	.word	0x08007abd
 8007aec:	08007b41 	.word	0x08007b41
 8007af0:	08007abd 	.word	0x08007abd
 8007af4:	08007abd 	.word	0x08007abd
 8007af8:	08007abd 	.word	0x08007abd
 8007afc:	08007abd 	.word	0x08007abd
 8007b00:	08007c3f 	.word	0x08007c3f
 8007b04:	08007b6b 	.word	0x08007b6b
 8007b08:	08007bf9 	.word	0x08007bf9
 8007b0c:	08007abd 	.word	0x08007abd
 8007b10:	08007abd 	.word	0x08007abd
 8007b14:	08007c61 	.word	0x08007c61
 8007b18:	08007abd 	.word	0x08007abd
 8007b1c:	08007b6b 	.word	0x08007b6b
 8007b20:	08007abd 	.word	0x08007abd
 8007b24:	08007abd 	.word	0x08007abd
 8007b28:	08007c01 	.word	0x08007c01
 8007b2c:	6833      	ldr	r3, [r6, #0]
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6032      	str	r2, [r6, #0]
 8007b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e09c      	b.n	8007c7a <_printf_i+0x1e6>
 8007b40:	6833      	ldr	r3, [r6, #0]
 8007b42:	6820      	ldr	r0, [r4, #0]
 8007b44:	1d19      	adds	r1, r3, #4
 8007b46:	6031      	str	r1, [r6, #0]
 8007b48:	0606      	lsls	r6, r0, #24
 8007b4a:	d501      	bpl.n	8007b50 <_printf_i+0xbc>
 8007b4c:	681d      	ldr	r5, [r3, #0]
 8007b4e:	e003      	b.n	8007b58 <_printf_i+0xc4>
 8007b50:	0645      	lsls	r5, r0, #25
 8007b52:	d5fb      	bpl.n	8007b4c <_printf_i+0xb8>
 8007b54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	da03      	bge.n	8007b64 <_printf_i+0xd0>
 8007b5c:	232d      	movs	r3, #45	@ 0x2d
 8007b5e:	426d      	negs	r5, r5
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b64:	4858      	ldr	r0, [pc, #352]	@ (8007cc8 <_printf_i+0x234>)
 8007b66:	230a      	movs	r3, #10
 8007b68:	e011      	b.n	8007b8e <_printf_i+0xfa>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	6833      	ldr	r3, [r6, #0]
 8007b6e:	0608      	lsls	r0, r1, #24
 8007b70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b74:	d402      	bmi.n	8007b7c <_printf_i+0xe8>
 8007b76:	0649      	lsls	r1, r1, #25
 8007b78:	bf48      	it	mi
 8007b7a:	b2ad      	uxthmi	r5, r5
 8007b7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b7e:	4852      	ldr	r0, [pc, #328]	@ (8007cc8 <_printf_i+0x234>)
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	bf14      	ite	ne
 8007b84:	230a      	movne	r3, #10
 8007b86:	2308      	moveq	r3, #8
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b8e:	6866      	ldr	r6, [r4, #4]
 8007b90:	60a6      	str	r6, [r4, #8]
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	db05      	blt.n	8007ba2 <_printf_i+0x10e>
 8007b96:	6821      	ldr	r1, [r4, #0]
 8007b98:	432e      	orrs	r6, r5
 8007b9a:	f021 0104 	bic.w	r1, r1, #4
 8007b9e:	6021      	str	r1, [r4, #0]
 8007ba0:	d04b      	beq.n	8007c3a <_printf_i+0x1a6>
 8007ba2:	4616      	mov	r6, r2
 8007ba4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ba8:	fb03 5711 	mls	r7, r3, r1, r5
 8007bac:	5dc7      	ldrb	r7, [r0, r7]
 8007bae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bb2:	462f      	mov	r7, r5
 8007bb4:	42bb      	cmp	r3, r7
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	d9f4      	bls.n	8007ba4 <_printf_i+0x110>
 8007bba:	2b08      	cmp	r3, #8
 8007bbc:	d10b      	bne.n	8007bd6 <_printf_i+0x142>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	07df      	lsls	r7, r3, #31
 8007bc2:	d508      	bpl.n	8007bd6 <_printf_i+0x142>
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	6861      	ldr	r1, [r4, #4]
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	bfde      	ittt	le
 8007bcc:	2330      	movle	r3, #48	@ 0x30
 8007bce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bd6:	1b92      	subs	r2, r2, r6
 8007bd8:	6122      	str	r2, [r4, #16]
 8007bda:	f8cd a000 	str.w	sl, [sp]
 8007bde:	464b      	mov	r3, r9
 8007be0:	aa03      	add	r2, sp, #12
 8007be2:	4621      	mov	r1, r4
 8007be4:	4640      	mov	r0, r8
 8007be6:	f7ff fee7 	bl	80079b8 <_printf_common>
 8007bea:	3001      	adds	r0, #1
 8007bec:	d14a      	bne.n	8007c84 <_printf_i+0x1f0>
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf2:	b004      	add	sp, #16
 8007bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	f043 0320 	orr.w	r3, r3, #32
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	4832      	ldr	r0, [pc, #200]	@ (8007ccc <_printf_i+0x238>)
 8007c02:	2778      	movs	r7, #120	@ 0x78
 8007c04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	6831      	ldr	r1, [r6, #0]
 8007c0c:	061f      	lsls	r7, r3, #24
 8007c0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c12:	d402      	bmi.n	8007c1a <_printf_i+0x186>
 8007c14:	065f      	lsls	r7, r3, #25
 8007c16:	bf48      	it	mi
 8007c18:	b2ad      	uxthmi	r5, r5
 8007c1a:	6031      	str	r1, [r6, #0]
 8007c1c:	07d9      	lsls	r1, r3, #31
 8007c1e:	bf44      	itt	mi
 8007c20:	f043 0320 	orrmi.w	r3, r3, #32
 8007c24:	6023      	strmi	r3, [r4, #0]
 8007c26:	b11d      	cbz	r5, 8007c30 <_printf_i+0x19c>
 8007c28:	2310      	movs	r3, #16
 8007c2a:	e7ad      	b.n	8007b88 <_printf_i+0xf4>
 8007c2c:	4826      	ldr	r0, [pc, #152]	@ (8007cc8 <_printf_i+0x234>)
 8007c2e:	e7e9      	b.n	8007c04 <_printf_i+0x170>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	f023 0320 	bic.w	r3, r3, #32
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	e7f6      	b.n	8007c28 <_printf_i+0x194>
 8007c3a:	4616      	mov	r6, r2
 8007c3c:	e7bd      	b.n	8007bba <_printf_i+0x126>
 8007c3e:	6833      	ldr	r3, [r6, #0]
 8007c40:	6825      	ldr	r5, [r4, #0]
 8007c42:	6961      	ldr	r1, [r4, #20]
 8007c44:	1d18      	adds	r0, r3, #4
 8007c46:	6030      	str	r0, [r6, #0]
 8007c48:	062e      	lsls	r6, r5, #24
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	d501      	bpl.n	8007c52 <_printf_i+0x1be>
 8007c4e:	6019      	str	r1, [r3, #0]
 8007c50:	e002      	b.n	8007c58 <_printf_i+0x1c4>
 8007c52:	0668      	lsls	r0, r5, #25
 8007c54:	d5fb      	bpl.n	8007c4e <_printf_i+0x1ba>
 8007c56:	8019      	strh	r1, [r3, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	4616      	mov	r6, r2
 8007c5e:	e7bc      	b.n	8007bda <_printf_i+0x146>
 8007c60:	6833      	ldr	r3, [r6, #0]
 8007c62:	1d1a      	adds	r2, r3, #4
 8007c64:	6032      	str	r2, [r6, #0]
 8007c66:	681e      	ldr	r6, [r3, #0]
 8007c68:	6862      	ldr	r2, [r4, #4]
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7f8 faaf 	bl	80001d0 <memchr>
 8007c72:	b108      	cbz	r0, 8007c78 <_printf_i+0x1e4>
 8007c74:	1b80      	subs	r0, r0, r6
 8007c76:	6060      	str	r0, [r4, #4]
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	6123      	str	r3, [r4, #16]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c82:	e7aa      	b.n	8007bda <_printf_i+0x146>
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	4632      	mov	r2, r6
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	47d0      	blx	sl
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d0ad      	beq.n	8007bee <_printf_i+0x15a>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	079b      	lsls	r3, r3, #30
 8007c96:	d413      	bmi.n	8007cc0 <_printf_i+0x22c>
 8007c98:	68e0      	ldr	r0, [r4, #12]
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	4298      	cmp	r0, r3
 8007c9e:	bfb8      	it	lt
 8007ca0:	4618      	movlt	r0, r3
 8007ca2:	e7a6      	b.n	8007bf2 <_printf_i+0x15e>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	4649      	mov	r1, r9
 8007caa:	4640      	mov	r0, r8
 8007cac:	47d0      	blx	sl
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d09d      	beq.n	8007bee <_printf_i+0x15a>
 8007cb2:	3501      	adds	r5, #1
 8007cb4:	68e3      	ldr	r3, [r4, #12]
 8007cb6:	9903      	ldr	r1, [sp, #12]
 8007cb8:	1a5b      	subs	r3, r3, r1
 8007cba:	42ab      	cmp	r3, r5
 8007cbc:	dcf2      	bgt.n	8007ca4 <_printf_i+0x210>
 8007cbe:	e7eb      	b.n	8007c98 <_printf_i+0x204>
 8007cc0:	2500      	movs	r5, #0
 8007cc2:	f104 0619 	add.w	r6, r4, #25
 8007cc6:	e7f5      	b.n	8007cb4 <_printf_i+0x220>
 8007cc8:	0800a8a6 	.word	0x0800a8a6
 8007ccc:	0800a8b7 	.word	0x0800a8b7

08007cd0 <std>:
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cde:	6083      	str	r3, [r0, #8]
 8007ce0:	8181      	strh	r1, [r0, #12]
 8007ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ce4:	81c2      	strh	r2, [r0, #14]
 8007ce6:	6183      	str	r3, [r0, #24]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	2208      	movs	r2, #8
 8007cec:	305c      	adds	r0, #92	@ 0x5c
 8007cee:	f000 fa3f 	bl	8008170 <memset>
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <std+0x58>)
 8007cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d2c <std+0x5c>)
 8007cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007d30 <std+0x60>)
 8007cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <std+0x64>)
 8007d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x68>)
 8007d04:	6224      	str	r4, [r4, #32]
 8007d06:	429c      	cmp	r4, r3
 8007d08:	d006      	beq.n	8007d18 <std+0x48>
 8007d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d0e:	4294      	cmp	r4, r2
 8007d10:	d002      	beq.n	8007d18 <std+0x48>
 8007d12:	33d0      	adds	r3, #208	@ 0xd0
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d105      	bne.n	8007d24 <std+0x54>
 8007d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d20:	f000 baa2 	b.w	8008268 <__retarget_lock_init_recursive>
 8007d24:	bd10      	pop	{r4, pc}
 8007d26:	bf00      	nop
 8007d28:	08007fc1 	.word	0x08007fc1
 8007d2c:	08007fe3 	.word	0x08007fe3
 8007d30:	0800801b 	.word	0x0800801b
 8007d34:	0800803f 	.word	0x0800803f
 8007d38:	200004fc 	.word	0x200004fc

08007d3c <stdio_exit_handler>:
 8007d3c:	4a02      	ldr	r2, [pc, #8]	@ (8007d48 <stdio_exit_handler+0xc>)
 8007d3e:	4903      	ldr	r1, [pc, #12]	@ (8007d4c <stdio_exit_handler+0x10>)
 8007d40:	4803      	ldr	r0, [pc, #12]	@ (8007d50 <stdio_exit_handler+0x14>)
 8007d42:	f000 b869 	b.w	8007e18 <_fwalk_sglue>
 8007d46:	bf00      	nop
 8007d48:	20000010 	.word	0x20000010
 8007d4c:	08009bcd 	.word	0x08009bcd
 8007d50:	20000020 	.word	0x20000020

08007d54 <cleanup_stdio>:
 8007d54:	6841      	ldr	r1, [r0, #4]
 8007d56:	4b0c      	ldr	r3, [pc, #48]	@ (8007d88 <cleanup_stdio+0x34>)
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	d001      	beq.n	8007d64 <cleanup_stdio+0x10>
 8007d60:	f001 ff34 	bl	8009bcc <_fflush_r>
 8007d64:	68a1      	ldr	r1, [r4, #8]
 8007d66:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <cleanup_stdio+0x38>)
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	d002      	beq.n	8007d72 <cleanup_stdio+0x1e>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f001 ff2d 	bl	8009bcc <_fflush_r>
 8007d72:	68e1      	ldr	r1, [r4, #12]
 8007d74:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <cleanup_stdio+0x3c>)
 8007d76:	4299      	cmp	r1, r3
 8007d78:	d004      	beq.n	8007d84 <cleanup_stdio+0x30>
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d80:	f001 bf24 	b.w	8009bcc <_fflush_r>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	bf00      	nop
 8007d88:	200004fc 	.word	0x200004fc
 8007d8c:	20000564 	.word	0x20000564
 8007d90:	200005cc 	.word	0x200005cc

08007d94 <global_stdio_init.part.0>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <global_stdio_init.part.0+0x30>)
 8007d98:	4c0b      	ldr	r4, [pc, #44]	@ (8007dc8 <global_stdio_init.part.0+0x34>)
 8007d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dcc <global_stdio_init.part.0+0x38>)
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	2200      	movs	r2, #0
 8007da2:	2104      	movs	r1, #4
 8007da4:	f7ff ff94 	bl	8007cd0 <std>
 8007da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dac:	2201      	movs	r2, #1
 8007dae:	2109      	movs	r1, #9
 8007db0:	f7ff ff8e 	bl	8007cd0 <std>
 8007db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007db8:	2202      	movs	r2, #2
 8007dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dbe:	2112      	movs	r1, #18
 8007dc0:	f7ff bf86 	b.w	8007cd0 <std>
 8007dc4:	20000634 	.word	0x20000634
 8007dc8:	200004fc 	.word	0x200004fc
 8007dcc:	08007d3d 	.word	0x08007d3d

08007dd0 <__sfp_lock_acquire>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	@ (8007dd8 <__sfp_lock_acquire+0x8>)
 8007dd2:	f000 ba4a 	b.w	800826a <__retarget_lock_acquire_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	2000063d 	.word	0x2000063d

08007ddc <__sfp_lock_release>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	@ (8007de4 <__sfp_lock_release+0x8>)
 8007dde:	f000 ba45 	b.w	800826c <__retarget_lock_release_recursive>
 8007de2:	bf00      	nop
 8007de4:	2000063d 	.word	0x2000063d

08007de8 <__sinit>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	4604      	mov	r4, r0
 8007dec:	f7ff fff0 	bl	8007dd0 <__sfp_lock_acquire>
 8007df0:	6a23      	ldr	r3, [r4, #32]
 8007df2:	b11b      	cbz	r3, 8007dfc <__sinit+0x14>
 8007df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df8:	f7ff bff0 	b.w	8007ddc <__sfp_lock_release>
 8007dfc:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <__sinit+0x28>)
 8007dfe:	6223      	str	r3, [r4, #32]
 8007e00:	4b04      	ldr	r3, [pc, #16]	@ (8007e14 <__sinit+0x2c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1f5      	bne.n	8007df4 <__sinit+0xc>
 8007e08:	f7ff ffc4 	bl	8007d94 <global_stdio_init.part.0>
 8007e0c:	e7f2      	b.n	8007df4 <__sinit+0xc>
 8007e0e:	bf00      	nop
 8007e10:	08007d55 	.word	0x08007d55
 8007e14:	20000634 	.word	0x20000634

08007e18 <_fwalk_sglue>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	4688      	mov	r8, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	2600      	movs	r6, #0
 8007e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e28:	f1b9 0901 	subs.w	r9, r9, #1
 8007e2c:	d505      	bpl.n	8007e3a <_fwalk_sglue+0x22>
 8007e2e:	6824      	ldr	r4, [r4, #0]
 8007e30:	2c00      	cmp	r4, #0
 8007e32:	d1f7      	bne.n	8007e24 <_fwalk_sglue+0xc>
 8007e34:	4630      	mov	r0, r6
 8007e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	89ab      	ldrh	r3, [r5, #12]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d907      	bls.n	8007e50 <_fwalk_sglue+0x38>
 8007e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e44:	3301      	adds	r3, #1
 8007e46:	d003      	beq.n	8007e50 <_fwalk_sglue+0x38>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	47c0      	blx	r8
 8007e4e:	4306      	orrs	r6, r0
 8007e50:	3568      	adds	r5, #104	@ 0x68
 8007e52:	e7e9      	b.n	8007e28 <_fwalk_sglue+0x10>

08007e54 <_puts_r>:
 8007e54:	6a03      	ldr	r3, [r0, #32]
 8007e56:	b570      	push	{r4, r5, r6, lr}
 8007e58:	6884      	ldr	r4, [r0, #8]
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	460e      	mov	r6, r1
 8007e5e:	b90b      	cbnz	r3, 8007e64 <_puts_r+0x10>
 8007e60:	f7ff ffc2 	bl	8007de8 <__sinit>
 8007e64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e66:	07db      	lsls	r3, r3, #31
 8007e68:	d405      	bmi.n	8007e76 <_puts_r+0x22>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	0598      	lsls	r0, r3, #22
 8007e6e:	d402      	bmi.n	8007e76 <_puts_r+0x22>
 8007e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e72:	f000 f9fa 	bl	800826a <__retarget_lock_acquire_recursive>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	0719      	lsls	r1, r3, #28
 8007e7a:	d502      	bpl.n	8007e82 <_puts_r+0x2e>
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d135      	bne.n	8007eee <_puts_r+0x9a>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 f91d 	bl	80080c4 <__swsetup_r>
 8007e8a:	b380      	cbz	r0, 8007eee <_puts_r+0x9a>
 8007e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e92:	07da      	lsls	r2, r3, #31
 8007e94:	d405      	bmi.n	8007ea2 <_puts_r+0x4e>
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	059b      	lsls	r3, r3, #22
 8007e9a:	d402      	bmi.n	8007ea2 <_puts_r+0x4e>
 8007e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e9e:	f000 f9e5 	bl	800826c <__retarget_lock_release_recursive>
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da04      	bge.n	8007eb4 <_puts_r+0x60>
 8007eaa:	69a2      	ldr	r2, [r4, #24]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	dc17      	bgt.n	8007ee0 <_puts_r+0x8c>
 8007eb0:	290a      	cmp	r1, #10
 8007eb2:	d015      	beq.n	8007ee0 <_puts_r+0x8c>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	7019      	strb	r1, [r3, #0]
 8007ebc:	68a3      	ldr	r3, [r4, #8]
 8007ebe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	60a3      	str	r3, [r4, #8]
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d1ed      	bne.n	8007ea6 <_puts_r+0x52>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	da11      	bge.n	8007ef2 <_puts_r+0x9e>
 8007ece:	4622      	mov	r2, r4
 8007ed0:	210a      	movs	r1, #10
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 f8b7 	bl	8008046 <__swbuf_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d0d7      	beq.n	8007e8c <_puts_r+0x38>
 8007edc:	250a      	movs	r5, #10
 8007ede:	e7d7      	b.n	8007e90 <_puts_r+0x3c>
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 f8af 	bl	8008046 <__swbuf_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d1e7      	bne.n	8007ebc <_puts_r+0x68>
 8007eec:	e7ce      	b.n	8007e8c <_puts_r+0x38>
 8007eee:	3e01      	subs	r6, #1
 8007ef0:	e7e4      	b.n	8007ebc <_puts_r+0x68>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	6022      	str	r2, [r4, #0]
 8007ef8:	220a      	movs	r2, #10
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e7ee      	b.n	8007edc <_puts_r+0x88>
	...

08007f00 <puts>:
 8007f00:	4b02      	ldr	r3, [pc, #8]	@ (8007f0c <puts+0xc>)
 8007f02:	4601      	mov	r1, r0
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f7ff bfa5 	b.w	8007e54 <_puts_r>
 8007f0a:	bf00      	nop
 8007f0c:	2000001c 	.word	0x2000001c

08007f10 <sniprintf>:
 8007f10:	b40c      	push	{r2, r3}
 8007f12:	b530      	push	{r4, r5, lr}
 8007f14:	4b18      	ldr	r3, [pc, #96]	@ (8007f78 <sniprintf+0x68>)
 8007f16:	1e0c      	subs	r4, r1, #0
 8007f18:	681d      	ldr	r5, [r3, #0]
 8007f1a:	b09d      	sub	sp, #116	@ 0x74
 8007f1c:	da08      	bge.n	8007f30 <sniprintf+0x20>
 8007f1e:	238b      	movs	r3, #139	@ 0x8b
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	b01d      	add	sp, #116	@ 0x74
 8007f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f2c:	b002      	add	sp, #8
 8007f2e:	4770      	bx	lr
 8007f30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007f3e:	bf14      	ite	ne
 8007f40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f44:	4623      	moveq	r3, r4
 8007f46:	9304      	str	r3, [sp, #16]
 8007f48:	9307      	str	r3, [sp, #28]
 8007f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f4e:	9002      	str	r0, [sp, #8]
 8007f50:	9006      	str	r0, [sp, #24]
 8007f52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f58:	ab21      	add	r3, sp, #132	@ 0x84
 8007f5a:	a902      	add	r1, sp, #8
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	f001 fcb4 	bl	80098cc <_svfiprintf_r>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	bfbc      	itt	lt
 8007f68:	238b      	movlt	r3, #139	@ 0x8b
 8007f6a:	602b      	strlt	r3, [r5, #0]
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d0da      	beq.n	8007f26 <sniprintf+0x16>
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e7d6      	b.n	8007f26 <sniprintf+0x16>
 8007f78:	2000001c 	.word	0x2000001c

08007f7c <siprintf>:
 8007f7c:	b40e      	push	{r1, r2, r3}
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	b09d      	sub	sp, #116	@ 0x74
 8007f82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007f84:	9002      	str	r0, [sp, #8]
 8007f86:	9006      	str	r0, [sp, #24]
 8007f88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f8c:	480a      	ldr	r0, [pc, #40]	@ (8007fb8 <siprintf+0x3c>)
 8007f8e:	9107      	str	r1, [sp, #28]
 8007f90:	9104      	str	r1, [sp, #16]
 8007f92:	490a      	ldr	r1, [pc, #40]	@ (8007fbc <siprintf+0x40>)
 8007f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f98:	9105      	str	r1, [sp, #20]
 8007f9a:	2400      	movs	r4, #0
 8007f9c:	a902      	add	r1, sp, #8
 8007f9e:	6800      	ldr	r0, [r0, #0]
 8007fa0:	9301      	str	r3, [sp, #4]
 8007fa2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007fa4:	f001 fc92 	bl	80098cc <_svfiprintf_r>
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	701c      	strb	r4, [r3, #0]
 8007fac:	b01d      	add	sp, #116	@ 0x74
 8007fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb2:	b003      	add	sp, #12
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000001c 	.word	0x2000001c
 8007fbc:	ffff0208 	.word	0xffff0208

08007fc0 <__sread>:
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc8:	f000 f900 	bl	80081cc <_read_r>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	bfab      	itete	ge
 8007fd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fd4:	181b      	addge	r3, r3, r0
 8007fd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fda:	bfac      	ite	ge
 8007fdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fde:	81a3      	strhlt	r3, [r4, #12]
 8007fe0:	bd10      	pop	{r4, pc}

08007fe2 <__swrite>:
 8007fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe6:	461f      	mov	r7, r3
 8007fe8:	898b      	ldrh	r3, [r1, #12]
 8007fea:	05db      	lsls	r3, r3, #23
 8007fec:	4605      	mov	r5, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	d505      	bpl.n	8008000 <__swrite+0x1e>
 8007ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f000 f8d4 	bl	80081a8 <_lseek_r>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	4632      	mov	r2, r6
 800800e:	463b      	mov	r3, r7
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008016:	f000 b8eb 	b.w	80081f0 <_write_r>

0800801a <__sseek>:
 800801a:	b510      	push	{r4, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008022:	f000 f8c1 	bl	80081a8 <_lseek_r>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	bf15      	itete	ne
 800802c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800802e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008036:	81a3      	strheq	r3, [r4, #12]
 8008038:	bf18      	it	ne
 800803a:	81a3      	strhne	r3, [r4, #12]
 800803c:	bd10      	pop	{r4, pc}

0800803e <__sclose>:
 800803e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008042:	f000 b8a1 	b.w	8008188 <_close_r>

08008046 <__swbuf_r>:
 8008046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008048:	460e      	mov	r6, r1
 800804a:	4614      	mov	r4, r2
 800804c:	4605      	mov	r5, r0
 800804e:	b118      	cbz	r0, 8008058 <__swbuf_r+0x12>
 8008050:	6a03      	ldr	r3, [r0, #32]
 8008052:	b90b      	cbnz	r3, 8008058 <__swbuf_r+0x12>
 8008054:	f7ff fec8 	bl	8007de8 <__sinit>
 8008058:	69a3      	ldr	r3, [r4, #24]
 800805a:	60a3      	str	r3, [r4, #8]
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	071a      	lsls	r2, r3, #28
 8008060:	d501      	bpl.n	8008066 <__swbuf_r+0x20>
 8008062:	6923      	ldr	r3, [r4, #16]
 8008064:	b943      	cbnz	r3, 8008078 <__swbuf_r+0x32>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 f82b 	bl	80080c4 <__swsetup_r>
 800806e:	b118      	cbz	r0, 8008078 <__swbuf_r+0x32>
 8008070:	f04f 37ff 	mov.w	r7, #4294967295
 8008074:	4638      	mov	r0, r7
 8008076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	6922      	ldr	r2, [r4, #16]
 800807c:	1a98      	subs	r0, r3, r2
 800807e:	6963      	ldr	r3, [r4, #20]
 8008080:	b2f6      	uxtb	r6, r6
 8008082:	4283      	cmp	r3, r0
 8008084:	4637      	mov	r7, r6
 8008086:	dc05      	bgt.n	8008094 <__swbuf_r+0x4e>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f001 fd9e 	bl	8009bcc <_fflush_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	d1ed      	bne.n	8008070 <__swbuf_r+0x2a>
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	3b01      	subs	r3, #1
 8008098:	60a3      	str	r3, [r4, #8]
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	6022      	str	r2, [r4, #0]
 80080a0:	701e      	strb	r6, [r3, #0]
 80080a2:	6962      	ldr	r2, [r4, #20]
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d004      	beq.n	80080b4 <__swbuf_r+0x6e>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	07db      	lsls	r3, r3, #31
 80080ae:	d5e1      	bpl.n	8008074 <__swbuf_r+0x2e>
 80080b0:	2e0a      	cmp	r6, #10
 80080b2:	d1df      	bne.n	8008074 <__swbuf_r+0x2e>
 80080b4:	4621      	mov	r1, r4
 80080b6:	4628      	mov	r0, r5
 80080b8:	f001 fd88 	bl	8009bcc <_fflush_r>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d0d9      	beq.n	8008074 <__swbuf_r+0x2e>
 80080c0:	e7d6      	b.n	8008070 <__swbuf_r+0x2a>
	...

080080c4 <__swsetup_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4b29      	ldr	r3, [pc, #164]	@ (800816c <__swsetup_r+0xa8>)
 80080c8:	4605      	mov	r5, r0
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	460c      	mov	r4, r1
 80080ce:	b118      	cbz	r0, 80080d8 <__swsetup_r+0x14>
 80080d0:	6a03      	ldr	r3, [r0, #32]
 80080d2:	b90b      	cbnz	r3, 80080d8 <__swsetup_r+0x14>
 80080d4:	f7ff fe88 	bl	8007de8 <__sinit>
 80080d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080dc:	0719      	lsls	r1, r3, #28
 80080de:	d422      	bmi.n	8008126 <__swsetup_r+0x62>
 80080e0:	06da      	lsls	r2, r3, #27
 80080e2:	d407      	bmi.n	80080f4 <__swsetup_r+0x30>
 80080e4:	2209      	movs	r2, #9
 80080e6:	602a      	str	r2, [r5, #0]
 80080e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	f04f 30ff 	mov.w	r0, #4294967295
 80080f2:	e033      	b.n	800815c <__swsetup_r+0x98>
 80080f4:	0758      	lsls	r0, r3, #29
 80080f6:	d512      	bpl.n	800811e <__swsetup_r+0x5a>
 80080f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080fa:	b141      	cbz	r1, 800810e <__swsetup_r+0x4a>
 80080fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008100:	4299      	cmp	r1, r3
 8008102:	d002      	beq.n	800810a <__swsetup_r+0x46>
 8008104:	4628      	mov	r0, r5
 8008106:	f000 ff0b 	bl	8008f20 <_free_r>
 800810a:	2300      	movs	r3, #0
 800810c:	6363      	str	r3, [r4, #52]	@ 0x34
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	2300      	movs	r3, #0
 8008118:	6063      	str	r3, [r4, #4]
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f043 0308 	orr.w	r3, r3, #8
 8008124:	81a3      	strh	r3, [r4, #12]
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	b94b      	cbnz	r3, 800813e <__swsetup_r+0x7a>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008134:	d003      	beq.n	800813e <__swsetup_r+0x7a>
 8008136:	4621      	mov	r1, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f001 fd95 	bl	8009c68 <__smakebuf_r>
 800813e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008142:	f013 0201 	ands.w	r2, r3, #1
 8008146:	d00a      	beq.n	800815e <__swsetup_r+0x9a>
 8008148:	2200      	movs	r2, #0
 800814a:	60a2      	str	r2, [r4, #8]
 800814c:	6962      	ldr	r2, [r4, #20]
 800814e:	4252      	negs	r2, r2
 8008150:	61a2      	str	r2, [r4, #24]
 8008152:	6922      	ldr	r2, [r4, #16]
 8008154:	b942      	cbnz	r2, 8008168 <__swsetup_r+0xa4>
 8008156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800815a:	d1c5      	bne.n	80080e8 <__swsetup_r+0x24>
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	0799      	lsls	r1, r3, #30
 8008160:	bf58      	it	pl
 8008162:	6962      	ldrpl	r2, [r4, #20]
 8008164:	60a2      	str	r2, [r4, #8]
 8008166:	e7f4      	b.n	8008152 <__swsetup_r+0x8e>
 8008168:	2000      	movs	r0, #0
 800816a:	e7f7      	b.n	800815c <__swsetup_r+0x98>
 800816c:	2000001c 	.word	0x2000001c

08008170 <memset>:
 8008170:	4402      	add	r2, r0
 8008172:	4603      	mov	r3, r0
 8008174:	4293      	cmp	r3, r2
 8008176:	d100      	bne.n	800817a <memset+0xa>
 8008178:	4770      	bx	lr
 800817a:	f803 1b01 	strb.w	r1, [r3], #1
 800817e:	e7f9      	b.n	8008174 <memset+0x4>

08008180 <_localeconv_r>:
 8008180:	4800      	ldr	r0, [pc, #0]	@ (8008184 <_localeconv_r+0x4>)
 8008182:	4770      	bx	lr
 8008184:	2000015c 	.word	0x2000015c

08008188 <_close_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	@ (80081a4 <_close_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7fb f996 	bl	80034c4 <_close>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_close_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_close_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20000638 	.word	0x20000638

080081a8 <_lseek_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	@ (80081c8 <_lseek_r+0x20>)
 80081ac:	4604      	mov	r4, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7fb f9ab 	bl	8003512 <_lseek>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_lseek_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_lseek_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000638 	.word	0x20000638

080081cc <_read_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	@ (80081ec <_read_r+0x20>)
 80081d0:	4604      	mov	r4, r0
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7fb f939 	bl	8003452 <_read>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_read_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_read_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	20000638 	.word	0x20000638

080081f0 <_write_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	@ (8008210 <_write_r+0x20>)
 80081f4:	4604      	mov	r4, r0
 80081f6:	4608      	mov	r0, r1
 80081f8:	4611      	mov	r1, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	602a      	str	r2, [r5, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7fb f944 	bl	800348c <_write>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_write_r+0x1e>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_write_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	20000638 	.word	0x20000638

08008214 <__errno>:
 8008214:	4b01      	ldr	r3, [pc, #4]	@ (800821c <__errno+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	2000001c 	.word	0x2000001c

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4d0d      	ldr	r5, [pc, #52]	@ (8008258 <__libc_init_array+0x38>)
 8008224:	4c0d      	ldr	r4, [pc, #52]	@ (800825c <__libc_init_array+0x3c>)
 8008226:	1b64      	subs	r4, r4, r5
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	2600      	movs	r6, #0
 800822c:	42a6      	cmp	r6, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	4d0b      	ldr	r5, [pc, #44]	@ (8008260 <__libc_init_array+0x40>)
 8008232:	4c0c      	ldr	r4, [pc, #48]	@ (8008264 <__libc_init_array+0x44>)
 8008234:	f001 ffd4 	bl	800a1e0 <_init>
 8008238:	1b64      	subs	r4, r4, r5
 800823a:	10a4      	asrs	r4, r4, #2
 800823c:	2600      	movs	r6, #0
 800823e:	42a6      	cmp	r6, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f855 3b04 	ldr.w	r3, [r5], #4
 8008248:	4798      	blx	r3
 800824a:	3601      	adds	r6, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008252:	4798      	blx	r3
 8008254:	3601      	adds	r6, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	0800ac14 	.word	0x0800ac14
 800825c:	0800ac14 	.word	0x0800ac14
 8008260:	0800ac14 	.word	0x0800ac14
 8008264:	0800ac18 	.word	0x0800ac18

08008268 <__retarget_lock_init_recursive>:
 8008268:	4770      	bx	lr

0800826a <__retarget_lock_acquire_recursive>:
 800826a:	4770      	bx	lr

0800826c <__retarget_lock_release_recursive>:
 800826c:	4770      	bx	lr

0800826e <quorem>:
 800826e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008272:	6903      	ldr	r3, [r0, #16]
 8008274:	690c      	ldr	r4, [r1, #16]
 8008276:	42a3      	cmp	r3, r4
 8008278:	4607      	mov	r7, r0
 800827a:	db7e      	blt.n	800837a <quorem+0x10c>
 800827c:	3c01      	subs	r4, #1
 800827e:	f101 0814 	add.w	r8, r1, #20
 8008282:	00a3      	lsls	r3, r4, #2
 8008284:	f100 0514 	add.w	r5, r0, #20
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008298:	3301      	adds	r3, #1
 800829a:	429a      	cmp	r2, r3
 800829c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80082a4:	d32e      	bcc.n	8008304 <quorem+0x96>
 80082a6:	f04f 0a00 	mov.w	sl, #0
 80082aa:	46c4      	mov	ip, r8
 80082ac:	46ae      	mov	lr, r5
 80082ae:	46d3      	mov	fp, sl
 80082b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082b4:	b298      	uxth	r0, r3
 80082b6:	fb06 a000 	mla	r0, r6, r0, sl
 80082ba:	0c02      	lsrs	r2, r0, #16
 80082bc:	0c1b      	lsrs	r3, r3, #16
 80082be:	fb06 2303 	mla	r3, r6, r3, r2
 80082c2:	f8de 2000 	ldr.w	r2, [lr]
 80082c6:	b280      	uxth	r0, r0
 80082c8:	b292      	uxth	r2, r2
 80082ca:	1a12      	subs	r2, r2, r0
 80082cc:	445a      	add	r2, fp
 80082ce:	f8de 0000 	ldr.w	r0, [lr]
 80082d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082e0:	b292      	uxth	r2, r2
 80082e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082e6:	45e1      	cmp	r9, ip
 80082e8:	f84e 2b04 	str.w	r2, [lr], #4
 80082ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082f0:	d2de      	bcs.n	80082b0 <quorem+0x42>
 80082f2:	9b00      	ldr	r3, [sp, #0]
 80082f4:	58eb      	ldr	r3, [r5, r3]
 80082f6:	b92b      	cbnz	r3, 8008304 <quorem+0x96>
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	3b04      	subs	r3, #4
 80082fc:	429d      	cmp	r5, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	d32f      	bcc.n	8008362 <quorem+0xf4>
 8008302:	613c      	str	r4, [r7, #16]
 8008304:	4638      	mov	r0, r7
 8008306:	f001 f97d 	bl	8009604 <__mcmp>
 800830a:	2800      	cmp	r0, #0
 800830c:	db25      	blt.n	800835a <quorem+0xec>
 800830e:	4629      	mov	r1, r5
 8008310:	2000      	movs	r0, #0
 8008312:	f858 2b04 	ldr.w	r2, [r8], #4
 8008316:	f8d1 c000 	ldr.w	ip, [r1]
 800831a:	fa1f fe82 	uxth.w	lr, r2
 800831e:	fa1f f38c 	uxth.w	r3, ip
 8008322:	eba3 030e 	sub.w	r3, r3, lr
 8008326:	4403      	add	r3, r0
 8008328:	0c12      	lsrs	r2, r2, #16
 800832a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800832e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008332:	b29b      	uxth	r3, r3
 8008334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008338:	45c1      	cmp	r9, r8
 800833a:	f841 3b04 	str.w	r3, [r1], #4
 800833e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008342:	d2e6      	bcs.n	8008312 <quorem+0xa4>
 8008344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008348:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834c:	b922      	cbnz	r2, 8008358 <quorem+0xea>
 800834e:	3b04      	subs	r3, #4
 8008350:	429d      	cmp	r5, r3
 8008352:	461a      	mov	r2, r3
 8008354:	d30b      	bcc.n	800836e <quorem+0x100>
 8008356:	613c      	str	r4, [r7, #16]
 8008358:	3601      	adds	r6, #1
 800835a:	4630      	mov	r0, r6
 800835c:	b003      	add	sp, #12
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	3b04      	subs	r3, #4
 8008366:	2a00      	cmp	r2, #0
 8008368:	d1cb      	bne.n	8008302 <quorem+0x94>
 800836a:	3c01      	subs	r4, #1
 800836c:	e7c6      	b.n	80082fc <quorem+0x8e>
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	3b04      	subs	r3, #4
 8008372:	2a00      	cmp	r2, #0
 8008374:	d1ef      	bne.n	8008356 <quorem+0xe8>
 8008376:	3c01      	subs	r4, #1
 8008378:	e7ea      	b.n	8008350 <quorem+0xe2>
 800837a:	2000      	movs	r0, #0
 800837c:	e7ee      	b.n	800835c <quorem+0xee>
	...

08008380 <_dtoa_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	69c7      	ldr	r7, [r0, #28]
 8008386:	b097      	sub	sp, #92	@ 0x5c
 8008388:	ed8d 0b04 	vstr	d0, [sp, #16]
 800838c:	ec55 4b10 	vmov	r4, r5, d0
 8008390:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008392:	9107      	str	r1, [sp, #28]
 8008394:	4681      	mov	r9, r0
 8008396:	920c      	str	r2, [sp, #48]	@ 0x30
 8008398:	9311      	str	r3, [sp, #68]	@ 0x44
 800839a:	b97f      	cbnz	r7, 80083bc <_dtoa_r+0x3c>
 800839c:	2010      	movs	r0, #16
 800839e:	f000 fe09 	bl	8008fb4 <malloc>
 80083a2:	4602      	mov	r2, r0
 80083a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80083a8:	b920      	cbnz	r0, 80083b4 <_dtoa_r+0x34>
 80083aa:	4ba9      	ldr	r3, [pc, #676]	@ (8008650 <_dtoa_r+0x2d0>)
 80083ac:	21ef      	movs	r1, #239	@ 0xef
 80083ae:	48a9      	ldr	r0, [pc, #676]	@ (8008654 <_dtoa_r+0x2d4>)
 80083b0:	f001 fcf0 	bl	8009d94 <__assert_func>
 80083b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083b8:	6007      	str	r7, [r0, #0]
 80083ba:	60c7      	str	r7, [r0, #12]
 80083bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083c0:	6819      	ldr	r1, [r3, #0]
 80083c2:	b159      	cbz	r1, 80083dc <_dtoa_r+0x5c>
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	604a      	str	r2, [r1, #4]
 80083c8:	2301      	movs	r3, #1
 80083ca:	4093      	lsls	r3, r2
 80083cc:	608b      	str	r3, [r1, #8]
 80083ce:	4648      	mov	r0, r9
 80083d0:	f000 fee6 	bl	80091a0 <_Bfree>
 80083d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	1e2b      	subs	r3, r5, #0
 80083de:	bfb9      	ittee	lt
 80083e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083e4:	9305      	strlt	r3, [sp, #20]
 80083e6:	2300      	movge	r3, #0
 80083e8:	6033      	strge	r3, [r6, #0]
 80083ea:	9f05      	ldr	r7, [sp, #20]
 80083ec:	4b9a      	ldr	r3, [pc, #616]	@ (8008658 <_dtoa_r+0x2d8>)
 80083ee:	bfbc      	itt	lt
 80083f0:	2201      	movlt	r2, #1
 80083f2:	6032      	strlt	r2, [r6, #0]
 80083f4:	43bb      	bics	r3, r7
 80083f6:	d112      	bne.n	800841e <_dtoa_r+0x9e>
 80083f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80083fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008404:	4323      	orrs	r3, r4
 8008406:	f000 855a 	beq.w	8008ebe <_dtoa_r+0xb3e>
 800840a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800840c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800866c <_dtoa_r+0x2ec>
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 855c 	beq.w	8008ece <_dtoa_r+0xb4e>
 8008416:	f10a 0303 	add.w	r3, sl, #3
 800841a:	f000 bd56 	b.w	8008eca <_dtoa_r+0xb4a>
 800841e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008422:	2200      	movs	r2, #0
 8008424:	ec51 0b17 	vmov	r0, r1, d7
 8008428:	2300      	movs	r3, #0
 800842a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800842e:	f7f8 fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008432:	4680      	mov	r8, r0
 8008434:	b158      	cbz	r0, 800844e <_dtoa_r+0xce>
 8008436:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008438:	2301      	movs	r3, #1
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800843e:	b113      	cbz	r3, 8008446 <_dtoa_r+0xc6>
 8008440:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008442:	4b86      	ldr	r3, [pc, #536]	@ (800865c <_dtoa_r+0x2dc>)
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008670 <_dtoa_r+0x2f0>
 800844a:	f000 bd40 	b.w	8008ece <_dtoa_r+0xb4e>
 800844e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008452:	aa14      	add	r2, sp, #80	@ 0x50
 8008454:	a915      	add	r1, sp, #84	@ 0x54
 8008456:	4648      	mov	r0, r9
 8008458:	f001 f984 	bl	8009764 <__d2b>
 800845c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008460:	9002      	str	r0, [sp, #8]
 8008462:	2e00      	cmp	r6, #0
 8008464:	d078      	beq.n	8008558 <_dtoa_r+0x1d8>
 8008466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008468:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800846c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008474:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008478:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800847c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008480:	4619      	mov	r1, r3
 8008482:	2200      	movs	r2, #0
 8008484:	4b76      	ldr	r3, [pc, #472]	@ (8008660 <_dtoa_r+0x2e0>)
 8008486:	f7f7 feff 	bl	8000288 <__aeabi_dsub>
 800848a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008638 <_dtoa_r+0x2b8>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	a36a      	add	r3, pc, #424	@ (adr r3, 8008640 <_dtoa_r+0x2c0>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f7 fef7 	bl	800028c <__adddf3>
 800849e:	4604      	mov	r4, r0
 80084a0:	4630      	mov	r0, r6
 80084a2:	460d      	mov	r5, r1
 80084a4:	f7f8 f83e 	bl	8000524 <__aeabi_i2d>
 80084a8:	a367      	add	r3, pc, #412	@ (adr r3, 8008648 <_dtoa_r+0x2c8>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f8 f8a3 	bl	80005f8 <__aeabi_dmul>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f7 fee7 	bl	800028c <__adddf3>
 80084be:	4604      	mov	r4, r0
 80084c0:	460d      	mov	r5, r1
 80084c2:	f7f8 fb49 	bl	8000b58 <__aeabi_d2iz>
 80084c6:	2200      	movs	r2, #0
 80084c8:	4607      	mov	r7, r0
 80084ca:	2300      	movs	r3, #0
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f8 fb04 	bl	8000adc <__aeabi_dcmplt>
 80084d4:	b140      	cbz	r0, 80084e8 <_dtoa_r+0x168>
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7f8 f824 	bl	8000524 <__aeabi_i2d>
 80084dc:	4622      	mov	r2, r4
 80084de:	462b      	mov	r3, r5
 80084e0:	f7f8 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80084e4:	b900      	cbnz	r0, 80084e8 <_dtoa_r+0x168>
 80084e6:	3f01      	subs	r7, #1
 80084e8:	2f16      	cmp	r7, #22
 80084ea:	d852      	bhi.n	8008592 <_dtoa_r+0x212>
 80084ec:	4b5d      	ldr	r3, [pc, #372]	@ (8008664 <_dtoa_r+0x2e4>)
 80084ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084fa:	f7f8 faef 	bl	8000adc <__aeabi_dcmplt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d049      	beq.n	8008596 <_dtoa_r+0x216>
 8008502:	3f01      	subs	r7, #1
 8008504:	2300      	movs	r3, #0
 8008506:	9310      	str	r3, [sp, #64]	@ 0x40
 8008508:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800850a:	1b9b      	subs	r3, r3, r6
 800850c:	1e5a      	subs	r2, r3, #1
 800850e:	bf45      	ittet	mi
 8008510:	f1c3 0301 	rsbmi	r3, r3, #1
 8008514:	9300      	strmi	r3, [sp, #0]
 8008516:	2300      	movpl	r3, #0
 8008518:	2300      	movmi	r3, #0
 800851a:	9206      	str	r2, [sp, #24]
 800851c:	bf54      	ite	pl
 800851e:	9300      	strpl	r3, [sp, #0]
 8008520:	9306      	strmi	r3, [sp, #24]
 8008522:	2f00      	cmp	r7, #0
 8008524:	db39      	blt.n	800859a <_dtoa_r+0x21a>
 8008526:	9b06      	ldr	r3, [sp, #24]
 8008528:	970d      	str	r7, [sp, #52]	@ 0x34
 800852a:	443b      	add	r3, r7
 800852c:	9306      	str	r3, [sp, #24]
 800852e:	2300      	movs	r3, #0
 8008530:	9308      	str	r3, [sp, #32]
 8008532:	9b07      	ldr	r3, [sp, #28]
 8008534:	2b09      	cmp	r3, #9
 8008536:	d863      	bhi.n	8008600 <_dtoa_r+0x280>
 8008538:	2b05      	cmp	r3, #5
 800853a:	bfc4      	itt	gt
 800853c:	3b04      	subgt	r3, #4
 800853e:	9307      	strgt	r3, [sp, #28]
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	f1a3 0302 	sub.w	r3, r3, #2
 8008546:	bfcc      	ite	gt
 8008548:	2400      	movgt	r4, #0
 800854a:	2401      	movle	r4, #1
 800854c:	2b03      	cmp	r3, #3
 800854e:	d863      	bhi.n	8008618 <_dtoa_r+0x298>
 8008550:	e8df f003 	tbb	[pc, r3]
 8008554:	2b375452 	.word	0x2b375452
 8008558:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800855c:	441e      	add	r6, r3
 800855e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008562:	2b20      	cmp	r3, #32
 8008564:	bfc1      	itttt	gt
 8008566:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800856a:	409f      	lslgt	r7, r3
 800856c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008570:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008574:	bfd6      	itet	le
 8008576:	f1c3 0320 	rsble	r3, r3, #32
 800857a:	ea47 0003 	orrgt.w	r0, r7, r3
 800857e:	fa04 f003 	lslle.w	r0, r4, r3
 8008582:	f7f7 ffbf 	bl	8000504 <__aeabi_ui2d>
 8008586:	2201      	movs	r2, #1
 8008588:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800858c:	3e01      	subs	r6, #1
 800858e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008590:	e776      	b.n	8008480 <_dtoa_r+0x100>
 8008592:	2301      	movs	r3, #1
 8008594:	e7b7      	b.n	8008506 <_dtoa_r+0x186>
 8008596:	9010      	str	r0, [sp, #64]	@ 0x40
 8008598:	e7b6      	b.n	8008508 <_dtoa_r+0x188>
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	1bdb      	subs	r3, r3, r7
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	427b      	negs	r3, r7
 80085a2:	9308      	str	r3, [sp, #32]
 80085a4:	2300      	movs	r3, #0
 80085a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80085a8:	e7c3      	b.n	8008532 <_dtoa_r+0x1b2>
 80085aa:	2301      	movs	r3, #1
 80085ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085b0:	eb07 0b03 	add.w	fp, r7, r3
 80085b4:	f10b 0301 	add.w	r3, fp, #1
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	9303      	str	r3, [sp, #12]
 80085bc:	bfb8      	it	lt
 80085be:	2301      	movlt	r3, #1
 80085c0:	e006      	b.n	80085d0 <_dtoa_r+0x250>
 80085c2:	2301      	movs	r3, #1
 80085c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dd28      	ble.n	800861e <_dtoa_r+0x29e>
 80085cc:	469b      	mov	fp, r3
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80085d4:	2100      	movs	r1, #0
 80085d6:	2204      	movs	r2, #4
 80085d8:	f102 0514 	add.w	r5, r2, #20
 80085dc:	429d      	cmp	r5, r3
 80085de:	d926      	bls.n	800862e <_dtoa_r+0x2ae>
 80085e0:	6041      	str	r1, [r0, #4]
 80085e2:	4648      	mov	r0, r9
 80085e4:	f000 fd9c 	bl	8009120 <_Balloc>
 80085e8:	4682      	mov	sl, r0
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d142      	bne.n	8008674 <_dtoa_r+0x2f4>
 80085ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008668 <_dtoa_r+0x2e8>)
 80085f0:	4602      	mov	r2, r0
 80085f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80085f6:	e6da      	b.n	80083ae <_dtoa_r+0x2e>
 80085f8:	2300      	movs	r3, #0
 80085fa:	e7e3      	b.n	80085c4 <_dtoa_r+0x244>
 80085fc:	2300      	movs	r3, #0
 80085fe:	e7d5      	b.n	80085ac <_dtoa_r+0x22c>
 8008600:	2401      	movs	r4, #1
 8008602:	2300      	movs	r3, #0
 8008604:	9307      	str	r3, [sp, #28]
 8008606:	9409      	str	r4, [sp, #36]	@ 0x24
 8008608:	f04f 3bff 	mov.w	fp, #4294967295
 800860c:	2200      	movs	r2, #0
 800860e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008612:	2312      	movs	r3, #18
 8008614:	920c      	str	r2, [sp, #48]	@ 0x30
 8008616:	e7db      	b.n	80085d0 <_dtoa_r+0x250>
 8008618:	2301      	movs	r3, #1
 800861a:	9309      	str	r3, [sp, #36]	@ 0x24
 800861c:	e7f4      	b.n	8008608 <_dtoa_r+0x288>
 800861e:	f04f 0b01 	mov.w	fp, #1
 8008622:	f8cd b00c 	str.w	fp, [sp, #12]
 8008626:	465b      	mov	r3, fp
 8008628:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800862c:	e7d0      	b.n	80085d0 <_dtoa_r+0x250>
 800862e:	3101      	adds	r1, #1
 8008630:	0052      	lsls	r2, r2, #1
 8008632:	e7d1      	b.n	80085d8 <_dtoa_r+0x258>
 8008634:	f3af 8000 	nop.w
 8008638:	636f4361 	.word	0x636f4361
 800863c:	3fd287a7 	.word	0x3fd287a7
 8008640:	8b60c8b3 	.word	0x8b60c8b3
 8008644:	3fc68a28 	.word	0x3fc68a28
 8008648:	509f79fb 	.word	0x509f79fb
 800864c:	3fd34413 	.word	0x3fd34413
 8008650:	0800a8d5 	.word	0x0800a8d5
 8008654:	0800a8ec 	.word	0x0800a8ec
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	0800a8a5 	.word	0x0800a8a5
 8008660:	3ff80000 	.word	0x3ff80000
 8008664:	0800aa40 	.word	0x0800aa40
 8008668:	0800a944 	.word	0x0800a944
 800866c:	0800a8d1 	.word	0x0800a8d1
 8008670:	0800a8a4 	.word	0x0800a8a4
 8008674:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008678:	6018      	str	r0, [r3, #0]
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	2b0e      	cmp	r3, #14
 800867e:	f200 80a1 	bhi.w	80087c4 <_dtoa_r+0x444>
 8008682:	2c00      	cmp	r4, #0
 8008684:	f000 809e 	beq.w	80087c4 <_dtoa_r+0x444>
 8008688:	2f00      	cmp	r7, #0
 800868a:	dd33      	ble.n	80086f4 <_dtoa_r+0x374>
 800868c:	4b9c      	ldr	r3, [pc, #624]	@ (8008900 <_dtoa_r+0x580>)
 800868e:	f007 020f 	and.w	r2, r7, #15
 8008692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008696:	ed93 7b00 	vldr	d7, [r3]
 800869a:	05f8      	lsls	r0, r7, #23
 800869c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80086a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086a4:	d516      	bpl.n	80086d4 <_dtoa_r+0x354>
 80086a6:	4b97      	ldr	r3, [pc, #604]	@ (8008904 <_dtoa_r+0x584>)
 80086a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086b0:	f7f8 f8cc 	bl	800084c <__aeabi_ddiv>
 80086b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086b8:	f004 040f 	and.w	r4, r4, #15
 80086bc:	2603      	movs	r6, #3
 80086be:	4d91      	ldr	r5, [pc, #580]	@ (8008904 <_dtoa_r+0x584>)
 80086c0:	b954      	cbnz	r4, 80086d8 <_dtoa_r+0x358>
 80086c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ca:	f7f8 f8bf 	bl	800084c <__aeabi_ddiv>
 80086ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086d2:	e028      	b.n	8008726 <_dtoa_r+0x3a6>
 80086d4:	2602      	movs	r6, #2
 80086d6:	e7f2      	b.n	80086be <_dtoa_r+0x33e>
 80086d8:	07e1      	lsls	r1, r4, #31
 80086da:	d508      	bpl.n	80086ee <_dtoa_r+0x36e>
 80086dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086e4:	f7f7 ff88 	bl	80005f8 <__aeabi_dmul>
 80086e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086ec:	3601      	adds	r6, #1
 80086ee:	1064      	asrs	r4, r4, #1
 80086f0:	3508      	adds	r5, #8
 80086f2:	e7e5      	b.n	80086c0 <_dtoa_r+0x340>
 80086f4:	f000 80af 	beq.w	8008856 <_dtoa_r+0x4d6>
 80086f8:	427c      	negs	r4, r7
 80086fa:	4b81      	ldr	r3, [pc, #516]	@ (8008900 <_dtoa_r+0x580>)
 80086fc:	4d81      	ldr	r5, [pc, #516]	@ (8008904 <_dtoa_r+0x584>)
 80086fe:	f004 020f 	and.w	r2, r4, #15
 8008702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008716:	1124      	asrs	r4, r4, #4
 8008718:	2300      	movs	r3, #0
 800871a:	2602      	movs	r6, #2
 800871c:	2c00      	cmp	r4, #0
 800871e:	f040 808f 	bne.w	8008840 <_dtoa_r+0x4c0>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1d3      	bne.n	80086ce <_dtoa_r+0x34e>
 8008726:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008728:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8094 	beq.w	800885a <_dtoa_r+0x4da>
 8008732:	4b75      	ldr	r3, [pc, #468]	@ (8008908 <_dtoa_r+0x588>)
 8008734:	2200      	movs	r2, #0
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f8 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	f000 808b 	beq.w	800885a <_dtoa_r+0x4da>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 8087 	beq.w	800885a <_dtoa_r+0x4da>
 800874c:	f1bb 0f00 	cmp.w	fp, #0
 8008750:	dd34      	ble.n	80087bc <_dtoa_r+0x43c>
 8008752:	4620      	mov	r0, r4
 8008754:	4b6d      	ldr	r3, [pc, #436]	@ (800890c <_dtoa_r+0x58c>)
 8008756:	2200      	movs	r2, #0
 8008758:	4629      	mov	r1, r5
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008762:	f107 38ff 	add.w	r8, r7, #4294967295
 8008766:	3601      	adds	r6, #1
 8008768:	465c      	mov	r4, fp
 800876a:	4630      	mov	r0, r6
 800876c:	f7f7 feda 	bl	8000524 <__aeabi_i2d>
 8008770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	4b65      	ldr	r3, [pc, #404]	@ (8008910 <_dtoa_r+0x590>)
 800877a:	2200      	movs	r2, #0
 800877c:	f7f7 fd86 	bl	800028c <__adddf3>
 8008780:	4605      	mov	r5, r0
 8008782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008786:	2c00      	cmp	r4, #0
 8008788:	d16a      	bne.n	8008860 <_dtoa_r+0x4e0>
 800878a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800878e:	4b61      	ldr	r3, [pc, #388]	@ (8008914 <_dtoa_r+0x594>)
 8008790:	2200      	movs	r2, #0
 8008792:	f7f7 fd79 	bl	8000288 <__aeabi_dsub>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800879e:	462a      	mov	r2, r5
 80087a0:	4633      	mov	r3, r6
 80087a2:	f7f8 f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f040 8298 	bne.w	8008cdc <_dtoa_r+0x95c>
 80087ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087b0:	462a      	mov	r2, r5
 80087b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087b6:	f7f8 f991 	bl	8000adc <__aeabi_dcmplt>
 80087ba:	bb38      	cbnz	r0, 800880c <_dtoa_r+0x48c>
 80087bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80087c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80087c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f2c0 8157 	blt.w	8008a7a <_dtoa_r+0x6fa>
 80087cc:	2f0e      	cmp	r7, #14
 80087ce:	f300 8154 	bgt.w	8008a7a <_dtoa_r+0x6fa>
 80087d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008900 <_dtoa_r+0x580>)
 80087d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087d8:	ed93 7b00 	vldr	d7, [r3]
 80087dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087de:	2b00      	cmp	r3, #0
 80087e0:	ed8d 7b00 	vstr	d7, [sp]
 80087e4:	f280 80e5 	bge.w	80089b2 <_dtoa_r+0x632>
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f300 80e1 	bgt.w	80089b2 <_dtoa_r+0x632>
 80087f0:	d10c      	bne.n	800880c <_dtoa_r+0x48c>
 80087f2:	4b48      	ldr	r3, [pc, #288]	@ (8008914 <_dtoa_r+0x594>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	ec51 0b17 	vmov	r0, r1, d7
 80087fa:	f7f7 fefd 	bl	80005f8 <__aeabi_dmul>
 80087fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008802:	f7f8 f97f 	bl	8000b04 <__aeabi_dcmpge>
 8008806:	2800      	cmp	r0, #0
 8008808:	f000 8266 	beq.w	8008cd8 <_dtoa_r+0x958>
 800880c:	2400      	movs	r4, #0
 800880e:	4625      	mov	r5, r4
 8008810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008812:	4656      	mov	r6, sl
 8008814:	ea6f 0803 	mvn.w	r8, r3
 8008818:	2700      	movs	r7, #0
 800881a:	4621      	mov	r1, r4
 800881c:	4648      	mov	r0, r9
 800881e:	f000 fcbf 	bl	80091a0 <_Bfree>
 8008822:	2d00      	cmp	r5, #0
 8008824:	f000 80bd 	beq.w	80089a2 <_dtoa_r+0x622>
 8008828:	b12f      	cbz	r7, 8008836 <_dtoa_r+0x4b6>
 800882a:	42af      	cmp	r7, r5
 800882c:	d003      	beq.n	8008836 <_dtoa_r+0x4b6>
 800882e:	4639      	mov	r1, r7
 8008830:	4648      	mov	r0, r9
 8008832:	f000 fcb5 	bl	80091a0 <_Bfree>
 8008836:	4629      	mov	r1, r5
 8008838:	4648      	mov	r0, r9
 800883a:	f000 fcb1 	bl	80091a0 <_Bfree>
 800883e:	e0b0      	b.n	80089a2 <_dtoa_r+0x622>
 8008840:	07e2      	lsls	r2, r4, #31
 8008842:	d505      	bpl.n	8008850 <_dtoa_r+0x4d0>
 8008844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	3601      	adds	r6, #1
 800884e:	2301      	movs	r3, #1
 8008850:	1064      	asrs	r4, r4, #1
 8008852:	3508      	adds	r5, #8
 8008854:	e762      	b.n	800871c <_dtoa_r+0x39c>
 8008856:	2602      	movs	r6, #2
 8008858:	e765      	b.n	8008726 <_dtoa_r+0x3a6>
 800885a:	9c03      	ldr	r4, [sp, #12]
 800885c:	46b8      	mov	r8, r7
 800885e:	e784      	b.n	800876a <_dtoa_r+0x3ea>
 8008860:	4b27      	ldr	r3, [pc, #156]	@ (8008900 <_dtoa_r+0x580>)
 8008862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800886c:	4454      	add	r4, sl
 800886e:	2900      	cmp	r1, #0
 8008870:	d054      	beq.n	800891c <_dtoa_r+0x59c>
 8008872:	4929      	ldr	r1, [pc, #164]	@ (8008918 <_dtoa_r+0x598>)
 8008874:	2000      	movs	r0, #0
 8008876:	f7f7 ffe9 	bl	800084c <__aeabi_ddiv>
 800887a:	4633      	mov	r3, r6
 800887c:	462a      	mov	r2, r5
 800887e:	f7f7 fd03 	bl	8000288 <__aeabi_dsub>
 8008882:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008886:	4656      	mov	r6, sl
 8008888:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800888c:	f7f8 f964 	bl	8000b58 <__aeabi_d2iz>
 8008890:	4605      	mov	r5, r0
 8008892:	f7f7 fe47 	bl	8000524 <__aeabi_i2d>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800889e:	f7f7 fcf3 	bl	8000288 <__aeabi_dsub>
 80088a2:	3530      	adds	r5, #48	@ 0x30
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088ac:	f806 5b01 	strb.w	r5, [r6], #1
 80088b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088b4:	f7f8 f912 	bl	8000adc <__aeabi_dcmplt>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d172      	bne.n	80089a2 <_dtoa_r+0x622>
 80088bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c0:	4911      	ldr	r1, [pc, #68]	@ (8008908 <_dtoa_r+0x588>)
 80088c2:	2000      	movs	r0, #0
 80088c4:	f7f7 fce0 	bl	8000288 <__aeabi_dsub>
 80088c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088cc:	f7f8 f906 	bl	8000adc <__aeabi_dcmplt>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f040 80b4 	bne.w	8008a3e <_dtoa_r+0x6be>
 80088d6:	42a6      	cmp	r6, r4
 80088d8:	f43f af70 	beq.w	80087bc <_dtoa_r+0x43c>
 80088dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088e0:	4b0a      	ldr	r3, [pc, #40]	@ (800890c <_dtoa_r+0x58c>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	4b08      	ldr	r3, [pc, #32]	@ (800890c <_dtoa_r+0x58c>)
 80088ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088ee:	2200      	movs	r2, #0
 80088f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088f4:	f7f7 fe80 	bl	80005f8 <__aeabi_dmul>
 80088f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088fc:	e7c4      	b.n	8008888 <_dtoa_r+0x508>
 80088fe:	bf00      	nop
 8008900:	0800aa40 	.word	0x0800aa40
 8008904:	0800aa18 	.word	0x0800aa18
 8008908:	3ff00000 	.word	0x3ff00000
 800890c:	40240000 	.word	0x40240000
 8008910:	401c0000 	.word	0x401c0000
 8008914:	40140000 	.word	0x40140000
 8008918:	3fe00000 	.word	0x3fe00000
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	f7f7 fe6a 	bl	80005f8 <__aeabi_dmul>
 8008924:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008928:	9413      	str	r4, [sp, #76]	@ 0x4c
 800892a:	4656      	mov	r6, sl
 800892c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008930:	f7f8 f912 	bl	8000b58 <__aeabi_d2iz>
 8008934:	4605      	mov	r5, r0
 8008936:	f7f7 fdf5 	bl	8000524 <__aeabi_i2d>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008942:	f7f7 fca1 	bl	8000288 <__aeabi_dsub>
 8008946:	3530      	adds	r5, #48	@ 0x30
 8008948:	f806 5b01 	strb.w	r5, [r6], #1
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	42a6      	cmp	r6, r4
 8008952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008956:	f04f 0200 	mov.w	r2, #0
 800895a:	d124      	bne.n	80089a6 <_dtoa_r+0x626>
 800895c:	4baf      	ldr	r3, [pc, #700]	@ (8008c1c <_dtoa_r+0x89c>)
 800895e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008962:	f7f7 fc93 	bl	800028c <__adddf3>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800896e:	f7f8 f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 8008972:	2800      	cmp	r0, #0
 8008974:	d163      	bne.n	8008a3e <_dtoa_r+0x6be>
 8008976:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800897a:	49a8      	ldr	r1, [pc, #672]	@ (8008c1c <_dtoa_r+0x89c>)
 800897c:	2000      	movs	r0, #0
 800897e:	f7f7 fc83 	bl	8000288 <__aeabi_dsub>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800898a:	f7f8 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800898e:	2800      	cmp	r0, #0
 8008990:	f43f af14 	beq.w	80087bc <_dtoa_r+0x43c>
 8008994:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008996:	1e73      	subs	r3, r6, #1
 8008998:	9313      	str	r3, [sp, #76]	@ 0x4c
 800899a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800899e:	2b30      	cmp	r3, #48	@ 0x30
 80089a0:	d0f8      	beq.n	8008994 <_dtoa_r+0x614>
 80089a2:	4647      	mov	r7, r8
 80089a4:	e03b      	b.n	8008a1e <_dtoa_r+0x69e>
 80089a6:	4b9e      	ldr	r3, [pc, #632]	@ (8008c20 <_dtoa_r+0x8a0>)
 80089a8:	f7f7 fe26 	bl	80005f8 <__aeabi_dmul>
 80089ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089b0:	e7bc      	b.n	800892c <_dtoa_r+0x5ac>
 80089b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80089b6:	4656      	mov	r6, sl
 80089b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 ff44 	bl	800084c <__aeabi_ddiv>
 80089c4:	f7f8 f8c8 	bl	8000b58 <__aeabi_d2iz>
 80089c8:	4680      	mov	r8, r0
 80089ca:	f7f7 fdab 	bl	8000524 <__aeabi_i2d>
 80089ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4620      	mov	r0, r4
 80089dc:	4629      	mov	r1, r5
 80089de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089e2:	f7f7 fc51 	bl	8000288 <__aeabi_dsub>
 80089e6:	f806 4b01 	strb.w	r4, [r6], #1
 80089ea:	9d03      	ldr	r5, [sp, #12]
 80089ec:	eba6 040a 	sub.w	r4, r6, sl
 80089f0:	42a5      	cmp	r5, r4
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	d133      	bne.n	8008a60 <_dtoa_r+0x6e0>
 80089f8:	f7f7 fc48 	bl	800028c <__adddf3>
 80089fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	f7f8 f888 	bl	8000b18 <__aeabi_dcmpgt>
 8008a08:	b9c0      	cbnz	r0, 8008a3c <_dtoa_r+0x6bc>
 8008a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7f8 f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a16:	b110      	cbz	r0, 8008a1e <_dtoa_r+0x69e>
 8008a18:	f018 0f01 	tst.w	r8, #1
 8008a1c:	d10e      	bne.n	8008a3c <_dtoa_r+0x6bc>
 8008a1e:	9902      	ldr	r1, [sp, #8]
 8008a20:	4648      	mov	r0, r9
 8008a22:	f000 fbbd 	bl	80091a0 <_Bfree>
 8008a26:	2300      	movs	r3, #0
 8008a28:	7033      	strb	r3, [r6, #0]
 8008a2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a2c:	3701      	adds	r7, #1
 8008a2e:	601f      	str	r7, [r3, #0]
 8008a30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 824b 	beq.w	8008ece <_dtoa_r+0xb4e>
 8008a38:	601e      	str	r6, [r3, #0]
 8008a3a:	e248      	b.n	8008ece <_dtoa_r+0xb4e>
 8008a3c:	46b8      	mov	r8, r7
 8008a3e:	4633      	mov	r3, r6
 8008a40:	461e      	mov	r6, r3
 8008a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a46:	2a39      	cmp	r2, #57	@ 0x39
 8008a48:	d106      	bne.n	8008a58 <_dtoa_r+0x6d8>
 8008a4a:	459a      	cmp	sl, r3
 8008a4c:	d1f8      	bne.n	8008a40 <_dtoa_r+0x6c0>
 8008a4e:	2230      	movs	r2, #48	@ 0x30
 8008a50:	f108 0801 	add.w	r8, r8, #1
 8008a54:	f88a 2000 	strb.w	r2, [sl]
 8008a58:	781a      	ldrb	r2, [r3, #0]
 8008a5a:	3201      	adds	r2, #1
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	e7a0      	b.n	80089a2 <_dtoa_r+0x622>
 8008a60:	4b6f      	ldr	r3, [pc, #444]	@ (8008c20 <_dtoa_r+0x8a0>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	f7f7 fdc8 	bl	80005f8 <__aeabi_dmul>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	460d      	mov	r5, r1
 8008a70:	f7f8 f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d09f      	beq.n	80089b8 <_dtoa_r+0x638>
 8008a78:	e7d1      	b.n	8008a1e <_dtoa_r+0x69e>
 8008a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	f000 80ea 	beq.w	8008c56 <_dtoa_r+0x8d6>
 8008a82:	9a07      	ldr	r2, [sp, #28]
 8008a84:	2a01      	cmp	r2, #1
 8008a86:	f300 80cd 	bgt.w	8008c24 <_dtoa_r+0x8a4>
 8008a8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	f000 80c1 	beq.w	8008c14 <_dtoa_r+0x894>
 8008a92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a96:	9c08      	ldr	r4, [sp, #32]
 8008a98:	9e00      	ldr	r6, [sp, #0]
 8008a9a:	9a00      	ldr	r2, [sp, #0]
 8008a9c:	441a      	add	r2, r3
 8008a9e:	9200      	str	r2, [sp, #0]
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	441a      	add	r2, r3
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	9206      	str	r2, [sp, #24]
 8008aaa:	f000 fc2d 	bl	8009308 <__i2b>
 8008aae:	4605      	mov	r5, r0
 8008ab0:	b166      	cbz	r6, 8008acc <_dtoa_r+0x74c>
 8008ab2:	9b06      	ldr	r3, [sp, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dd09      	ble.n	8008acc <_dtoa_r+0x74c>
 8008ab8:	42b3      	cmp	r3, r6
 8008aba:	9a00      	ldr	r2, [sp, #0]
 8008abc:	bfa8      	it	ge
 8008abe:	4633      	movge	r3, r6
 8008ac0:	1ad2      	subs	r2, r2, r3
 8008ac2:	9200      	str	r2, [sp, #0]
 8008ac4:	9a06      	ldr	r2, [sp, #24]
 8008ac6:	1af6      	subs	r6, r6, r3
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	9306      	str	r3, [sp, #24]
 8008acc:	9b08      	ldr	r3, [sp, #32]
 8008ace:	b30b      	cbz	r3, 8008b14 <_dtoa_r+0x794>
 8008ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80c6 	beq.w	8008c64 <_dtoa_r+0x8e4>
 8008ad8:	2c00      	cmp	r4, #0
 8008ada:	f000 80c0 	beq.w	8008c5e <_dtoa_r+0x8de>
 8008ade:	4629      	mov	r1, r5
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4648      	mov	r0, r9
 8008ae4:	f000 fcc8 	bl	8009478 <__pow5mult>
 8008ae8:	9a02      	ldr	r2, [sp, #8]
 8008aea:	4601      	mov	r1, r0
 8008aec:	4605      	mov	r5, r0
 8008aee:	4648      	mov	r0, r9
 8008af0:	f000 fc20 	bl	8009334 <__multiply>
 8008af4:	9902      	ldr	r1, [sp, #8]
 8008af6:	4680      	mov	r8, r0
 8008af8:	4648      	mov	r0, r9
 8008afa:	f000 fb51 	bl	80091a0 <_Bfree>
 8008afe:	9b08      	ldr	r3, [sp, #32]
 8008b00:	1b1b      	subs	r3, r3, r4
 8008b02:	9308      	str	r3, [sp, #32]
 8008b04:	f000 80b1 	beq.w	8008c6a <_dtoa_r+0x8ea>
 8008b08:	9a08      	ldr	r2, [sp, #32]
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	4648      	mov	r0, r9
 8008b0e:	f000 fcb3 	bl	8009478 <__pow5mult>
 8008b12:	9002      	str	r0, [sp, #8]
 8008b14:	2101      	movs	r1, #1
 8008b16:	4648      	mov	r0, r9
 8008b18:	f000 fbf6 	bl	8009308 <__i2b>
 8008b1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b1e:	4604      	mov	r4, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 81d8 	beq.w	8008ed6 <_dtoa_r+0xb56>
 8008b26:	461a      	mov	r2, r3
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4648      	mov	r0, r9
 8008b2c:	f000 fca4 	bl	8009478 <__pow5mult>
 8008b30:	9b07      	ldr	r3, [sp, #28]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	4604      	mov	r4, r0
 8008b36:	f300 809f 	bgt.w	8008c78 <_dtoa_r+0x8f8>
 8008b3a:	9b04      	ldr	r3, [sp, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 8097 	bne.w	8008c70 <_dtoa_r+0x8f0>
 8008b42:	9b05      	ldr	r3, [sp, #20]
 8008b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 8093 	bne.w	8008c74 <_dtoa_r+0x8f4>
 8008b4e:	9b05      	ldr	r3, [sp, #20]
 8008b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b54:	0d1b      	lsrs	r3, r3, #20
 8008b56:	051b      	lsls	r3, r3, #20
 8008b58:	b133      	cbz	r3, 8008b68 <_dtoa_r+0x7e8>
 8008b5a:	9b00      	ldr	r3, [sp, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	9b06      	ldr	r3, [sp, #24]
 8008b62:	3301      	adds	r3, #1
 8008b64:	9306      	str	r3, [sp, #24]
 8008b66:	2301      	movs	r3, #1
 8008b68:	9308      	str	r3, [sp, #32]
 8008b6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 81b8 	beq.w	8008ee2 <_dtoa_r+0xb62>
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b78:	6918      	ldr	r0, [r3, #16]
 8008b7a:	f000 fb79 	bl	8009270 <__hi0bits>
 8008b7e:	f1c0 0020 	rsb	r0, r0, #32
 8008b82:	9b06      	ldr	r3, [sp, #24]
 8008b84:	4418      	add	r0, r3
 8008b86:	f010 001f 	ands.w	r0, r0, #31
 8008b8a:	f000 8082 	beq.w	8008c92 <_dtoa_r+0x912>
 8008b8e:	f1c0 0320 	rsb	r3, r0, #32
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	dd73      	ble.n	8008c7e <_dtoa_r+0x8fe>
 8008b96:	9b00      	ldr	r3, [sp, #0]
 8008b98:	f1c0 001c 	rsb	r0, r0, #28
 8008b9c:	4403      	add	r3, r0
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	9b06      	ldr	r3, [sp, #24]
 8008ba2:	4403      	add	r3, r0
 8008ba4:	4406      	add	r6, r0
 8008ba6:	9306      	str	r3, [sp, #24]
 8008ba8:	9b00      	ldr	r3, [sp, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd05      	ble.n	8008bba <_dtoa_r+0x83a>
 8008bae:	9902      	ldr	r1, [sp, #8]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4648      	mov	r0, r9
 8008bb4:	f000 fcba 	bl	800952c <__lshift>
 8008bb8:	9002      	str	r0, [sp, #8]
 8008bba:	9b06      	ldr	r3, [sp, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dd05      	ble.n	8008bcc <_dtoa_r+0x84c>
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f000 fcb1 	bl	800952c <__lshift>
 8008bca:	4604      	mov	r4, r0
 8008bcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d061      	beq.n	8008c96 <_dtoa_r+0x916>
 8008bd2:	9802      	ldr	r0, [sp, #8]
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f000 fd15 	bl	8009604 <__mcmp>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	da5b      	bge.n	8008c96 <_dtoa_r+0x916>
 8008bde:	2300      	movs	r3, #0
 8008be0:	9902      	ldr	r1, [sp, #8]
 8008be2:	220a      	movs	r2, #10
 8008be4:	4648      	mov	r0, r9
 8008be6:	f000 fafd 	bl	80091e4 <__multadd>
 8008bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bec:	9002      	str	r0, [sp, #8]
 8008bee:	f107 38ff 	add.w	r8, r7, #4294967295
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 8177 	beq.w	8008ee6 <_dtoa_r+0xb66>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	220a      	movs	r2, #10
 8008bfe:	4648      	mov	r0, r9
 8008c00:	f000 faf0 	bl	80091e4 <__multadd>
 8008c04:	f1bb 0f00 	cmp.w	fp, #0
 8008c08:	4605      	mov	r5, r0
 8008c0a:	dc6f      	bgt.n	8008cec <_dtoa_r+0x96c>
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	dc49      	bgt.n	8008ca6 <_dtoa_r+0x926>
 8008c12:	e06b      	b.n	8008cec <_dtoa_r+0x96c>
 8008c14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c1a:	e73c      	b.n	8008a96 <_dtoa_r+0x716>
 8008c1c:	3fe00000 	.word	0x3fe00000
 8008c20:	40240000 	.word	0x40240000
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	1e5c      	subs	r4, r3, #1
 8008c28:	9b08      	ldr	r3, [sp, #32]
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	db09      	blt.n	8008c42 <_dtoa_r+0x8c2>
 8008c2e:	1b1c      	subs	r4, r3, r4
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f6bf af30 	bge.w	8008a98 <_dtoa_r+0x718>
 8008c38:	9b00      	ldr	r3, [sp, #0]
 8008c3a:	9a03      	ldr	r2, [sp, #12]
 8008c3c:	1a9e      	subs	r6, r3, r2
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e72b      	b.n	8008a9a <_dtoa_r+0x71a>
 8008c42:	9b08      	ldr	r3, [sp, #32]
 8008c44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c46:	9408      	str	r4, [sp, #32]
 8008c48:	1ae3      	subs	r3, r4, r3
 8008c4a:	441a      	add	r2, r3
 8008c4c:	9e00      	ldr	r6, [sp, #0]
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	920d      	str	r2, [sp, #52]	@ 0x34
 8008c52:	2400      	movs	r4, #0
 8008c54:	e721      	b.n	8008a9a <_dtoa_r+0x71a>
 8008c56:	9c08      	ldr	r4, [sp, #32]
 8008c58:	9e00      	ldr	r6, [sp, #0]
 8008c5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008c5c:	e728      	b.n	8008ab0 <_dtoa_r+0x730>
 8008c5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008c62:	e751      	b.n	8008b08 <_dtoa_r+0x788>
 8008c64:	9a08      	ldr	r2, [sp, #32]
 8008c66:	9902      	ldr	r1, [sp, #8]
 8008c68:	e750      	b.n	8008b0c <_dtoa_r+0x78c>
 8008c6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c6e:	e751      	b.n	8008b14 <_dtoa_r+0x794>
 8008c70:	2300      	movs	r3, #0
 8008c72:	e779      	b.n	8008b68 <_dtoa_r+0x7e8>
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	e777      	b.n	8008b68 <_dtoa_r+0x7e8>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9308      	str	r3, [sp, #32]
 8008c7c:	e779      	b.n	8008b72 <_dtoa_r+0x7f2>
 8008c7e:	d093      	beq.n	8008ba8 <_dtoa_r+0x828>
 8008c80:	9a00      	ldr	r2, [sp, #0]
 8008c82:	331c      	adds	r3, #28
 8008c84:	441a      	add	r2, r3
 8008c86:	9200      	str	r2, [sp, #0]
 8008c88:	9a06      	ldr	r2, [sp, #24]
 8008c8a:	441a      	add	r2, r3
 8008c8c:	441e      	add	r6, r3
 8008c8e:	9206      	str	r2, [sp, #24]
 8008c90:	e78a      	b.n	8008ba8 <_dtoa_r+0x828>
 8008c92:	4603      	mov	r3, r0
 8008c94:	e7f4      	b.n	8008c80 <_dtoa_r+0x900>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	46b8      	mov	r8, r7
 8008c9c:	dc20      	bgt.n	8008ce0 <_dtoa_r+0x960>
 8008c9e:	469b      	mov	fp, r3
 8008ca0:	9b07      	ldr	r3, [sp, #28]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	dd1e      	ble.n	8008ce4 <_dtoa_r+0x964>
 8008ca6:	f1bb 0f00 	cmp.w	fp, #0
 8008caa:	f47f adb1 	bne.w	8008810 <_dtoa_r+0x490>
 8008cae:	4621      	mov	r1, r4
 8008cb0:	465b      	mov	r3, fp
 8008cb2:	2205      	movs	r2, #5
 8008cb4:	4648      	mov	r0, r9
 8008cb6:	f000 fa95 	bl	80091e4 <__multadd>
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	9802      	ldr	r0, [sp, #8]
 8008cc0:	f000 fca0 	bl	8009604 <__mcmp>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f77f ada3 	ble.w	8008810 <_dtoa_r+0x490>
 8008cca:	4656      	mov	r6, sl
 8008ccc:	2331      	movs	r3, #49	@ 0x31
 8008cce:	f806 3b01 	strb.w	r3, [r6], #1
 8008cd2:	f108 0801 	add.w	r8, r8, #1
 8008cd6:	e59f      	b.n	8008818 <_dtoa_r+0x498>
 8008cd8:	9c03      	ldr	r4, [sp, #12]
 8008cda:	46b8      	mov	r8, r7
 8008cdc:	4625      	mov	r5, r4
 8008cde:	e7f4      	b.n	8008cca <_dtoa_r+0x94a>
 8008ce0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 8101 	beq.w	8008eee <_dtoa_r+0xb6e>
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	dd05      	ble.n	8008cfc <_dtoa_r+0x97c>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4632      	mov	r2, r6
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fc19 	bl	800952c <__lshift>
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d05c      	beq.n	8008dbc <_dtoa_r+0xa3c>
 8008d02:	6869      	ldr	r1, [r5, #4]
 8008d04:	4648      	mov	r0, r9
 8008d06:	f000 fa0b 	bl	8009120 <_Balloc>
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	b928      	cbnz	r0, 8008d1a <_dtoa_r+0x99a>
 8008d0e:	4b82      	ldr	r3, [pc, #520]	@ (8008f18 <_dtoa_r+0xb98>)
 8008d10:	4602      	mov	r2, r0
 8008d12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d16:	f7ff bb4a 	b.w	80083ae <_dtoa_r+0x2e>
 8008d1a:	692a      	ldr	r2, [r5, #16]
 8008d1c:	3202      	adds	r2, #2
 8008d1e:	0092      	lsls	r2, r2, #2
 8008d20:	f105 010c 	add.w	r1, r5, #12
 8008d24:	300c      	adds	r0, #12
 8008d26:	f001 f827 	bl	8009d78 <memcpy>
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4648      	mov	r0, r9
 8008d30:	f000 fbfc 	bl	800952c <__lshift>
 8008d34:	f10a 0301 	add.w	r3, sl, #1
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	eb0a 030b 	add.w	r3, sl, fp
 8008d3e:	9308      	str	r3, [sp, #32]
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	462f      	mov	r7, r5
 8008d48:	9306      	str	r3, [sp, #24]
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	9b00      	ldr	r3, [sp, #0]
 8008d4e:	9802      	ldr	r0, [sp, #8]
 8008d50:	4621      	mov	r1, r4
 8008d52:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d56:	f7ff fa8a 	bl	800826e <quorem>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	3330      	adds	r3, #48	@ 0x30
 8008d5e:	9003      	str	r0, [sp, #12]
 8008d60:	4639      	mov	r1, r7
 8008d62:	9802      	ldr	r0, [sp, #8]
 8008d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d66:	f000 fc4d 	bl	8009604 <__mcmp>
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	9004      	str	r0, [sp, #16]
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4648      	mov	r0, r9
 8008d72:	f000 fc63 	bl	800963c <__mdiff>
 8008d76:	68c2      	ldr	r2, [r0, #12]
 8008d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	bb02      	cbnz	r2, 8008dc0 <_dtoa_r+0xa40>
 8008d7e:	4601      	mov	r1, r0
 8008d80:	9802      	ldr	r0, [sp, #8]
 8008d82:	f000 fc3f 	bl	8009604 <__mcmp>
 8008d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4648      	mov	r0, r9
 8008d8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d92:	f000 fa05 	bl	80091a0 <_Bfree>
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d9a:	9e00      	ldr	r6, [sp, #0]
 8008d9c:	ea42 0103 	orr.w	r1, r2, r3
 8008da0:	9b06      	ldr	r3, [sp, #24]
 8008da2:	4319      	orrs	r1, r3
 8008da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da6:	d10d      	bne.n	8008dc4 <_dtoa_r+0xa44>
 8008da8:	2b39      	cmp	r3, #57	@ 0x39
 8008daa:	d027      	beq.n	8008dfc <_dtoa_r+0xa7c>
 8008dac:	9a04      	ldr	r2, [sp, #16]
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	dd01      	ble.n	8008db6 <_dtoa_r+0xa36>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	3331      	adds	r3, #49	@ 0x31
 8008db6:	f88b 3000 	strb.w	r3, [fp]
 8008dba:	e52e      	b.n	800881a <_dtoa_r+0x49a>
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	e7b9      	b.n	8008d34 <_dtoa_r+0x9b4>
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	e7e2      	b.n	8008d8a <_dtoa_r+0xa0a>
 8008dc4:	9904      	ldr	r1, [sp, #16]
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	db04      	blt.n	8008dd4 <_dtoa_r+0xa54>
 8008dca:	9807      	ldr	r0, [sp, #28]
 8008dcc:	4301      	orrs	r1, r0
 8008dce:	9806      	ldr	r0, [sp, #24]
 8008dd0:	4301      	orrs	r1, r0
 8008dd2:	d120      	bne.n	8008e16 <_dtoa_r+0xa96>
 8008dd4:	2a00      	cmp	r2, #0
 8008dd6:	ddee      	ble.n	8008db6 <_dtoa_r+0xa36>
 8008dd8:	9902      	ldr	r1, [sp, #8]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4648      	mov	r0, r9
 8008de0:	f000 fba4 	bl	800952c <__lshift>
 8008de4:	4621      	mov	r1, r4
 8008de6:	9002      	str	r0, [sp, #8]
 8008de8:	f000 fc0c 	bl	8009604 <__mcmp>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	dc02      	bgt.n	8008df8 <_dtoa_r+0xa78>
 8008df2:	d1e0      	bne.n	8008db6 <_dtoa_r+0xa36>
 8008df4:	07da      	lsls	r2, r3, #31
 8008df6:	d5de      	bpl.n	8008db6 <_dtoa_r+0xa36>
 8008df8:	2b39      	cmp	r3, #57	@ 0x39
 8008dfa:	d1da      	bne.n	8008db2 <_dtoa_r+0xa32>
 8008dfc:	2339      	movs	r3, #57	@ 0x39
 8008dfe:	f88b 3000 	strb.w	r3, [fp]
 8008e02:	4633      	mov	r3, r6
 8008e04:	461e      	mov	r6, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e0c:	2a39      	cmp	r2, #57	@ 0x39
 8008e0e:	d04e      	beq.n	8008eae <_dtoa_r+0xb2e>
 8008e10:	3201      	adds	r2, #1
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	e501      	b.n	800881a <_dtoa_r+0x49a>
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	dd03      	ble.n	8008e22 <_dtoa_r+0xaa2>
 8008e1a:	2b39      	cmp	r3, #57	@ 0x39
 8008e1c:	d0ee      	beq.n	8008dfc <_dtoa_r+0xa7c>
 8008e1e:	3301      	adds	r3, #1
 8008e20:	e7c9      	b.n	8008db6 <_dtoa_r+0xa36>
 8008e22:	9a00      	ldr	r2, [sp, #0]
 8008e24:	9908      	ldr	r1, [sp, #32]
 8008e26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e2a:	428a      	cmp	r2, r1
 8008e2c:	d028      	beq.n	8008e80 <_dtoa_r+0xb00>
 8008e2e:	9902      	ldr	r1, [sp, #8]
 8008e30:	2300      	movs	r3, #0
 8008e32:	220a      	movs	r2, #10
 8008e34:	4648      	mov	r0, r9
 8008e36:	f000 f9d5 	bl	80091e4 <__multadd>
 8008e3a:	42af      	cmp	r7, r5
 8008e3c:	9002      	str	r0, [sp, #8]
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	f04f 020a 	mov.w	r2, #10
 8008e46:	4639      	mov	r1, r7
 8008e48:	4648      	mov	r0, r9
 8008e4a:	d107      	bne.n	8008e5c <_dtoa_r+0xadc>
 8008e4c:	f000 f9ca 	bl	80091e4 <__multadd>
 8008e50:	4607      	mov	r7, r0
 8008e52:	4605      	mov	r5, r0
 8008e54:	9b00      	ldr	r3, [sp, #0]
 8008e56:	3301      	adds	r3, #1
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	e777      	b.n	8008d4c <_dtoa_r+0x9cc>
 8008e5c:	f000 f9c2 	bl	80091e4 <__multadd>
 8008e60:	4629      	mov	r1, r5
 8008e62:	4607      	mov	r7, r0
 8008e64:	2300      	movs	r3, #0
 8008e66:	220a      	movs	r2, #10
 8008e68:	4648      	mov	r0, r9
 8008e6a:	f000 f9bb 	bl	80091e4 <__multadd>
 8008e6e:	4605      	mov	r5, r0
 8008e70:	e7f0      	b.n	8008e54 <_dtoa_r+0xad4>
 8008e72:	f1bb 0f00 	cmp.w	fp, #0
 8008e76:	bfcc      	ite	gt
 8008e78:	465e      	movgt	r6, fp
 8008e7a:	2601      	movle	r6, #1
 8008e7c:	4456      	add	r6, sl
 8008e7e:	2700      	movs	r7, #0
 8008e80:	9902      	ldr	r1, [sp, #8]
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	2201      	movs	r2, #1
 8008e86:	4648      	mov	r0, r9
 8008e88:	f000 fb50 	bl	800952c <__lshift>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	9002      	str	r0, [sp, #8]
 8008e90:	f000 fbb8 	bl	8009604 <__mcmp>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	dcb4      	bgt.n	8008e02 <_dtoa_r+0xa82>
 8008e98:	d102      	bne.n	8008ea0 <_dtoa_r+0xb20>
 8008e9a:	9b00      	ldr	r3, [sp, #0]
 8008e9c:	07db      	lsls	r3, r3, #31
 8008e9e:	d4b0      	bmi.n	8008e02 <_dtoa_r+0xa82>
 8008ea0:	4633      	mov	r3, r6
 8008ea2:	461e      	mov	r6, r3
 8008ea4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ea8:	2a30      	cmp	r2, #48	@ 0x30
 8008eaa:	d0fa      	beq.n	8008ea2 <_dtoa_r+0xb22>
 8008eac:	e4b5      	b.n	800881a <_dtoa_r+0x49a>
 8008eae:	459a      	cmp	sl, r3
 8008eb0:	d1a8      	bne.n	8008e04 <_dtoa_r+0xa84>
 8008eb2:	2331      	movs	r3, #49	@ 0x31
 8008eb4:	f108 0801 	add.w	r8, r8, #1
 8008eb8:	f88a 3000 	strb.w	r3, [sl]
 8008ebc:	e4ad      	b.n	800881a <_dtoa_r+0x49a>
 8008ebe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ec0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008f1c <_dtoa_r+0xb9c>
 8008ec4:	b11b      	cbz	r3, 8008ece <_dtoa_r+0xb4e>
 8008ec6:	f10a 0308 	add.w	r3, sl, #8
 8008eca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	4650      	mov	r0, sl
 8008ed0:	b017      	add	sp, #92	@ 0x5c
 8008ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed6:	9b07      	ldr	r3, [sp, #28]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	f77f ae2e 	ble.w	8008b3a <_dtoa_r+0x7ba>
 8008ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ee0:	9308      	str	r3, [sp, #32]
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	e64d      	b.n	8008b82 <_dtoa_r+0x802>
 8008ee6:	f1bb 0f00 	cmp.w	fp, #0
 8008eea:	f77f aed9 	ble.w	8008ca0 <_dtoa_r+0x920>
 8008eee:	4656      	mov	r6, sl
 8008ef0:	9802      	ldr	r0, [sp, #8]
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7ff f9bb 	bl	800826e <quorem>
 8008ef8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008efc:	f806 3b01 	strb.w	r3, [r6], #1
 8008f00:	eba6 020a 	sub.w	r2, r6, sl
 8008f04:	4593      	cmp	fp, r2
 8008f06:	ddb4      	ble.n	8008e72 <_dtoa_r+0xaf2>
 8008f08:	9902      	ldr	r1, [sp, #8]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	220a      	movs	r2, #10
 8008f0e:	4648      	mov	r0, r9
 8008f10:	f000 f968 	bl	80091e4 <__multadd>
 8008f14:	9002      	str	r0, [sp, #8]
 8008f16:	e7eb      	b.n	8008ef0 <_dtoa_r+0xb70>
 8008f18:	0800a944 	.word	0x0800a944
 8008f1c:	0800a8c8 	.word	0x0800a8c8

08008f20 <_free_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4605      	mov	r5, r0
 8008f24:	2900      	cmp	r1, #0
 8008f26:	d041      	beq.n	8008fac <_free_r+0x8c>
 8008f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f2c:	1f0c      	subs	r4, r1, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bfb8      	it	lt
 8008f32:	18e4      	addlt	r4, r4, r3
 8008f34:	f000 f8e8 	bl	8009108 <__malloc_lock>
 8008f38:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb0 <_free_r+0x90>)
 8008f3a:	6813      	ldr	r3, [r2, #0]
 8008f3c:	b933      	cbnz	r3, 8008f4c <_free_r+0x2c>
 8008f3e:	6063      	str	r3, [r4, #4]
 8008f40:	6014      	str	r4, [r2, #0]
 8008f42:	4628      	mov	r0, r5
 8008f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f48:	f000 b8e4 	b.w	8009114 <__malloc_unlock>
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d908      	bls.n	8008f62 <_free_r+0x42>
 8008f50:	6820      	ldr	r0, [r4, #0]
 8008f52:	1821      	adds	r1, r4, r0
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf01      	itttt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	1809      	addeq	r1, r1, r0
 8008f5e:	6021      	streq	r1, [r4, #0]
 8008f60:	e7ed      	b.n	8008f3e <_free_r+0x1e>
 8008f62:	461a      	mov	r2, r3
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	b10b      	cbz	r3, 8008f6c <_free_r+0x4c>
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	d9fa      	bls.n	8008f62 <_free_r+0x42>
 8008f6c:	6811      	ldr	r1, [r2, #0]
 8008f6e:	1850      	adds	r0, r2, r1
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d10b      	bne.n	8008f8c <_free_r+0x6c>
 8008f74:	6820      	ldr	r0, [r4, #0]
 8008f76:	4401      	add	r1, r0
 8008f78:	1850      	adds	r0, r2, r1
 8008f7a:	4283      	cmp	r3, r0
 8008f7c:	6011      	str	r1, [r2, #0]
 8008f7e:	d1e0      	bne.n	8008f42 <_free_r+0x22>
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	6053      	str	r3, [r2, #4]
 8008f86:	4408      	add	r0, r1
 8008f88:	6010      	str	r0, [r2, #0]
 8008f8a:	e7da      	b.n	8008f42 <_free_r+0x22>
 8008f8c:	d902      	bls.n	8008f94 <_free_r+0x74>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	e7d6      	b.n	8008f42 <_free_r+0x22>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	1821      	adds	r1, r4, r0
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf04      	itt	eq
 8008f9c:	6819      	ldreq	r1, [r3, #0]
 8008f9e:	685b      	ldreq	r3, [r3, #4]
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	bf04      	itt	eq
 8008fa4:	1809      	addeq	r1, r1, r0
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	6054      	str	r4, [r2, #4]
 8008faa:	e7ca      	b.n	8008f42 <_free_r+0x22>
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000644 	.word	0x20000644

08008fb4 <malloc>:
 8008fb4:	4b02      	ldr	r3, [pc, #8]	@ (8008fc0 <malloc+0xc>)
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	f000 b825 	b.w	8009008 <_malloc_r>
 8008fbe:	bf00      	nop
 8008fc0:	2000001c 	.word	0x2000001c

08008fc4 <sbrk_aligned>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8009004 <sbrk_aligned+0x40>)
 8008fc8:	460c      	mov	r4, r1
 8008fca:	6831      	ldr	r1, [r6, #0]
 8008fcc:	4605      	mov	r5, r0
 8008fce:	b911      	cbnz	r1, 8008fd6 <sbrk_aligned+0x12>
 8008fd0:	f000 fec2 	bl	8009d58 <_sbrk_r>
 8008fd4:	6030      	str	r0, [r6, #0]
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 febd 	bl	8009d58 <_sbrk_r>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	d103      	bne.n	8008fea <sbrk_aligned+0x26>
 8008fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	1cc4      	adds	r4, r0, #3
 8008fec:	f024 0403 	bic.w	r4, r4, #3
 8008ff0:	42a0      	cmp	r0, r4
 8008ff2:	d0f8      	beq.n	8008fe6 <sbrk_aligned+0x22>
 8008ff4:	1a21      	subs	r1, r4, r0
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 feae 	bl	8009d58 <_sbrk_r>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d1f2      	bne.n	8008fe6 <sbrk_aligned+0x22>
 8009000:	e7ef      	b.n	8008fe2 <sbrk_aligned+0x1e>
 8009002:	bf00      	nop
 8009004:	20000640 	.word	0x20000640

08009008 <_malloc_r>:
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	1ccd      	adds	r5, r1, #3
 800900e:	f025 0503 	bic.w	r5, r5, #3
 8009012:	3508      	adds	r5, #8
 8009014:	2d0c      	cmp	r5, #12
 8009016:	bf38      	it	cc
 8009018:	250c      	movcc	r5, #12
 800901a:	2d00      	cmp	r5, #0
 800901c:	4606      	mov	r6, r0
 800901e:	db01      	blt.n	8009024 <_malloc_r+0x1c>
 8009020:	42a9      	cmp	r1, r5
 8009022:	d904      	bls.n	800902e <_malloc_r+0x26>
 8009024:	230c      	movs	r3, #12
 8009026:	6033      	str	r3, [r6, #0]
 8009028:	2000      	movs	r0, #0
 800902a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009104 <_malloc_r+0xfc>
 8009032:	f000 f869 	bl	8009108 <__malloc_lock>
 8009036:	f8d8 3000 	ldr.w	r3, [r8]
 800903a:	461c      	mov	r4, r3
 800903c:	bb44      	cbnz	r4, 8009090 <_malloc_r+0x88>
 800903e:	4629      	mov	r1, r5
 8009040:	4630      	mov	r0, r6
 8009042:	f7ff ffbf 	bl	8008fc4 <sbrk_aligned>
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	4604      	mov	r4, r0
 800904a:	d158      	bne.n	80090fe <_malloc_r+0xf6>
 800904c:	f8d8 4000 	ldr.w	r4, [r8]
 8009050:	4627      	mov	r7, r4
 8009052:	2f00      	cmp	r7, #0
 8009054:	d143      	bne.n	80090de <_malloc_r+0xd6>
 8009056:	2c00      	cmp	r4, #0
 8009058:	d04b      	beq.n	80090f2 <_malloc_r+0xea>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	4639      	mov	r1, r7
 800905e:	4630      	mov	r0, r6
 8009060:	eb04 0903 	add.w	r9, r4, r3
 8009064:	f000 fe78 	bl	8009d58 <_sbrk_r>
 8009068:	4581      	cmp	r9, r0
 800906a:	d142      	bne.n	80090f2 <_malloc_r+0xea>
 800906c:	6821      	ldr	r1, [r4, #0]
 800906e:	1a6d      	subs	r5, r5, r1
 8009070:	4629      	mov	r1, r5
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ffa6 	bl	8008fc4 <sbrk_aligned>
 8009078:	3001      	adds	r0, #1
 800907a:	d03a      	beq.n	80090f2 <_malloc_r+0xea>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	442b      	add	r3, r5
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	f8d8 3000 	ldr.w	r3, [r8]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	bb62      	cbnz	r2, 80090e4 <_malloc_r+0xdc>
 800908a:	f8c8 7000 	str.w	r7, [r8]
 800908e:	e00f      	b.n	80090b0 <_malloc_r+0xa8>
 8009090:	6822      	ldr	r2, [r4, #0]
 8009092:	1b52      	subs	r2, r2, r5
 8009094:	d420      	bmi.n	80090d8 <_malloc_r+0xd0>
 8009096:	2a0b      	cmp	r2, #11
 8009098:	d917      	bls.n	80090ca <_malloc_r+0xc2>
 800909a:	1961      	adds	r1, r4, r5
 800909c:	42a3      	cmp	r3, r4
 800909e:	6025      	str	r5, [r4, #0]
 80090a0:	bf18      	it	ne
 80090a2:	6059      	strne	r1, [r3, #4]
 80090a4:	6863      	ldr	r3, [r4, #4]
 80090a6:	bf08      	it	eq
 80090a8:	f8c8 1000 	streq.w	r1, [r8]
 80090ac:	5162      	str	r2, [r4, r5]
 80090ae:	604b      	str	r3, [r1, #4]
 80090b0:	4630      	mov	r0, r6
 80090b2:	f000 f82f 	bl	8009114 <__malloc_unlock>
 80090b6:	f104 000b 	add.w	r0, r4, #11
 80090ba:	1d23      	adds	r3, r4, #4
 80090bc:	f020 0007 	bic.w	r0, r0, #7
 80090c0:	1ac2      	subs	r2, r0, r3
 80090c2:	bf1c      	itt	ne
 80090c4:	1a1b      	subne	r3, r3, r0
 80090c6:	50a3      	strne	r3, [r4, r2]
 80090c8:	e7af      	b.n	800902a <_malloc_r+0x22>
 80090ca:	6862      	ldr	r2, [r4, #4]
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	bf0c      	ite	eq
 80090d0:	f8c8 2000 	streq.w	r2, [r8]
 80090d4:	605a      	strne	r2, [r3, #4]
 80090d6:	e7eb      	b.n	80090b0 <_malloc_r+0xa8>
 80090d8:	4623      	mov	r3, r4
 80090da:	6864      	ldr	r4, [r4, #4]
 80090dc:	e7ae      	b.n	800903c <_malloc_r+0x34>
 80090de:	463c      	mov	r4, r7
 80090e0:	687f      	ldr	r7, [r7, #4]
 80090e2:	e7b6      	b.n	8009052 <_malloc_r+0x4a>
 80090e4:	461a      	mov	r2, r3
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	d1fb      	bne.n	80090e4 <_malloc_r+0xdc>
 80090ec:	2300      	movs	r3, #0
 80090ee:	6053      	str	r3, [r2, #4]
 80090f0:	e7de      	b.n	80090b0 <_malloc_r+0xa8>
 80090f2:	230c      	movs	r3, #12
 80090f4:	6033      	str	r3, [r6, #0]
 80090f6:	4630      	mov	r0, r6
 80090f8:	f000 f80c 	bl	8009114 <__malloc_unlock>
 80090fc:	e794      	b.n	8009028 <_malloc_r+0x20>
 80090fe:	6005      	str	r5, [r0, #0]
 8009100:	e7d6      	b.n	80090b0 <_malloc_r+0xa8>
 8009102:	bf00      	nop
 8009104:	20000644 	.word	0x20000644

08009108 <__malloc_lock>:
 8009108:	4801      	ldr	r0, [pc, #4]	@ (8009110 <__malloc_lock+0x8>)
 800910a:	f7ff b8ae 	b.w	800826a <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	2000063c 	.word	0x2000063c

08009114 <__malloc_unlock>:
 8009114:	4801      	ldr	r0, [pc, #4]	@ (800911c <__malloc_unlock+0x8>)
 8009116:	f7ff b8a9 	b.w	800826c <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	2000063c 	.word	0x2000063c

08009120 <_Balloc>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	69c6      	ldr	r6, [r0, #28]
 8009124:	4604      	mov	r4, r0
 8009126:	460d      	mov	r5, r1
 8009128:	b976      	cbnz	r6, 8009148 <_Balloc+0x28>
 800912a:	2010      	movs	r0, #16
 800912c:	f7ff ff42 	bl	8008fb4 <malloc>
 8009130:	4602      	mov	r2, r0
 8009132:	61e0      	str	r0, [r4, #28]
 8009134:	b920      	cbnz	r0, 8009140 <_Balloc+0x20>
 8009136:	4b18      	ldr	r3, [pc, #96]	@ (8009198 <_Balloc+0x78>)
 8009138:	4818      	ldr	r0, [pc, #96]	@ (800919c <_Balloc+0x7c>)
 800913a:	216b      	movs	r1, #107	@ 0x6b
 800913c:	f000 fe2a 	bl	8009d94 <__assert_func>
 8009140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009144:	6006      	str	r6, [r0, #0]
 8009146:	60c6      	str	r6, [r0, #12]
 8009148:	69e6      	ldr	r6, [r4, #28]
 800914a:	68f3      	ldr	r3, [r6, #12]
 800914c:	b183      	cbz	r3, 8009170 <_Balloc+0x50>
 800914e:	69e3      	ldr	r3, [r4, #28]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009156:	b9b8      	cbnz	r0, 8009188 <_Balloc+0x68>
 8009158:	2101      	movs	r1, #1
 800915a:	fa01 f605 	lsl.w	r6, r1, r5
 800915e:	1d72      	adds	r2, r6, #5
 8009160:	0092      	lsls	r2, r2, #2
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fe34 	bl	8009dd0 <_calloc_r>
 8009168:	b160      	cbz	r0, 8009184 <_Balloc+0x64>
 800916a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800916e:	e00e      	b.n	800918e <_Balloc+0x6e>
 8009170:	2221      	movs	r2, #33	@ 0x21
 8009172:	2104      	movs	r1, #4
 8009174:	4620      	mov	r0, r4
 8009176:	f000 fe2b 	bl	8009dd0 <_calloc_r>
 800917a:	69e3      	ldr	r3, [r4, #28]
 800917c:	60f0      	str	r0, [r6, #12]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e4      	bne.n	800914e <_Balloc+0x2e>
 8009184:	2000      	movs	r0, #0
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	6802      	ldr	r2, [r0, #0]
 800918a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800918e:	2300      	movs	r3, #0
 8009190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009194:	e7f7      	b.n	8009186 <_Balloc+0x66>
 8009196:	bf00      	nop
 8009198:	0800a8d5 	.word	0x0800a8d5
 800919c:	0800a955 	.word	0x0800a955

080091a0 <_Bfree>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	69c6      	ldr	r6, [r0, #28]
 80091a4:	4605      	mov	r5, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	b976      	cbnz	r6, 80091c8 <_Bfree+0x28>
 80091aa:	2010      	movs	r0, #16
 80091ac:	f7ff ff02 	bl	8008fb4 <malloc>
 80091b0:	4602      	mov	r2, r0
 80091b2:	61e8      	str	r0, [r5, #28]
 80091b4:	b920      	cbnz	r0, 80091c0 <_Bfree+0x20>
 80091b6:	4b09      	ldr	r3, [pc, #36]	@ (80091dc <_Bfree+0x3c>)
 80091b8:	4809      	ldr	r0, [pc, #36]	@ (80091e0 <_Bfree+0x40>)
 80091ba:	218f      	movs	r1, #143	@ 0x8f
 80091bc:	f000 fdea 	bl	8009d94 <__assert_func>
 80091c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091c4:	6006      	str	r6, [r0, #0]
 80091c6:	60c6      	str	r6, [r0, #12]
 80091c8:	b13c      	cbz	r4, 80091da <_Bfree+0x3a>
 80091ca:	69eb      	ldr	r3, [r5, #28]
 80091cc:	6862      	ldr	r2, [r4, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091d4:	6021      	str	r1, [r4, #0]
 80091d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	0800a8d5 	.word	0x0800a8d5
 80091e0:	0800a955 	.word	0x0800a955

080091e4 <__multadd>:
 80091e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e8:	690d      	ldr	r5, [r1, #16]
 80091ea:	4607      	mov	r7, r0
 80091ec:	460c      	mov	r4, r1
 80091ee:	461e      	mov	r6, r3
 80091f0:	f101 0c14 	add.w	ip, r1, #20
 80091f4:	2000      	movs	r0, #0
 80091f6:	f8dc 3000 	ldr.w	r3, [ip]
 80091fa:	b299      	uxth	r1, r3
 80091fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009200:	0c1e      	lsrs	r6, r3, #16
 8009202:	0c0b      	lsrs	r3, r1, #16
 8009204:	fb02 3306 	mla	r3, r2, r6, r3
 8009208:	b289      	uxth	r1, r1
 800920a:	3001      	adds	r0, #1
 800920c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009210:	4285      	cmp	r5, r0
 8009212:	f84c 1b04 	str.w	r1, [ip], #4
 8009216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800921a:	dcec      	bgt.n	80091f6 <__multadd+0x12>
 800921c:	b30e      	cbz	r6, 8009262 <__multadd+0x7e>
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	42ab      	cmp	r3, r5
 8009222:	dc19      	bgt.n	8009258 <__multadd+0x74>
 8009224:	6861      	ldr	r1, [r4, #4]
 8009226:	4638      	mov	r0, r7
 8009228:	3101      	adds	r1, #1
 800922a:	f7ff ff79 	bl	8009120 <_Balloc>
 800922e:	4680      	mov	r8, r0
 8009230:	b928      	cbnz	r0, 800923e <__multadd+0x5a>
 8009232:	4602      	mov	r2, r0
 8009234:	4b0c      	ldr	r3, [pc, #48]	@ (8009268 <__multadd+0x84>)
 8009236:	480d      	ldr	r0, [pc, #52]	@ (800926c <__multadd+0x88>)
 8009238:	21ba      	movs	r1, #186	@ 0xba
 800923a:	f000 fdab 	bl	8009d94 <__assert_func>
 800923e:	6922      	ldr	r2, [r4, #16]
 8009240:	3202      	adds	r2, #2
 8009242:	f104 010c 	add.w	r1, r4, #12
 8009246:	0092      	lsls	r2, r2, #2
 8009248:	300c      	adds	r0, #12
 800924a:	f000 fd95 	bl	8009d78 <memcpy>
 800924e:	4621      	mov	r1, r4
 8009250:	4638      	mov	r0, r7
 8009252:	f7ff ffa5 	bl	80091a0 <_Bfree>
 8009256:	4644      	mov	r4, r8
 8009258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800925c:	3501      	adds	r5, #1
 800925e:	615e      	str	r6, [r3, #20]
 8009260:	6125      	str	r5, [r4, #16]
 8009262:	4620      	mov	r0, r4
 8009264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009268:	0800a944 	.word	0x0800a944
 800926c:	0800a955 	.word	0x0800a955

08009270 <__hi0bits>:
 8009270:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009274:	4603      	mov	r3, r0
 8009276:	bf36      	itet	cc
 8009278:	0403      	lslcc	r3, r0, #16
 800927a:	2000      	movcs	r0, #0
 800927c:	2010      	movcc	r0, #16
 800927e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009282:	bf3c      	itt	cc
 8009284:	021b      	lslcc	r3, r3, #8
 8009286:	3008      	addcc	r0, #8
 8009288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800928c:	bf3c      	itt	cc
 800928e:	011b      	lslcc	r3, r3, #4
 8009290:	3004      	addcc	r0, #4
 8009292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009296:	bf3c      	itt	cc
 8009298:	009b      	lslcc	r3, r3, #2
 800929a:	3002      	addcc	r0, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	db05      	blt.n	80092ac <__hi0bits+0x3c>
 80092a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092a4:	f100 0001 	add.w	r0, r0, #1
 80092a8:	bf08      	it	eq
 80092aa:	2020      	moveq	r0, #32
 80092ac:	4770      	bx	lr

080092ae <__lo0bits>:
 80092ae:	6803      	ldr	r3, [r0, #0]
 80092b0:	4602      	mov	r2, r0
 80092b2:	f013 0007 	ands.w	r0, r3, #7
 80092b6:	d00b      	beq.n	80092d0 <__lo0bits+0x22>
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d421      	bmi.n	8009300 <__lo0bits+0x52>
 80092bc:	0798      	lsls	r0, r3, #30
 80092be:	bf49      	itett	mi
 80092c0:	085b      	lsrmi	r3, r3, #1
 80092c2:	089b      	lsrpl	r3, r3, #2
 80092c4:	2001      	movmi	r0, #1
 80092c6:	6013      	strmi	r3, [r2, #0]
 80092c8:	bf5c      	itt	pl
 80092ca:	6013      	strpl	r3, [r2, #0]
 80092cc:	2002      	movpl	r0, #2
 80092ce:	4770      	bx	lr
 80092d0:	b299      	uxth	r1, r3
 80092d2:	b909      	cbnz	r1, 80092d8 <__lo0bits+0x2a>
 80092d4:	0c1b      	lsrs	r3, r3, #16
 80092d6:	2010      	movs	r0, #16
 80092d8:	b2d9      	uxtb	r1, r3
 80092da:	b909      	cbnz	r1, 80092e0 <__lo0bits+0x32>
 80092dc:	3008      	adds	r0, #8
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	0719      	lsls	r1, r3, #28
 80092e2:	bf04      	itt	eq
 80092e4:	091b      	lsreq	r3, r3, #4
 80092e6:	3004      	addeq	r0, #4
 80092e8:	0799      	lsls	r1, r3, #30
 80092ea:	bf04      	itt	eq
 80092ec:	089b      	lsreq	r3, r3, #2
 80092ee:	3002      	addeq	r0, #2
 80092f0:	07d9      	lsls	r1, r3, #31
 80092f2:	d403      	bmi.n	80092fc <__lo0bits+0x4e>
 80092f4:	085b      	lsrs	r3, r3, #1
 80092f6:	f100 0001 	add.w	r0, r0, #1
 80092fa:	d003      	beq.n	8009304 <__lo0bits+0x56>
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	4770      	bx	lr
 8009300:	2000      	movs	r0, #0
 8009302:	4770      	bx	lr
 8009304:	2020      	movs	r0, #32
 8009306:	4770      	bx	lr

08009308 <__i2b>:
 8009308:	b510      	push	{r4, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	2101      	movs	r1, #1
 800930e:	f7ff ff07 	bl	8009120 <_Balloc>
 8009312:	4602      	mov	r2, r0
 8009314:	b928      	cbnz	r0, 8009322 <__i2b+0x1a>
 8009316:	4b05      	ldr	r3, [pc, #20]	@ (800932c <__i2b+0x24>)
 8009318:	4805      	ldr	r0, [pc, #20]	@ (8009330 <__i2b+0x28>)
 800931a:	f240 1145 	movw	r1, #325	@ 0x145
 800931e:	f000 fd39 	bl	8009d94 <__assert_func>
 8009322:	2301      	movs	r3, #1
 8009324:	6144      	str	r4, [r0, #20]
 8009326:	6103      	str	r3, [r0, #16]
 8009328:	bd10      	pop	{r4, pc}
 800932a:	bf00      	nop
 800932c:	0800a944 	.word	0x0800a944
 8009330:	0800a955 	.word	0x0800a955

08009334 <__multiply>:
 8009334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009338:	4617      	mov	r7, r2
 800933a:	690a      	ldr	r2, [r1, #16]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	429a      	cmp	r2, r3
 8009340:	bfa8      	it	ge
 8009342:	463b      	movge	r3, r7
 8009344:	4689      	mov	r9, r1
 8009346:	bfa4      	itt	ge
 8009348:	460f      	movge	r7, r1
 800934a:	4699      	movge	r9, r3
 800934c:	693d      	ldr	r5, [r7, #16]
 800934e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	eb05 060a 	add.w	r6, r5, sl
 800935a:	42b3      	cmp	r3, r6
 800935c:	b085      	sub	sp, #20
 800935e:	bfb8      	it	lt
 8009360:	3101      	addlt	r1, #1
 8009362:	f7ff fedd 	bl	8009120 <_Balloc>
 8009366:	b930      	cbnz	r0, 8009376 <__multiply+0x42>
 8009368:	4602      	mov	r2, r0
 800936a:	4b41      	ldr	r3, [pc, #260]	@ (8009470 <__multiply+0x13c>)
 800936c:	4841      	ldr	r0, [pc, #260]	@ (8009474 <__multiply+0x140>)
 800936e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009372:	f000 fd0f 	bl	8009d94 <__assert_func>
 8009376:	f100 0414 	add.w	r4, r0, #20
 800937a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800937e:	4623      	mov	r3, r4
 8009380:	2200      	movs	r2, #0
 8009382:	4573      	cmp	r3, lr
 8009384:	d320      	bcc.n	80093c8 <__multiply+0x94>
 8009386:	f107 0814 	add.w	r8, r7, #20
 800938a:	f109 0114 	add.w	r1, r9, #20
 800938e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009392:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	1beb      	subs	r3, r5, r7
 800939a:	3b15      	subs	r3, #21
 800939c:	f023 0303 	bic.w	r3, r3, #3
 80093a0:	3304      	adds	r3, #4
 80093a2:	3715      	adds	r7, #21
 80093a4:	42bd      	cmp	r5, r7
 80093a6:	bf38      	it	cc
 80093a8:	2304      	movcc	r3, #4
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	9b02      	ldr	r3, [sp, #8]
 80093ae:	9103      	str	r1, [sp, #12]
 80093b0:	428b      	cmp	r3, r1
 80093b2:	d80c      	bhi.n	80093ce <__multiply+0x9a>
 80093b4:	2e00      	cmp	r6, #0
 80093b6:	dd03      	ble.n	80093c0 <__multiply+0x8c>
 80093b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d055      	beq.n	800946c <__multiply+0x138>
 80093c0:	6106      	str	r6, [r0, #16]
 80093c2:	b005      	add	sp, #20
 80093c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c8:	f843 2b04 	str.w	r2, [r3], #4
 80093cc:	e7d9      	b.n	8009382 <__multiply+0x4e>
 80093ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80093d2:	f1ba 0f00 	cmp.w	sl, #0
 80093d6:	d01f      	beq.n	8009418 <__multiply+0xe4>
 80093d8:	46c4      	mov	ip, r8
 80093da:	46a1      	mov	r9, r4
 80093dc:	2700      	movs	r7, #0
 80093de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093e2:	f8d9 3000 	ldr.w	r3, [r9]
 80093e6:	fa1f fb82 	uxth.w	fp, r2
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80093f0:	443b      	add	r3, r7
 80093f2:	f8d9 7000 	ldr.w	r7, [r9]
 80093f6:	0c12      	lsrs	r2, r2, #16
 80093f8:	0c3f      	lsrs	r7, r7, #16
 80093fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80093fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009402:	b29b      	uxth	r3, r3
 8009404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009408:	4565      	cmp	r5, ip
 800940a:	f849 3b04 	str.w	r3, [r9], #4
 800940e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009412:	d8e4      	bhi.n	80093de <__multiply+0xaa>
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	50e7      	str	r7, [r4, r3]
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800941e:	3104      	adds	r1, #4
 8009420:	f1b9 0f00 	cmp.w	r9, #0
 8009424:	d020      	beq.n	8009468 <__multiply+0x134>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	4647      	mov	r7, r8
 800942a:	46a4      	mov	ip, r4
 800942c:	f04f 0a00 	mov.w	sl, #0
 8009430:	f8b7 b000 	ldrh.w	fp, [r7]
 8009434:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009438:	fb09 220b 	mla	r2, r9, fp, r2
 800943c:	4452      	add	r2, sl
 800943e:	b29b      	uxth	r3, r3
 8009440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009444:	f84c 3b04 	str.w	r3, [ip], #4
 8009448:	f857 3b04 	ldr.w	r3, [r7], #4
 800944c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009450:	f8bc 3000 	ldrh.w	r3, [ip]
 8009454:	fb09 330a 	mla	r3, r9, sl, r3
 8009458:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800945c:	42bd      	cmp	r5, r7
 800945e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009462:	d8e5      	bhi.n	8009430 <__multiply+0xfc>
 8009464:	9a01      	ldr	r2, [sp, #4]
 8009466:	50a3      	str	r3, [r4, r2]
 8009468:	3404      	adds	r4, #4
 800946a:	e79f      	b.n	80093ac <__multiply+0x78>
 800946c:	3e01      	subs	r6, #1
 800946e:	e7a1      	b.n	80093b4 <__multiply+0x80>
 8009470:	0800a944 	.word	0x0800a944
 8009474:	0800a955 	.word	0x0800a955

08009478 <__pow5mult>:
 8009478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947c:	4615      	mov	r5, r2
 800947e:	f012 0203 	ands.w	r2, r2, #3
 8009482:	4607      	mov	r7, r0
 8009484:	460e      	mov	r6, r1
 8009486:	d007      	beq.n	8009498 <__pow5mult+0x20>
 8009488:	4c25      	ldr	r4, [pc, #148]	@ (8009520 <__pow5mult+0xa8>)
 800948a:	3a01      	subs	r2, #1
 800948c:	2300      	movs	r3, #0
 800948e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009492:	f7ff fea7 	bl	80091e4 <__multadd>
 8009496:	4606      	mov	r6, r0
 8009498:	10ad      	asrs	r5, r5, #2
 800949a:	d03d      	beq.n	8009518 <__pow5mult+0xa0>
 800949c:	69fc      	ldr	r4, [r7, #28]
 800949e:	b97c      	cbnz	r4, 80094c0 <__pow5mult+0x48>
 80094a0:	2010      	movs	r0, #16
 80094a2:	f7ff fd87 	bl	8008fb4 <malloc>
 80094a6:	4602      	mov	r2, r0
 80094a8:	61f8      	str	r0, [r7, #28]
 80094aa:	b928      	cbnz	r0, 80094b8 <__pow5mult+0x40>
 80094ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009524 <__pow5mult+0xac>)
 80094ae:	481e      	ldr	r0, [pc, #120]	@ (8009528 <__pow5mult+0xb0>)
 80094b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094b4:	f000 fc6e 	bl	8009d94 <__assert_func>
 80094b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094bc:	6004      	str	r4, [r0, #0]
 80094be:	60c4      	str	r4, [r0, #12]
 80094c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094c8:	b94c      	cbnz	r4, 80094de <__pow5mult+0x66>
 80094ca:	f240 2171 	movw	r1, #625	@ 0x271
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7ff ff1a 	bl	8009308 <__i2b>
 80094d4:	2300      	movs	r3, #0
 80094d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094da:	4604      	mov	r4, r0
 80094dc:	6003      	str	r3, [r0, #0]
 80094de:	f04f 0900 	mov.w	r9, #0
 80094e2:	07eb      	lsls	r3, r5, #31
 80094e4:	d50a      	bpl.n	80094fc <__pow5mult+0x84>
 80094e6:	4631      	mov	r1, r6
 80094e8:	4622      	mov	r2, r4
 80094ea:	4638      	mov	r0, r7
 80094ec:	f7ff ff22 	bl	8009334 <__multiply>
 80094f0:	4631      	mov	r1, r6
 80094f2:	4680      	mov	r8, r0
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff fe53 	bl	80091a0 <_Bfree>
 80094fa:	4646      	mov	r6, r8
 80094fc:	106d      	asrs	r5, r5, #1
 80094fe:	d00b      	beq.n	8009518 <__pow5mult+0xa0>
 8009500:	6820      	ldr	r0, [r4, #0]
 8009502:	b938      	cbnz	r0, 8009514 <__pow5mult+0x9c>
 8009504:	4622      	mov	r2, r4
 8009506:	4621      	mov	r1, r4
 8009508:	4638      	mov	r0, r7
 800950a:	f7ff ff13 	bl	8009334 <__multiply>
 800950e:	6020      	str	r0, [r4, #0]
 8009510:	f8c0 9000 	str.w	r9, [r0]
 8009514:	4604      	mov	r4, r0
 8009516:	e7e4      	b.n	80094e2 <__pow5mult+0x6a>
 8009518:	4630      	mov	r0, r6
 800951a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800951e:	bf00      	nop
 8009520:	0800aa08 	.word	0x0800aa08
 8009524:	0800a8d5 	.word	0x0800a8d5
 8009528:	0800a955 	.word	0x0800a955

0800952c <__lshift>:
 800952c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009530:	460c      	mov	r4, r1
 8009532:	6849      	ldr	r1, [r1, #4]
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800953a:	68a3      	ldr	r3, [r4, #8]
 800953c:	4607      	mov	r7, r0
 800953e:	4691      	mov	r9, r2
 8009540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009544:	f108 0601 	add.w	r6, r8, #1
 8009548:	42b3      	cmp	r3, r6
 800954a:	db0b      	blt.n	8009564 <__lshift+0x38>
 800954c:	4638      	mov	r0, r7
 800954e:	f7ff fde7 	bl	8009120 <_Balloc>
 8009552:	4605      	mov	r5, r0
 8009554:	b948      	cbnz	r0, 800956a <__lshift+0x3e>
 8009556:	4602      	mov	r2, r0
 8009558:	4b28      	ldr	r3, [pc, #160]	@ (80095fc <__lshift+0xd0>)
 800955a:	4829      	ldr	r0, [pc, #164]	@ (8009600 <__lshift+0xd4>)
 800955c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009560:	f000 fc18 	bl	8009d94 <__assert_func>
 8009564:	3101      	adds	r1, #1
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	e7ee      	b.n	8009548 <__lshift+0x1c>
 800956a:	2300      	movs	r3, #0
 800956c:	f100 0114 	add.w	r1, r0, #20
 8009570:	f100 0210 	add.w	r2, r0, #16
 8009574:	4618      	mov	r0, r3
 8009576:	4553      	cmp	r3, sl
 8009578:	db33      	blt.n	80095e2 <__lshift+0xb6>
 800957a:	6920      	ldr	r0, [r4, #16]
 800957c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009580:	f104 0314 	add.w	r3, r4, #20
 8009584:	f019 091f 	ands.w	r9, r9, #31
 8009588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800958c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009590:	d02b      	beq.n	80095ea <__lshift+0xbe>
 8009592:	f1c9 0e20 	rsb	lr, r9, #32
 8009596:	468a      	mov	sl, r1
 8009598:	2200      	movs	r2, #0
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	fa00 f009 	lsl.w	r0, r0, r9
 80095a0:	4310      	orrs	r0, r2
 80095a2:	f84a 0b04 	str.w	r0, [sl], #4
 80095a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095aa:	459c      	cmp	ip, r3
 80095ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80095b0:	d8f3      	bhi.n	800959a <__lshift+0x6e>
 80095b2:	ebac 0304 	sub.w	r3, ip, r4
 80095b6:	3b15      	subs	r3, #21
 80095b8:	f023 0303 	bic.w	r3, r3, #3
 80095bc:	3304      	adds	r3, #4
 80095be:	f104 0015 	add.w	r0, r4, #21
 80095c2:	4560      	cmp	r0, ip
 80095c4:	bf88      	it	hi
 80095c6:	2304      	movhi	r3, #4
 80095c8:	50ca      	str	r2, [r1, r3]
 80095ca:	b10a      	cbz	r2, 80095d0 <__lshift+0xa4>
 80095cc:	f108 0602 	add.w	r6, r8, #2
 80095d0:	3e01      	subs	r6, #1
 80095d2:	4638      	mov	r0, r7
 80095d4:	612e      	str	r6, [r5, #16]
 80095d6:	4621      	mov	r1, r4
 80095d8:	f7ff fde2 	bl	80091a0 <_Bfree>
 80095dc:	4628      	mov	r0, r5
 80095de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095e6:	3301      	adds	r3, #1
 80095e8:	e7c5      	b.n	8009576 <__lshift+0x4a>
 80095ea:	3904      	subs	r1, #4
 80095ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80095f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095f4:	459c      	cmp	ip, r3
 80095f6:	d8f9      	bhi.n	80095ec <__lshift+0xc0>
 80095f8:	e7ea      	b.n	80095d0 <__lshift+0xa4>
 80095fa:	bf00      	nop
 80095fc:	0800a944 	.word	0x0800a944
 8009600:	0800a955 	.word	0x0800a955

08009604 <__mcmp>:
 8009604:	690a      	ldr	r2, [r1, #16]
 8009606:	4603      	mov	r3, r0
 8009608:	6900      	ldr	r0, [r0, #16]
 800960a:	1a80      	subs	r0, r0, r2
 800960c:	b530      	push	{r4, r5, lr}
 800960e:	d10e      	bne.n	800962e <__mcmp+0x2a>
 8009610:	3314      	adds	r3, #20
 8009612:	3114      	adds	r1, #20
 8009614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800961c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009624:	4295      	cmp	r5, r2
 8009626:	d003      	beq.n	8009630 <__mcmp+0x2c>
 8009628:	d205      	bcs.n	8009636 <__mcmp+0x32>
 800962a:	f04f 30ff 	mov.w	r0, #4294967295
 800962e:	bd30      	pop	{r4, r5, pc}
 8009630:	42a3      	cmp	r3, r4
 8009632:	d3f3      	bcc.n	800961c <__mcmp+0x18>
 8009634:	e7fb      	b.n	800962e <__mcmp+0x2a>
 8009636:	2001      	movs	r0, #1
 8009638:	e7f9      	b.n	800962e <__mcmp+0x2a>
	...

0800963c <__mdiff>:
 800963c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	4689      	mov	r9, r1
 8009642:	4606      	mov	r6, r0
 8009644:	4611      	mov	r1, r2
 8009646:	4648      	mov	r0, r9
 8009648:	4614      	mov	r4, r2
 800964a:	f7ff ffdb 	bl	8009604 <__mcmp>
 800964e:	1e05      	subs	r5, r0, #0
 8009650:	d112      	bne.n	8009678 <__mdiff+0x3c>
 8009652:	4629      	mov	r1, r5
 8009654:	4630      	mov	r0, r6
 8009656:	f7ff fd63 	bl	8009120 <_Balloc>
 800965a:	4602      	mov	r2, r0
 800965c:	b928      	cbnz	r0, 800966a <__mdiff+0x2e>
 800965e:	4b3f      	ldr	r3, [pc, #252]	@ (800975c <__mdiff+0x120>)
 8009660:	f240 2137 	movw	r1, #567	@ 0x237
 8009664:	483e      	ldr	r0, [pc, #248]	@ (8009760 <__mdiff+0x124>)
 8009666:	f000 fb95 	bl	8009d94 <__assert_func>
 800966a:	2301      	movs	r3, #1
 800966c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009670:	4610      	mov	r0, r2
 8009672:	b003      	add	sp, #12
 8009674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009678:	bfbc      	itt	lt
 800967a:	464b      	movlt	r3, r9
 800967c:	46a1      	movlt	r9, r4
 800967e:	4630      	mov	r0, r6
 8009680:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009684:	bfba      	itte	lt
 8009686:	461c      	movlt	r4, r3
 8009688:	2501      	movlt	r5, #1
 800968a:	2500      	movge	r5, #0
 800968c:	f7ff fd48 	bl	8009120 <_Balloc>
 8009690:	4602      	mov	r2, r0
 8009692:	b918      	cbnz	r0, 800969c <__mdiff+0x60>
 8009694:	4b31      	ldr	r3, [pc, #196]	@ (800975c <__mdiff+0x120>)
 8009696:	f240 2145 	movw	r1, #581	@ 0x245
 800969a:	e7e3      	b.n	8009664 <__mdiff+0x28>
 800969c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096a0:	6926      	ldr	r6, [r4, #16]
 80096a2:	60c5      	str	r5, [r0, #12]
 80096a4:	f109 0310 	add.w	r3, r9, #16
 80096a8:	f109 0514 	add.w	r5, r9, #20
 80096ac:	f104 0e14 	add.w	lr, r4, #20
 80096b0:	f100 0b14 	add.w	fp, r0, #20
 80096b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	46d9      	mov	r9, fp
 80096c0:	f04f 0c00 	mov.w	ip, #0
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	fa1f f38a 	uxth.w	r3, sl
 80096d4:	4619      	mov	r1, r3
 80096d6:	b283      	uxth	r3, r0
 80096d8:	1acb      	subs	r3, r1, r3
 80096da:	0c00      	lsrs	r0, r0, #16
 80096dc:	4463      	add	r3, ip
 80096de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096ec:	4576      	cmp	r6, lr
 80096ee:	f849 3b04 	str.w	r3, [r9], #4
 80096f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096f6:	d8e5      	bhi.n	80096c4 <__mdiff+0x88>
 80096f8:	1b33      	subs	r3, r6, r4
 80096fa:	3b15      	subs	r3, #21
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	3415      	adds	r4, #21
 8009702:	3304      	adds	r3, #4
 8009704:	42a6      	cmp	r6, r4
 8009706:	bf38      	it	cc
 8009708:	2304      	movcc	r3, #4
 800970a:	441d      	add	r5, r3
 800970c:	445b      	add	r3, fp
 800970e:	461e      	mov	r6, r3
 8009710:	462c      	mov	r4, r5
 8009712:	4544      	cmp	r4, r8
 8009714:	d30e      	bcc.n	8009734 <__mdiff+0xf8>
 8009716:	f108 0103 	add.w	r1, r8, #3
 800971a:	1b49      	subs	r1, r1, r5
 800971c:	f021 0103 	bic.w	r1, r1, #3
 8009720:	3d03      	subs	r5, #3
 8009722:	45a8      	cmp	r8, r5
 8009724:	bf38      	it	cc
 8009726:	2100      	movcc	r1, #0
 8009728:	440b      	add	r3, r1
 800972a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800972e:	b191      	cbz	r1, 8009756 <__mdiff+0x11a>
 8009730:	6117      	str	r7, [r2, #16]
 8009732:	e79d      	b.n	8009670 <__mdiff+0x34>
 8009734:	f854 1b04 	ldr.w	r1, [r4], #4
 8009738:	46e6      	mov	lr, ip
 800973a:	0c08      	lsrs	r0, r1, #16
 800973c:	fa1c fc81 	uxtah	ip, ip, r1
 8009740:	4471      	add	r1, lr
 8009742:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009746:	b289      	uxth	r1, r1
 8009748:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800974c:	f846 1b04 	str.w	r1, [r6], #4
 8009750:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009754:	e7dd      	b.n	8009712 <__mdiff+0xd6>
 8009756:	3f01      	subs	r7, #1
 8009758:	e7e7      	b.n	800972a <__mdiff+0xee>
 800975a:	bf00      	nop
 800975c:	0800a944 	.word	0x0800a944
 8009760:	0800a955 	.word	0x0800a955

08009764 <__d2b>:
 8009764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009768:	460f      	mov	r7, r1
 800976a:	2101      	movs	r1, #1
 800976c:	ec59 8b10 	vmov	r8, r9, d0
 8009770:	4616      	mov	r6, r2
 8009772:	f7ff fcd5 	bl	8009120 <_Balloc>
 8009776:	4604      	mov	r4, r0
 8009778:	b930      	cbnz	r0, 8009788 <__d2b+0x24>
 800977a:	4602      	mov	r2, r0
 800977c:	4b23      	ldr	r3, [pc, #140]	@ (800980c <__d2b+0xa8>)
 800977e:	4824      	ldr	r0, [pc, #144]	@ (8009810 <__d2b+0xac>)
 8009780:	f240 310f 	movw	r1, #783	@ 0x30f
 8009784:	f000 fb06 	bl	8009d94 <__assert_func>
 8009788:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800978c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009790:	b10d      	cbz	r5, 8009796 <__d2b+0x32>
 8009792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	f1b8 0300 	subs.w	r3, r8, #0
 800979c:	d023      	beq.n	80097e6 <__d2b+0x82>
 800979e:	4668      	mov	r0, sp
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	f7ff fd84 	bl	80092ae <__lo0bits>
 80097a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097aa:	b1d0      	cbz	r0, 80097e2 <__d2b+0x7e>
 80097ac:	f1c0 0320 	rsb	r3, r0, #32
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	430b      	orrs	r3, r1
 80097b6:	40c2      	lsrs	r2, r0
 80097b8:	6163      	str	r3, [r4, #20]
 80097ba:	9201      	str	r2, [sp, #4]
 80097bc:	9b01      	ldr	r3, [sp, #4]
 80097be:	61a3      	str	r3, [r4, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	bf0c      	ite	eq
 80097c4:	2201      	moveq	r2, #1
 80097c6:	2202      	movne	r2, #2
 80097c8:	6122      	str	r2, [r4, #16]
 80097ca:	b1a5      	cbz	r5, 80097f6 <__d2b+0x92>
 80097cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097d0:	4405      	add	r5, r0
 80097d2:	603d      	str	r5, [r7, #0]
 80097d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097d8:	6030      	str	r0, [r6, #0]
 80097da:	4620      	mov	r0, r4
 80097dc:	b003      	add	sp, #12
 80097de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097e2:	6161      	str	r1, [r4, #20]
 80097e4:	e7ea      	b.n	80097bc <__d2b+0x58>
 80097e6:	a801      	add	r0, sp, #4
 80097e8:	f7ff fd61 	bl	80092ae <__lo0bits>
 80097ec:	9b01      	ldr	r3, [sp, #4]
 80097ee:	6163      	str	r3, [r4, #20]
 80097f0:	3020      	adds	r0, #32
 80097f2:	2201      	movs	r2, #1
 80097f4:	e7e8      	b.n	80097c8 <__d2b+0x64>
 80097f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097fe:	6038      	str	r0, [r7, #0]
 8009800:	6918      	ldr	r0, [r3, #16]
 8009802:	f7ff fd35 	bl	8009270 <__hi0bits>
 8009806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800980a:	e7e5      	b.n	80097d8 <__d2b+0x74>
 800980c:	0800a944 	.word	0x0800a944
 8009810:	0800a955 	.word	0x0800a955

08009814 <__ssputs_r>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	688e      	ldr	r6, [r1, #8]
 800981a:	461f      	mov	r7, r3
 800981c:	42be      	cmp	r6, r7
 800981e:	680b      	ldr	r3, [r1, #0]
 8009820:	4682      	mov	sl, r0
 8009822:	460c      	mov	r4, r1
 8009824:	4690      	mov	r8, r2
 8009826:	d82d      	bhi.n	8009884 <__ssputs_r+0x70>
 8009828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800982c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009830:	d026      	beq.n	8009880 <__ssputs_r+0x6c>
 8009832:	6965      	ldr	r5, [r4, #20]
 8009834:	6909      	ldr	r1, [r1, #16]
 8009836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800983a:	eba3 0901 	sub.w	r9, r3, r1
 800983e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009842:	1c7b      	adds	r3, r7, #1
 8009844:	444b      	add	r3, r9
 8009846:	106d      	asrs	r5, r5, #1
 8009848:	429d      	cmp	r5, r3
 800984a:	bf38      	it	cc
 800984c:	461d      	movcc	r5, r3
 800984e:	0553      	lsls	r3, r2, #21
 8009850:	d527      	bpl.n	80098a2 <__ssputs_r+0x8e>
 8009852:	4629      	mov	r1, r5
 8009854:	f7ff fbd8 	bl	8009008 <_malloc_r>
 8009858:	4606      	mov	r6, r0
 800985a:	b360      	cbz	r0, 80098b6 <__ssputs_r+0xa2>
 800985c:	6921      	ldr	r1, [r4, #16]
 800985e:	464a      	mov	r2, r9
 8009860:	f000 fa8a 	bl	8009d78 <memcpy>
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800986a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	6126      	str	r6, [r4, #16]
 8009872:	6165      	str	r5, [r4, #20]
 8009874:	444e      	add	r6, r9
 8009876:	eba5 0509 	sub.w	r5, r5, r9
 800987a:	6026      	str	r6, [r4, #0]
 800987c:	60a5      	str	r5, [r4, #8]
 800987e:	463e      	mov	r6, r7
 8009880:	42be      	cmp	r6, r7
 8009882:	d900      	bls.n	8009886 <__ssputs_r+0x72>
 8009884:	463e      	mov	r6, r7
 8009886:	6820      	ldr	r0, [r4, #0]
 8009888:	4632      	mov	r2, r6
 800988a:	4641      	mov	r1, r8
 800988c:	f000 fa28 	bl	8009ce0 <memmove>
 8009890:	68a3      	ldr	r3, [r4, #8]
 8009892:	1b9b      	subs	r3, r3, r6
 8009894:	60a3      	str	r3, [r4, #8]
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	4433      	add	r3, r6
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	2000      	movs	r0, #0
 800989e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a2:	462a      	mov	r2, r5
 80098a4:	f000 faba 	bl	8009e1c <_realloc_r>
 80098a8:	4606      	mov	r6, r0
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d1e0      	bne.n	8009870 <__ssputs_r+0x5c>
 80098ae:	6921      	ldr	r1, [r4, #16]
 80098b0:	4650      	mov	r0, sl
 80098b2:	f7ff fb35 	bl	8008f20 <_free_r>
 80098b6:	230c      	movs	r3, #12
 80098b8:	f8ca 3000 	str.w	r3, [sl]
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c2:	81a3      	strh	r3, [r4, #12]
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	e7e9      	b.n	800989e <__ssputs_r+0x8a>
	...

080098cc <_svfiprintf_r>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4698      	mov	r8, r3
 80098d2:	898b      	ldrh	r3, [r1, #12]
 80098d4:	061b      	lsls	r3, r3, #24
 80098d6:	b09d      	sub	sp, #116	@ 0x74
 80098d8:	4607      	mov	r7, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	d510      	bpl.n	8009902 <_svfiprintf_r+0x36>
 80098e0:	690b      	ldr	r3, [r1, #16]
 80098e2:	b973      	cbnz	r3, 8009902 <_svfiprintf_r+0x36>
 80098e4:	2140      	movs	r1, #64	@ 0x40
 80098e6:	f7ff fb8f 	bl	8009008 <_malloc_r>
 80098ea:	6028      	str	r0, [r5, #0]
 80098ec:	6128      	str	r0, [r5, #16]
 80098ee:	b930      	cbnz	r0, 80098fe <_svfiprintf_r+0x32>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	b01d      	add	sp, #116	@ 0x74
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fe:	2340      	movs	r3, #64	@ 0x40
 8009900:	616b      	str	r3, [r5, #20]
 8009902:	2300      	movs	r3, #0
 8009904:	9309      	str	r3, [sp, #36]	@ 0x24
 8009906:	2320      	movs	r3, #32
 8009908:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800990c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009910:	2330      	movs	r3, #48	@ 0x30
 8009912:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ab0 <_svfiprintf_r+0x1e4>
 8009916:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800991a:	f04f 0901 	mov.w	r9, #1
 800991e:	4623      	mov	r3, r4
 8009920:	469a      	mov	sl, r3
 8009922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009926:	b10a      	cbz	r2, 800992c <_svfiprintf_r+0x60>
 8009928:	2a25      	cmp	r2, #37	@ 0x25
 800992a:	d1f9      	bne.n	8009920 <_svfiprintf_r+0x54>
 800992c:	ebba 0b04 	subs.w	fp, sl, r4
 8009930:	d00b      	beq.n	800994a <_svfiprintf_r+0x7e>
 8009932:	465b      	mov	r3, fp
 8009934:	4622      	mov	r2, r4
 8009936:	4629      	mov	r1, r5
 8009938:	4638      	mov	r0, r7
 800993a:	f7ff ff6b 	bl	8009814 <__ssputs_r>
 800993e:	3001      	adds	r0, #1
 8009940:	f000 80a7 	beq.w	8009a92 <_svfiprintf_r+0x1c6>
 8009944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009946:	445a      	add	r2, fp
 8009948:	9209      	str	r2, [sp, #36]	@ 0x24
 800994a:	f89a 3000 	ldrb.w	r3, [sl]
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 809f 	beq.w	8009a92 <_svfiprintf_r+0x1c6>
 8009954:	2300      	movs	r3, #0
 8009956:	f04f 32ff 	mov.w	r2, #4294967295
 800995a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800995e:	f10a 0a01 	add.w	sl, sl, #1
 8009962:	9304      	str	r3, [sp, #16]
 8009964:	9307      	str	r3, [sp, #28]
 8009966:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800996a:	931a      	str	r3, [sp, #104]	@ 0x68
 800996c:	4654      	mov	r4, sl
 800996e:	2205      	movs	r2, #5
 8009970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009974:	484e      	ldr	r0, [pc, #312]	@ (8009ab0 <_svfiprintf_r+0x1e4>)
 8009976:	f7f6 fc2b 	bl	80001d0 <memchr>
 800997a:	9a04      	ldr	r2, [sp, #16]
 800997c:	b9d8      	cbnz	r0, 80099b6 <_svfiprintf_r+0xea>
 800997e:	06d0      	lsls	r0, r2, #27
 8009980:	bf44      	itt	mi
 8009982:	2320      	movmi	r3, #32
 8009984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009988:	0711      	lsls	r1, r2, #28
 800998a:	bf44      	itt	mi
 800998c:	232b      	movmi	r3, #43	@ 0x2b
 800998e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009992:	f89a 3000 	ldrb.w	r3, [sl]
 8009996:	2b2a      	cmp	r3, #42	@ 0x2a
 8009998:	d015      	beq.n	80099c6 <_svfiprintf_r+0xfa>
 800999a:	9a07      	ldr	r2, [sp, #28]
 800999c:	4654      	mov	r4, sl
 800999e:	2000      	movs	r0, #0
 80099a0:	f04f 0c0a 	mov.w	ip, #10
 80099a4:	4621      	mov	r1, r4
 80099a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099aa:	3b30      	subs	r3, #48	@ 0x30
 80099ac:	2b09      	cmp	r3, #9
 80099ae:	d94b      	bls.n	8009a48 <_svfiprintf_r+0x17c>
 80099b0:	b1b0      	cbz	r0, 80099e0 <_svfiprintf_r+0x114>
 80099b2:	9207      	str	r2, [sp, #28]
 80099b4:	e014      	b.n	80099e0 <_svfiprintf_r+0x114>
 80099b6:	eba0 0308 	sub.w	r3, r0, r8
 80099ba:	fa09 f303 	lsl.w	r3, r9, r3
 80099be:	4313      	orrs	r3, r2
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	46a2      	mov	sl, r4
 80099c4:	e7d2      	b.n	800996c <_svfiprintf_r+0xa0>
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	1d19      	adds	r1, r3, #4
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	9103      	str	r1, [sp, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	bfbb      	ittet	lt
 80099d2:	425b      	neglt	r3, r3
 80099d4:	f042 0202 	orrlt.w	r2, r2, #2
 80099d8:	9307      	strge	r3, [sp, #28]
 80099da:	9307      	strlt	r3, [sp, #28]
 80099dc:	bfb8      	it	lt
 80099de:	9204      	strlt	r2, [sp, #16]
 80099e0:	7823      	ldrb	r3, [r4, #0]
 80099e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80099e4:	d10a      	bne.n	80099fc <_svfiprintf_r+0x130>
 80099e6:	7863      	ldrb	r3, [r4, #1]
 80099e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ea:	d132      	bne.n	8009a52 <_svfiprintf_r+0x186>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	9203      	str	r2, [sp, #12]
 80099f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099f8:	3402      	adds	r4, #2
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ac0 <_svfiprintf_r+0x1f4>
 8009a00:	7821      	ldrb	r1, [r4, #0]
 8009a02:	2203      	movs	r2, #3
 8009a04:	4650      	mov	r0, sl
 8009a06:	f7f6 fbe3 	bl	80001d0 <memchr>
 8009a0a:	b138      	cbz	r0, 8009a1c <_svfiprintf_r+0x150>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	eba0 000a 	sub.w	r0, r0, sl
 8009a12:	2240      	movs	r2, #64	@ 0x40
 8009a14:	4082      	lsls	r2, r0
 8009a16:	4313      	orrs	r3, r2
 8009a18:	3401      	adds	r4, #1
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a20:	4824      	ldr	r0, [pc, #144]	@ (8009ab4 <_svfiprintf_r+0x1e8>)
 8009a22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a26:	2206      	movs	r2, #6
 8009a28:	f7f6 fbd2 	bl	80001d0 <memchr>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d036      	beq.n	8009a9e <_svfiprintf_r+0x1d2>
 8009a30:	4b21      	ldr	r3, [pc, #132]	@ (8009ab8 <_svfiprintf_r+0x1ec>)
 8009a32:	bb1b      	cbnz	r3, 8009a7c <_svfiprintf_r+0x1b0>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	3307      	adds	r3, #7
 8009a38:	f023 0307 	bic.w	r3, r3, #7
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a42:	4433      	add	r3, r6
 8009a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a46:	e76a      	b.n	800991e <_svfiprintf_r+0x52>
 8009a48:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	2001      	movs	r0, #1
 8009a50:	e7a8      	b.n	80099a4 <_svfiprintf_r+0xd8>
 8009a52:	2300      	movs	r3, #0
 8009a54:	3401      	adds	r4, #1
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f04f 0c0a 	mov.w	ip, #10
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a64:	3a30      	subs	r2, #48	@ 0x30
 8009a66:	2a09      	cmp	r2, #9
 8009a68:	d903      	bls.n	8009a72 <_svfiprintf_r+0x1a6>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0c6      	beq.n	80099fc <_svfiprintf_r+0x130>
 8009a6e:	9105      	str	r1, [sp, #20]
 8009a70:	e7c4      	b.n	80099fc <_svfiprintf_r+0x130>
 8009a72:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a76:	4604      	mov	r4, r0
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e7f0      	b.n	8009a5e <_svfiprintf_r+0x192>
 8009a7c:	ab03      	add	r3, sp, #12
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	462a      	mov	r2, r5
 8009a82:	4b0e      	ldr	r3, [pc, #56]	@ (8009abc <_svfiprintf_r+0x1f0>)
 8009a84:	a904      	add	r1, sp, #16
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7fd fd6c 	bl	8007564 <_printf_float>
 8009a8c:	1c42      	adds	r2, r0, #1
 8009a8e:	4606      	mov	r6, r0
 8009a90:	d1d6      	bne.n	8009a40 <_svfiprintf_r+0x174>
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	065b      	lsls	r3, r3, #25
 8009a96:	f53f af2d 	bmi.w	80098f4 <_svfiprintf_r+0x28>
 8009a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a9c:	e72c      	b.n	80098f8 <_svfiprintf_r+0x2c>
 8009a9e:	ab03      	add	r3, sp, #12
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <_svfiprintf_r+0x1f0>)
 8009aa6:	a904      	add	r1, sp, #16
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7fd fff3 	bl	8007a94 <_printf_i>
 8009aae:	e7ed      	b.n	8009a8c <_svfiprintf_r+0x1c0>
 8009ab0:	0800a9ae 	.word	0x0800a9ae
 8009ab4:	0800a9b8 	.word	0x0800a9b8
 8009ab8:	08007565 	.word	0x08007565
 8009abc:	08009815 	.word	0x08009815
 8009ac0:	0800a9b4 	.word	0x0800a9b4

08009ac4 <__sflush_r>:
 8009ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	0716      	lsls	r6, r2, #28
 8009ace:	4605      	mov	r5, r0
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	d454      	bmi.n	8009b7e <__sflush_r+0xba>
 8009ad4:	684b      	ldr	r3, [r1, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	dc02      	bgt.n	8009ae0 <__sflush_r+0x1c>
 8009ada:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dd48      	ble.n	8009b72 <__sflush_r+0xae>
 8009ae0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ae2:	2e00      	cmp	r6, #0
 8009ae4:	d045      	beq.n	8009b72 <__sflush_r+0xae>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009aec:	682f      	ldr	r7, [r5, #0]
 8009aee:	6a21      	ldr	r1, [r4, #32]
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	d030      	beq.n	8009b56 <__sflush_r+0x92>
 8009af4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	0759      	lsls	r1, r3, #29
 8009afa:	d505      	bpl.n	8009b08 <__sflush_r+0x44>
 8009afc:	6863      	ldr	r3, [r4, #4]
 8009afe:	1ad2      	subs	r2, r2, r3
 8009b00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b02:	b10b      	cbz	r3, 8009b08 <__sflush_r+0x44>
 8009b04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b06:	1ad2      	subs	r2, r2, r3
 8009b08:	2300      	movs	r3, #0
 8009b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b0c:	6a21      	ldr	r1, [r4, #32]
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b0      	blx	r6
 8009b12:	1c43      	adds	r3, r0, #1
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	d106      	bne.n	8009b26 <__sflush_r+0x62>
 8009b18:	6829      	ldr	r1, [r5, #0]
 8009b1a:	291d      	cmp	r1, #29
 8009b1c:	d82b      	bhi.n	8009b76 <__sflush_r+0xb2>
 8009b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8009bc8 <__sflush_r+0x104>)
 8009b20:	40ca      	lsrs	r2, r1
 8009b22:	07d6      	lsls	r6, r2, #31
 8009b24:	d527      	bpl.n	8009b76 <__sflush_r+0xb2>
 8009b26:	2200      	movs	r2, #0
 8009b28:	6062      	str	r2, [r4, #4]
 8009b2a:	04d9      	lsls	r1, r3, #19
 8009b2c:	6922      	ldr	r2, [r4, #16]
 8009b2e:	6022      	str	r2, [r4, #0]
 8009b30:	d504      	bpl.n	8009b3c <__sflush_r+0x78>
 8009b32:	1c42      	adds	r2, r0, #1
 8009b34:	d101      	bne.n	8009b3a <__sflush_r+0x76>
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	b903      	cbnz	r3, 8009b3c <__sflush_r+0x78>
 8009b3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b3e:	602f      	str	r7, [r5, #0]
 8009b40:	b1b9      	cbz	r1, 8009b72 <__sflush_r+0xae>
 8009b42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b46:	4299      	cmp	r1, r3
 8009b48:	d002      	beq.n	8009b50 <__sflush_r+0x8c>
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f7ff f9e8 	bl	8008f20 <_free_r>
 8009b50:	2300      	movs	r3, #0
 8009b52:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b54:	e00d      	b.n	8009b72 <__sflush_r+0xae>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b0      	blx	r6
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	1c50      	adds	r0, r2, #1
 8009b60:	d1c9      	bne.n	8009af6 <__sflush_r+0x32>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0c6      	beq.n	8009af6 <__sflush_r+0x32>
 8009b68:	2b1d      	cmp	r3, #29
 8009b6a:	d001      	beq.n	8009b70 <__sflush_r+0xac>
 8009b6c:	2b16      	cmp	r3, #22
 8009b6e:	d11e      	bne.n	8009bae <__sflush_r+0xea>
 8009b70:	602f      	str	r7, [r5, #0]
 8009b72:	2000      	movs	r0, #0
 8009b74:	e022      	b.n	8009bbc <__sflush_r+0xf8>
 8009b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b7a:	b21b      	sxth	r3, r3
 8009b7c:	e01b      	b.n	8009bb6 <__sflush_r+0xf2>
 8009b7e:	690f      	ldr	r7, [r1, #16]
 8009b80:	2f00      	cmp	r7, #0
 8009b82:	d0f6      	beq.n	8009b72 <__sflush_r+0xae>
 8009b84:	0793      	lsls	r3, r2, #30
 8009b86:	680e      	ldr	r6, [r1, #0]
 8009b88:	bf08      	it	eq
 8009b8a:	694b      	ldreq	r3, [r1, #20]
 8009b8c:	600f      	str	r7, [r1, #0]
 8009b8e:	bf18      	it	ne
 8009b90:	2300      	movne	r3, #0
 8009b92:	eba6 0807 	sub.w	r8, r6, r7
 8009b96:	608b      	str	r3, [r1, #8]
 8009b98:	f1b8 0f00 	cmp.w	r8, #0
 8009b9c:	dde9      	ble.n	8009b72 <__sflush_r+0xae>
 8009b9e:	6a21      	ldr	r1, [r4, #32]
 8009ba0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ba2:	4643      	mov	r3, r8
 8009ba4:	463a      	mov	r2, r7
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b0      	blx	r6
 8009baa:	2800      	cmp	r0, #0
 8009bac:	dc08      	bgt.n	8009bc0 <__sflush_r+0xfc>
 8009bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	4407      	add	r7, r0
 8009bc2:	eba8 0800 	sub.w	r8, r8, r0
 8009bc6:	e7e7      	b.n	8009b98 <__sflush_r+0xd4>
 8009bc8:	20400001 	.word	0x20400001

08009bcc <_fflush_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	690b      	ldr	r3, [r1, #16]
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	b913      	cbnz	r3, 8009bdc <_fflush_r+0x10>
 8009bd6:	2500      	movs	r5, #0
 8009bd8:	4628      	mov	r0, r5
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	b118      	cbz	r0, 8009be6 <_fflush_r+0x1a>
 8009bde:	6a03      	ldr	r3, [r0, #32]
 8009be0:	b90b      	cbnz	r3, 8009be6 <_fflush_r+0x1a>
 8009be2:	f7fe f901 	bl	8007de8 <__sinit>
 8009be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f3      	beq.n	8009bd6 <_fflush_r+0xa>
 8009bee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bf0:	07d0      	lsls	r0, r2, #31
 8009bf2:	d404      	bmi.n	8009bfe <_fflush_r+0x32>
 8009bf4:	0599      	lsls	r1, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_fflush_r+0x32>
 8009bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bfa:	f7fe fb36 	bl	800826a <__retarget_lock_acquire_recursive>
 8009bfe:	4628      	mov	r0, r5
 8009c00:	4621      	mov	r1, r4
 8009c02:	f7ff ff5f 	bl	8009ac4 <__sflush_r>
 8009c06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c08:	07da      	lsls	r2, r3, #31
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	d4e4      	bmi.n	8009bd8 <_fflush_r+0xc>
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	059b      	lsls	r3, r3, #22
 8009c12:	d4e1      	bmi.n	8009bd8 <_fflush_r+0xc>
 8009c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c16:	f7fe fb29 	bl	800826c <__retarget_lock_release_recursive>
 8009c1a:	e7dd      	b.n	8009bd8 <_fflush_r+0xc>

08009c1c <__swhatbuf_r>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	460c      	mov	r4, r1
 8009c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c24:	2900      	cmp	r1, #0
 8009c26:	b096      	sub	sp, #88	@ 0x58
 8009c28:	4615      	mov	r5, r2
 8009c2a:	461e      	mov	r6, r3
 8009c2c:	da0d      	bge.n	8009c4a <__swhatbuf_r+0x2e>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c34:	f04f 0100 	mov.w	r1, #0
 8009c38:	bf14      	ite	ne
 8009c3a:	2340      	movne	r3, #64	@ 0x40
 8009c3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c40:	2000      	movs	r0, #0
 8009c42:	6031      	str	r1, [r6, #0]
 8009c44:	602b      	str	r3, [r5, #0]
 8009c46:	b016      	add	sp, #88	@ 0x58
 8009c48:	bd70      	pop	{r4, r5, r6, pc}
 8009c4a:	466a      	mov	r2, sp
 8009c4c:	f000 f862 	bl	8009d14 <_fstat_r>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dbec      	blt.n	8009c2e <__swhatbuf_r+0x12>
 8009c54:	9901      	ldr	r1, [sp, #4]
 8009c56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c5e:	4259      	negs	r1, r3
 8009c60:	4159      	adcs	r1, r3
 8009c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c66:	e7eb      	b.n	8009c40 <__swhatbuf_r+0x24>

08009c68 <__smakebuf_r>:
 8009c68:	898b      	ldrh	r3, [r1, #12]
 8009c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c6c:	079d      	lsls	r5, r3, #30
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460c      	mov	r4, r1
 8009c72:	d507      	bpl.n	8009c84 <__smakebuf_r+0x1c>
 8009c74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	6163      	str	r3, [r4, #20]
 8009c80:	b003      	add	sp, #12
 8009c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c84:	ab01      	add	r3, sp, #4
 8009c86:	466a      	mov	r2, sp
 8009c88:	f7ff ffc8 	bl	8009c1c <__swhatbuf_r>
 8009c8c:	9f00      	ldr	r7, [sp, #0]
 8009c8e:	4605      	mov	r5, r0
 8009c90:	4639      	mov	r1, r7
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff f9b8 	bl	8009008 <_malloc_r>
 8009c98:	b948      	cbnz	r0, 8009cae <__smakebuf_r+0x46>
 8009c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9e:	059a      	lsls	r2, r3, #22
 8009ca0:	d4ee      	bmi.n	8009c80 <__smakebuf_r+0x18>
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	f043 0302 	orr.w	r3, r3, #2
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	e7e2      	b.n	8009c74 <__smakebuf_r+0xc>
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	6020      	str	r0, [r4, #0]
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cbe:	b15b      	cbz	r3, 8009cd8 <__smakebuf_r+0x70>
 8009cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f000 f837 	bl	8009d38 <_isatty_r>
 8009cca:	b128      	cbz	r0, 8009cd8 <__smakebuf_r+0x70>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	f023 0303 	bic.w	r3, r3, #3
 8009cd2:	f043 0301 	orr.w	r3, r3, #1
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	431d      	orrs	r5, r3
 8009cdc:	81a5      	strh	r5, [r4, #12]
 8009cde:	e7cf      	b.n	8009c80 <__smakebuf_r+0x18>

08009ce0 <memmove>:
 8009ce0:	4288      	cmp	r0, r1
 8009ce2:	b510      	push	{r4, lr}
 8009ce4:	eb01 0402 	add.w	r4, r1, r2
 8009ce8:	d902      	bls.n	8009cf0 <memmove+0x10>
 8009cea:	4284      	cmp	r4, r0
 8009cec:	4623      	mov	r3, r4
 8009cee:	d807      	bhi.n	8009d00 <memmove+0x20>
 8009cf0:	1e43      	subs	r3, r0, #1
 8009cf2:	42a1      	cmp	r1, r4
 8009cf4:	d008      	beq.n	8009d08 <memmove+0x28>
 8009cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cfe:	e7f8      	b.n	8009cf2 <memmove+0x12>
 8009d00:	4402      	add	r2, r0
 8009d02:	4601      	mov	r1, r0
 8009d04:	428a      	cmp	r2, r1
 8009d06:	d100      	bne.n	8009d0a <memmove+0x2a>
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d12:	e7f7      	b.n	8009d04 <memmove+0x24>

08009d14 <_fstat_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d07      	ldr	r5, [pc, #28]	@ (8009d34 <_fstat_r+0x20>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	4611      	mov	r1, r2
 8009d20:	602b      	str	r3, [r5, #0]
 8009d22:	f7f9 fbdb 	bl	80034dc <_fstat>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	d102      	bne.n	8009d30 <_fstat_r+0x1c>
 8009d2a:	682b      	ldr	r3, [r5, #0]
 8009d2c:	b103      	cbz	r3, 8009d30 <_fstat_r+0x1c>
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	bd38      	pop	{r3, r4, r5, pc}
 8009d32:	bf00      	nop
 8009d34:	20000638 	.word	0x20000638

08009d38 <_isatty_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d06      	ldr	r5, [pc, #24]	@ (8009d54 <_isatty_r+0x1c>)
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4608      	mov	r0, r1
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	f7f9 fbda 	bl	80034fc <_isatty>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_isatty_r+0x1a>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_isatty_r+0x1a>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	20000638 	.word	0x20000638

08009d58 <_sbrk_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d06      	ldr	r5, [pc, #24]	@ (8009d74 <_sbrk_r+0x1c>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7f9 fbe2 	bl	800352c <_sbrk>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_sbrk_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_sbrk_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	20000638 	.word	0x20000638

08009d78 <memcpy>:
 8009d78:	440a      	add	r2, r1
 8009d7a:	4291      	cmp	r1, r2
 8009d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d80:	d100      	bne.n	8009d84 <memcpy+0xc>
 8009d82:	4770      	bx	lr
 8009d84:	b510      	push	{r4, lr}
 8009d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d8e:	4291      	cmp	r1, r2
 8009d90:	d1f9      	bne.n	8009d86 <memcpy+0xe>
 8009d92:	bd10      	pop	{r4, pc}

08009d94 <__assert_func>:
 8009d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d96:	4614      	mov	r4, r2
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4b09      	ldr	r3, [pc, #36]	@ (8009dc0 <__assert_func+0x2c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4605      	mov	r5, r0
 8009da0:	68d8      	ldr	r0, [r3, #12]
 8009da2:	b14c      	cbz	r4, 8009db8 <__assert_func+0x24>
 8009da4:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <__assert_func+0x30>)
 8009da6:	9100      	str	r1, [sp, #0]
 8009da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dac:	4906      	ldr	r1, [pc, #24]	@ (8009dc8 <__assert_func+0x34>)
 8009dae:	462b      	mov	r3, r5
 8009db0:	f000 f870 	bl	8009e94 <fiprintf>
 8009db4:	f000 f880 	bl	8009eb8 <abort>
 8009db8:	4b04      	ldr	r3, [pc, #16]	@ (8009dcc <__assert_func+0x38>)
 8009dba:	461c      	mov	r4, r3
 8009dbc:	e7f3      	b.n	8009da6 <__assert_func+0x12>
 8009dbe:	bf00      	nop
 8009dc0:	2000001c 	.word	0x2000001c
 8009dc4:	0800a9c9 	.word	0x0800a9c9
 8009dc8:	0800a9d6 	.word	0x0800a9d6
 8009dcc:	0800aa04 	.word	0x0800aa04

08009dd0 <_calloc_r>:
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	fba1 5402 	umull	r5, r4, r1, r2
 8009dd6:	b934      	cbnz	r4, 8009de6 <_calloc_r+0x16>
 8009dd8:	4629      	mov	r1, r5
 8009dda:	f7ff f915 	bl	8009008 <_malloc_r>
 8009dde:	4606      	mov	r6, r0
 8009de0:	b928      	cbnz	r0, 8009dee <_calloc_r+0x1e>
 8009de2:	4630      	mov	r0, r6
 8009de4:	bd70      	pop	{r4, r5, r6, pc}
 8009de6:	220c      	movs	r2, #12
 8009de8:	6002      	str	r2, [r0, #0]
 8009dea:	2600      	movs	r6, #0
 8009dec:	e7f9      	b.n	8009de2 <_calloc_r+0x12>
 8009dee:	462a      	mov	r2, r5
 8009df0:	4621      	mov	r1, r4
 8009df2:	f7fe f9bd 	bl	8008170 <memset>
 8009df6:	e7f4      	b.n	8009de2 <_calloc_r+0x12>

08009df8 <__ascii_mbtowc>:
 8009df8:	b082      	sub	sp, #8
 8009dfa:	b901      	cbnz	r1, 8009dfe <__ascii_mbtowc+0x6>
 8009dfc:	a901      	add	r1, sp, #4
 8009dfe:	b142      	cbz	r2, 8009e12 <__ascii_mbtowc+0x1a>
 8009e00:	b14b      	cbz	r3, 8009e16 <__ascii_mbtowc+0x1e>
 8009e02:	7813      	ldrb	r3, [r2, #0]
 8009e04:	600b      	str	r3, [r1, #0]
 8009e06:	7812      	ldrb	r2, [r2, #0]
 8009e08:	1e10      	subs	r0, r2, #0
 8009e0a:	bf18      	it	ne
 8009e0c:	2001      	movne	r0, #1
 8009e0e:	b002      	add	sp, #8
 8009e10:	4770      	bx	lr
 8009e12:	4610      	mov	r0, r2
 8009e14:	e7fb      	b.n	8009e0e <__ascii_mbtowc+0x16>
 8009e16:	f06f 0001 	mvn.w	r0, #1
 8009e1a:	e7f8      	b.n	8009e0e <__ascii_mbtowc+0x16>

08009e1c <_realloc_r>:
 8009e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	4607      	mov	r7, r0
 8009e22:	4614      	mov	r4, r2
 8009e24:	460d      	mov	r5, r1
 8009e26:	b921      	cbnz	r1, 8009e32 <_realloc_r+0x16>
 8009e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	f7ff b8eb 	b.w	8009008 <_malloc_r>
 8009e32:	b92a      	cbnz	r2, 8009e40 <_realloc_r+0x24>
 8009e34:	f7ff f874 	bl	8008f20 <_free_r>
 8009e38:	4625      	mov	r5, r4
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	f000 f841 	bl	8009ec6 <_malloc_usable_size_r>
 8009e44:	4284      	cmp	r4, r0
 8009e46:	4606      	mov	r6, r0
 8009e48:	d802      	bhi.n	8009e50 <_realloc_r+0x34>
 8009e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e4e:	d8f4      	bhi.n	8009e3a <_realloc_r+0x1e>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4638      	mov	r0, r7
 8009e54:	f7ff f8d8 	bl	8009008 <_malloc_r>
 8009e58:	4680      	mov	r8, r0
 8009e5a:	b908      	cbnz	r0, 8009e60 <_realloc_r+0x44>
 8009e5c:	4645      	mov	r5, r8
 8009e5e:	e7ec      	b.n	8009e3a <_realloc_r+0x1e>
 8009e60:	42b4      	cmp	r4, r6
 8009e62:	4622      	mov	r2, r4
 8009e64:	4629      	mov	r1, r5
 8009e66:	bf28      	it	cs
 8009e68:	4632      	movcs	r2, r6
 8009e6a:	f7ff ff85 	bl	8009d78 <memcpy>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff f855 	bl	8008f20 <_free_r>
 8009e76:	e7f1      	b.n	8009e5c <_realloc_r+0x40>

08009e78 <__ascii_wctomb>:
 8009e78:	4603      	mov	r3, r0
 8009e7a:	4608      	mov	r0, r1
 8009e7c:	b141      	cbz	r1, 8009e90 <__ascii_wctomb+0x18>
 8009e7e:	2aff      	cmp	r2, #255	@ 0xff
 8009e80:	d904      	bls.n	8009e8c <__ascii_wctomb+0x14>
 8009e82:	228a      	movs	r2, #138	@ 0x8a
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8a:	4770      	bx	lr
 8009e8c:	700a      	strb	r2, [r1, #0]
 8009e8e:	2001      	movs	r0, #1
 8009e90:	4770      	bx	lr
	...

08009e94 <fiprintf>:
 8009e94:	b40e      	push	{r1, r2, r3}
 8009e96:	b503      	push	{r0, r1, lr}
 8009e98:	4601      	mov	r1, r0
 8009e9a:	ab03      	add	r3, sp, #12
 8009e9c:	4805      	ldr	r0, [pc, #20]	@ (8009eb4 <fiprintf+0x20>)
 8009e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea2:	6800      	ldr	r0, [r0, #0]
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	f000 f83f 	bl	8009f28 <_vfiprintf_r>
 8009eaa:	b002      	add	sp, #8
 8009eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb0:	b003      	add	sp, #12
 8009eb2:	4770      	bx	lr
 8009eb4:	2000001c 	.word	0x2000001c

08009eb8 <abort>:
 8009eb8:	b508      	push	{r3, lr}
 8009eba:	2006      	movs	r0, #6
 8009ebc:	f000 f974 	bl	800a1a8 <raise>
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	f7f9 fabb 	bl	800343c <_exit>

08009ec6 <_malloc_usable_size_r>:
 8009ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eca:	1f18      	subs	r0, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bfbc      	itt	lt
 8009ed0:	580b      	ldrlt	r3, [r1, r0]
 8009ed2:	18c0      	addlt	r0, r0, r3
 8009ed4:	4770      	bx	lr

08009ed6 <__sfputc_r>:
 8009ed6:	6893      	ldr	r3, [r2, #8]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	b410      	push	{r4}
 8009ede:	6093      	str	r3, [r2, #8]
 8009ee0:	da08      	bge.n	8009ef4 <__sfputc_r+0x1e>
 8009ee2:	6994      	ldr	r4, [r2, #24]
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	db01      	blt.n	8009eec <__sfputc_r+0x16>
 8009ee8:	290a      	cmp	r1, #10
 8009eea:	d103      	bne.n	8009ef4 <__sfputc_r+0x1e>
 8009eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef0:	f7fe b8a9 	b.w	8008046 <__swbuf_r>
 8009ef4:	6813      	ldr	r3, [r2, #0]
 8009ef6:	1c58      	adds	r0, r3, #1
 8009ef8:	6010      	str	r0, [r2, #0]
 8009efa:	7019      	strb	r1, [r3, #0]
 8009efc:	4608      	mov	r0, r1
 8009efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <__sfputs_r>:
 8009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f06:	4606      	mov	r6, r0
 8009f08:	460f      	mov	r7, r1
 8009f0a:	4614      	mov	r4, r2
 8009f0c:	18d5      	adds	r5, r2, r3
 8009f0e:	42ac      	cmp	r4, r5
 8009f10:	d101      	bne.n	8009f16 <__sfputs_r+0x12>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e007      	b.n	8009f26 <__sfputs_r+0x22>
 8009f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1a:	463a      	mov	r2, r7
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff ffda 	bl	8009ed6 <__sfputc_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	d1f3      	bne.n	8009f0e <__sfputs_r+0xa>
 8009f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f28 <_vfiprintf_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	b09d      	sub	sp, #116	@ 0x74
 8009f30:	4614      	mov	r4, r2
 8009f32:	4698      	mov	r8, r3
 8009f34:	4606      	mov	r6, r0
 8009f36:	b118      	cbz	r0, 8009f40 <_vfiprintf_r+0x18>
 8009f38:	6a03      	ldr	r3, [r0, #32]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x18>
 8009f3c:	f7fd ff54 	bl	8007de8 <__sinit>
 8009f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4e:	f7fe f98c 	bl	800826a <__retarget_lock_acquire_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	071b      	lsls	r3, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <_vfiprintf_r+0x34>
 8009f58:	692b      	ldr	r3, [r5, #16]
 8009f5a:	b99b      	cbnz	r3, 8009f84 <_vfiprintf_r+0x5c>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7fe f8b0 	bl	80080c4 <__swsetup_r>
 8009f64:	b170      	cbz	r0, 8009f84 <_vfiprintf_r+0x5c>
 8009f66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f68:	07dc      	lsls	r4, r3, #31
 8009f6a:	d504      	bpl.n	8009f76 <_vfiprintf_r+0x4e>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b01d      	add	sp, #116	@ 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	0598      	lsls	r0, r3, #22
 8009f7a:	d4f7      	bmi.n	8009f6c <_vfiprintf_r+0x44>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f7e:	f7fe f975 	bl	800826c <__retarget_lock_release_recursive>
 8009f82:	e7f3      	b.n	8009f6c <_vfiprintf_r+0x44>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f92:	2330      	movs	r3, #48	@ 0x30
 8009f94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a144 <_vfiprintf_r+0x21c>
 8009f98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f9c:	f04f 0901 	mov.w	r9, #1
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa8:	b10a      	cbz	r2, 8009fae <_vfiprintf_r+0x86>
 8009faa:	2a25      	cmp	r2, #37	@ 0x25
 8009fac:	d1f9      	bne.n	8009fa2 <_vfiprintf_r+0x7a>
 8009fae:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb2:	d00b      	beq.n	8009fcc <_vfiprintf_r+0xa4>
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ffa2 	bl	8009f04 <__sfputs_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f000 80a7 	beq.w	800a114 <_vfiprintf_r+0x1ec>
 8009fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc8:	445a      	add	r2, fp
 8009fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 809f 	beq.w	800a114 <_vfiprintf_r+0x1ec>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe0:	f10a 0a01 	add.w	sl, sl, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	9307      	str	r3, [sp, #28]
 8009fe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4853      	ldr	r0, [pc, #332]	@ (800a144 <_vfiprintf_r+0x21c>)
 8009ff8:	f7f6 f8ea 	bl	80001d0 <memchr>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	b9d8      	cbnz	r0, 800a038 <_vfiprintf_r+0x110>
 800a000:	06d1      	lsls	r1, r2, #27
 800a002:	bf44      	itt	mi
 800a004:	2320      	movmi	r3, #32
 800a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a00a:	0713      	lsls	r3, r2, #28
 800a00c:	bf44      	itt	mi
 800a00e:	232b      	movmi	r3, #43	@ 0x2b
 800a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b2a      	cmp	r3, #42	@ 0x2a
 800a01a:	d015      	beq.n	800a048 <_vfiprintf_r+0x120>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	4654      	mov	r4, sl
 800a020:	2000      	movs	r0, #0
 800a022:	f04f 0c0a 	mov.w	ip, #10
 800a026:	4621      	mov	r1, r4
 800a028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02c:	3b30      	subs	r3, #48	@ 0x30
 800a02e:	2b09      	cmp	r3, #9
 800a030:	d94b      	bls.n	800a0ca <_vfiprintf_r+0x1a2>
 800a032:	b1b0      	cbz	r0, 800a062 <_vfiprintf_r+0x13a>
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	e014      	b.n	800a062 <_vfiprintf_r+0x13a>
 800a038:	eba0 0308 	sub.w	r3, r0, r8
 800a03c:	fa09 f303 	lsl.w	r3, r9, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	46a2      	mov	sl, r4
 800a046:	e7d2      	b.n	8009fee <_vfiprintf_r+0xc6>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	1d19      	adds	r1, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9103      	str	r1, [sp, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfbb      	ittet	lt
 800a054:	425b      	neglt	r3, r3
 800a056:	f042 0202 	orrlt.w	r2, r2, #2
 800a05a:	9307      	strge	r3, [sp, #28]
 800a05c:	9307      	strlt	r3, [sp, #28]
 800a05e:	bfb8      	it	lt
 800a060:	9204      	strlt	r2, [sp, #16]
 800a062:	7823      	ldrb	r3, [r4, #0]
 800a064:	2b2e      	cmp	r3, #46	@ 0x2e
 800a066:	d10a      	bne.n	800a07e <_vfiprintf_r+0x156>
 800a068:	7863      	ldrb	r3, [r4, #1]
 800a06a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a06c:	d132      	bne.n	800a0d4 <_vfiprintf_r+0x1ac>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d1a      	adds	r2, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9203      	str	r2, [sp, #12]
 800a076:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a07a:	3402      	adds	r4, #2
 800a07c:	9305      	str	r3, [sp, #20]
 800a07e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a154 <_vfiprintf_r+0x22c>
 800a082:	7821      	ldrb	r1, [r4, #0]
 800a084:	2203      	movs	r2, #3
 800a086:	4650      	mov	r0, sl
 800a088:	f7f6 f8a2 	bl	80001d0 <memchr>
 800a08c:	b138      	cbz	r0, 800a09e <_vfiprintf_r+0x176>
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	eba0 000a 	sub.w	r0, r0, sl
 800a094:	2240      	movs	r2, #64	@ 0x40
 800a096:	4082      	lsls	r2, r0
 800a098:	4313      	orrs	r3, r2
 800a09a:	3401      	adds	r4, #1
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a2:	4829      	ldr	r0, [pc, #164]	@ (800a148 <_vfiprintf_r+0x220>)
 800a0a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	f7f6 f891 	bl	80001d0 <memchr>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d03f      	beq.n	800a132 <_vfiprintf_r+0x20a>
 800a0b2:	4b26      	ldr	r3, [pc, #152]	@ (800a14c <_vfiprintf_r+0x224>)
 800a0b4:	bb1b      	cbnz	r3, 800a0fe <_vfiprintf_r+0x1d6>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	3307      	adds	r3, #7
 800a0ba:	f023 0307 	bic.w	r3, r3, #7
 800a0be:	3308      	adds	r3, #8
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c4:	443b      	add	r3, r7
 800a0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0c8:	e76a      	b.n	8009fa0 <_vfiprintf_r+0x78>
 800a0ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	e7a8      	b.n	800a026 <_vfiprintf_r+0xfe>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	3401      	adds	r4, #1
 800a0d8:	9305      	str	r3, [sp, #20]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f04f 0c0a 	mov.w	ip, #10
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0e6:	3a30      	subs	r2, #48	@ 0x30
 800a0e8:	2a09      	cmp	r2, #9
 800a0ea:	d903      	bls.n	800a0f4 <_vfiprintf_r+0x1cc>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0c6      	beq.n	800a07e <_vfiprintf_r+0x156>
 800a0f0:	9105      	str	r1, [sp, #20]
 800a0f2:	e7c4      	b.n	800a07e <_vfiprintf_r+0x156>
 800a0f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e7f0      	b.n	800a0e0 <_vfiprintf_r+0x1b8>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	462a      	mov	r2, r5
 800a104:	4b12      	ldr	r3, [pc, #72]	@ (800a150 <_vfiprintf_r+0x228>)
 800a106:	a904      	add	r1, sp, #16
 800a108:	4630      	mov	r0, r6
 800a10a:	f7fd fa2b 	bl	8007564 <_printf_float>
 800a10e:	4607      	mov	r7, r0
 800a110:	1c78      	adds	r0, r7, #1
 800a112:	d1d6      	bne.n	800a0c2 <_vfiprintf_r+0x19a>
 800a114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a116:	07d9      	lsls	r1, r3, #31
 800a118:	d405      	bmi.n	800a126 <_vfiprintf_r+0x1fe>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	059a      	lsls	r2, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_vfiprintf_r+0x1fe>
 800a120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a122:	f7fe f8a3 	bl	800826c <__retarget_lock_release_recursive>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	065b      	lsls	r3, r3, #25
 800a12a:	f53f af1f 	bmi.w	8009f6c <_vfiprintf_r+0x44>
 800a12e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a130:	e71e      	b.n	8009f70 <_vfiprintf_r+0x48>
 800a132:	ab03      	add	r3, sp, #12
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	462a      	mov	r2, r5
 800a138:	4b05      	ldr	r3, [pc, #20]	@ (800a150 <_vfiprintf_r+0x228>)
 800a13a:	a904      	add	r1, sp, #16
 800a13c:	4630      	mov	r0, r6
 800a13e:	f7fd fca9 	bl	8007a94 <_printf_i>
 800a142:	e7e4      	b.n	800a10e <_vfiprintf_r+0x1e6>
 800a144:	0800a9ae 	.word	0x0800a9ae
 800a148:	0800a9b8 	.word	0x0800a9b8
 800a14c:	08007565 	.word	0x08007565
 800a150:	08009f05 	.word	0x08009f05
 800a154:	0800a9b4 	.word	0x0800a9b4

0800a158 <_raise_r>:
 800a158:	291f      	cmp	r1, #31
 800a15a:	b538      	push	{r3, r4, r5, lr}
 800a15c:	4605      	mov	r5, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	d904      	bls.n	800a16c <_raise_r+0x14>
 800a162:	2316      	movs	r3, #22
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	f04f 30ff 	mov.w	r0, #4294967295
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a16e:	b112      	cbz	r2, 800a176 <_raise_r+0x1e>
 800a170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a174:	b94b      	cbnz	r3, 800a18a <_raise_r+0x32>
 800a176:	4628      	mov	r0, r5
 800a178:	f000 f830 	bl	800a1dc <_getpid_r>
 800a17c:	4622      	mov	r2, r4
 800a17e:	4601      	mov	r1, r0
 800a180:	4628      	mov	r0, r5
 800a182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a186:	f000 b817 	b.w	800a1b8 <_kill_r>
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d00a      	beq.n	800a1a4 <_raise_r+0x4c>
 800a18e:	1c59      	adds	r1, r3, #1
 800a190:	d103      	bne.n	800a19a <_raise_r+0x42>
 800a192:	2316      	movs	r3, #22
 800a194:	6003      	str	r3, [r0, #0]
 800a196:	2001      	movs	r0, #1
 800a198:	e7e7      	b.n	800a16a <_raise_r+0x12>
 800a19a:	2100      	movs	r1, #0
 800a19c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	4798      	blx	r3
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e7e0      	b.n	800a16a <_raise_r+0x12>

0800a1a8 <raise>:
 800a1a8:	4b02      	ldr	r3, [pc, #8]	@ (800a1b4 <raise+0xc>)
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	f7ff bfd3 	b.w	800a158 <_raise_r>
 800a1b2:	bf00      	nop
 800a1b4:	2000001c 	.word	0x2000001c

0800a1b8 <_kill_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4d07      	ldr	r5, [pc, #28]	@ (800a1d8 <_kill_r+0x20>)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4604      	mov	r4, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	f7f9 f929 	bl	800341c <_kill>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	d102      	bne.n	800a1d4 <_kill_r+0x1c>
 800a1ce:	682b      	ldr	r3, [r5, #0]
 800a1d0:	b103      	cbz	r3, 800a1d4 <_kill_r+0x1c>
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	bd38      	pop	{r3, r4, r5, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000638 	.word	0x20000638

0800a1dc <_getpid_r>:
 800a1dc:	f7f9 b916 	b.w	800340c <_getpid>

0800a1e0 <_init>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	bf00      	nop
 800a1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e6:	bc08      	pop	{r3}
 800a1e8:	469e      	mov	lr, r3
 800a1ea:	4770      	bx	lr

0800a1ec <_fini>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr
